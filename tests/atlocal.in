#
# atlocal gnucobol/tests
#
# Copyright (C) 2003-2012, 2014-2023 Free Software Foundation, Inc.
# Written by Keisuke Nishida, Roger While, Simon Sobisch, Edward Hart
#
# This file is part of GnuCOBOL.
#
# The GnuCOBOL compiler is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# GnuCOBOL is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GnuCOBOL.  If not, see <https://www.gnu.org/licenses/>.


TEMPLATE="@abs_srcdir@/testsuite.src"

# TODO: add missing parts for installcheck

if test "$GNUCOBOL_ENV_SETUP" != "1" -a "$GNUCOBOL_TEST_LOCAL" != "1"; then
	COBC="cobc"
	COBCRUN="cobcrun"
	COBCRUN_DIRECT="" # used for running created executables through tools
	# prepend PATH with the actual binaries to let the testsuite find them for
	# general check and version output, otherwise not needed
	PATH="@abs_top_builddir@/cobc:@abs_top_builddir@/bin:${PATH}"
	LOCAL_ENV="@abs_top_builddir@/pre-inst-env"
else
	if test "x${COBC}" = "x"; then
		COBC="cobc@COB_EXE_EXT@"
	fi
	if test "x${COBCRUN}" = "x"; then
		COBCRUN="cobcrun@COB_EXE_EXT@"
	fi
	if test "x${COBCRUN_DIRECT}" = "x"; then
		COBCRUN_DIRECT=""
	fi
	LOCAL_ENV=""
fi

if test "$GNUCOBOL_TEST_LOCAL" != "1"; then
	ABS_COBC="@abs_top_builddir@/cobc/cobc@COB_EXE_EXT@"
	ABS_COBCRUN="@abs_top_builddir@/bin/cobcrun@COB_EXE_EXT@"
else
	ABS_COBC="$(which cobc)"
	ABS_COBCRUN="$(which cobcrun)"
fi

AWK=@AWK@
GREP=@GREP@
SED=@SED@
export AWK GREP SED

# be sure to use the English messages
LC_ALL=C
export LC_ALL
unset LANG

# workaround to adjust the testsuite later:
# FLAGS="-debug -Wall ${COBOL_FLAGS}"
COBC="${COBC} -std=default"
FLAGS="-debug -Wall ${COBOL_FLAGS} -fno-diagnostics-show-option"
COMPILE="${COBC} -x ${FLAGS}"
COMPILE_ONLY="${COBC} -fsyntax-only ${FLAGS} -Wno-unsupported"
COMPILE_MODULE="${COBC} -m ${FLAGS}"

# get performance counters for compiler and/or runtime
if test "x$PERFSUFFIX" != "x"; then
  export PATH="@abs_top_builddir@/cobc/.libs:@abs_top_builddir@/bin.libs:${PATH}"
  LOG_DIR="@abs_builddir@/perf"
  LOG_DIR_COMP="${LOG_DIR}/cobc"
  LOG_DIR_RUN="${LOG_DIR}/cobcrun"
  PERF="perf stat -e instructions --append"
  #mkdir -p "${LOG_DIR_COMP}"
  # COBC="${PERF} --output ${LOG_DIR_COMP}/${PERFSUFFIX}.log ${COBC} -O0"   # note: full check including C compiler!
  # COMPILE_ONLY="${PERF} --output ${LOG_DIR_COMP}/${PERFSUFFIX}.log ${COMPILE_ONLY}"  # more reasonable - checks cobc only, but misses codegen
  # most reasonable: check actual COBOL runtime performance
  COBC="${COBC} -g"
  mkdir -p "${LOG_DIR_RUN}"
  COBCRUN="${PERF} --output ${LOG_DIR_RUN}/${PERFSUFFIX}.log ${COBCRUN}"
  COBCRUN_DIRECT="${PERF} --output ${LOG_DIR_RUN}/${PERFSUFFIX}.log ${COBCRUN_DIRECT}"
elif test "x$CGSUFFIX" != "x"; then
  export PATH="@abs_top_builddir@/cobc/.libs:@abs_top_builddir@/bin.libs:${PATH}"
  LOG_DIR="@abs_builddir@/callgrind/${CGSUFFIX}"
  LOG_DIR_COMP="${LOG_DIR}/cobc"
  LOG_DIR_RUN="${LOG_DIR}"
  CG="valgrind --tool=callgrind --dump-instr=yes --collect-jumps=yes --collect-atstart=no --toggle-collect=_start --fn-skip=_dl_runtime_resolve_xsave --fn-skip=_dl_fixup  --toggle-collect=cob_init"
  if test "x$at_group" = "x"; then
    at_group="cg"	# must be set as it is part of CG_PREFIX
  fi
  export at_group
  CG_PREFIX="%q{at_group}_%p"
  LOG_NAME=${CG_PREFIX}.log
  CG_NAME=callgrind.out.${CG_PREFIX}

  # callgrind takes a while - so we only trace COBOL runtime by default
  #mkdir -p "${LOG_DIR_COMP}"
  #COBC="${CG} --log-file=${LOG_DIR_COMP}/${LOG_NAME} --callgrind-out-file=${LOG_DIR_COMP}/${CG_NAME} ${COBC}"
  COBC="${COBC} -g"
  mkdir -p "${LOG_DIR_RUN}"
  CG_RUNTIME="${CG} --log-file=${LOG_DIR_RUN}/${LOG_NAME} --callgrind-out-file=${LOG_DIR_RUN}/${CG_NAME} --dump-before=cob_terminate_routines"
  COBCRUN="${CG_RUNTIME} ${COBCRUN}"
  COBCRUN_DIRECT="${CG_RUNTIME} ${COBCRUN_DIRECT}"
fi

# Helper script to unify listings (replace version, date, time)
UNIFY_LISTING="@abs_srcdir@/listings-sed.sh"

# test runner for manual tests, content may be adjusted by the user
RUN_PROG_MANUAL="@abs_builddir@/run_prog_manual.sh"

# unset option if not internally set in this script
_unset_option () {
	if test "$1" != "COB_CONFIG_DIR" \
	     -a "$1" != "COB_COPY_DIR" \
	     -a "$1" != "COB_RUNTIME_CONFIG" \
	     -a "$1" != "COB_LIBRARY_PATH" \
	     -a "$1" != "COB_CFLAGS" \
	     -a "$1" != "COB_LDFLAGS" \
	     -a "$1" != "COB_LIBS" \
	     -a "$1" != "COB_UNIX_LF"; then
		unset $1
	fi
}

# possible path conversion for running the testsuite in an environment
# that doesn't match the one where the tested binaries were built
# Note: not needed for running the testsuite with MSYS as this translates the path
_return_path () {
	echo "$1"
}

# Fix for testcases where cobc translates path to win32 equivalents
if test "x$MSYSTEM" != "x"; then
	PATHSEP=";"
else
	PATHSEP='@PATH_SEPARATOR@';
fi
export PATHSEP

# entries likely referenced in the LIBS entries as shell variables below
prefix="@prefix@"
exec_prefix="@exec_prefix@"

# options that are also used in pre-inst-env (always add to both)
# but not directly in the testsuite
if test "$GNUCOBOL_ENV_SETUP" != "1" -a "$GNUCOBOL_TEST_LOCAL" != "1"; then
	# note: quoting the directories breaks building on MSYS (as this disables
	#       path translation), therefore disabled for now
	#COB_CFLAGS="-I\"@abs_top_srcdir@\" @COB_CFLAGS@"
	#COB_LDFLAGS="-L\"@abs_top_builddir@/libcob/.libs\" @COB_LDFLAGS@"
	COB_CFLAGS="-I@abs_top_srcdir@ @COB_CFLAGS@"
	COB_LDFLAGS="-L@abs_top_builddir@/libcob/.libs @COB_LDFLAGS@"
	COB_LIBS="@COB_LIBS@"
	COB_CONFIG_DIR="@abs_top_srcdir@/config"
	COB_COPY_DIR="@abs_top_srcdir@/copy"
	LD_LIBRARY_PATH="@abs_top_builddir@/libcob/.libs:${LD_LIBRARY_PATH}"
	PATH="@abs_top_builddir@/libcob/.libs:${PATH}"
	DYLD_LIBRARY_PATH="@abs_top_builddir@/libcob/.libs:${DYLD_LIBRARY_PATH}"
	SHLIB_PATH="@abs_top_builddir@/libcob/.libs:${SHLIB_PATH}"
	LIBPATH="@abs_top_builddir@/libcob/.libs:${LIBPATH}"
	COB_LIBRARY_PATH="@abs_top_builddir@/extras"

	export COB_CFLAGS COB_LDFLAGS COB_LIBS
	export COB_CONFIG_DIR COB_COPY_DIR
	export LD_LIBRARY_PATH PATH DYLD_LIBRARY_PATH SHLIB_PATH LIBPATH
	export COB_LIBRARY_PATH
fi
COB_UNIX_LF=1
export COB_UNIX_LF

# unset all environment variables that are used in libcob
# for runtime configuration ...
COB_RUNTIME_CONFIG="@abs_top_srcdir@/config/runtime_empty.cfg"
export COB_RUNTIME_CONFIG
for cobenv in $(${LOCAL_ENV} ${ABS_COBCRUN} --runtime-conf \
                 | grep " env:" | cut -d: -f2 | cut -d= -f1 \
                 | grep -v "PATH" | grep -v "TERM"); \
	do _unset_option $cobenv; \
done

# prevent multiple calls by caching the output
${LOCAL_ENV} ${ABS_COBC} --info > info.out

# ... and also unset for the compiler
if test "$GNUCOBOL_TEST_LOCAL" != "1"; then
	for cobenv in $(grep "env:" info.out | cut -d: -f2 | cut -d= -f1 \
	              | grep -v "PATH"); \
		do _unset_option $cobenv; \
	done
fi

COB_STACKTRACE=0
export COB_STACKTRACE


# different flags checked in the testsuite
if test "$GNUCOBOL_TEST_LOCAL" != "1"; then
	COB_OBJECT_EXT="@COB_OBJECT_EXT@"
	COB_EXE_EXT="@COB_EXE_EXT@"
	COB_BIGENDIAN="@COB_BIGENDIAN@"
	COB_HAS_64_BIT_POINTER="@COB_HAS_64_BIT_POINTER@"
	COB_HAS_ISAM="@COB_HAS_ISAM@"
	COB_HAS_XML2="@COB_HAS_XML2@"
	COB_HAS_JSON="@COB_HAS_JSON@"
	COB_HAS_CURSES="@COB_HAS_CURSES@"
else

	COB_OBJECT_EXT="$(grep COB_OBJECT_EXT info.out | cut -d: -f2 | cut -b2-)"
	COB_EXE_EXT="$(grep COB_EXE_EXT info.out | cut -d: -f2 | cut -b2-)"

	if test $(grep -i -c "little-endian" info.out) = 0; then
		COB_BIGENDIAN="yes"
	else
		COB_BIGENDIAN="no"
	fi
	COB_HAS_64_BIT_POINTER=$(grep "64bit-mode" info.out | cut -d: -f2 | cut -b2-)

	cob_indexed=$(grep -i "indexed file" info.out | cut -d: -f2)
	case "$cob_indexed" in
	" disabled")	COB_HAS_ISAM="no";;
	" BDB") 		COB_HAS_ISAM="db";;
	" VBISAM"*)	COB_HAS_ISAM="vbisam";;
	" D-ISAM")	COB_HAS_ISAM="disam";;
	" C-ISAM")	COB_HAS_ISAM="cisam";;
	" V-ISAM")	COB_HAS_ISAM="visam";;
	" EXTFH")	COB_HAS_ISAM="index_extfh";;
	*)		echo "unknown entry for indexed handler: '"$cob_indexed"' please report" && exit 1;;
	esac

	if test $(grep -i -c "XML library.*disabled" info.out) = 0; then
		COB_HAS_XML2="yes"
	else
		COB_HAS_XML2="no"
	fi
	if test $(grep -i -c "JSON library.*disabled" info.out) = 0; then
		COB_HAS_JSON="yes"
	else
		COB_HAS_JSON="no"
	fi
	# see note below
	if test $(grep -i -c " screen .*disabled" info.out) = 0; then
		COB_HAS_CURSES="yes"
	else
		COB_HAS_CURSES="no"
	fi
fi

if test "x$MSYSTEM" != "x" -o "$OSTYPE" = "cygwin"; then
	# running MSYS builds as not-visible child processes result in
	# "Redirection is not supported" (at least with PDCurses "wincon" port)
	# --> disabling the tests for this feature
	# ncurses is known to work as long as TERM is appropriate
	if test $(grep -i -c "ncurses" info.out) != 0; then
		if test "x$MSYSTEM" != "x"; then
			TERM=""
		else
			TERM="xterm"
		fi
		export TERM
		# no change here... COB_HAS_CURSES="yes"
	else
		# manual tests are executed in separate window
		# and are visible - so no need to handle it there
		echo "$at_help_all" | grep -q "run_manual_screen" 2>/dev/null
		if test $? -ne 0; then
		   COB_HAS_CURSES="no"
		fi
	fi
fi

rm -rf info.out

# NIST tests (tests/cobol85) are executed in a separate perl process with a new environment --> export needed
export COB_HAS_ISAM COB_HAS_XML2 COB_HAS_JSON COB_HAS_CURSES COB_HAS_64_BIT_POINTER
export COBC COBCRUN COBCRUN_DIRECT RUN_PROG_MANUAL
export COB_OBJECT_EXT COB_EXE_EXT

# to ensure that no external COB_SCHEMA_DIR is polluted: set to local
COB_SCHEMA_DIR="." && export COB_SCHEMA_DIR

# to ensure that no external DB_HOME is polluted: unset
DB_HOME="" && export DB_HOME

# For the very rare cases where cobc/libcob may need to know if they're running in test mode:
COB_IS_RUNNING_IN_TESTMODE=1 && export COB_IS_RUNNING_IN_TESTMODE
