## Copyright (C) 2024 Free Software Foundation, Inc.
## Written by Boris Eng
##
## This file is part of GnuCOBOL.
##
## The GnuCOBOL compiler is free software: you can redistribute it
## and/or modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation, either version 3 of the
## License, or (at your option) any later version.
##
## GnuCOBOL is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with GnuCOBOL.  If not, see <https://www.gnu.org/licenses/>.

### GnuCOBOL Test Suite for backward compatibility
##
## Tests in this file are used to check that the C code coming from COBOL
## programs compiled with previous versions of GnuCOBOL are still executed
## correctly with newer versions of the compiler.
## It is useful when implementing new features in order to prevent the loss of
## compatibility with programs compiled with previous versions.
##
## To add new tests,
## 1. Choose a COBOL program;
## 2. Compile it with GnuCOBOL 2.2 (minimal compatibility ensured) and the
##    flags -Cx and -fno-computed-goto (to generated more portable C code).
##    Additional flags may be added if needed.
##    - If it does not work for compatibility reasons (unsupported feature),
##      return to step 2 with the next version of the compiler;
##    - If it does not work because of some unrecognized or conflicting code,
##      it may be necessary to inline some functions (typically, specialized
##      comparison functions such as cob_cmp_s32 which can be replaced by the
##      general comparison function cob_cmp_int);
## 3. For more convenience, if the generated program is prog.c, inline the
##    headers by replacing #include "prog.c.h" and #include "prog.c.l.h"
##    by the content of the files prog.c.h and prog.c.l.h respectively;
## 4. Although not mandatory, it is wiser to polish the code by removing
##    useless headers or portions of code.

AT_SETUP([STRING WITH POINTER ON OVERFLOW with DELIMITER])
AT_KEYWORDS([backcomp runmisc exceptions])

AT_DATA([prog.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:21:18 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 23 2024 11:21:18"
#define  COB_MODULE_DATE		20240423
#define  COB_MODULE_TIME		112118

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:21:18 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x10,   2,   0, 0x0000, NULL};
static const cob_field_attr a_3 =	{0x21,   0,   0, 0x1000, NULL};

static const cob_field_attr cob_all_attr = {0x22, 0, 0, 0, NULL};


/* Constants */
static const cob_field c_1	= {1, (cob_u8_ptr)"A", &a_3};
static const cob_field c_2	= {1, (cob_u8_ptr)"B", &a_3};
static const cob_field c_3	= {1, (cob_u8_ptr)"C", &a_3};
static const cob_field c_4	= {27, (cob_u8_ptr)"Case A: Should not overflow", &a_3};
static const cob_field c_5	= {16, (cob_u8_ptr)"A: TRTG-STRING <", &a_3};
static const cob_field c_6	= {10, (cob_u8_ptr)"> != <ABC>", &a_3};
static const cob_field c_7	= {16, (cob_u8_ptr)"A: STR-POINTER <", &a_3};
static const cob_field c_8	= {9, (cob_u8_ptr)"> != <04>", &a_3};
static const cob_field c_9	= {23, (cob_u8_ptr)"Case B: Should overflow", &a_3};
static const cob_field c_10	= {16, (cob_u8_ptr)"B: TRTG-STRING <", &a_3};
static const cob_field c_11	= {11, (cob_u8_ptr)"> != SPACES", &a_3};
static const cob_field c_12	= {16, (cob_u8_ptr)"B: STR-POINTER <", &a_3};
static const cob_field c_13	= {9, (cob_u8_ptr)"> != <00>", &a_3};
static const cob_field c_14	= {23, (cob_u8_ptr)"Case C: Should overflow", &a_3};
static const cob_field c_15	= {16, (cob_u8_ptr)"C: TRTG-STRING <", &a_3};
static const cob_field c_16	= {16, (cob_u8_ptr)"C: STR-POINTER <", &a_3};
static const cob_field c_17	= {3, (cob_u8_ptr)"1|2", &a_3};
static const cob_field c_18	= {3, (cob_u8_ptr)"A|B", &a_3};
static const cob_field c_19	= {3, (cob_u8_ptr)"C|D", &a_3};
static const cob_field c_20	= {16, (cob_u8_ptr)"D: TRGT-STRING <", &a_3};
static const cob_field c_21	= {10, (cob_u8_ptr)"> != <1AC>", &a_3};

static cob_field cob_all_space	= {1, (cob_u8_ptr)" ", &cob_all_attr};

/* Function prototypes */

static int		StringTest ();
static int		StringTest_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (StringTest ());
}

/* Functions */

/* PROGRAM-ID 'StringTest' */

/* ENTRY 'StringTest' */

static int
StringTest ()
{
  return StringTest_ (0);
}

static int
StringTest_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 23 2024 11:21:18 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'StringTest' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[3] __attribute__((aligned));	/* TRGT-STRING */
	static cob_u8_t	b_7[2] __attribute__((aligned));	/* STR-POINTER */
	static cob_u8_t	b_8[1] __attribute__((aligned));	/* SRC-DELIM */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_6	= {3, b_6, &a_1};	/* TRGT-STRING */
	static cob_field f_7	= {2, b_7, &a_2};	/* STR-POINTER */
	static cob_field f_8	= {1, b_8, &a_1};	/* SRC-DELIM */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 21        : Entry     StringTest              : prog.cob */
  l_2:;

  /* Line: 21        : MOVE               : prog.cob */
  memcpy (b_7, "01", 2);

  /* Line: 22        : STRING             : prog.cob */
  cob_glob_ptr->cob_exception_code = 0;
  cob_string_init (&f_6, &f_7);
  cob_string_delimited (NULL);
  cob_string_append ((cob_field *)&c_1);
  cob_string_append ((cob_field *)&c_2);
  cob_string_append ((cob_field *)&c_3);
  cob_string_finish ();
  if (unlikely ((cob_glob_ptr->cob_exception_code & 0xff00) == 0x0a00))
  {

    /* Line: 26        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &c_4);
  }

  /* Line: 28        : IF                 : prog.cob */
  if (((int)memcmp (b_6, (cob_u8_ptr)"ABC", 3) != 0))
  {

    /* Line: 29        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_5, &f_6, &c_6);
  }

  /* Line: 30        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_7, 2, 4LL, 0) != 0))
  {

    /* Line: 31        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_7, &f_7, &c_8);
  }

  /* Line: 34        : MOVE               : prog.cob */
  memset (b_7, 48, 2);

  /* Line: 35        : MOVE               : prog.cob */
  memset (b_6, 32, 3);

  /* Line: 36        : STRING             : prog.cob */
  cob_glob_ptr->cob_exception_code = 0;
  cob_string_init (&f_6, &f_7);
  cob_string_delimited (NULL);
  cob_string_append ((cob_field *)&c_1);
  cob_string_append ((cob_field *)&c_2);
  cob_string_append ((cob_field *)&c_3);
  cob_string_finish ();
  if (!cob_glob_ptr->cob_exception_code)
  {

    /* Line: 40        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &c_9);
  }

  /* Line: 42        : IF                 : prog.cob */
  if (((int)cob_cmp (&f_6, &cob_all_space) != 0))
  {

    /* Line: 43        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_10, &f_6, &c_11);
  }

  /* Line: 44        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_7, 2, 0LL, 0) != 0))
  {

    /* Line: 45        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_12, &f_7, &c_13);
  }

  /* Line: 48        : MOVE               : prog.cob */
  memcpy (b_7, "04", 2);

  /* Line: 49        : MOVE               : prog.cob */
  memset (b_6, 32, 3);

  /* Line: 50        : STRING             : prog.cob */
  cob_glob_ptr->cob_exception_code = 0;
  cob_string_init (&f_6, &f_7);
  cob_string_delimited (NULL);
  cob_string_append ((cob_field *)&c_1);
  cob_string_append ((cob_field *)&c_2);
  cob_string_append ((cob_field *)&c_3);
  cob_string_finish ();
  if (!cob_glob_ptr->cob_exception_code)
  {

    /* Line: 54        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &c_14);
  }

  /* Line: 56        : IF                 : prog.cob */
  if (((int)cob_cmp (&f_6, &cob_all_space) != 0))
  {

    /* Line: 57        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_15, &f_6, &c_11);
  }

  /* Line: 58        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_7, 2, 4LL, 0) != 0))
  {

    /* Line: 59        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_16, &f_7, &c_8);
  }

  /* Line: 62        : MOVE               : prog.cob */
  memcpy (b_7, "01", 2);

  /* Line: 63        : MOVE               : prog.cob */
  *(b_8) = 124;

  /* Line: 64        : MOVE               : prog.cob */
  memset (b_6, 32, 3);

  /* Line: 65        : STRING             : prog.cob */
  cob_string_init (&f_6, &f_7);
  cob_string_delimited (&f_8);
  cob_string_append ((cob_field *)&c_17);
  cob_string_append ((cob_field *)&c_18);
  cob_string_append ((cob_field *)&c_19);
  cob_string_finish ();

  /* Line: 69        : IF                 : prog.cob */
  if (((int)memcmp (b_6, (cob_u8_ptr)"1AC", 3) != 0))
  {

    /* Line: 70        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_20, &f_6, &c_21);
  }

  /* Line: 72        : GOBACK             : prog.cob */
  goto exit_program;

  /* Program exit */

  exit_program:

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "StringTest";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())StringTest;
  module->module_cancel.funcptr = (void *(*)())StringTest_;
  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memset (b_6, 32, 3);
  memset (b_7, 48, 2);
  *(cob_u8_ptr)(b_8) = 32;

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'StringTest' */

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([UNSTRING DELIMITED POINTER])
AT_KEYWORDS([backcomp runmisc])

AT_DATA([prog.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:30:26 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 23 2024 11:30:26"
#define  COB_MODULE_DATE		20240423
#define  COB_MODULE_TIME		113026

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:30:26 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x1000, NULL};
static const cob_field_attr a_2 =	{0x10,   2,   0, 0x0000, NULL};
static const cob_field_attr a_3 =	{0x21,   0,   0, 0x0000, NULL};


/* Constants */
static const cob_field c_1	= {18, (cob_u8_ptr)"Expected 48 - Got ", &a_1};
static const cob_field c_2	= {18, (cob_u8_ptr)"Expected 62 - Got ", &a_1};
static const cob_field c_3	= {18, (cob_u8_ptr)"Expected 63 - Got ", &a_1};
static const cob_field c_4	= {5, (cob_u8_ptr)" PIC ", &a_1};
static const cob_field c_5	= {7, (cob_u8_ptr)" COMP-3", &a_1};
static const cob_field c_6	= {1, (cob_u8_ptr)".", &a_1};

/* Function prototypes */

static int		prog ();
static int		prog_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 23 2024 11:30:26 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[66] __attribute__((aligned));	/* WS-LAY-RECORD */
	static cob_u8_t	b_7[50] __attribute__((aligned));	/* WS-DUMMY */
	static cob_u8_t	b_8[32] __attribute__((aligned));	/* WS-KEYWORD */
	static cob_u8_t	b_9[2] __attribute__((aligned));	/* WS-POINTER */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_6	= {66, b_6, &a_3};	/* WS-LAY-RECORD */
	static cob_field f_7	= {50, b_7, &a_3};	/* WS-DUMMY */
	static cob_field f_8	= {32, b_8, &a_3};	/* WS-KEYWORD */
	static cob_field f_9	= {2, b_9, &a_2};	/* WS-POINTER */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 11        : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 11        : MOVE               : prog.cob */
  memcpy (b_6, "        10  AF-RECORD-TYPE-SEQUENCE-04     PIC   9(05) COMP-3.    ", 66);

  /* Line: 14        : MOVE               : prog.cob */
  memcpy (b_9, "01", 2);

  /* Line: 15        : PERFORM            : prog.cob */
  /* PERFORM 0001-SUB */
  frame_ptr++;
  frame_ptr->perform_through = 5;
  frame_ptr->return_address_num = 0;
  goto l_5;
  l_6:
  frame_ptr--;

  /* Line: 16        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_9, 2, 48LL, 0) != 0))
  {

    /* Line: 17        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_1, &f_9);
  }

  /* Line: 18        : ADD                : prog.cob */
  cob_add_int (&f_9, 7, 0);

  /* Line: 20        : PERFORM            : prog.cob */
  /* PERFORM 0001-SUB */
  frame_ptr++;
  frame_ptr->perform_through = 5;
  frame_ptr->return_address_num = 1;
  goto l_5;
  l_7:
  frame_ptr--;

  /* Line: 21        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_9, 2, 62LL, 0) != 0))
  {

    /* Line: 22        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_2, &f_9);
  }

  /* Line: 23        : PERFORM            : prog.cob */
  /* PERFORM 0001-SUB */
  frame_ptr++;
  frame_ptr->perform_through = 5;
  frame_ptr->return_address_num = 2;
  goto l_5;
  l_8:
  frame_ptr--;

  /* Line: 24        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_9, 2, 63LL, 0) != 0))
  {

    /* Line: 25        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_3, &f_9);
  }

  /* Line: 26        : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Line: 27        : Paragraph 0001-SUB                : prog.cob */
  l_5:;

  /* Line: 28        : UNSTRING           : prog.cob */
  cob_unstring_init (&f_6, &f_9, 3);
  cob_unstring_delimited ((cob_field *)&c_4, 0);
  cob_unstring_delimited ((cob_field *)&c_5, 0);
  cob_unstring_delimited ((cob_field *)&c_6, 0);
  cob_unstring_into (&f_7, &f_8, 0);
  cob_unstring_finish ();

  /* Implicit PERFORM return */
  if (frame_ptr->perform_through == 5)
    goto P_switch;

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   switch (frame_ptr->return_address_num) {
   case 2:
     goto l_8;
   case 1:
     goto l_7;
   case 0:
     goto l_6;
   }
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memset (b_6, 32, 66);
  memset (b_7, 32, 50);
  memset (b_8, 32, 32);
  memset (b_9, 48, 2);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'prog' */

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([UNSTRING with FUNCTION / literal])
AT_KEYWORDS([backcomp runmisc])

AT_DATA([prog.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:33:04 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 23 2024 11:33:04"
#define  COB_MODULE_DATE		20240423
#define  COB_MODULE_TIME		113304

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:33:04 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x1000, NULL};
static const cob_field_attr a_2 =	{0x21,   0,   0, 0x0000, NULL};


/* Constants */
static const cob_field c_1	= {19, (cob_u8_ptr)"The,Quick,Brown,Fox", &a_1};
static const cob_field c_2	= {1, (cob_u8_ptr)",", &a_1};
static const cob_field c_3	= {10, (cob_u8_ptr)"PRM(1) is ", &a_1};
static const cob_field c_4	= {1, (cob_u8_ptr)":", &a_1};
static const cob_field c_5	= {10, (cob_u8_ptr)"PRM(2) is ", &a_1};
static const cob_field c_6	= {10, (cob_u8_ptr)"PRM(3) is ", &a_1};
static const cob_field c_7	= {10, (cob_u8_ptr)"PRM(4) is ", &a_1};
static const cob_field c_8	= {20, (cob_u8_ptr)"Now using UPPER-CASE", &a_1};
static const cob_field c_9	= {25, (cob_u8_ptr)"Daddy,was,a,Rolling stone", &a_1};
static const cob_field c_10	= {17, (cob_u8_ptr)"Now using Literal", &a_1};
static const cob_field c_11	= {30, (cob_u8_ptr)"Now using Literal + LOWER-CASE", &a_1};

/* Function prototypes */

static int		prog ();
static int		prog_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 23 2024 11:33:04 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Local cob_field items */
	cob_field		f0;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[543] __attribute__((aligned));	/* FILLER 1 */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_7	= {479, b_6, &a_2};	/* TSTUNS */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 9         : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 9         : MOVE               : prog.cob */
  cob_move ((cob_field *)&c_1, &f_7);

  /* Line: 10        : UNSTRING           : prog.cob */
  cob_unstring_init (&f_7, NULL, 1);
  cob_unstring_delimited ((cob_field *)&c_2, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 0, &a_2), 0, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 1, &a_2), 0, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 2, &a_2), 0, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 3, &a_2), 0, 0);
  cob_unstring_finish ();

  /* Line: 12        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_3, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 0, &a_2), &c_4);

  /* Line: 13        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_5, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 1, &a_2), &c_4);

  /* Line: 14        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_6, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 2, &a_2), &c_4);

  /* Line: 15        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_7, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 3, &a_2), &c_4);

  /* Line: 16        : UNSTRING           : prog.cob */
  cob_unstring_init (cob_intr_upper_case (0, 0, &f_7), NULL, 1);
  cob_unstring_delimited ((cob_field *)&c_2, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 0, &a_2), 0, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 1, &a_2), 0, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 2, &a_2), 0, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 3, &a_2), 0, 0);
  cob_unstring_finish ();

  /* Line: 18        : DISPLAY            : prog.cob */
  cob_display (0, 1, 1, &c_8);

  /* Line: 19        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_3, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 0, &a_2), &c_4);

  /* Line: 20        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_5, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 1, &a_2), &c_4);

  /* Line: 21        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_6, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 2, &a_2), &c_4);

  /* Line: 22        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_7, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 3, &a_2), &c_4);

  /* Line: 23        : UNSTRING           : prog.cob */
  cob_unstring_init ((cob_field *)&c_9, NULL, 1);
  cob_unstring_delimited ((cob_field *)&c_2, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 0, &a_2), 0, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 1, &a_2), 0, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 2, &a_2), 0, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 3, &a_2), 0, 0);
  cob_unstring_finish ();

  /* Line: 25        : DISPLAY            : prog.cob */
  cob_display (0, 1, 1, &c_10);

  /* Line: 26        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_3, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 0, &a_2), &c_4);

  /* Line: 27        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_5, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 1, &a_2), &c_4);

  /* Line: 28        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_6, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 2, &a_2), &c_4);

  /* Line: 29        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_7, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 3, &a_2), &c_4);

  /* Line: 30        : UNSTRING           : prog.cob */
  cob_unstring_init (cob_intr_lower_case (0, 0, (cob_field *)&c_9), NULL, 1);
  cob_unstring_delimited ((cob_field *)&c_2, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 0, &a_2), 0, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 1, &a_2), 0, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 2, &a_2), 0, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 3, &a_2), 0, 0);
  cob_unstring_finish ();

  /* Line: 33        : DISPLAY            : prog.cob */
  cob_display (0, 1, 1, &c_11);

  /* Line: 34        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_3, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 0, &a_2), &c_4);

  /* Line: 35        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_5, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 1, &a_2), &c_4);

  /* Line: 36        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_6, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 2, &a_2), &c_4);

  /* Line: 37        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_7, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 3, &a_2), &c_4);

  /* Line: 38        : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memset (b_6, 32, 543);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'prog' */

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[PRM(1) is The             :
PRM(2) is Quick           :
PRM(3) is Brown           :
PRM(4) is Fox             :
Now using UPPER-CASE
PRM(1) is THE             :
PRM(2) is QUICK           :
PRM(3) is BROWN           :
PRM(4) is FOX             :
Now using Literal
PRM(1) is Daddy           :
PRM(2) is was             :
PRM(3) is a               :
PRM(4) is Rolling stone   :
Now using Literal + LOWER-CASE
PRM(1) is daddy           :
PRM(2) is was             :
PRM(3) is a               :
PRM(4) is rolling stone   :
], [])

AT_CLEANUP


AT_SETUP([SORT: EBCDIC table])
AT_KEYWORDS([runmisc SORT ALPHABET OBJECT-COMPUTER])

AT_DATA([prog.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           juil. 23 2024 16:25:46 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#include <string.h>
#include <math.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"juil. 23 2024 16:25:46"
#define  COB_MODULE_DATE		20240723
#define  COB_MODULE_TIME		162546

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           juil. 23 2024 16:25:46 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x01,   0,   0, 0x0000, NULL};
static const cob_field_attr a_3 =	{0x21,   0,   0, 0x1000, NULL};


/* Constants */
static const cob_field c_1	= {10, (cob_u8_ptr)"abcde12345", &a_3};
static const cob_field c_2	= {10, (cob_u8_ptr)"54321edcba", &a_3};


/* ASCII to EBCDIC table */
static const unsigned char	cob_ascii_ebcdic[256] = {
	0x00, 0x01, 0x02, 0x03, 0x37, 0x2D, 0x2E, 0x2F,
	0x16, 0x05, 0x25, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x3C, 0x3D, 0x32, 0x26,
	0x18, 0x19, 0x3F, 0x27, 0x1C, 0x1D, 0x1E, 0x1F,
	0x40, 0x5A, 0x7F, 0x7B, 0x5B, 0x6C, 0x50, 0x7D,
	0x4D, 0x5D, 0x5C, 0x4E, 0x6B, 0x60, 0x4B, 0x61,
	0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
	0xF8, 0xF9, 0x7A, 0x5E, 0x4C, 0x7E, 0x6E, 0x6F,
	0x7C, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,
	0xC8, 0xC9, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6,
	0xD7, 0xD8, 0xD9, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6,
	0xE7, 0xE8, 0xE9, 0xAD, 0xE0, 0xBD, 0x5F, 0x6D,
	0x79, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
	0x88, 0x89, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96,
	0x97, 0x98, 0x99, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6,
	0xA7, 0xA8, 0xA9, 0xC0, 0x6A, 0xD0, 0xA1, 0x07,
	0x68, 0xDC, 0x51, 0x42, 0x43, 0x44, 0x47, 0x48,
	0x52, 0x53, 0x54, 0x57, 0x56, 0x58, 0x63, 0x67,
	0x71, 0x9C, 0x9E, 0xCB, 0xCC, 0xCD, 0xDB, 0xDD,
	0xDF, 0xEC, 0xFC, 0xB0, 0xB1, 0xB2, 0x3E, 0xB4,
	0x45, 0x55, 0xCE, 0xDE, 0x49, 0x69, 0x9A, 0x9B,
	0xAB, 0x9F, 0xBA, 0xB8, 0xB7, 0xAA, 0x8A, 0x8B,
	0xB6, 0xB5, 0x62, 0x4F, 0x64, 0x65, 0x66, 0x20,
	0x21, 0x22, 0x70, 0x23, 0x72, 0x73, 0x74, 0xBE,
	0x76, 0x77, 0x78, 0x80, 0x24, 0x15, 0x8C, 0x8D,
	0x8E, 0x41, 0x06, 0x17, 0x28, 0x29, 0x9D, 0x2A,
	0x2B, 0x2C, 0x09, 0x0A, 0xAC, 0x4A, 0xAE, 0xAF,
	0x1B, 0x30, 0x31, 0xFA, 0x1A, 0x33, 0x34, 0x35,
	0x36, 0x59, 0x08, 0x38, 0xBC, 0x39, 0xA0, 0xBF,
	0xCA, 0x3A, 0xFE, 0x3B, 0x04, 0xCF, 0xDA, 0x14,
	0xE1, 0x8F, 0x46, 0x75, 0xFD, 0xEB, 0xEE, 0xED,
	0x90, 0xEF, 0xB3, 0xFB, 0xB9, 0xEA, 0xBB, 0xFF
};

	/* Decimal constants */


/* Function prototypes */

static int		prog ();
static int		prog_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           juil. 23 2024 16:25:46 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Local cob_field items */
	cob_field		f0;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[10] __attribute__((aligned));	/* Z */
	static cob_u8_t	b_7[10] __attribute__((aligned));	/* G */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_7	= {10, b_7, &a_2};	/* G */
	static cob_field f_9	= {1, b_7, &a_1};	/* X */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 15        : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 15        : MOVE               : prog.cob */
  memcpy (b_7, b_6, 10);

  /* Line: 17        : SORT               : prog.cob */
  cob_table_sort_init (1, cob_ascii_ebcdic);
  cob_table_sort_init_key (&f_9, 0, 0);
  cob_table_sort (COB_SET_FLD(f0, 1, b_7 + 0, &a_2), 10);

  /* Line: 18        : IF                 : prog.cob */
  if (((int)cob_cmp (&f_7, (cob_field *)&c_1) != 0))
  {

    /* Line: 19        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &f_7);
  }

  /* Line: 20        : MOVE               : prog.cob */
  memcpy (b_7, b_6, 10);

  /* Line: 22        : SORT               : prog.cob */
  cob_table_sort_init (1, cob_ascii_ebcdic);
  cob_table_sort_init_key (&f_9, 1, 0);
  cob_table_sort (COB_SET_FLD(f0, 1, b_7 + 0, &a_2), 10);

  /* Line: 23        : IF                 : prog.cob */
  if (((int)cob_cmp (&f_7, (cob_field *)&c_2) != 0))
  {

    /* Line: 24        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &f_7);
  }

  /* Line: 25        : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memcpy (b_6, "d4b2e1a3c5", 10);
  memset (b_7, 32, 10);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'prog' */

/* End functions */


]])

AT_DATA([prog2.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           juil. 23 2024 13:58:56 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"juil. 23 2024 13:58:56"
#define  COB_MODULE_DATE		20240723
#define  COB_MODULE_TIME		135856

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           juil. 23 2024 13:58:56 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x01,   0,   0, 0x0000, NULL};
static const cob_field_attr a_3 =	{0x21,   0,   0, 0x1000, NULL};


/* Constants */
static const cob_field c_1	= {10, (cob_u8_ptr)"abcde12345", &a_3};
static const cob_field c_2	= {10, (cob_u8_ptr)"54321edcba", &a_3};


/* ASCII to EBCDIC table */
static const unsigned char	cob_ascii_ebcdic[256] = {
	0x00, 0x01, 0x02, 0x03, 0x37, 0x2D, 0x2E, 0x2F,
	0x16, 0x05, 0x25, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x3C, 0x3D, 0x32, 0x26,
	0x18, 0x19, 0x3F, 0x27, 0x1C, 0x1D, 0x1E, 0x1F,
	0x40, 0x5A, 0x7F, 0x7B, 0x5B, 0x6C, 0x50, 0x7D,
	0x4D, 0x5D, 0x5C, 0x4E, 0x6B, 0x60, 0x4B, 0x61,
	0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
	0xF8, 0xF9, 0x7A, 0x5E, 0x4C, 0x7E, 0x6E, 0x6F,
	0x7C, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,
	0xC8, 0xC9, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6,
	0xD7, 0xD8, 0xD9, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6,
	0xE7, 0xE8, 0xE9, 0xAD, 0xE0, 0xBD, 0x5F, 0x6D,
	0x79, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
	0x88, 0x89, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96,
	0x97, 0x98, 0x99, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6,
	0xA7, 0xA8, 0xA9, 0xC0, 0x6A, 0xD0, 0xA1, 0x07,
	0x68, 0xDC, 0x51, 0x42, 0x43, 0x44, 0x47, 0x48,
	0x52, 0x53, 0x54, 0x57, 0x56, 0x58, 0x63, 0x67,
	0x71, 0x9C, 0x9E, 0xCB, 0xCC, 0xCD, 0xDB, 0xDD,
	0xDF, 0xEC, 0xFC, 0xB0, 0xB1, 0xB2, 0x3E, 0xB4,
	0x45, 0x55, 0xCE, 0xDE, 0x49, 0x69, 0x9A, 0x9B,
	0xAB, 0x9F, 0xBA, 0xB8, 0xB7, 0xAA, 0x8A, 0x8B,
	0xB6, 0xB5, 0x62, 0x4F, 0x64, 0x65, 0x66, 0x20,
	0x21, 0x22, 0x70, 0x23, 0x72, 0x73, 0x74, 0xBE,
	0x76, 0x77, 0x78, 0x80, 0x24, 0x15, 0x8C, 0x8D,
	0x8E, 0x41, 0x06, 0x17, 0x28, 0x29, 0x9D, 0x2A,
	0x2B, 0x2C, 0x09, 0x0A, 0xAC, 0x4A, 0xAE, 0xAF,
	0x1B, 0x30, 0x31, 0xFA, 0x1A, 0x33, 0x34, 0x35,
	0x36, 0x59, 0x08, 0x38, 0xBC, 0x39, 0xA0, 0xBF,
	0xCA, 0x3A, 0xFE, 0x3B, 0x04, 0xCF, 0xDA, 0x14,
	0xE1, 0x8F, 0x46, 0x75, 0xFD, 0xEB, 0xEE, 0xED,
	0x90, 0xEF, 0xB3, 0xFB, 0xB9, 0xEA, 0xBB, 0xFF
};

	/* Decimal constants */


/* Function prototypes */

static int		prog2 ();
static int		prog2_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog2 ());
}

/* Functions */

/* PROGRAM-ID 'prog2' */

/* ENTRY 'prog2' */

static int
prog2 ()
{
  return prog2_ (0);
}

static int
prog2_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           juil. 23 2024 13:58:56 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'prog2' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Local cob_field items */
	cob_field		f0;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[10] __attribute__((aligned));	/* Z */
	static cob_u8_t	b_7[10] __attribute__((aligned));	/* G */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_7	= {10, b_7, &a_2};	/* G */
	static cob_field f_9	= {1, b_7, &a_1};	/* X */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 16        : Entry     prog2                   : prog.cob */
  l_2:;

  /* Line: 16        : MOVE               : prog.cob */
  memcpy (b_7, b_6, 10);

  /* Line: 17        : SORT               : prog.cob */
  cob_table_sort_init (1, 0);
  cob_table_sort_init_key (&f_9, 0, 0);
  cob_table_sort (COB_SET_FLD(f0, 1, b_7 + 0, &a_2), 10);

  /* Line: 18        : IF                 : prog.cob */
  if (((int)cob_cmp (&f_7, (cob_field *)&c_1) != 0))
  {

    /* Line: 19        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &f_7);
  }

  /* Line: 20        : MOVE               : prog.cob */
  memcpy (b_7, b_6, 10);

  /* Line: 21        : SORT               : prog.cob */
  cob_table_sort_init (1, 0);
  cob_table_sort_init_key (&f_9, 1, 0);
  cob_table_sort (COB_SET_FLD(f0, 1, b_7 + 0, &a_2), 10);

  /* Line: 22        : IF                 : prog.cob */
  if (((int)cob_cmp (&f_7, (cob_field *)&c_2) != 0))
  {

    /* Line: 23        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &f_7);
  }

  /* Line: 24        : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "prog2";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog2;
  module->module_cancel.funcptr = (void *(*)())prog2_;
  module->collating_sequence = cob_ascii_ebcdic;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memcpy (b_6, "d4b2e1a3c5", 10);
  memset (b_7, 32, 10);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'prog2' */

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CHECK([$COMPILE prog2.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [0], [], [])

AT_CLEANUP


AT_SETUP([COLLATING SEQUENCE alphanum comparison])
AT_KEYWORDS([runmisc EBCDIC ASCII])

AT_DATA([ascii.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           juil. 23 2024 17:37:21 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto -fno-constant-folding prog.cob */

#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#include <string.h>
#include <math.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"juil. 23 2024 17:37:21"
#define  COB_MODULE_DATE		20240723
#define  COB_MODULE_TIME		173721

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           juil. 23 2024 17:37:21 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto -fno-constant-folding prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x1000, NULL};
static const cob_field_attr a_2 =	{0x21,   0,   0, 0x0000, NULL};


/* Constants */
static const cob_field c_1	= {1, (cob_u8_ptr)"1", &a_1};
static const cob_field c_2	= {1, (cob_u8_ptr)"a", &a_1};
static const cob_field c_3	= {5, (cob_u8_ptr)"ERROR", &a_1};


/* NATIVE table */
static const unsigned char	cob_native[256] = {
	0, 1, 2, 3, 4, 5, 6, 7,
	8, 9, 10, 11, 12, 13, 14, 15,
	16, 17, 18, 19, 20, 21, 22, 23,
	24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 87,
	88, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 141, 142, 143,
	144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 165, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175,
	176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 207,
	208, 209, 210, 211, 212, 213, 214, 215,
	216, 217, 218, 219, 220, 221, 222, 223,
	224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255
};

	/* Decimal constants */


/* Function prototypes */

static int		prog ();
static int		prog_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           juil. 23 2024 17:37:21 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto -fno-constant-folding prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	
	/* End of data storage */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 11        : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 11        : IF                 : prog.cob */
  if (((int)cob_cmp ((cob_field *)&c_1, (cob_field *)&c_2) >= 0))
  {

    /* Line: 15        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &c_3);
  }

  /* Line: 17        : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->collating_sequence = cob_native;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'prog' */

/* End functions */


]])


AT_DATA([ebcdic.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           juil. 23 2024 17:34:27 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto -fno-constant-folding prog.cob */

#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#include <string.h>
#include <math.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"juil. 23 2024 17:34:27"
#define  COB_MODULE_DATE		20240723
#define  COB_MODULE_TIME		173427

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           juil. 23 2024 17:34:27 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto -fno-constant-folding prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x1000, NULL};
static const cob_field_attr a_2 =	{0x21,   0,   0, 0x0000, NULL};


/* Constants */
static const cob_field c_1	= {1, (cob_u8_ptr)"a", &a_1};
static const cob_field c_2	= {1, (cob_u8_ptr)"1", &a_1};
static const cob_field c_3	= {5, (cob_u8_ptr)"ERROR", &a_1};


/* ASCII to EBCDIC table */
static const unsigned char	cob_ascii_ebcdic[256] = {
	0x00, 0x01, 0x02, 0x03, 0x37, 0x2D, 0x2E, 0x2F,
	0x16, 0x05, 0x25, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x3C, 0x3D, 0x32, 0x26,
	0x18, 0x19, 0x3F, 0x27, 0x1C, 0x1D, 0x1E, 0x1F,
	0x40, 0x5A, 0x7F, 0x7B, 0x5B, 0x6C, 0x50, 0x7D,
	0x4D, 0x5D, 0x5C, 0x4E, 0x6B, 0x60, 0x4B, 0x61,
	0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
	0xF8, 0xF9, 0x7A, 0x5E, 0x4C, 0x7E, 0x6E, 0x6F,
	0x7C, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,
	0xC8, 0xC9, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6,
	0xD7, 0xD8, 0xD9, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6,
	0xE7, 0xE8, 0xE9, 0xAD, 0xE0, 0xBD, 0x5F, 0x6D,
	0x79, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
	0x88, 0x89, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96,
	0x97, 0x98, 0x99, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6,
	0xA7, 0xA8, 0xA9, 0xC0, 0x6A, 0xD0, 0xA1, 0x07,
	0x68, 0xDC, 0x51, 0x42, 0x43, 0x44, 0x47, 0x48,
	0x52, 0x53, 0x54, 0x57, 0x56, 0x58, 0x63, 0x67,
	0x71, 0x9C, 0x9E, 0xCB, 0xCC, 0xCD, 0xDB, 0xDD,
	0xDF, 0xEC, 0xFC, 0xB0, 0xB1, 0xB2, 0x3E, 0xB4,
	0x45, 0x55, 0xCE, 0xDE, 0x49, 0x69, 0x9A, 0x9B,
	0xAB, 0x9F, 0xBA, 0xB8, 0xB7, 0xAA, 0x8A, 0x8B,
	0xB6, 0xB5, 0x62, 0x4F, 0x64, 0x65, 0x66, 0x20,
	0x21, 0x22, 0x70, 0x23, 0x72, 0x73, 0x74, 0xBE,
	0x76, 0x77, 0x78, 0x80, 0x24, 0x15, 0x8C, 0x8D,
	0x8E, 0x41, 0x06, 0x17, 0x28, 0x29, 0x9D, 0x2A,
	0x2B, 0x2C, 0x09, 0x0A, 0xAC, 0x4A, 0xAE, 0xAF,
	0x1B, 0x30, 0x31, 0xFA, 0x1A, 0x33, 0x34, 0x35,
	0x36, 0x59, 0x08, 0x38, 0xBC, 0x39, 0xA0, 0xBF,
	0xCA, 0x3A, 0xFE, 0x3B, 0x04, 0xCF, 0xDA, 0x14,
	0xE1, 0x8F, 0x46, 0x75, 0xFD, 0xEB, 0xEE, 0xED,
	0x90, 0xEF, 0xB3, 0xFB, 0xB9, 0xEA, 0xBB, 0xFF
};

	/* Decimal constants */


/* Function prototypes */

static int		prog ();
static int		prog_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           juil. 23 2024 17:34:27 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto -fno-constant-folding prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	
	/* End of data storage */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 13        : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 13        : IF                 : prog.cob */
  if (((int)cob_cmp ((cob_field *)&c_1, (cob_field *)&c_2) >= 0))
  {

    /* Line: 15        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &c_3);
  }

  /* Line: 17        : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->collating_sequence = cob_ascii_ebcdic;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'prog' */

/* End functions */


]])

AT_CHECK([$COMPILE -o ascii ascii.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./ascii], [0], [], [])

AT_CHECK([$COMPILE -o ebcdic ebcdic.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./ebcdic], [0], [], [])

AT_CLEANUP


AT_SETUP([SORT: table with default COLLATING SEQUENCE])
AT_KEYWORDS([runmisc SORT EBCDIC ASCII])

AT_DATA([ascii.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           juil. 23 2024 17:47:39 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto -fno-constant-folding prog.cob */

#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#include <string.h>
#include <math.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"juil. 23 2024 17:47:39"
#define  COB_MODULE_DATE		20240723
#define  COB_MODULE_TIME		174739

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           juil. 23 2024 17:47:39 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto -fno-constant-folding prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x01,   0,   0, 0x0000, NULL};
static const cob_field_attr a_3 =	{0x21,   0,   0, 0x1000, NULL};


/* Constants */
static const cob_field c_1	= {10, (cob_u8_ptr)"12345abcde", &a_3};


/* NATIVE table */
static const unsigned char	cob_native[256] = {
	0, 1, 2, 3, 4, 5, 6, 7,
	8, 9, 10, 11, 12, 13, 14, 15,
	16, 17, 18, 19, 20, 21, 22, 23,
	24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 87,
	88, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 141, 142, 143,
	144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 165, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175,
	176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 207,
	208, 209, 210, 211, 212, 213, 214, 215,
	216, 217, 218, 219, 220, 221, 222, 223,
	224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255
};

	/* Decimal constants */


/* Function prototypes */

static int		prog ();
static int		prog_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           juil. 23 2024 17:47:39 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto -fno-constant-folding prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Local cob_field items */
	cob_field		f0;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[10] __attribute__((aligned));	/* Z */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_7	= {10, b_6, &a_2};	/* G */
	static cob_field f_9	= {1, b_6, &a_1};	/* X */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 16        : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 16        : SORT               : prog.cob */
  cob_table_sort_init (1, 0);
  cob_table_sort_init_key (&f_9, 0, 0);
  cob_table_sort (COB_SET_FLD(f0, 1, b_6 + 0, &a_2), 10);

  /* Line: 18        : IF                 : prog.cob */
  if (((int)cob_cmp (&f_7, (cob_field *)&c_1) != 0))
  {

    /* Line: 24        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &f_7);
  }

  /* Line: 26        : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->collating_sequence = cob_native;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memcpy (b_6, "d4b2e1a3c5", 10);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'prog' */

/* End functions */


]])

AT_DATA([ebcdic.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           juil. 23 2024 17:48:46 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto -fno-constant-folding prog.cob */

#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#include <string.h>
#include <math.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"juil. 23 2024 17:48:46"
#define  COB_MODULE_DATE		20240723
#define  COB_MODULE_TIME		174846

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           juil. 23 2024 17:48:46 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto -fno-constant-folding prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x01,   0,   0, 0x0000, NULL};
static const cob_field_attr a_3 =	{0x21,   0,   0, 0x1000, NULL};


/* Constants */
static const cob_field c_1	= {10, (cob_u8_ptr)"abcde12345", &a_3};


/* ASCII to EBCDIC table */
static const unsigned char	cob_ascii_ebcdic[256] = {
	0x00, 0x01, 0x02, 0x03, 0x37, 0x2D, 0x2E, 0x2F,
	0x16, 0x05, 0x25, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x3C, 0x3D, 0x32, 0x26,
	0x18, 0x19, 0x3F, 0x27, 0x1C, 0x1D, 0x1E, 0x1F,
	0x40, 0x5A, 0x7F, 0x7B, 0x5B, 0x6C, 0x50, 0x7D,
	0x4D, 0x5D, 0x5C, 0x4E, 0x6B, 0x60, 0x4B, 0x61,
	0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
	0xF8, 0xF9, 0x7A, 0x5E, 0x4C, 0x7E, 0x6E, 0x6F,
	0x7C, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,
	0xC8, 0xC9, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6,
	0xD7, 0xD8, 0xD9, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6,
	0xE7, 0xE8, 0xE9, 0xAD, 0xE0, 0xBD, 0x5F, 0x6D,
	0x79, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
	0x88, 0x89, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96,
	0x97, 0x98, 0x99, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6,
	0xA7, 0xA8, 0xA9, 0xC0, 0x6A, 0xD0, 0xA1, 0x07,
	0x68, 0xDC, 0x51, 0x42, 0x43, 0x44, 0x47, 0x48,
	0x52, 0x53, 0x54, 0x57, 0x56, 0x58, 0x63, 0x67,
	0x71, 0x9C, 0x9E, 0xCB, 0xCC, 0xCD, 0xDB, 0xDD,
	0xDF, 0xEC, 0xFC, 0xB0, 0xB1, 0xB2, 0x3E, 0xB4,
	0x45, 0x55, 0xCE, 0xDE, 0x49, 0x69, 0x9A, 0x9B,
	0xAB, 0x9F, 0xBA, 0xB8, 0xB7, 0xAA, 0x8A, 0x8B,
	0xB6, 0xB5, 0x62, 0x4F, 0x64, 0x65, 0x66, 0x20,
	0x21, 0x22, 0x70, 0x23, 0x72, 0x73, 0x74, 0xBE,
	0x76, 0x77, 0x78, 0x80, 0x24, 0x15, 0x8C, 0x8D,
	0x8E, 0x41, 0x06, 0x17, 0x28, 0x29, 0x9D, 0x2A,
	0x2B, 0x2C, 0x09, 0x0A, 0xAC, 0x4A, 0xAE, 0xAF,
	0x1B, 0x30, 0x31, 0xFA, 0x1A, 0x33, 0x34, 0x35,
	0x36, 0x59, 0x08, 0x38, 0xBC, 0x39, 0xA0, 0xBF,
	0xCA, 0x3A, 0xFE, 0x3B, 0x04, 0xCF, 0xDA, 0x14,
	0xE1, 0x8F, 0x46, 0x75, 0xFD, 0xEB, 0xEE, 0xED,
	0x90, 0xEF, 0xB3, 0xFB, 0xB9, 0xEA, 0xBB, 0xFF
};

	/* Decimal constants */


/* Function prototypes */

static int		prog ();
static int		prog_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           juil. 23 2024 17:48:46 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto -fno-constant-folding prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Local cob_field items */
	cob_field		f0;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[10] __attribute__((aligned));	/* Z */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_7	= {10, b_6, &a_2};	/* G */
	static cob_field f_9	= {1, b_6, &a_1};	/* X */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 16        : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 16        : SORT               : prog.cob */
  cob_table_sort_init (1, 0);
  cob_table_sort_init_key (&f_9, 0, 0);
  cob_table_sort (COB_SET_FLD(f0, 1, b_6 + 0, &a_2), 10);

  /* Line: 20        : IF                 : prog.cob */
  if (((int)cob_cmp (&f_7, (cob_field *)&c_1) != 0))
  {

    /* Line: 24        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &f_7);
  }

  /* Line: 26        : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->collating_sequence = cob_ascii_ebcdic;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memcpy (b_6, "d4b2e1a3c5", 10);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'prog' */

/* End functions */


]])

AT_DATA([native.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           juil. 23 2024 17:49:26 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto -fno-constant-folding prog.cob */

#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#include <string.h>
#include <math.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"juil. 23 2024 17:49:26"
#define  COB_MODULE_DATE		20240723
#define  COB_MODULE_TIME		174926

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           juil. 23 2024 17:49:26 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto -fno-constant-folding prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x01,   0,   0, 0x0000, NULL};
static const cob_field_attr a_3 =	{0x21,   0,   0, 0x1000, NULL};


/* Constants */
static const cob_field c_1	= {10, (cob_u8_ptr)"12345abcde", &a_3};
static const cob_field c_2	= {10, (cob_u8_ptr)"abcde12345", &a_3};


/* NATIVE table */
static const unsigned char	cob_native[256] = {
	0, 1, 2, 3, 4, 5, 6, 7,
	8, 9, 10, 11, 12, 13, 14, 15,
	16, 17, 18, 19, 20, 21, 22, 23,
	24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 87,
	88, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 141, 142, 143,
	144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 165, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175,
	176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 207,
	208, 209, 210, 211, 212, 213, 214, 215,
	216, 217, 218, 219, 220, 221, 222, 223,
	224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255
};

	/* Decimal constants */


/* Function prototypes */

static int		prog ();
static int		prog_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           juil. 23 2024 17:49:26 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto -fno-constant-folding prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Local cob_field items */
	cob_field		f0;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[10] __attribute__((aligned));	/* Z */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_7	= {10, b_6, &a_2};	/* G */
	static cob_field f_9	= {1, b_6, &a_1};	/* X */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 16        : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 16        : SORT               : prog.cob */
  cob_table_sort_init (1, 0);
  cob_table_sort_init_key (&f_9, 0, 0);
  cob_table_sort (COB_SET_FLD(f0, 1, b_6 + 0, &a_2), 10);

  /* Line: 22        : IF                 : prog.cob */
  if ((!((int)cob_cmp (&f_7, (cob_field *)&c_1) == 0) || 
      ((int)cob_cmp (&f_7, (cob_field *)&c_2) == 0)))
  {

    /* Line: 24        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &f_7);
  }

  /* Line: 26        : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->collating_sequence = cob_native;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memcpy (b_6, "d4b2e1a3c5", 10);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'prog' */

/* End functions */


]])

AT_CHECK([$COMPILE -o ascii ascii.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./ascii], [0], [], [])
AT_CHECK([$COMPILE -o ebcdic ebcdic.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./ebcdic], [0], [], [])
AT_CHECK([$COMPILE -o native native.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./native], [0], [], [])

AT_CLEANUP


AT_SETUP([INSPECT/STRING/UNSTRING statements])
AT_KEYWORDS([backcomp INSPECT STRING UNSTRING])

AT_DATA([prog.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           juil. 23 2024 16:22:10 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#include <string.h>
#include <math.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"juil. 23 2024 16:22:10"
#define  COB_MODULE_DATE		20240723
#define  COB_MODULE_TIME		162210

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           juil. 23 2024 16:22:10 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x10,   2,   0, 0x0000, NULL};
static const cob_field_attr a_3 =	{0x21,   0,   0, 0x1000, NULL};

static const cob_field_attr cob_all_attr = {0x22, 0, 0, 0, NULL};


/* Constants */
static const cob_field c_1	= {1, (cob_u8_ptr)"u", &a_3};
static const cob_field c_2	= {1, (cob_u8_ptr)"2", &a_3};
static const cob_field c_3	= {1, (cob_u8_ptr)"S", &a_3};
static const cob_field c_4	= {1, (cob_u8_ptr)"3", &a_3};
static const cob_field c_5	= {1, (cob_u8_ptr)"4", &a_3};
static const cob_field c_6	= {1, (cob_u8_ptr)"5", &a_3};
static const cob_field c_7	= {1, (cob_u8_ptr)"6", &a_3};
static const cob_field c_8	= {1, (cob_u8_ptr)"s", &a_3};
static const cob_field c_9	= {1, (cob_u8_ptr)"7", &a_3};
static const cob_field c_10	= {1, (cob_u8_ptr)"U", &a_3};
static const cob_field c_11	= {1, (cob_u8_ptr)"8", &a_3};
static const cob_field c_12	= {1, (cob_u8_ptr)"a", &a_3};
static const cob_field c_13	= {1, (cob_u8_ptr)"9", &a_3};
static const cob_field c_14	= {2, (cob_u8_ptr)"aa", &a_3};
static const cob_field c_15	= {2, (cob_u8_ptr)"AA", &a_3};
static const cob_field c_16	= {2, (cob_u8_ptr)"10", &a_3};
static const cob_field c_17	= {2, (cob_u8_ptr)"11", &a_3};
static const cob_field c_18	= {2, (cob_u8_ptr)"12", &a_3};

static cob_field cob_all_space	= {1, (cob_u8_ptr)" ", &cob_all_attr};

	/* Decimal constants */


/* Function prototypes */

static int		strings__stmt ();
static int		strings__stmt_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (strings__stmt ());
}

/* Functions */

/* PROGRAM-ID 'strings-stmt' */

/* ENTRY 'strings__stmt' */

static int
strings__stmt ()
{
  return strings__stmt_ (0);
}

static int
strings__stmt_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           juil. 23 2024 16:22:10 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'strings-stmt' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[30] __attribute__((aligned));	/* ws-0 */
	static cob_u8_t	b_7[10] __attribute__((aligned));	/* ws-1 */
	static cob_u8_t	b_8[40] __attribute__((aligned));	/* ws-2 */
	static cob_u8_t	b_9[28] __attribute__((aligned));	/* ws-words */
	static cob_u8_t	b_13[2] __attribute__((aligned));	/* ws-count */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_6	= {30, b_6, &a_1};	/* ws-0 */
	static cob_field f_7	= {10, b_7, &a_1};	/* ws-1 */
	static cob_field f_8	= {40, b_8, &a_1};	/* ws-2 */
	static cob_field f_10	= {10, b_9, &a_1};	/* ws-words1 */
	static cob_field f_11	= {12, b_9 + 10, &a_1};	/* ws-words2 */
	static cob_field f_12	= {6, b_9 + 22, &a_1};	/* ws-words3 */
	static cob_field f_13	= {2, b_13, &a_2};	/* ws-count */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 16        : Entry     strings-stmt            : prog.cob */
  l_2:;

  /* Line: 16        : Paragraph main-section            : prog.cob */

  /* Line: 17        : INSPECT            : prog.cob */
  cob_inspect_init (&f_6, 0);
  cob_inspect_start ();
  cob_inspect_all (&f_13, (cob_field *)&c_1);
  cob_inspect_finish ();

  /* Line: 18        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_13, 2, 2LL, 0) != 0))
  {

    /* Line: 18        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &c_2);

    /* Line: 19        : INITIALIZE         : prog.cob */
    memset (b_13, 48, 2);

    /* Line: 21        : INSPECT            : prog.cob */
    cob_inspect_init (&f_6, 0);
    cob_inspect_start ();
    cob_inspect_leading (&f_13, (cob_field *)&c_3);
    cob_inspect_finish ();

    /* Line: 22        : IF                 : prog.cob */
    if (((int)cob_cmp_numdisp (b_13, 2, 2LL, 0) != 0))
    {

      /* Line: 22        : DISPLAY            : prog.cob */
      cob_display (0, 1, 1, &c_4);

      /* Line: 23        : INITIALIZE         : prog.cob */
      memset (b_13, 48, 2);

      /* Line: 25        : INSPECT            : prog.cob */
      cob_inspect_init (&f_6, 0);
      cob_inspect_start ();
      cob_inspect_before (&cob_all_space);
      cob_inspect_characters (&f_13);
      cob_inspect_finish ();

      /* Line: 27        : IF                 : prog.cob */
      if (((int)cob_cmp_numdisp (b_13, 2, 10LL, 0) != 0))
      {

        /* Line: 27        : DISPLAY            : prog.cob */
        cob_display (0, 1, 1, &c_5);

        /* Line: 28        : INITIALIZE         : prog.cob */
        memset (b_13, 48, 2);

        /* Line: 30        : INSPECT            : prog.cob */
        cob_inspect_init (&f_6, 0);
        cob_inspect_start ();
        cob_inspect_before (&cob_all_space);
        cob_inspect_all (&f_13, (cob_field *)&c_3);
        cob_inspect_finish ();

        /* Line: 32        : IF                 : prog.cob */
        if (((int)cob_cmp_numdisp (b_13, 2, 4LL, 0) != 0))
        {

          /* Line: 32        : DISPLAY            : prog.cob */
          cob_display (0, 1, 1, &c_6);

          /* Line: 33        : INITIALIZE         : prog.cob */
          memset (b_13, 48, 2);

          /* Line: 35        : INSPECT            : prog.cob */
          cob_inspect_init (&f_6, 0);
          cob_inspect_start ();
          cob_inspect_after (&cob_all_space);
          cob_inspect_all (&f_13, (cob_field *)&c_3);
          cob_inspect_finish ();

          /* Line: 37        : IF                 : prog.cob */
          if (((int)cob_cmp_numdisp (b_13, 2, 1LL, 0) != 0))
          {

            /* Line: 37        : DISPLAY            : prog.cob */
            cob_display (0, 1, 1, &c_7);

            /* Line: 39        : INSPECT            : prog.cob */
            cob_inspect_init (&f_6, 1);
            cob_inspect_start ();
            cob_inspect_leading ((cob_field *)&c_8, (cob_field *)&c_3);
            cob_inspect_finish ();

            /* Line: 40        : IF                 : prog.cob */
            if (((int)memcmp (b_6, (cob_u8_ptr)"ssYNSSWuAK 06fLGvxwYRgr BjVuSk", 30) != 0))
            {

              /* Line: 41        : DISPLAY            : prog.cob */
              cob_display (0, 1, 1, &c_9);

              /* Line: 43        : INSPECT            : prog.cob */
              cob_inspect_init (&f_6, 1);
              cob_inspect_start ();
              cob_inspect_all ((cob_field *)&c_8, (cob_field *)&c_3);
              cob_inspect_start ();
              cob_inspect_all ((cob_field *)&c_10, (cob_field *)&c_1);
              cob_inspect_finish ();

              /* Line: 45        : IF                 : prog.cob */
              if (((int)memcmp (b_6, (cob_u8_ptr)"ssYNssWUAK 06fLGvxwYRgr BjVUsk", 30) != 0))
              {

                /* Line: 46        : DISPLAY            : prog.cob */
                cob_display (0, 1, 1, &c_11);

                /* Line: 48        : INSPECT            : prog.cob */
                cob_inspect_init (&f_6, 1);
                cob_inspect_start ();
                cob_inspect_before (&cob_all_space);
                cob_inspect_all ((cob_field *)&c_12, (cob_field *)&c_8);
                cob_inspect_finish ();

                /* Line: 51        : IF                 : prog.cob */
                if (((int)memcmp (b_6, (cob_u8_ptr)"aaYNaaWUAK 06fLGvxwYRgr BjVUsk", 30) != 0))
                {

                  /* Line: 52        : DISPLAY            : prog.cob */
                  cob_display (0, 1, 1, &c_13);

                  /* Line: 54        : INSPECT            : prog.cob */
                  cob_inspect_init (&f_6, 0);
                  cob_inspect_start ();
                  cob_inspect_converting ((cob_field *)&c_14, (cob_field *)&c_15);
                  cob_inspect_finish ();

                  /* Line: 55        : IF                 : prog.cob */
                  if (((int)memcmp (b_6, (cob_u8_ptr)"AAYNAAWUAK 06fLGvxwYRgr BjVUsk", 30) != 0))
                  {

                    /* Line: 56        : DISPLAY            : prog.cob */
                    cob_display (0, 1, 1, &c_16);

                    /* Line: 58        : STRING             : prog.cob */
                    cob_string_init (&f_8, NULL);
                    cob_string_delimited (NULL);
                    cob_string_append (&f_6);
                    cob_string_delimited (NULL);
                    cob_string_append (&f_7);
                    cob_string_finish ();

                    /* Line: 61        : IF                 : prog.cob */
                    if (((int)memcmp (b_8, (cob_u8_ptr)"AAYNAAWUAK 06fLGvxwYRgr BjVUskoNDT8a9awk", 40) != 0))
                    {

                      /* Line: 62        : DISPLAY            : prog.cob */
                      cob_display (0, 1, 1, &c_17);

                      /* Line: 64        : UNSTRING           : prog.cob */
                      cob_unstring_init (&f_6, NULL, 1);
                      cob_unstring_delimited (&cob_all_space, 1);
                      cob_unstring_into (&f_10, 0, 0);
                      cob_unstring_into (&f_11, 0, 0);
                      cob_unstring_into (&f_12, 0, 0);
                      cob_unstring_finish ();

                      /* Line: 68        : IF                 : prog.cob */
                      if (((int)memcmp (b_9, (cob_u8_ptr)"AAYNAAWUAK06fLGvxwYRgrBjVUsk", 28) != 0))
                      {

                        /* Line: 69        : DISPLAY            : prog.cob */
                        cob_display (0, 1, 1, &c_18);

                        /* Line: 71        : STOP RUN           : prog.cob */
                        cob_stop_run (b_2);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "strings-stmt";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())strings__stmt;
  module->module_cancel.funcptr = (void *(*)())strings__stmt_;
  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memcpy (b_6, "SSYNSSWuAK 06fLGvxwYRgr BjVuSk", 30);
  memcpy (b_7, "oNDT8a9awk", 10);
  memset (b_8, 32, 40);
  memset (b_9, 32, 28);
  memset (b_13, 48, 2);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'strings-stmt' */

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP
