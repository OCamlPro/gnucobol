## Copyright (C) 2024 Free Software Foundation, Inc.
## Written by Boris Eng
##
## This file is part of GnuCOBOL.
##
## The GnuCOBOL compiler is free software: you can redistribute it
## and/or modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation, either version 3 of the
## License, or (at your option) any later version.
##
## GnuCOBOL is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with GnuCOBOL.  If not, see <https://www.gnu.org/licenses/>.

### GnuCOBOL Test Suite for backward compatibility
## 
## Tests in this file are used to check that the C code coming from COBOL
## programs compiled with previous versions of GnuCOBOL are still executed
## correctly with newer versions of the compiler.
## It is useful when implementing new features in order to prevent the loss of
## compatibility with programs compiled with previous versions.
## 
## To add new tests,
## 1. Choose a COBOL program;
## 2. Compile it with GnuCOBOL 2.2 (minimal compatibility ensured) and the
##    flags -Cx and -fno-computed-goto (to generated more portable C code).
##    Additional flags may be added if needed.
##    - If it does not work for compatibility reasons (unsupported feature),
##      return to step 2 with the next version of the compiler;
##    - If it does not work because of some unrecognized or conflicting code,
##      it may be necessary to inline some functions (typically, specialized
##      comparison functions such as cob_cmp_s32 which can be replaced by the
##      general comparison function cob_cmp_int);
## 3. For more convenience, if the generated program is prog.c, inline the
##    headers by replacing #include "prog.c.h" and #include "prog.c.l.h"
##    by the content of the files prog.c.h and prog.c.l.h respectively;
## 4. Although not mandatory, it is wiser to polish the code by removing
##    useless headers or portions of code.

AT_SETUP([INSPECT REPLACING LEADING ZEROS BY SPACES])
AT_KEYWORDS([backcomp runmisc])

AT_DATA([prog.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 15 2024 16:57:49 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 15 2024 16:57:49"
#define  COB_MODULE_DATE		20240415
#define  COB_MODULE_TIME		165749

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 15 2024 16:57:49 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x21,   0,   0, 0x1000, NULL};

static const cob_field_attr cob_all_attr = {0x22, 0, 0, 0, NULL};


/* Constants */
static const cob_field c_1	= {25, (cob_u8_ptr)"Should be '   1' but is '", &a_2};
static const cob_field c_2	= {1, (cob_u8_ptr)"'", &a_2};

static cob_field cob_all_space	= {1, (cob_u8_ptr)" ", &cob_all_attr};
static cob_field cob_all_zero	= {1, (cob_u8_ptr)"0", &cob_all_attr};

/* Function prototypes */

static int		prog ();
static int		prog_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 15 2024 16:57:49 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[4] __attribute__((aligned));	/* X */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_6	= {4, b_6, &a_1};	/* X */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 7         : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 7         : INSPECT            : prog.cob */
  cob_inspect_init (&f_6, 1);
  cob_inspect_start ();
  cob_inspect_leading (&cob_all_space, &cob_all_zero);
  cob_inspect_finish ();

  /* Line: 8         : IF                 : prog.cob */
  if (((int)memcmp (b_6, (cob_u8_ptr)"   1", 4) != 0))
  {

    /* Line: 9         : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_1, &f_6, &c_2);
  }

  /* Line: 10        : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memcpy (b_6, "0001", 4);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'prog' */

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP

AT_SETUP([INSPECT: no repeat conversion])
AT_KEYWORDS([backcomp runmisc INSPECT])

AT_DATA([prog.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 15 2024 16:59:17 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 15 2024 16:59:17"
#define  COB_MODULE_DATE		20240415
#define  COB_MODULE_TIME		165917

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 15 2024 16:59:17 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x21,   0,   0, 0x1000, NULL};


/* Constants */
static const cob_field c_1	= {3, (cob_u8_ptr)"ABC", &a_2};
static const cob_field c_2	= {3, (cob_u8_ptr)"BCD", &a_2};
static const cob_field c_3	= {3, (cob_u8_ptr)"X: ", &a_2};
static const cob_field c_4	= {3, (cob_u8_ptr)"Y: ", &a_2};

/* Function prototypes */

static int		prog ();
static int		prog_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 15 2024 16:59:17 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[3] __attribute__((aligned));	/* X */
	static cob_u8_t	b_7[6] __attribute__((aligned));	/* Y */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_6	= {3, b_6, &a_1};	/* X */
	static cob_field f_7	= {6, b_7, &a_1};	/* Y */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 8         : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 8         : INSPECT            : prog.cob */
  cob_inspect_init (&f_6, 0);
  cob_inspect_start ();
  cob_inspect_converting ((cob_field *)&c_1, (cob_field *)&c_2);
  cob_inspect_finish ();

  /* Line: 9         : IF                 : prog.cob */
  if (((int)memcmp (b_6, (cob_u8_ptr)"CDB", 3) != 0))
  {

    /* Line: 10        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_3, &f_6);
  }

  /* Line: 11        : INSPECT            : prog.cob */
  cob_inspect_init (&f_7, 0);
  cob_inspect_start ();
  cob_inspect_converting ((cob_field *)&c_1, (cob_field *)&c_2);
  cob_inspect_finish ();

  /* Line: 12        : IF                 : prog.cob */
  if (((int)memcmp (b_7, (cob_u8_ptr)"   CDB", 6) != 0))
  {

    /* Line: 13        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_4, &f_7);
  }

  /* Line: 14        : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memcpy (b_6, "BCA", 3);
  memcpy (b_7, "   BCA", 6);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'prog' */

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP

AT_SETUP([TRANSFORM statement])
AT_KEYWORDS([backcomp runmisc CONVERTING ALPHABET])

AT_DATA([prog.c], [[
/* Generated by           cobc 3.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 17 2024 11:48:41 */
/* GnuCOBOL build date    Apr 17 2024 11:34:39 */
/* GnuCOBOL package date  Jul 28 2023 17:02:56 UTC */
/* Compile command        /opt/gnucobol/gnucobol-3.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h> /* for memcpy, memcmp and friends */
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"3.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 17 2024 11:48:41"
#define  COB_MODULE_DATE		20240417
#define  COB_MODULE_TIME		114841

/* Global variables */
/* Generated by           cobc 3.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 17 2024 11:48:41 */
/* GnuCOBOL build date    Apr 17 2024 11:34:39 */
/* GnuCOBOL package date  Jul 28 2023 17:02:56 UTC */
/* Compile command        /opt/gnucobol/gnucobol-3.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x21,   0,   0, 0x1000, NULL};


/* Constants */
static const cob_field c_1	= {3, (cob_u8_ptr)"ABC", &a_2};
static const cob_field c_2	= {3, (cob_u8_ptr)"BCD", &a_2};
static const cob_field c_3	= {3, (cob_u8_ptr)"CDB", &a_2};
static const cob_field c_4	= {3, (cob_u8_ptr)"X: ", &a_2};


/* NATIVE table */
static const unsigned char	cob_native[256] = {
	0000, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
	0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
	0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
	0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
	0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
	0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
	0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
	0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
	0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
	0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
	0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
	0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
	0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
	0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
	0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
	0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,
	0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
	0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
	0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
	0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,
	0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
	0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,
	0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
	0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
	0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
};
static cob_field f_native = { 256, (cob_u8_ptr)cob_native, &a_1 };


/* ASCII to EBCDIC table */
static const unsigned char	cob_ascii_ebcdic[256] = {
	0000, 0x01, 0x02, 0x03, 0x37, 0x2d, 0x2e, 0x2f,
	0x16, 0x05, 0x25, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
	0x10, 0x11, 0x12, 0x13, 0x3c, 0x3d, 0x32, 0x26,
	0x18, 0x19, 0x3f, 0x27, 0x1c, 0x1d, 0x1e, 0x1f,
	0x40, 0x5a, 0x7f, 0x7b, 0x5b, 0x6c, 0x50, 0x7d,
	0x4d, 0x5d, 0x5c, 0x4e, 0x6b, 0x60, 0x4b, 0x61,
	0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
	0xf8, 0xf9, 0x7a, 0x5e, 0x4c, 0x7e, 0x6e, 0x6f,
	0x7c, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
	0xc8, 0xc9, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6,
	0xd7, 0xd8, 0xd9, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6,
	0xe7, 0xe8, 0xe9, 0xad, 0xe0, 0xbd, 0x5f, 0x6d,
	0x79, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
	0x88, 0x89, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96,
	0x97, 0x98, 0x99, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6,
	0xa7, 0xa8, 0xa9, 0xc0, 0x6a, 0xd0, 0xa1, 0x07,
	0x68, 0xdc, 0x51, 0x42, 0x43, 0x44, 0x47, 0x48,
	0x52, 0x53, 0x54, 0x57, 0x56, 0x58, 0x63, 0x67,
	0x71, 0x9c, 0x9e, 0xcb, 0xcc, 0xcd, 0xdb, 0xdd,
	0xdf, 0xec, 0xfc, 0xb0, 0xb1, 0xb2, 0x3e, 0xb4,
	0x45, 0x55, 0xce, 0xde, 0x49, 0x69, 0x9a, 0x9b,
	0xab, 0x9f, 0xba, 0xb8, 0xb7, 0xaa, 0x8a, 0x8b,
	0xb6, 0xb5, 0x62, 0x4f, 0x64, 0x65, 0x66, 0x20,
	0x21, 0x22, 0x70, 0x23, 0x72, 0x73, 0x74, 0xbe,
	0x76, 0x77, 0x78, 0x80, 0x24, 0x15, 0x8c, 0x8d,
	0x8e, 0x41, 0x06, 0x17, 0x28, 0x29, 0x9d, 0x2a,
	0x2b, 0x2c, 0x09, 0x0a, 0xac, 0x4a, 0xae, 0xaf,
	0x1b, 0x30, 0x31, 0xfa, 0x1a, 0x33, 0x34, 0x35,
	0x36, 0x59, 0x08, 0x38, 0xbc, 0x39, 0xa0, 0xbf,
	0xca, 0x3a, 0xfe, 0x3b, 0x04, 0xcf, 0xda, 0x14,
	0xe1, 0x8f, 0x46, 0x75, 0xfd, 0xeb, 0xee, 0xed,
	0x90, 0xef, 0xb3, 0xfb, 0xb9, 0xea, 0xbb, 0xff,
};
static cob_field f_ascii_ebcdic = { 256, (cob_u8_ptr)cob_ascii_ebcdic, &a_1 };



/* Function prototypes */

static int		prog ();
static int		prog_ (const int);
static void		prog_module_init (cob_module *module);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

static void gc_module_so_init () __attribute__ ((constructor));
static void gc_module_so_init ()
{
  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);
}

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 3.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 17 2024 11:48:41 */
	/* GnuCOBOL build date    Apr 17 2024 11:34:39 */
	/* GnuCOBOL package date  Jul 28 2023 17:02:56 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-3.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* LINKAGE SECTION (Items not referenced by USING clause) */
	static unsigned char	*b_9 = NULL;  /* XML-NAMESPACE */
	static unsigned char	*b_10 = NULL;  /* XML-NAMESPACE-PREFIX */
	static unsigned char	*b_11 = NULL;  /* XML-NNAMESPACE */
	static unsigned char	*b_12 = NULL;  /* XML-NNAMESPACE-PREFIX */
	static unsigned char	*b_13 = NULL;  /* XML-NTEXT */
	static unsigned char	*b_14 = NULL;  /* XML-TEXT */
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_17[3] __attribute__((aligned));	/* X */
	
	/* End of local data storage */
	
	
	/* Fields (local) */
	static cob_field f_17	= {3, b_17, &a_1};	/* X */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -10)
  		goto P_dump;
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 15        : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 15        : TRANSFORM          : prog.cob */
  cob_inspect_init_converting (&f_17);
  cob_inspect_start ();
  cob_inspect_converting ((cob_field *)&c_1, (cob_field *)&c_2);

  /* Line: 16        : IF                 : prog.cob */
  if (((int)cob_cmp (&f_17, (cob_field *)&c_3) != 0))
  {

    /* Line: 17        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_4, &f_17);
  }

  /* Line: 19        : TRANSFORM          : prog.cob */
  cob_inspect_init_converting (&f_17);
  cob_inspect_start ();
  cob_inspect_converting (&f_native, &f_ascii_ebcdic);

  /* Line: 21        : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
  P_cgerror:
  	cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  prog_module_init (module);

  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->xml_code = NULL;
  module->xml_event = NULL;
  module->xml_information = NULL;
  module->xml_namespace = NULL;
  module->xml_namespace_prefix = NULL;
  module->xml_nnamespace = NULL;
  module->xml_nnamespace_prefix = NULL;
  module->xml_ntext = NULL;
  module->xml_text = NULL;
  module->json_code = NULL;
  module->json_status = NULL;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  /* initialize field RETURN-CODE */
  b_2 = 0;

  /* initialize field X */
  memcpy (b_17, "BCA", 3);


  if (0 == 1) goto P_cgerror;
  initialized = 1;
  goto P_ret_initialize;

  P_dump:
    return 0;


  /* CANCEL callback handling */
  P_cancel:

  if (!initialized)
  	return 0;
  if (module && module->module_active)
  	cob_fatal_error (COB_FERROR_CANCEL);

  initialized = 0;

  P_clear_decimal:
  return 0;

}

/* End PROGRAM-ID 'prog' */

/* Initialize module structure for prog */
static void prog_module_init (cob_module *module)
{
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->gc_version = COB_PACKAGE_VERSION;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;
  module->flag_debug_trace = 0;
  module->flag_dump_ready = 0;
  module->xml_mode = 1;
  module->module_stmt = 0;
  module->module_sources = NULL;
}

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP

AT_SETUP([INSPECT CONVERTING alphabet])
AT_KEYWORDS([backcomp runmisc ASCII EBCDIC])

AT_DATA([prog.c], [[
/* Generated by           cobc 3.1.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 17 2024 11:53:20 */
/* GnuCOBOL build date    Apr 17 2024 11:33:59 */
/* GnuCOBOL package date  Dec 23 2020 12:04:58 UTC */
/* Compile command        /opt/gnucobol/gnucobol-3.1/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"3.1.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 17 2024 11:53:20"
#define  COB_MODULE_DATE		20240417
#define  COB_MODULE_TIME		115320

/* Global variables */
/* Generated by           cobc 3.1.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 17 2024 11:53:20 */
/* GnuCOBOL build date    Apr 17 2024 11:33:59 */
/* GnuCOBOL package date  Dec 23 2020 12:04:58 UTC */
/* Compile command        /opt/gnucobol/gnucobol-3.1/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x21,   0,   0, 0x1000, NULL};


/* Constants */
static const cob_field c_1	= {12, (cob_u8_ptr)"Converted: \"", &a_2};
static const cob_field c_2	= {1, (cob_u8_ptr)"\"", &a_2};


/* ASCII to EBCDIC table */
static const unsigned char	cob_ascii_ebcdic[256] = {
	0x00, 0x01, 0x02, 0x03, 0x37, 0x2D, 0x2E, 0x2F,
	0x16, 0x05, 0x25, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x3C, 0x3D, 0x32, 0x26,
	0x18, 0x19, 0x3F, 0x27, 0x1C, 0x1D, 0x1E, 0x1F,
	0x40, 0x5A, 0x7F, 0x7B, 0x5B, 0x6C, 0x50, 0x7D,
	0x4D, 0x5D, 0x5C, 0x4E, 0x6B, 0x60, 0x4B, 0x61,
	0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
	0xF8, 0xF9, 0x7A, 0x5E, 0x4C, 0x7E, 0x6E, 0x6F,
	0x7C, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,
	0xC8, 0xC9, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6,
	0xD7, 0xD8, 0xD9, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6,
	0xE7, 0xE8, 0xE9, 0xAD, 0xE0, 0xBD, 0x5F, 0x6D,
	0x79, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
	0x88, 0x89, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96,
	0x97, 0x98, 0x99, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6,
	0xA7, 0xA8, 0xA9, 0xC0, 0x6A, 0xD0, 0xA1, 0x07,
	0x68, 0xDC, 0x51, 0x42, 0x43, 0x44, 0x47, 0x48,
	0x52, 0x53, 0x54, 0x57, 0x56, 0x58, 0x63, 0x67,
	0x71, 0x9C, 0x9E, 0xCB, 0xCC, 0xCD, 0xDB, 0xDD,
	0xDF, 0xEC, 0xFC, 0xB0, 0xB1, 0xB2, 0x3E, 0xB4,
	0x45, 0x55, 0xCE, 0xDE, 0x49, 0x69, 0x9A, 0x9B,
	0xAB, 0x9F, 0xBA, 0xB8, 0xB7, 0xAA, 0x8A, 0x8B,
	0xB6, 0xB5, 0x62, 0x4F, 0x64, 0x65, 0x66, 0x20,
	0x21, 0x22, 0x70, 0x23, 0x72, 0x73, 0x74, 0xBE,
	0x76, 0x77, 0x78, 0x80, 0x24, 0x15, 0x8C, 0x8D,
	0x8E, 0x41, 0x06, 0x17, 0x28, 0x29, 0x9D, 0x2A,
	0x2B, 0x2C, 0x09, 0x0A, 0xAC, 0x4A, 0xAE, 0xAF,
	0x1B, 0x30, 0x31, 0xFA, 0x1A, 0x33, 0x34, 0x35,
	0x36, 0x59, 0x08, 0x38, 0xBC, 0x39, 0xA0, 0xBF,
	0xCA, 0x3A, 0xFE, 0x3B, 0x04, 0xCF, 0xDA, 0x14,
	0xE1, 0x8F, 0x46, 0x75, 0xFD, 0xEB, 0xEE, 0xED,
	0x90, 0xEF, 0xB3, 0xFB, 0xB9, 0xEA, 0xBB, 0xFF
};
static cob_field f_ascii_ebcdic = { 256, (cob_u8_ptr)cob_ascii_ebcdic, &a_1 };


/* NATIVE table */
static const unsigned char	cob_native[256] = {
	0, 1, 2, 3, 4, 5, 6, 7,
	8, 9, 10, 11, 12, 13, 14, 15,
	16, 17, 18, 19, 20, 21, 22, 23,
	24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 87,
	88, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 141, 142, 143,
	144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 165, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175,
	176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 207,
	208, 209, 210, 211, 212, 213, 214, 215,
	216, 217, 218, 219, 220, 221, 222, 223,
	224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255
};
static cob_field f_native = { 256, (cob_u8_ptr)cob_native, &a_1 };



/* Function prototypes */

static int		charset ();
static int		charset_ (const int);
static void		charset_module_init (cob_module *module);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (charset ());
}

/* Functions */

/* PROGRAM-ID 'charset' */

/* ENTRY 'charset' */

static int
charset ()
{
  return charset_ (0);
}

static int
charset_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 3.1.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 17 2024 11:53:20 */
	/* GnuCOBOL build date    Apr 17 2024 11:33:59 */
	/* GnuCOBOL package date  Dec 23 2020 12:04:58 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-3.1/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'charset' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_8[10] __attribute__((aligned));	/* TESTHEX */
	
	/* End of local data storage */
	
	
	/* Fields (local) */
	static cob_field f_8	= {10, b_8, &a_1};	/* TESTHEX */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -10)
  		goto P_dump;
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 15        : Entry     charset                 : prog.cob */
  l_2:;

  /* Line: 16        : Paragraph sample-main             : prog.cob */

  /* Line: 18        : INSPECT            : prog.cob */
  cob_inspect_init (&f_8, 0);
  cob_inspect_start ();
  cob_inspect_converting (&f_ascii_ebcdic, &f_native);
  cob_inspect_finish ();

  /* Line: 19        : DISPLAY            : prog.cob */
  cob_display (0, 0, 3, &c_1, &f_8, &c_2);

  /* Line: 21        : GOBACK             : prog.cob */
  goto exit_program;

  /* Program exit */

  exit_program:

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
  P_cgerror:
  	cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  charset_module_init (module);

  module->crt_status = NULL;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memcpy (b_8, "\301{\326\362\360\361\370@jZ", 10);

  if (0 == 1) goto P_cgerror;
  initialized = 1;
  goto P_ret_initialize;

  P_dump:
    return 0;


  /* CANCEL callback handling */
  P_cancel:

  if (!initialized)
  	return 0;
  if (module && module->module_active)
  	cob_fatal_error (COB_FERROR_CANCEL);

  initialized = 0;

  P_clear_decimal:
  return 0;

}

/* End PROGRAM-ID 'charset' */

/* Initialize module structure for charset */
static void charset_module_init (cob_module *module)
{
  module->module_name = "charset";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())charset;
  module->module_cancel.funcptr = (void *(*)())charset_;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;
  module->flag_debug_trace = 0;
  module->flag_dump_ready = 0;
  module->module_stmt = 0;
  module->module_sources = NULL;
}

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[Converted: "A#O2018 |!"], [])

AT_DATA([prog.c], [[
/* Generated by           cobc 3.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 17 2024 12:01:07 */
/* GnuCOBOL build date    Apr 17 2024 11:34:39 */
/* GnuCOBOL package date  Jul 28 2023 17:02:56 UTC */
/* Compile command        /opt/gnucobol/gnucobol-3.2/bin/cobc -Cx -febcdic-table=ebcdic500_ascii7bit -fno-computed-goto prog.cob */

#include <string.h> /* for memcpy, memcmp and friends */
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"3.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 17 2024 12:01:07"
#define  COB_MODULE_DATE		20240417
#define  COB_MODULE_TIME		120107

/* Global variables */
/* Generated by           cobc 3.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 17 2024 12:01:07 */
/* GnuCOBOL build date    Apr 17 2024 11:34:39 */
/* GnuCOBOL package date  Jul 28 2023 17:02:56 UTC */
/* Compile command        /opt/gnucobol/gnucobol-3.2/bin/cobc -Cx -febcdic-table=ebcdic500_ascii7bit -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x21,   0,   0, 0x1000, NULL};


/* Constants */
static const cob_field c_1	= {12, (cob_u8_ptr)"Converted: \"", &a_2};
static const cob_field c_2	= {1, (cob_u8_ptr)"\"", &a_2};


/* NATIVE table */
static const unsigned char	cob_native[256] = {
	0000, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
	0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
	0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
	0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
	0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
	0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
	0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
	0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
	0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
	0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
	0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
	0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
	0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
	0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
	0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
	0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,
	0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
	0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
	0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
	0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,
	0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
	0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,
	0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
	0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
	0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
};
static cob_field f_native = { 256, (cob_u8_ptr)cob_native, &a_1 };


/* ASCII to EBCDIC table */
static const unsigned char	cob_ascii_ebcdic[256] = {
	0000, 0x01, 0x02, 0x03, 0x37, 0x2d, 0x2e, 0x2f,
	0x16, 0x05, 0x25, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
	0x10, 0x11, 0x12, 0x13, 0x3c, 0x3d, 0x32, 0x26,
	0x18, 0x19, 0x3f, 0x27, 0x1c, 0x1d, 0x1e, 0x1f,
	0x40, 0x4f, 0x7f, 0x7b, 0x5b, 0x6c, 0x50, 0x7d,
	0x4d, 0x5d, 0x5c, 0x4e, 0x6b, 0x60, 0x4b, 0x61,
	0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
	0xf8, 0xf9, 0x7a, 0x5e, 0x4c, 0x7e, 0x6e, 0x6f,
	0x7c, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
	0xc8, 0xc9, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6,
	0xd7, 0xd8, 0xd9, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6,
	0xe7, 0xe8, 0xe9, 0x4a, 0xe0, 0x5a, 0x5f, 0x6d,
	0x79, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
	0x88, 0x89, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96,
	0x97, 0x98, 0x99, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6,
	0xa7, 0xa8, 0xa9, 0xc0, 0x6a, 0xd0, 0xa1, 0x07,
	0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f,
	0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f,
	0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f,
	0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f,
	0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f,
	0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f,
	0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f,
	0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f,
	0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f,
	0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f,
	0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f,
	0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f,
	0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f,
	0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f,
	0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f,
	0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f,
};
static cob_field f_ascii_ebcdic = { 256, (cob_u8_ptr)cob_ascii_ebcdic, &a_1 };



/* Function prototypes */

static int		charset ();
static int		charset_ (const int);
static void		charset_module_init (cob_module *module);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (charset ());
}

/* Functions */

static void gc_module_so_init () __attribute__ ((constructor));
static void gc_module_so_init ()
{
  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);
}

/* PROGRAM-ID 'charset' */

/* ENTRY 'charset' */

static int
charset ()
{
  return charset_ (0);
}

static int
charset_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 3.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 17 2024 12:01:07 */
	/* GnuCOBOL build date    Apr 17 2024 11:34:39 */
	/* GnuCOBOL package date  Jul 28 2023 17:02:56 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-3.2/bin/cobc -Cx -febcdic-table=ebcdic500_ascii7bit -fno-computed-goto prog.cob */
	
	/* Program local variables for 'charset' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* LINKAGE SECTION (Items not referenced by USING clause) */
	static unsigned char	*b_9 = NULL;  /* XML-NAMESPACE */
	static unsigned char	*b_10 = NULL;  /* XML-NAMESPACE-PREFIX */
	static unsigned char	*b_11 = NULL;  /* XML-NNAMESPACE */
	static unsigned char	*b_12 = NULL;  /* XML-NNAMESPACE-PREFIX */
	static unsigned char	*b_13 = NULL;  /* XML-NTEXT */
	static unsigned char	*b_14 = NULL;  /* XML-TEXT */
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_17[10] __attribute__((aligned));	/* TESTHEX */
	
	/* End of local data storage */
	
	
	/* Fields (local) */
	static cob_field f_17	= {10, b_17, &a_1};	/* TESTHEX */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -10)
  		goto P_dump;
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 16        : Entry     charset                 : prog.cob */
  l_2:;

  /* Line: 16        : Paragraph sample-main             : prog.cob */

  /* Line: 18        : INSPECT            : prog.cob */
  cob_inspect_init_converting (&f_17);
  cob_inspect_start ();
  cob_inspect_converting (&f_ascii_ebcdic, &f_native);

  /* Line: 19        : DISPLAY            : prog.cob */
  cob_display (0, 0, 3, &c_1, &f_17, &c_2);

  /* Line: 21        : GOBACK             : prog.cob */
  goto exit_program;

  /* Program exit */

  exit_program:

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
  P_cgerror:
  	cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  charset_module_init (module);

  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->xml_code = NULL;
  module->xml_event = NULL;
  module->xml_information = NULL;
  module->xml_namespace = NULL;
  module->xml_namespace_prefix = NULL;
  module->xml_nnamespace = NULL;
  module->xml_nnamespace_prefix = NULL;
  module->xml_ntext = NULL;
  module->xml_text = NULL;
  module->json_code = NULL;
  module->json_status = NULL;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  /* initialize field RETURN-CODE */
  b_2 = 0;

  /* initialize field TESTHEX */
  memcpy (b_17, "\301{\326\362\360\361\370@jZ", 10);


  if (0 == 1) goto P_cgerror;
  initialized = 1;
  goto P_ret_initialize;

  P_dump:
    return 0;


  /* CANCEL callback handling */
  P_cancel:

  if (!initialized)
  	return 0;
  if (module && module->module_active)
  	cob_fatal_error (COB_FERROR_CANCEL);

  initialized = 0;

  P_clear_decimal:
  return 0;

}

/* End PROGRAM-ID 'charset' */

/* Initialize module structure for charset */
static void charset_module_init (cob_module *module)
{
  module->module_name = "charset";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->gc_version = COB_PACKAGE_VERSION;
  module->module_entry.funcptr = (void *(*)())charset;
  module->module_cancel.funcptr = (void *(*)())charset_;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;
  module->flag_debug_trace = 0;
  module->flag_dump_ready = 0;
  module->xml_mode = 1;
  module->module_stmt = 0;
  module->module_sources = NULL;
}

/* End functions */


]])

# For characters above IBM (with irregularities) and GCOS should match:
AT_CHECK([$COMPILE prog.c -febcdic-table=ebcdic500_ascii7bit -o prog-ibm], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog-ibm], [0],
[Converted: "A#O2018 |@:>@"], []) # prefix is actually "|]" (escaped for m4 preproc)

AT_DATA([prog.c], [[
/* Generated by           cobc 3.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 17 2024 12:03:28 */
/* GnuCOBOL build date    Apr 17 2024 11:34:39 */
/* GnuCOBOL package date  Jul 28 2023 17:02:56 UTC */
/* Compile command        /opt/gnucobol/gnucobol-3.2/bin/cobc -Cx -febcdic-table=ebcdic500_ascii8bit -fno-computed-goto prog.cob */

#include <string.h> /* for memcpy, memcmp and friends */
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"3.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 17 2024 12:03:28"
#define  COB_MODULE_DATE		20240417
#define  COB_MODULE_TIME		120328

/* Global variables */
/* Generated by           cobc 3.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 17 2024 12:03:28 */
/* GnuCOBOL build date    Apr 17 2024 11:34:39 */
/* GnuCOBOL package date  Jul 28 2023 17:02:56 UTC */
/* Compile command        /opt/gnucobol/gnucobol-3.2/bin/cobc -Cx -febcdic-table=ebcdic500_ascii8bit -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x21,   0,   0, 0x1000, NULL};


/* Constants */
static const cob_field c_1	= {12, (cob_u8_ptr)"Converted: \"", &a_2};
static const cob_field c_2	= {1, (cob_u8_ptr)"\"", &a_2};


/* NATIVE table */
static const unsigned char	cob_native[256] = {
	0000, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
	0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
	0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
	0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
	0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
	0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
	0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
	0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
	0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
	0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
	0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
	0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
	0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
	0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
	0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
	0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,
	0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
	0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
	0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
	0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,
	0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
	0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,
	0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
	0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
	0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
};
static cob_field f_native = { 256, (cob_u8_ptr)cob_native, &a_1 };


/* ASCII to EBCDIC table */
static const unsigned char	cob_ascii_ebcdic[256] = {
	0000, 0x01, 0x02, 0x03, 0x37, 0x2d, 0x2e, 0x2f,
	0x16, 0x05, 0x25, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
	0x10, 0x11, 0x12, 0x13, 0x3c, 0x3d, 0x32, 0x26,
	0x18, 0x19, 0x3f, 0x27, 0x1c, 0x1d, 0x1e, 0x1f,
	0x40, 0x4f, 0x7f, 0x7b, 0x5b, 0x6c, 0x50, 0x7d,
	0x4d, 0x5d, 0x5c, 0x4e, 0x6b, 0x60, 0x4b, 0x61,
	0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
	0xf8, 0xf9, 0x7a, 0x5e, 0x4c, 0x7e, 0x6e, 0x6f,
	0x7c, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
	0xc8, 0xc9, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6,
	0xd7, 0xd8, 0xd9, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6,
	0xe7, 0xe8, 0xe9, 0x4a, 0xe0, 0x5a, 0x5f, 0x6d,
	0x79, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
	0x88, 0x89, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96,
	0x97, 0x98, 0x99, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6,
	0xa7, 0xa8, 0xa9, 0xc0, 0x6a, 0xd0, 0xa1, 0x07,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x15, 0x06, 0x17,
	0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x09, 0x0a, 0x1b,
	0x30, 0x31, 0x1a, 0x33, 0x34, 0x35, 0x36, 0x08,
	0x38, 0x39, 0x3a, 0x3b, 0x04, 0x14, 0x3e, 0xe1,
	0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
	0x49, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
	0x58, 0x59, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
	0x68, 0x69, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75,
	0x76, 0x77, 0x78, 0x80, 0x8a, 0x8b, 0x8c, 0x8d,
	0x8e, 0x8f, 0x90, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e,
	0x9f, 0xa0, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
	0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,
	0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
	0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xda, 0xdb,
	0xdc, 0xdd, 0xde, 0xdf, 0xea, 0xeb, 0xec, 0xed,
	0xee, 0xef, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
};
static cob_field f_ascii_ebcdic = { 256, (cob_u8_ptr)cob_ascii_ebcdic, &a_1 };



/* Function prototypes */

static int		charset ();
static int		charset_ (const int);
static void		charset_module_init (cob_module *module);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (charset ());
}

/* Functions */

static void gc_module_so_init () __attribute__ ((constructor));
static void gc_module_so_init ()
{
  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);
}

/* PROGRAM-ID 'charset' */

/* ENTRY 'charset' */

static int
charset ()
{
  return charset_ (0);
}

static int
charset_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 3.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 17 2024 12:03:28 */
	/* GnuCOBOL build date    Apr 17 2024 11:34:39 */
	/* GnuCOBOL package date  Jul 28 2023 17:02:56 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-3.2/bin/cobc -Cx -febcdic-table=ebcdic500_ascii8bit -fno-computed-goto prog.cob */
	
	/* Program local variables for 'charset' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* LINKAGE SECTION (Items not referenced by USING clause) */
	static unsigned char	*b_9 = NULL;  /* XML-NAMESPACE */
	static unsigned char	*b_10 = NULL;  /* XML-NAMESPACE-PREFIX */
	static unsigned char	*b_11 = NULL;  /* XML-NNAMESPACE */
	static unsigned char	*b_12 = NULL;  /* XML-NNAMESPACE-PREFIX */
	static unsigned char	*b_13 = NULL;  /* XML-NTEXT */
	static unsigned char	*b_14 = NULL;  /* XML-TEXT */
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_17[10] __attribute__((aligned));	/* TESTHEX */
	
	/* End of local data storage */
	
	
	/* Fields (local) */
	static cob_field f_17	= {10, b_17, &a_1};	/* TESTHEX */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -10)
  		goto P_dump;
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 16        : Entry     charset                 : prog.cob */
  l_2:;

  /* Line: 16        : Paragraph sample-main             : prog.cob */

  /* Line: 18        : INSPECT            : prog.cob */
  cob_inspect_init_converting (&f_17);
  cob_inspect_start ();
  cob_inspect_converting (&f_ascii_ebcdic, &f_native);

  /* Line: 19        : DISPLAY            : prog.cob */
  cob_display (0, 0, 3, &c_1, &f_17, &c_2);

  /* Line: 21        : GOBACK             : prog.cob */
  goto exit_program;

  /* Program exit */

  exit_program:

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
  P_cgerror:
  	cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  charset_module_init (module);

  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->xml_code = NULL;
  module->xml_event = NULL;
  module->xml_information = NULL;
  module->xml_namespace = NULL;
  module->xml_namespace_prefix = NULL;
  module->xml_nnamespace = NULL;
  module->xml_nnamespace_prefix = NULL;
  module->xml_ntext = NULL;
  module->xml_text = NULL;
  module->json_code = NULL;
  module->json_status = NULL;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  /* initialize field RETURN-CODE */
  b_2 = 0;

  /* initialize field TESTHEX */
  memcpy (b_17, "\301{\326\362\360\361\370@jZ", 10);


  if (0 == 1) goto P_cgerror;
  initialized = 1;
  goto P_ret_initialize;

  P_dump:
    return 0;


  /* CANCEL callback handling */
  P_cancel:

  if (!initialized)
  	return 0;
  if (module && module->module_active)
  	cob_fatal_error (COB_FERROR_CANCEL);

  initialized = 0;

  P_clear_decimal:
  return 0;

}

/* End PROGRAM-ID 'charset' */

/* Initialize module structure for charset */
static void charset_module_init (cob_module *module)
{
  module->module_name = "charset";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->gc_version = COB_PACKAGE_VERSION;
  module->module_entry.funcptr = (void *(*)())charset;
  module->module_cancel.funcptr = (void *(*)())charset_;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;
  module->flag_debug_trace = 0;
  module->flag_dump_ready = 0;
  module->xml_mode = 1;
  module->module_stmt = 0;
  module->module_sources = NULL;
}

/* End functions */


]])

AT_CHECK([$COMPILE prog.c -febcdic-table=ebcdic500_ascii8bit -o prog-gcos], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog-gcos], [0],
[Converted: "A#O2018 |@:>@"], []) # prefix is actually "|]" (escaped for m4 preproc)

AT_CLEANUP


AT_SETUP([INSPECT CONVERTING TO figurative constant])
AT_KEYWORDS([backcomp runmisc])

AT_DATA([prog.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 10:57:28 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 23 2024 10:57:28"
#define  COB_MODULE_DATE		20240423
#define  COB_MODULE_TIME		105728

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 10:57:28 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x21,   0,   0, 0x1000, NULL};

static const cob_field_attr cob_all_attr = {0x22, 0, 0, 0, NULL};


/* Constants */
static const cob_field c_1	= {3, (cob_u8_ptr)"ABC", &a_2};

static cob_field cob_all_space	= {1, (cob_u8_ptr)" ", &cob_all_attr};

/* Function prototypes */

static int		prog ();
static int		prog_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 23 2024 10:57:28 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[3] __attribute__((aligned));	/* X */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_6	= {3, b_6, &a_1};	/* X */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 7         : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 7         : INSPECT            : prog.cob */
  cob_inspect_init (&f_6, 0);
  cob_inspect_start ();
  cob_inspect_converting ((cob_field *)&c_1, &cob_all_space);
  cob_inspect_finish ();

  /* Line: 8         : IF                 : prog.cob */
  if (((int)cob_cmp (&f_6, &cob_all_space) != 0))
  {

    /* Line: 9         : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &f_6);
  }

  /* Line: 10        : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memcpy (b_6, "BCA", 3);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'prog' */

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([INSPECT CONVERTING NULL])
AT_KEYWORDS([backcomp runmisc])

AT_DATA([prog.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:02:55 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 23 2024 11:02:55"
#define  COB_MODULE_DATE		20240423
#define  COB_MODULE_TIME		110255

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:02:55 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x21,   0,   0, 0x1000, NULL};


/* Constants */
static const cob_field c_1	= {1, (cob_u8_ptr)"A", &a_2};

/* Function prototypes */

static int		prog ();
static int		prog_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 23 2024 11:02:55 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[3] __attribute__((aligned));	/* X */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_6	= {3, b_6, &a_1};	/* X */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 7         : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 7         : INSPECT            : prog.cob */
  cob_inspect_init (&f_6, 0);
  cob_inspect_start ();
  cob_inspect_converting (0, (cob_field *)&c_1);
  cob_inspect_finish ();

  /* Line: 8         : IF                 : prog.cob */
  if (((int)memcmp (b_6, (cob_u8_ptr)"AAA", 3) != 0))
  {

    /* Line: 9         : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &f_6);
  }

  /* Line: 10        : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memset (b_6, 0, 3);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'prog' */

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([INSPECT CONVERTING TO NULL])
AT_KEYWORDS([backcomp runmisc])

AT_DATA([prog.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:04:28 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 23 2024 11:04:28"
#define  COB_MODULE_DATE		20240423
#define  COB_MODULE_TIME		110428

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:04:28 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x21,   0,   0, 0x1000, NULL};

static const cob_field_attr cob_all_attr = {0x22, 0, 0, 0, NULL};


/* Constants */
static const cob_field c_1	= {1, (cob_u8_ptr)"A", &a_2};
static const cob_field c_2	= {2, (cob_u8_ptr)"NG", &a_2};

static cob_field cob_all_low	= {1, (cob_u8_ptr)"\0", &cob_all_attr};

/* Function prototypes */

static int		prog ();
static int		prog_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 23 2024 11:04:28 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[3] __attribute__((aligned));	/* X */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_6	= {3, b_6, &a_1};	/* X */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 7         : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 7         : INSPECT            : prog.cob */
  cob_inspect_init (&f_6, 0);
  cob_inspect_start ();
  cob_inspect_converting ((cob_field *)&c_1, 0);
  cob_inspect_finish ();

  /* Line: 8         : IF                 : prog.cob */
  if (((int)cob_cmp (&f_6, &cob_all_low) != 0))
  {

    /* Line: 9         : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &c_2);
  }

  /* Line: 10        : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memset (b_6, 65, 3);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'prog' */

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([INSPECT CONVERTING complex])
AT_KEYWORDS([backcomp runmisc])

AT_DATA([prog.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:06:22 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 23 2024 11:06:22"
#define  COB_MODULE_DATE		20240423
#define  COB_MODULE_TIME		110622

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:06:22 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x21,   0,   0, 0x1000, NULL};

static const cob_field_attr cob_all_attr = {0x22, 0, 0, 0, NULL};


/* Constants */
static const cob_field c_1	= {4, (cob_u8_ptr)"ABZC", &a_2};
static const cob_field c_2	= {4, (cob_u8_ptr)"ZY0X", &a_2};
static const cob_field c_3	= {4, (cob_u8_ptr)"1 - ", &a_2};
static const cob_field c_4	= {1, (cob_u8_ptr)"E", &a_2};
static const cob_field c_5	= {1, (cob_u8_ptr)"D", &a_2};
static const cob_field c_6	= {2, (cob_u8_ptr)"XD", &a_2};
static const cob_field c_7	= {4, (cob_u8_ptr)"2 - ", &a_2};

static cob_field cob_all_space	= {1, (cob_u8_ptr)" ", &cob_all_attr};

/* Function prototypes */

static int		prog ();
static int		prog_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 23 2024 11:06:22 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[12] __attribute__((aligned));	/* X */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_6	= {12, b_6, &a_1};	/* X */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 7         : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 7         : INSPECT            : prog.cob */
  cob_inspect_init (&f_6, 0);
  cob_inspect_start ();
  cob_inspect_converting ((cob_field *)&c_1, (cob_field *)&c_2);
  cob_inspect_finish ();

  /* Line: 8         : IF                 : prog.cob */
  if (((int)memcmp (b_6, (cob_u8_ptr)"Z0ZYYXDXXEXX", 12) != 0))
  {

    /* Line: 9         : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_3, &f_6);

    /* Line: 10        : MOVE               : prog.cob */
    memcpy (b_6, "Z0ZYYXDXXEXX", 12);
  }

  /* Line: 12        : INSPECT            : prog.cob */
  cob_inspect_init (&f_6, 0);
  cob_inspect_start ();
  cob_inspect_before ((cob_field *)&c_4);
  cob_inspect_after ((cob_field *)&c_5);
  cob_inspect_converting ((cob_field *)&c_6, &cob_all_space);
  cob_inspect_finish ();

  /* Line: 14        : IF                 : prog.cob */
  if (((int)memcmp (b_6, (cob_u8_ptr)"Z0ZYYXD  EXX", 12) != 0))
  {

    /* Line: 15        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_7, &f_6);

    /* Line: 16        : MOVE               : prog.cob */
    memcpy (b_6, "Z0ZYYXD  EXX", 12);
  }

  /* Line: 18        : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memcpy (b_6, "AZABBCDCCECC", 12);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'prog' */

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CLEANUP


AT_SETUP([INSPECT numeric signed])
AT_KEYWORDS([backcomp runmisc])

AT_DATA([prog.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 25 2024 14:21:56 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 25 2024 14:21:56"
#define  COB_MODULE_DATE		20240425
#define  COB_MODULE_TIME		142156

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 25 2024 14:21:56 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x10,   1,   0, 0x1000, NULL};
static const cob_field_attr a_2 =	{0x11,   9,   0, 0x0041, NULL};
static const cob_field_attr a_3 =	{0x10,   2,   0, 0x0007, NULL};
static const cob_field_attr a_4 =	{0x21,   0,   0, 0x1000, NULL};
static const cob_field_attr a_5 =	{0x10,   2,   0, 0x0003, NULL};
static const cob_field_attr a_6 =	{0x10,   2,   0, 0x0001, NULL};


/* Constants */
static const cob_field c_1	= {1, (cob_u8_ptr)"0", &a_1};
static const cob_field c_2	= {1, (cob_u8_ptr)"1", &a_4};
static const cob_field c_3	= {5, (cob_u8_ptr)"T1 - ", &a_4};
static const cob_field c_4	= {5, (cob_u8_ptr)"T2 - ", &a_4};
static const cob_field c_5	= {5, (cob_u8_ptr)"T3 - ", &a_4};
static const cob_field c_6	= {5, (cob_u8_ptr)"T4 - ", &a_4};
static const cob_field c_7	= {5, (cob_u8_ptr)"T5 - ", &a_4};
static const cob_field c_8	= {5, (cob_u8_ptr)"T6 - ", &a_4};
static const cob_field c_9	= {5, (cob_u8_ptr)"T7 - ", &a_4};
static const cob_field c_10	= {5, (cob_u8_ptr)"T8 - ", &a_4};
static const cob_field c_11	= {3, (cob_u8_ptr)"123", &a_4};
static const cob_field c_12	= {3, (cob_u8_ptr)"234", &a_4};
static const cob_field c_13	= {5, (cob_u8_ptr)"C1 - ", &a_4};
static const cob_field c_14	= {3, (cob_u8_ptr)"-22", &a_3};
static const cob_field c_15	= {5, (cob_u8_ptr)"C2 - ", &a_4};
static const cob_field c_16	= {3, (cob_u8_ptr)"+22", &a_3};
static const cob_field c_17	= {5, (cob_u8_ptr)"C3 - ", &a_4};
static const cob_field c_18	= {5, (cob_u8_ptr)"C4 - ", &a_4};
static const cob_field c_19	= {5, (cob_u8_ptr)"C5 - ", &a_4};
static const cob_field c_20	= {5, (cob_u8_ptr)"C6 - ", &a_4};
static const cob_field c_21	= {5, (cob_u8_ptr)"C7 - ", &a_4};
static const cob_field c_22	= {5, (cob_u8_ptr)"C8 - ", &a_4};
static const cob_field c_23	= {1, (cob_u8_ptr)"2", &a_4};
static const cob_field c_24	= {1, (cob_u8_ptr)"3", &a_4};
static const cob_field c_25	= {1, (cob_u8_ptr)"4", &a_4};
static const cob_field c_26	= {5, (cob_u8_ptr)"R1 - ", &a_4};
static const cob_field c_27	= {3, (cob_u8_ptr)"-33", &a_3};
static const cob_field c_28	= {5, (cob_u8_ptr)"R2 - ", &a_4};
static const cob_field c_29	= {3, (cob_u8_ptr)"+33", &a_3};
static const cob_field c_30	= {5, (cob_u8_ptr)"R3 - ", &a_4};
static const cob_field c_31	= {5, (cob_u8_ptr)"R4 - ", &a_4};
static const cob_field c_32	= {5, (cob_u8_ptr)"R5 - ", &a_4};
static const cob_field c_33	= {5, (cob_u8_ptr)"R6 - ", &a_4};
static const cob_field c_34	= {5, (cob_u8_ptr)"R7 - ", &a_4};
static const cob_field c_35	= {5, (cob_u8_ptr)"R8 - ", &a_4};
static const cob_field c_36	= {3, (cob_u8_ptr)"-11", &a_3};
static const cob_field c_37	= {3, (cob_u8_ptr)"+11", &a_3};

/* Function prototypes */

static int		prog ();
static int		prog_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 25 2024 14:21:56 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[3] __attribute__((aligned));	/* SEPARATE1 */
	static cob_u8_t	b_7[3] __attribute__((aligned));	/* SEPARATE2 */
	static cob_u8_t	b_8[3] __attribute__((aligned));	/* TSEPARATE1 */
	static cob_u8_t	b_9[3] __attribute__((aligned));	/* TSEPARATE2 */
	static cob_u8_t	b_10[2] __attribute__((aligned));	/* NSEPARATE1 */
	static cob_u8_t	b_11[2] __attribute__((aligned));	/* NSEPARATE2 */
	static cob_u8_t	b_12[2] __attribute__((aligned));	/* TRAILING1 */
	static cob_u8_t	b_13[2] __attribute__((aligned));	/* TRAILING2 */
	static cob_u8_t	b_14[4] __attribute__((aligned));	/* CNT */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_6	= {3, b_6, &a_3};	/* SEPARATE1 */
	static cob_field f_7	= {3, b_7, &a_3};	/* SEPARATE2 */
	static cob_field f_8	= {3, b_8, &a_5};	/* TSEPARATE1 */
	static cob_field f_9	= {3, b_9, &a_5};	/* TSEPARATE2 */
	static cob_field f_10	= {2, b_10, &a_6};	/* NSEPARATE1 */
	static cob_field f_11	= {2, b_11, &a_6};	/* NSEPARATE2 */
	static cob_field f_12	= {2, b_12, &a_6};	/* TRAILING1 */
	static cob_field f_13	= {2, b_13, &a_6};	/* TRAILING2 */
	static cob_field f_14	= {4, b_14, &a_2};	/* CNT */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 15        : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 15        : MOVE               : prog.cob */
  cob_move ((cob_field *)&c_1, &f_14);

  /* Line: 16        : INSPECT            : prog.cob */
  cob_inspect_init (&f_6, 0);
  cob_inspect_start ();
  cob_inspect_all (&f_14, (cob_field *)&c_2);
  cob_inspect_finish ();

  /* Line: 17        : IF                 : prog.cob */
  if (cob_cmp_int (&f_14, 2) != 0)
  {

    /* Line: 18        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_3, &f_14);
  }

  /* Line: 19        : MOVE               : prog.cob */
  cob_move ((cob_field *)&c_1, &f_14);

  /* Line: 20        : INSPECT            : prog.cob */
  cob_inspect_init (&f_7, 0);
  cob_inspect_start ();
  cob_inspect_all (&f_14, (cob_field *)&c_2);
  cob_inspect_finish ();

  /* Line: 21        : IF                 : prog.cob */
  if (cob_cmp_int (&f_14, 2) != 0)
  {

    /* Line: 22        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_4, &f_14);
  }

  /* Line: 23        : MOVE               : prog.cob */
  cob_move ((cob_field *)&c_1, &f_14);

  /* Line: 24        : INSPECT            : prog.cob */
  cob_inspect_init (&f_8, 0);
  cob_inspect_start ();
  cob_inspect_all (&f_14, (cob_field *)&c_2);
  cob_inspect_finish ();

  /* Line: 25        : IF                 : prog.cob */
  if (cob_cmp_int (&f_14, 2) != 0)
  {

    /* Line: 26        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_5, &f_14);
  }

  /* Line: 27        : MOVE               : prog.cob */
  cob_move ((cob_field *)&c_1, &f_14);

  /* Line: 28        : INSPECT            : prog.cob */
  cob_inspect_init (&f_9, 0);
  cob_inspect_start ();
  cob_inspect_all (&f_14, (cob_field *)&c_2);
  cob_inspect_finish ();

  /* Line: 29        : IF                 : prog.cob */
  if (cob_cmp_int (&f_14, 2) != 0)
  {

    /* Line: 30        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_6, &f_14);
  }

  /* Line: 31        : MOVE               : prog.cob */
  cob_move ((cob_field *)&c_1, &f_14);

  /* Line: 32        : INSPECT            : prog.cob */
  cob_inspect_init (&f_10, 0);
  cob_inspect_start ();
  cob_inspect_all (&f_14, (cob_field *)&c_2);
  cob_inspect_finish ();

  /* Line: 33        : IF                 : prog.cob */
  if (cob_cmp_int (&f_14, 2) != 0)
  {

    /* Line: 34        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_7, &f_14);
  }

  /* Line: 35        : MOVE               : prog.cob */
  cob_move ((cob_field *)&c_1, &f_14);

  /* Line: 36        : INSPECT            : prog.cob */
  cob_inspect_init (&f_11, 0);
  cob_inspect_start ();
  cob_inspect_all (&f_14, (cob_field *)&c_2);
  cob_inspect_finish ();

  /* Line: 37        : IF                 : prog.cob */
  if (cob_cmp_int (&f_14, 2) != 0)
  {

    /* Line: 38        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_8, &f_14);
  }

  /* Line: 39        : MOVE               : prog.cob */
  cob_move ((cob_field *)&c_1, &f_14);

  /* Line: 40        : INSPECT            : prog.cob */
  cob_inspect_init (&f_12, 0);
  cob_inspect_start ();
  cob_inspect_all (&f_14, (cob_field *)&c_2);
  cob_inspect_finish ();

  /* Line: 41        : IF                 : prog.cob */
  if (cob_cmp_int (&f_14, 2) != 0)
  {

    /* Line: 42        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_9, &f_14);
  }

  /* Line: 43        : MOVE               : prog.cob */
  cob_move ((cob_field *)&c_1, &f_14);

  /* Line: 44        : INSPECT            : prog.cob */
  cob_inspect_init (&f_13, 0);
  cob_inspect_start ();
  cob_inspect_all (&f_14, (cob_field *)&c_2);
  cob_inspect_finish ();

  /* Line: 45        : IF                 : prog.cob */
  if (cob_cmp_int (&f_14, 2) != 0)
  {

    /* Line: 46        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_10, &f_14);
  }

  /* Line: 48        : INSPECT            : prog.cob */
  cob_inspect_init (&f_6, 0);
  cob_inspect_start ();
  cob_inspect_converting ((cob_field *)&c_11, (cob_field *)&c_12);
  cob_inspect_finish ();

  /* Line: 49        : IF                 : prog.cob */
  if (((int)cob_cmp_llint (&f_6, -22LL) != 0))
  {

    /* Line: 50        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_13, &f_6);

    /* Line: 51        : MOVE               : prog.cob */
    cob_move ((cob_field *)&c_14, &f_6);
  }

  /* Line: 52        : INSPECT            : prog.cob */
  cob_inspect_init (&f_7, 0);
  cob_inspect_start ();
  cob_inspect_converting ((cob_field *)&c_11, (cob_field *)&c_12);
  cob_inspect_finish ();

  /* Line: 53        : IF                 : prog.cob */
  if (((int)cob_cmp_llint (&f_7, 22LL) != 0))
  {

    /* Line: 54        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_15, &f_7);

    /* Line: 55        : MOVE               : prog.cob */
    cob_move ((cob_field *)&c_16, &f_7);
  }

  /* Line: 56        : INSPECT            : prog.cob */
  cob_inspect_init (&f_8, 0);
  cob_inspect_start ();
  cob_inspect_converting ((cob_field *)&c_11, (cob_field *)&c_12);
  cob_inspect_finish ();

  /* Line: 57        : IF                 : prog.cob */
  if (((int)cob_cmp_llint (&f_8, -22LL) != 0))
  {

    /* Line: 58        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_17, &f_8);

    /* Line: 59        : MOVE               : prog.cob */
    cob_move ((cob_field *)&c_14, &f_8);
  }

  /* Line: 60        : INSPECT            : prog.cob */
  cob_inspect_init (&f_9, 0);
  cob_inspect_start ();
  cob_inspect_converting ((cob_field *)&c_11, (cob_field *)&c_12);
  cob_inspect_finish ();

  /* Line: 61        : IF                 : prog.cob */
  if (((int)cob_cmp_llint (&f_9, 22LL) != 0))
  {

    /* Line: 62        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_18, &f_9);

    /* Line: 63        : MOVE               : prog.cob */
    cob_move ((cob_field *)&c_16, &f_9);
  }

  /* Line: 64        : INSPECT            : prog.cob */
  cob_inspect_init (&f_10, 0);
  cob_inspect_start ();
  cob_inspect_converting ((cob_field *)&c_11, (cob_field *)&c_12);
  cob_inspect_finish ();

  /* Line: 65        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_10, 2, -22LL, 1) != 0))
  {

    /* Line: 66        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_19, &f_10);

    /* Line: 67        : MOVE               : prog.cob */
    memcpy (b_10, "2r", 2);
  }

  /* Line: 68        : INSPECT            : prog.cob */
  cob_inspect_init (&f_11, 0);
  cob_inspect_start ();
  cob_inspect_converting ((cob_field *)&c_11, (cob_field *)&c_12);
  cob_inspect_finish ();

  /* Line: 69        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_11, 2, 22LL, 1) != 0))
  {

    /* Line: 70        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_20, &f_11);

    /* Line: 71        : MOVE               : prog.cob */
    memset (b_11, 50, 2);
  }

  /* Line: 72        : INSPECT            : prog.cob */
  cob_inspect_init (&f_12, 0);
  cob_inspect_start ();
  cob_inspect_converting ((cob_field *)&c_11, (cob_field *)&c_12);
  cob_inspect_finish ();

  /* Line: 73        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_12, 2, -22LL, 1) != 0))
  {

    /* Line: 74        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_21, &f_12);

    /* Line: 75        : MOVE               : prog.cob */
    memcpy (b_12, "2r", 2);
  }

  /* Line: 76        : INSPECT            : prog.cob */
  cob_inspect_init (&f_13, 0);
  cob_inspect_start ();
  cob_inspect_converting ((cob_field *)&c_11, (cob_field *)&c_12);
  cob_inspect_finish ();

  /* Line: 77        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_13, 2, 22LL, 1) != 0))
  {

    /* Line: 78        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_22, &f_13);

    /* Line: 79        : MOVE               : prog.cob */
    memset (b_13, 50, 2);
  }

  /* Line: 81        : INSPECT            : prog.cob */
  cob_inspect_init (&f_6, 1);
  cob_inspect_start ();
  cob_inspect_all ((cob_field *)&c_23, (cob_field *)&c_2);
  cob_inspect_start ();
  cob_inspect_all ((cob_field *)&c_24, (cob_field *)&c_23);
  cob_inspect_start ();
  cob_inspect_all ((cob_field *)&c_25, (cob_field *)&c_24);
  cob_inspect_finish ();

  /* Line: 84        : IF                 : prog.cob */
  if (((int)cob_cmp_llint (&f_6, -33LL) != 0))
  {

    /* Line: 85        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_26, &f_6);

    /* Line: 86        : MOVE               : prog.cob */
    cob_move ((cob_field *)&c_27, &f_6);
  }

  /* Line: 87        : INSPECT            : prog.cob */
  cob_inspect_init (&f_7, 1);
  cob_inspect_start ();
  cob_inspect_all ((cob_field *)&c_23, (cob_field *)&c_2);
  cob_inspect_start ();
  cob_inspect_all ((cob_field *)&c_24, (cob_field *)&c_23);
  cob_inspect_start ();
  cob_inspect_all ((cob_field *)&c_25, (cob_field *)&c_24);
  cob_inspect_finish ();

  /* Line: 90        : IF                 : prog.cob */
  if (((int)cob_cmp_llint (&f_7, 33LL) != 0))
  {

    /* Line: 91        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_28, &f_7);

    /* Line: 92        : MOVE               : prog.cob */
    cob_move ((cob_field *)&c_29, &f_7);
  }

  /* Line: 93        : INSPECT            : prog.cob */
  cob_inspect_init (&f_8, 1);
  cob_inspect_start ();
  cob_inspect_all ((cob_field *)&c_23, (cob_field *)&c_2);
  cob_inspect_start ();
  cob_inspect_all ((cob_field *)&c_24, (cob_field *)&c_23);
  cob_inspect_start ();
  cob_inspect_all ((cob_field *)&c_25, (cob_field *)&c_24);
  cob_inspect_finish ();

  /* Line: 96        : IF                 : prog.cob */
  if (((int)cob_cmp_llint (&f_8, -33LL) != 0))
  {

    /* Line: 97        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_30, &f_8);

    /* Line: 98        : MOVE               : prog.cob */
    cob_move ((cob_field *)&c_27, &f_8);
  }

  /* Line: 99        : INSPECT            : prog.cob */
  cob_inspect_init (&f_9, 1);
  cob_inspect_start ();
  cob_inspect_all ((cob_field *)&c_23, (cob_field *)&c_2);
  cob_inspect_start ();
  cob_inspect_all ((cob_field *)&c_24, (cob_field *)&c_23);
  cob_inspect_start ();
  cob_inspect_all ((cob_field *)&c_25, (cob_field *)&c_24);
  cob_inspect_finish ();

  /* Line: 102       : IF                 : prog.cob */
  if (((int)cob_cmp_llint (&f_9, 33LL) != 0))
  {

    /* Line: 103       : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_31, &f_9);

    /* Line: 104       : MOVE               : prog.cob */
    cob_move ((cob_field *)&c_29, &f_9);
  }

  /* Line: 105       : INSPECT            : prog.cob */
  cob_inspect_init (&f_10, 1);
  cob_inspect_start ();
  cob_inspect_all ((cob_field *)&c_23, (cob_field *)&c_2);
  cob_inspect_start ();
  cob_inspect_all ((cob_field *)&c_24, (cob_field *)&c_23);
  cob_inspect_start ();
  cob_inspect_all ((cob_field *)&c_25, (cob_field *)&c_24);
  cob_inspect_finish ();

  /* Line: 108       : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_10, 2, -33LL, 1) != 0))
  {

    /* Line: 109       : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_32, &f_10);

    /* Line: 110       : MOVE               : prog.cob */
    memcpy (b_10, "3s", 2);
  }

  /* Line: 111       : INSPECT            : prog.cob */
  cob_inspect_init (&f_11, 1);
  cob_inspect_start ();
  cob_inspect_all ((cob_field *)&c_23, (cob_field *)&c_2);
  cob_inspect_start ();
  cob_inspect_all ((cob_field *)&c_24, (cob_field *)&c_23);
  cob_inspect_start ();
  cob_inspect_all ((cob_field *)&c_25, (cob_field *)&c_24);
  cob_inspect_finish ();

  /* Line: 114       : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_11, 2, 33LL, 1) != 0))
  {

    /* Line: 115       : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_33, &f_11);

    /* Line: 116       : MOVE               : prog.cob */
    memset (b_11, 51, 2);
  }

  /* Line: 117       : INSPECT            : prog.cob */
  cob_inspect_init (&f_12, 1);
  cob_inspect_start ();
  cob_inspect_all ((cob_field *)&c_23, (cob_field *)&c_2);
  cob_inspect_start ();
  cob_inspect_all ((cob_field *)&c_24, (cob_field *)&c_23);
  cob_inspect_start ();
  cob_inspect_all ((cob_field *)&c_25, (cob_field *)&c_24);
  cob_inspect_finish ();

  /* Line: 120       : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_12, 2, -33LL, 1) != 0))
  {

    /* Line: 121       : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_34, &f_12);

    /* Line: 122       : MOVE               : prog.cob */
    memcpy (b_12, "3s", 2);
  }

  /* Line: 123       : INSPECT            : prog.cob */
  cob_inspect_init (&f_13, 1);
  cob_inspect_start ();
  cob_inspect_all ((cob_field *)&c_23, (cob_field *)&c_2);
  cob_inspect_start ();
  cob_inspect_all ((cob_field *)&c_24, (cob_field *)&c_23);
  cob_inspect_start ();
  cob_inspect_all ((cob_field *)&c_25, (cob_field *)&c_24);
  cob_inspect_finish ();

  /* Line: 126       : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_13, 2, 33LL, 1) != 0))
  {

    /* Line: 127       : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_35, &f_13);

    /* Line: 128       : MOVE               : prog.cob */
    memset (b_13, 51, 2);
  }

  /* Line: 130       : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  cob_move ((cob_field *)&c_36, &f_6);
  cob_move ((cob_field *)&c_37, &f_7);
  cob_move ((cob_field *)&c_36, &f_8);
  cob_move ((cob_field *)&c_37, &f_9);
  memcpy (b_10, "1q", 2);
  memset (b_11, 49, 2);
  memcpy (b_12, "1q", 2);
  memset (b_13, 49, 2);
  memset (b_14, 0, 4);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'prog' */

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CLEANUP


AT_SETUP([INSPECT TALLYING BEFORE])
AT_KEYWORDS([backcomp runmisc])

AT_DATA([prog.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:13:12 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 23 2024 11:13:12"
#define  COB_MODULE_DATE		20240423
#define  COB_MODULE_TIME		111312

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:13:12 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x21,   0,   0, 0x1000, NULL};
static const cob_field_attr a_3 =	{0x10,   3,   0, 0x0000, NULL};


/* Constants */
static const cob_field c_1	= {1, (cob_u8_ptr)" ", &a_2};
static const cob_field c_2	= {22, (cob_u8_ptr)"1: should be 3 but is ", &a_2};
static const cob_field c_3	= {22, (cob_u8_ptr)"2: should be 0 but is ", &a_2};

/* Function prototypes */

static int		prog ();
static int		prog_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 23 2024 11:13:12 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[4] __attribute__((aligned));	/* X */
	static cob_u8_t	b_7[3] __attribute__((aligned));	/* TAL */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_6	= {4, b_6, &a_1};	/* X */
	static cob_field f_7	= {3, b_7, &a_3};	/* TAL */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 8         : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 8         : MOVE               : prog.cob */
  memset (b_7, 48, 3);

  /* Line: 9         : INSPECT            : prog.cob */
  cob_inspect_init (&f_6, 0);
  cob_inspect_start ();
  cob_inspect_before ((cob_field *)&c_1);
  cob_inspect_characters (&f_7);
  cob_inspect_finish ();

  /* Line: 11        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_7, 3, 3LL, 0) != 0))
  {

    /* Line: 12        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_2, &f_7);
  }

  /* Line: 14        : MOVE               : prog.cob */
  memset (b_7, 48, 3);

  /* Line: 15        : MOVE               : prog.cob */
  memcpy (b_6, " ABC", 4);

  /* Line: 16        : INSPECT            : prog.cob */
  cob_inspect_init (&f_6, 0);
  cob_inspect_start ();
  cob_inspect_before ((cob_field *)&c_1);
  cob_inspect_characters (&f_7);
  cob_inspect_finish ();

  /* Line: 18        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_7, 3, 0LL, 0) != 0))
  {

    /* Line: 19        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_3, &f_7);
  }

  /* Line: 21        : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memcpy (b_6, "ABC ", 4);
  memset (b_7, 48, 3);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'prog' */

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([INSPECT TALLYING AFTER])
AT_KEYWORDS([backcomp runmisc])

AT_DATA([prog.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:14:34 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 23 2024 11:14:34"
#define  COB_MODULE_DATE		20240423
#define  COB_MODULE_TIME		111434

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:14:34 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x21,   0,   0, 0x1000, NULL};
static const cob_field_attr a_3 =	{0x10,   3,   0, 0x0000, NULL};


/* Constants */
static const cob_field c_1	= {1, (cob_u8_ptr)" ", &a_2};

/* Function prototypes */

static int		prog ();
static int		prog_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 23 2024 11:14:34 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[4] __attribute__((aligned));	/* X */
	static cob_u8_t	b_7[3] __attribute__((aligned));	/* TAL */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_6	= {4, b_6, &a_1};	/* X */
	static cob_field f_7	= {3, b_7, &a_3};	/* TAL */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 8         : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 8         : MOVE               : prog.cob */
  memset (b_7, 48, 3);

  /* Line: 9         : INSPECT            : prog.cob */
  cob_inspect_init (&f_6, 0);
  cob_inspect_start ();
  cob_inspect_after ((cob_field *)&c_1);
  cob_inspect_characters (&f_7);
  cob_inspect_finish ();

  /* Line: 11        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_7, 3, 0LL, 0) != 0))
  {

    /* Line: 12        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &f_7);
  }

  /* Line: 14        : MOVE               : prog.cob */
  memset (b_7, 48, 3);

  /* Line: 15        : MOVE               : prog.cob */
  memcpy (b_6, " ABC", 4);

  /* Line: 16        : INSPECT            : prog.cob */
  cob_inspect_init (&f_6, 0);
  cob_inspect_start ();
  cob_inspect_after ((cob_field *)&c_1);
  cob_inspect_characters (&f_7);
  cob_inspect_finish ();

  /* Line: 18        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_7, 3, 3LL, 0) != 0))
  {

    /* Line: 19        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &f_7);
  }

  /* Line: 21        : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memcpy (b_6, "ABC ", 4);
  memset (b_7, 48, 3);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'prog' */

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([INSPECT TALLYING BEFORE and AFTER])
AT_KEYWORDS([backcomp runmisc])

AT_DATA([prog.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:16:00 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 23 2024 11:16:00"
#define  COB_MODULE_DATE		20240423
#define  COB_MODULE_TIME		111600

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:16:00 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x21,   0,   0, 0x1000, NULL};
static const cob_field_attr a_3 =	{0x10,   3,   0, 0x0000, NULL};


/* Constants */
static const cob_field c_1	= {1, (cob_u8_ptr)" ", &a_2};
static const cob_field c_2	= {22, (cob_u8_ptr)"1: should be 0 but is ", &a_2};
static const cob_field c_3	= {1, (cob_u8_ptr)"<", &a_2};
static const cob_field c_4	= {2, (cob_u8_ptr)"</", &a_2};
static const cob_field c_5	= {22, (cob_u8_ptr)"2: should be 0 but is ", &a_2};

/* Function prototypes */

static int		prog ();
static int		prog_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 23 2024 11:16:00 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[4] __attribute__((aligned));	/* X */
	static cob_u8_t	b_7[3] __attribute__((aligned));	/* TAL */
	static cob_u8_t	b_8[256] __attribute__((aligned));	/* MSG */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_6	= {4, b_6, &a_1};	/* X */
	static cob_field f_7	= {3, b_7, &a_3};	/* TAL */
	static cob_field f_8	= {256, b_8, &a_1};	/* MSG */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 9         : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 9         : MOVE               : prog.cob */
  memset (b_7, 48, 3);

  /* Line: 10        : INSPECT            : prog.cob */
  cob_inspect_init (&f_6, 0);
  cob_inspect_start ();
  cob_inspect_before ((cob_field *)&c_1);
  cob_inspect_after ((cob_field *)&c_1);
  cob_inspect_characters (&f_7);
  cob_inspect_finish ();

  /* Line: 13        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_7, 3, 0LL, 0) != 0))
  {

    /* Line: 14        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_2, &f_7);
  }

  /* Line: 17        : MOVE               : prog.cob */
  memset (b_7, 48, 3);

  /* Line: 18        : INSPECT            : prog.cob */
  cob_inspect_init (&f_8, 0);
  cob_inspect_start ();
  cob_inspect_after ((cob_field *)&c_3);
  cob_inspect_before ((cob_field *)&c_4);
  cob_inspect_characters (&f_7);
  cob_inspect_finish ();

  /* Line: 21        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_7, 3, 0LL, 0) != 0))
  {

    /* Line: 22        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_5, &f_7);
  }

  /* Line: 24        : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memcpy (b_6, "ABC ", 4);
  memset (b_7, 48, 3);
  memset (b_8, 32, 256);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'prog' */

/* End functions */


]])
AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([INSPECT TALLYING REPLACING BEFORE and AFTER])
AT_KEYWORDS([backcomp runmisc])

AT_DATA([prog.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 25 2024 14:32:54 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 25 2024 14:32:54"
#define  COB_MODULE_DATE		20240425
#define  COB_MODULE_TIME		143254

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 25 2024 14:32:54 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x21,   0,   0, 0x1000, NULL};
static const cob_field_attr a_3 =	{0x11,   4,   0, 0x0820, NULL};
static const cob_field_attr a_4 =	{0x10,   3,   0, 0x1000, NULL};
static const cob_field_attr a_5 =	{0x10,   1,   0, 0x1000, NULL};


/* Constants */
static const cob_field c_1	= {1, (cob_u8_ptr)"H", &a_2};
static const cob_field c_2	= {1, (cob_u8_ptr)"B", &a_2};
static const cob_field c_3	= {1, (cob_u8_ptr)"F", &a_2};
static const cob_field c_4	= {1, (cob_u8_ptr)"Q", &a_2};
static const cob_field c_5	= {1, (cob_u8_ptr)"1", &a_2};
static const cob_field c_6	= {1, (cob_u8_ptr)"A", &a_2};
static const cob_field c_7	= {1, (cob_u8_ptr)"Y", &a_2};
static const cob_field c_8	= {1, (cob_u8_ptr)"2", &a_2};
static const cob_field c_9	= {8, (cob_u8_ptr)"Failed <", &a_2};
static const cob_field c_10	= {6, (cob_u8_ptr)"> != <", &a_2};
static const cob_field c_11	= {26, (cob_u8_ptr)"A22222111111111122222222YZ", &a_2};
static const cob_field c_12	= {1, (cob_u8_ptr)">", &a_2};
static const cob_field c_13	= {10, (cob_u8_ptr)"> != <107>", &a_2};
static const cob_field c_14	= {9, (cob_u8_ptr)"> != <19>", &a_2};
static const cob_field c_15	= {3, (cob_u8_ptr)"100", &a_4};
static const cob_field c_16	= {1, (cob_u8_ptr)"0", &a_5};

/* Function prototypes */

static int		prog ();
static int		prog_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 25 2024 14:32:54 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[26] __attribute__((aligned));	/* INSP-STRING */
	static cob_u8_t	b_8[2] __attribute__((aligned));	/* RES-IDX */
	static cob_u8_t	b_9[2] __attribute__((aligned));	/* RES-IDX-1 */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_6	= {26, b_6, &a_1};	/* INSP-STRING */
	static cob_field f_8	= {2, b_8, &a_3};	/* RES-IDX */
	static cob_field f_9	= {2, b_9, &a_3};	/* RES-IDX-1 */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 11        : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 11        : INSPECT            : prog.cob */
  cob_inspect_init (&f_6, 0);
  cob_inspect_start ();
  cob_inspect_before ((cob_field *)&c_1);
  cob_inspect_characters (&f_8);
  cob_inspect_start ();
  cob_inspect_after ((cob_field *)&c_2);
  cob_inspect_characters (&f_9);
  cob_inspect_finish ();
  cob_inspect_init (&f_6, 1);
  cob_inspect_start ();
  cob_inspect_after ((cob_field *)&c_3);
  cob_inspect_before ((cob_field *)&c_4);
  cob_inspect_characters ((cob_field *)&c_5);
  cob_inspect_start ();
  cob_inspect_after ((cob_field *)&c_6);
  cob_inspect_before ((cob_field *)&c_7);
  cob_inspect_characters ((cob_field *)&c_8);
  cob_inspect_finish ();

  /* Line: 18        : IF                 : prog.cob */
  if (((int)memcmp (b_6, (cob_u8_ptr)"A22222111111111122222222YZ", 26) != 0))
  {

    /* Line: 19        : DISPLAY            : prog.cob */
    cob_display (0, 1, 5, &c_9, &f_6, &c_10, &c_11, &c_12);
  }

  /* Line: 20        : IF                 : prog.cob */
  if (cob_cmp_int (&f_8, 107) != 0)
  {

    /* Line: 21        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_9, &f_8, &c_13);
  }

  /* Line: 22        : IF                 : prog.cob */
  if (cob_cmp_int (&f_9, 19) != 0)
  {

    /* Line: 23        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_9, &f_9, &c_14);
  }

  /* Line: 25        : GOBACK             : prog.cob */
  goto exit_program;

  /* Program exit */

  exit_program:

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memcpy (b_6, "ABCDEFGHIJKLMNOPQRSTUVWXYZ", 26);
  cob_move ((cob_field *)&c_15, &f_8);
  cob_move ((cob_field *)&c_16, &f_9);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'prog' */

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([INSPECT REPLACING figurative constant])
AT_KEYWORDS([backcomp runmisc])

AT_DATA([prog.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:17:41 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 23 2024 11:17:41"
#define  COB_MODULE_DATE		20240423
#define  COB_MODULE_TIME		111741

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:17:41 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x21,   0,   0, 0x1000, NULL};

static const cob_field_attr cob_all_attr = {0x22, 0, 0, 0, NULL};


/* Constants */
static const cob_field c_1	= {2, (cob_u8_ptr)"BC", &a_2};

static cob_field cob_all_space	= {1, (cob_u8_ptr)" ", &cob_all_attr};

/* Function prototypes */

static int		prog ();
static int		prog_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 23 2024 11:17:41 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[3] __attribute__((aligned));	/* X */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_6	= {3, b_6, &a_1};	/* X */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 7         : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 7         : INSPECT            : prog.cob */
  cob_inspect_init (&f_6, 1);
  cob_inspect_start ();
  cob_inspect_all (&cob_all_space, (cob_field *)&c_1);
  cob_inspect_finish ();

  /* Line: 8         : IF                 : prog.cob */
  if (((int)memcmp (b_6, (cob_u8_ptr)"  A", 3) != 0))
  {

    /* Line: 9         : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &f_6);
  }

  /* Line: 10        : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memcpy (b_6, "BCA", 3);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'prog' */

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([STRING with subscript reference])
AT_KEYWORDS([backcomp runmisc])

AT_DATA([prog.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:18:58 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 23 2024 11:18:58"
#define  COB_MODULE_DATE		20240423
#define  COB_MODULE_TIME		111858

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:18:58 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x21,   0,   0, 0x1000, NULL};


/* Constants */
static const cob_field c_1	= {3, (cob_u8_ptr)"abc", &a_2};

/* Function prototypes */

static int		prog ();
static int		prog_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 23 2024 11:18:58 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Local cob_field items */
	cob_field		f0;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[9] __attribute__((aligned));	/* G */
	
	/* End of data storage */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 8         : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 8         : MOVE               : prog.cob */
  memset (b_6, 32, 9);

  /* Line: 9         : STRING             : prog.cob */
  cob_string_init (COB_SET_FLD(f0, 3, b_6 + 3 * 1, &a_1), NULL);
  cob_string_delimited (NULL);
  cob_string_append ((cob_field *)&c_1);
  cob_string_finish ();

  /* Line: 11        : IF                 : prog.cob */
  if (((int)memcmp (b_6, (cob_u8_ptr)"   abc   ", 9) != 0))
  {

    /* Line: 12        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, COB_SET_FLD(f0, 3, b_6 + 3 * 0, &a_1));
  }

  /* Line: 14        : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memset (b_6, 32, 9);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'prog' */

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([STRING WITH POINTER ON OVERFLOW with DELIMITER])
AT_KEYWORDS([backcomp runmisc exceptions])

AT_DATA([prog.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:21:18 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 23 2024 11:21:18"
#define  COB_MODULE_DATE		20240423
#define  COB_MODULE_TIME		112118

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:21:18 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x10,   2,   0, 0x0000, NULL};
static const cob_field_attr a_3 =	{0x21,   0,   0, 0x1000, NULL};

static const cob_field_attr cob_all_attr = {0x22, 0, 0, 0, NULL};


/* Constants */
static const cob_field c_1	= {1, (cob_u8_ptr)"A", &a_3};
static const cob_field c_2	= {1, (cob_u8_ptr)"B", &a_3};
static const cob_field c_3	= {1, (cob_u8_ptr)"C", &a_3};
static const cob_field c_4	= {27, (cob_u8_ptr)"Case A: Should not overflow", &a_3};
static const cob_field c_5	= {16, (cob_u8_ptr)"A: TRTG-STRING <", &a_3};
static const cob_field c_6	= {10, (cob_u8_ptr)"> != <ABC>", &a_3};
static const cob_field c_7	= {16, (cob_u8_ptr)"A: STR-POINTER <", &a_3};
static const cob_field c_8	= {9, (cob_u8_ptr)"> != <04>", &a_3};
static const cob_field c_9	= {23, (cob_u8_ptr)"Case B: Should overflow", &a_3};
static const cob_field c_10	= {16, (cob_u8_ptr)"B: TRTG-STRING <", &a_3};
static const cob_field c_11	= {11, (cob_u8_ptr)"> != SPACES", &a_3};
static const cob_field c_12	= {16, (cob_u8_ptr)"B: STR-POINTER <", &a_3};
static const cob_field c_13	= {9, (cob_u8_ptr)"> != <00>", &a_3};
static const cob_field c_14	= {23, (cob_u8_ptr)"Case C: Should overflow", &a_3};
static const cob_field c_15	= {16, (cob_u8_ptr)"C: TRTG-STRING <", &a_3};
static const cob_field c_16	= {16, (cob_u8_ptr)"C: STR-POINTER <", &a_3};
static const cob_field c_17	= {3, (cob_u8_ptr)"1|2", &a_3};
static const cob_field c_18	= {3, (cob_u8_ptr)"A|B", &a_3};
static const cob_field c_19	= {3, (cob_u8_ptr)"C|D", &a_3};
static const cob_field c_20	= {16, (cob_u8_ptr)"D: TRGT-STRING <", &a_3};
static const cob_field c_21	= {10, (cob_u8_ptr)"> != <1AC>", &a_3};

static cob_field cob_all_space	= {1, (cob_u8_ptr)" ", &cob_all_attr};

/* Function prototypes */

static int		StringTest ();
static int		StringTest_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (StringTest ());
}

/* Functions */

/* PROGRAM-ID 'StringTest' */

/* ENTRY 'StringTest' */

static int
StringTest ()
{
  return StringTest_ (0);
}

static int
StringTest_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 23 2024 11:21:18 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'StringTest' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[3] __attribute__((aligned));	/* TRGT-STRING */
	static cob_u8_t	b_7[2] __attribute__((aligned));	/* STR-POINTER */
	static cob_u8_t	b_8[1] __attribute__((aligned));	/* SRC-DELIM */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_6	= {3, b_6, &a_1};	/* TRGT-STRING */
	static cob_field f_7	= {2, b_7, &a_2};	/* STR-POINTER */
	static cob_field f_8	= {1, b_8, &a_1};	/* SRC-DELIM */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 21        : Entry     StringTest              : prog.cob */
  l_2:;

  /* Line: 21        : MOVE               : prog.cob */
  memcpy (b_7, "01", 2);

  /* Line: 22        : STRING             : prog.cob */
  cob_glob_ptr->cob_exception_code = 0;
  cob_string_init (&f_6, &f_7);
  cob_string_delimited (NULL);
  cob_string_append ((cob_field *)&c_1);
  cob_string_append ((cob_field *)&c_2);
  cob_string_append ((cob_field *)&c_3);
  cob_string_finish ();
  if (unlikely ((cob_glob_ptr->cob_exception_code & 0xff00) == 0x0a00))
  {

    /* Line: 26        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &c_4);
  }

  /* Line: 28        : IF                 : prog.cob */
  if (((int)memcmp (b_6, (cob_u8_ptr)"ABC", 3) != 0))
  {

    /* Line: 29        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_5, &f_6, &c_6);
  }

  /* Line: 30        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_7, 2, 4LL, 0) != 0))
  {

    /* Line: 31        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_7, &f_7, &c_8);
  }

  /* Line: 34        : MOVE               : prog.cob */
  memset (b_7, 48, 2);

  /* Line: 35        : MOVE               : prog.cob */
  memset (b_6, 32, 3);

  /* Line: 36        : STRING             : prog.cob */
  cob_glob_ptr->cob_exception_code = 0;
  cob_string_init (&f_6, &f_7);
  cob_string_delimited (NULL);
  cob_string_append ((cob_field *)&c_1);
  cob_string_append ((cob_field *)&c_2);
  cob_string_append ((cob_field *)&c_3);
  cob_string_finish ();
  if (!cob_glob_ptr->cob_exception_code)
  {

    /* Line: 40        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &c_9);
  }

  /* Line: 42        : IF                 : prog.cob */
  if (((int)cob_cmp (&f_6, &cob_all_space) != 0))
  {

    /* Line: 43        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_10, &f_6, &c_11);
  }

  /* Line: 44        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_7, 2, 0LL, 0) != 0))
  {

    /* Line: 45        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_12, &f_7, &c_13);
  }

  /* Line: 48        : MOVE               : prog.cob */
  memcpy (b_7, "04", 2);

  /* Line: 49        : MOVE               : prog.cob */
  memset (b_6, 32, 3);

  /* Line: 50        : STRING             : prog.cob */
  cob_glob_ptr->cob_exception_code = 0;
  cob_string_init (&f_6, &f_7);
  cob_string_delimited (NULL);
  cob_string_append ((cob_field *)&c_1);
  cob_string_append ((cob_field *)&c_2);
  cob_string_append ((cob_field *)&c_3);
  cob_string_finish ();
  if (!cob_glob_ptr->cob_exception_code)
  {

    /* Line: 54        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &c_14);
  }

  /* Line: 56        : IF                 : prog.cob */
  if (((int)cob_cmp (&f_6, &cob_all_space) != 0))
  {

    /* Line: 57        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_15, &f_6, &c_11);
  }

  /* Line: 58        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_7, 2, 4LL, 0) != 0))
  {

    /* Line: 59        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_16, &f_7, &c_8);
  }

  /* Line: 62        : MOVE               : prog.cob */
  memcpy (b_7, "01", 2);

  /* Line: 63        : MOVE               : prog.cob */
  *(b_8) = 124;

  /* Line: 64        : MOVE               : prog.cob */
  memset (b_6, 32, 3);

  /* Line: 65        : STRING             : prog.cob */
  cob_string_init (&f_6, &f_7);
  cob_string_delimited (&f_8);
  cob_string_append ((cob_field *)&c_17);
  cob_string_append ((cob_field *)&c_18);
  cob_string_append ((cob_field *)&c_19);
  cob_string_finish ();

  /* Line: 69        : IF                 : prog.cob */
  if (((int)memcmp (b_6, (cob_u8_ptr)"1AC", 3) != 0))
  {

    /* Line: 70        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_20, &f_6, &c_21);
  }

  /* Line: 72        : GOBACK             : prog.cob */
  goto exit_program;

  /* Program exit */

  exit_program:

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "StringTest";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())StringTest;
  module->module_cancel.funcptr = (void *(*)())StringTest_;
  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memset (b_6, 32, 3);
  memset (b_7, 48, 2);
  *(cob_u8_ptr)(b_8) = 32;

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'StringTest' */

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([STRING / UNSTRING [[NOT]] ON OVERFLOW])
AT_KEYWORDS([backcomp runmisc exceptions])

AT_DATA([prog.c], [[
/* Generated by           cobc 3.1.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 16:23:05 */
/* GnuCOBOL build date    Apr 17 2024 11:33:59 */
/* GnuCOBOL package date  Dec 23 2020 12:04:58 UTC */
/* Compile command        /opt/gnucobol/gnucobol-3.1/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"3.1.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 23 2024 16:23:05"
#define  COB_MODULE_DATE		20240423
#define  COB_MODULE_TIME		162305

/* Global variables */
/* Generated by           cobc 3.1.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 16:23:05 */
/* GnuCOBOL build date    Apr 17 2024 11:33:59 */
/* GnuCOBOL package date  Dec 23 2020 12:04:58 UTC */
/* Compile command        /opt/gnucobol/gnucobol-3.1/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x21,   0,   0, 0x1000, NULL};


/* Constants */
static const cob_field c_1	= {4, (cob_u8_ptr)"data", &a_2};
static const cob_field c_2	= {15, (cob_u8_ptr)"STRING OVERFLOW", &a_2};
static const cob_field c_3	= {8, (cob_u8_ptr)"1 failed", &a_2};
static const cob_field c_4	= {8, (cob_u8_ptr)"1 passed", &a_2};
static const cob_field c_5	= {19, (cob_u8_ptr)"STRING ERROR (1): \"", &a_2};
static const cob_field c_6	= {1, (cob_u8_ptr)"\"", &a_2};
static const cob_field c_7	= {23, (cob_u8_ptr)"data is too big here...", &a_2};
static const cob_field c_8	= {8, (cob_u8_ptr)"2 passed", &a_2};
static const cob_field c_9	= {8, (cob_u8_ptr)"2 failed", &a_2};
static const cob_field c_10	= {16, (cob_u8_ptr)"missing OVERFLOW", &a_2};
static const cob_field c_11	= {19, (cob_u8_ptr)"STRING ERROR (2): \"", &a_2};
static const cob_field c_12	= {17, (cob_u8_ptr)"UNSTRING OVERFLOW", &a_2};
static const cob_field c_13	= {8, (cob_u8_ptr)"3 failed", &a_2};
static const cob_field c_14	= {8, (cob_u8_ptr)"3 passed", &a_2};
static const cob_field c_15	= {21, (cob_u8_ptr)"UNSTRING ERROR (1): \"", &a_2};
static const cob_field c_16	= {8, (cob_u8_ptr)"4 passed", &a_2};
static const cob_field c_17	= {8, (cob_u8_ptr)"4 failed", &a_2};
static const cob_field c_18	= {21, (cob_u8_ptr)"UNSTRING ERROR (2): \"", &a_2};



/* Function prototypes */

static int		prog ();
static int		prog_ (const int);
static void		prog_module_init (cob_module *module);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 3.1.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 23 2024 16:23:05 */
	/* GnuCOBOL build date    Apr 17 2024 11:33:59 */
	/* GnuCOBOL package date  Dec 23 2020 12:04:58 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-3.1/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_8[20] __attribute__((aligned));	/* simple-str */
	static cob_u8_t	b_9[50] __attribute__((aligned));	/* err-str */
	
	/* End of local data storage */
	
	
	/* Fields (local) */
	static cob_field f_8	= {20, b_8, &a_1};	/* simple-str */
	static cob_field f_9	= {50, b_9, &a_1};	/* err-str */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -10)
  		goto P_dump;
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 8         : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 10        : MOVE               : prog.cob */
  memset (b_8, 32, 20);

  /* Line: 11        : STRING             : prog.cob */
  cob_glob_ptr->cob_exception_code = 0;
  cob_string_init (&f_8, NULL);
  cob_string_delimited (NULL);
  cob_string_append ((cob_field *)&c_1);
  cob_string_finish ();
  if (unlikely ((cob_glob_ptr->cob_exception_code & 0xff00) == 0x0a00))
  {

    /* Line: 15        : MOVE               : prog.cob */
    memset (b_9, 32, 50);

    /* Line: 16        : STRING             : prog.cob */
    cob_string_init (&f_9, NULL);
    cob_string_delimited (NULL);
    cob_string_append ((cob_field *)&c_2);
    cob_string_finish ();

    /* Line: 20        : DISPLAY            : prog.cob */
    cob_display (1, 1, 1, &f_9);

    /* Line: 22        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &c_3);
  }
  else
  {

    /* Line: 25        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &c_4);
  }

  /* Line: 28        : IF                 : prog.cob */
  if (((int)cob_cmp (&f_8, (cob_field *)&c_1) != 0))
  {

    /* Line: 29        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_5, &f_8, &c_6);
  }

  /* Line: 33        : MOVE               : prog.cob */
  memset (b_8, 32, 20);

  /* Line: 34        : STRING             : prog.cob */
  cob_glob_ptr->cob_exception_code = 0;
  cob_string_init (&f_8, NULL);
  cob_string_delimited (NULL);
  cob_string_append ((cob_field *)&c_7);
  cob_string_finish ();
  if (unlikely ((cob_glob_ptr->cob_exception_code & 0xff00) == 0x0a00))
  {

    /* Line: 38        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &c_8);
  }
  else
  {

    /* Line: 41        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &c_9);

    /* Line: 43        : MOVE               : prog.cob */
    memset (b_9, 32, 50);

    /* Line: 44        : STRING             : prog.cob */
    cob_string_init (&f_9, NULL);
    cob_string_delimited (NULL);
    cob_string_append ((cob_field *)&c_10);
    cob_string_finish ();

    /* Line: 48        : DISPLAY            : prog.cob */
    cob_display (1, 1, 1, &f_9);
  }

  /* Line: 51        : IF                 : prog.cob */
  if (((int)memcmp (b_8, (cob_u8_ptr)"data is too big here", 20) != 0))
  {

    /* Line: 52        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_11, &f_8, &c_6);
  }

  /* Line: 57        : MOVE               : prog.cob */
  memset (b_8, 32, 20);

  /* Line: 58        : UNSTRING           : prog.cob */
  cob_glob_ptr->cob_exception_code = 0;
  cob_unstring_init ((cob_field *)&c_1, NULL, 0);
  cob_unstring_into (&f_8, 0, 0);
  cob_unstring_finish ();
  if (unlikely ((cob_glob_ptr->cob_exception_code & 0xff00) == 0x0a00))
  {

    /* Line: 61        : MOVE               : prog.cob */
    memset (b_9, 32, 50);

    /* Line: 62        : UNSTRING           : prog.cob */
    cob_unstring_init ((cob_field *)&c_12, NULL, 0);
    cob_unstring_into (&f_9, 0, 0);
    cob_unstring_finish ();

    /* Line: 65        : DISPLAY            : prog.cob */
    cob_display (1, 1, 1, &f_9);

    /* Line: 67        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &c_13);
  }
  else
  {

    /* Line: 70        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &c_14);
  }

  /* Line: 73        : IF                 : prog.cob */
  if (((int)cob_cmp (&f_8, (cob_field *)&c_1) != 0))
  {

    /* Line: 74        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_15, &f_8, &c_6);
  }

  /* Line: 78        : MOVE               : prog.cob */
  memset (b_8, 32, 20);

  /* Line: 79        : UNSTRING           : prog.cob */
  cob_glob_ptr->cob_exception_code = 0;
  cob_unstring_init ((cob_field *)&c_7, NULL, 0);
  cob_unstring_into (&f_8, 0, 0);
  cob_unstring_finish ();
  if (unlikely ((cob_glob_ptr->cob_exception_code & 0xff00) == 0x0a00))
  {

    /* Line: 82        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &c_16);
  }
  else
  {

    /* Line: 85        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &c_17);

    /* Line: 87        : MOVE               : prog.cob */
    memset (b_9, 32, 50);

    /* Line: 88        : STRING             : prog.cob */
    cob_string_init (&f_9, NULL);
    cob_string_delimited (NULL);
    cob_string_append ((cob_field *)&c_10);
    cob_string_finish ();

    /* Line: 92        : DISPLAY            : prog.cob */
    cob_display (1, 1, 1, &f_9);
  }

  /* Line: 95        : IF                 : prog.cob */
  if (((int)memcmp (b_8, (cob_u8_ptr)"data is too big here", 20) != 0))
  {

    /* Line: 96        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_18, &f_8, &c_6);
  }

  /* Line: 100       : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
  P_cgerror:
  	cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  prog_module_init (module);

  module->crt_status = NULL;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memset (b_8, 32, 20);
  memset (b_9, 32, 50);

  if (0 == 1) goto P_cgerror;
  initialized = 1;
  goto P_ret_initialize;

  P_dump:
    return 0;


  /* CANCEL callback handling */
  P_cancel:

  if (!initialized)
  	return 0;
  if (module && module->module_active)
  	cob_fatal_error (COB_FERROR_CANCEL);

  initialized = 0;

  P_clear_decimal:
  return 0;

}

/* End PROGRAM-ID 'prog' */

/* Initialize module structure for prog */
static void prog_module_init (cob_module *module)
{
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;
  module->flag_debug_trace = 0;
  module->flag_dump_ready = 0;
  module->module_stmt = 0;
  module->module_sources = NULL;
}

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[1 passed
2 passed
3 passed
4 passed
], [])

AT_CLEANUP


AT_SETUP([UNSTRING DELIMITED ALL LOW-VALUE])
AT_KEYWORDS([backcomp runmisc])

AT_DATA([prog.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:23:06 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 23 2024 11:23:06"
#define  COB_MODULE_DATE		20240423
#define  COB_MODULE_TIME		112306

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:23:06 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x01,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x21,   0,   0, 0x0000, NULL};

static const cob_field_attr cob_all_attr = {0x22, 0, 0, 0, NULL};


/* Constants */

static cob_field cob_all_low	= {1, (cob_u8_ptr)"\0", &cob_all_attr};



/* Function prototypes */

static int		prog ();
static int		prog_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 23 2024 11:23:06 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[8] __attribute__((aligned));	/* G */
	static cob_u8_t	b_10[3] __attribute__((aligned));	/* A */
	static cob_u8_t	b_11[3] __attribute__((aligned));	/* B */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_6	= {8, b_6, &a_1};	/* G */
	static cob_field f_10	= {3, b_10, &a_2};	/* A */
	static cob_field f_11	= {3, b_11, &a_2};	/* B */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 12        : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 12        : UNSTRING           : prog.cob */
  cob_unstring_init (&f_6, NULL, 1);
  cob_unstring_delimited (&cob_all_low, 1);
  cob_unstring_into (&f_10, 0, 0);
  cob_unstring_into (&f_11, 0, 0);
  cob_unstring_finish ();

  /* Line: 15        : IF                 : prog.cob */
  if (((int)memcmp (b_10, (cob_u8_ptr)"ABC", 3) != 0))
  {

    /* Line: 16        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &f_10);
  }

  /* Line: 17        : IF                 : prog.cob */
  if (((int)memcmp (b_11, (cob_u8_ptr)"DEF", 3) != 0))
  {

    /* Line: 18        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &f_11);
  }

  /* Line: 19        : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memcpy (b_6, "ABC", 3);
  memset (b_6 + 3, 0, 2);
  memcpy (b_6 + 5, "DEF", 3);
  memset (b_10, 32, 3);
  memset (b_11, 32, 3);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'prog' */

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([UNSTRING DELIMITED ALL SPACE-2])
AT_KEYWORDS([backcomp runmisc])

AT_DATA([prog.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:24:04 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 23 2024 11:24:04"
#define  COB_MODULE_DATE		20240423
#define  COB_MODULE_TIME		112404

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:24:04 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x21,   0,   0, 0x1000, NULL};
static const cob_field_attr a_3 =	{0x10,   2,   0, 0x0000, NULL};
static const cob_field_attr a_4 =	{0x01,   0,   0, 0x0000, NULL};

static const cob_field_attr cob_all_attr = {0x22, 0, 0, 0, NULL};


/* Constants */
static const cob_field c_1	= {21, (cob_u8_ptr)"Expected space - Got ", &a_2};
static const cob_field c_2	= {17, (cob_u8_ptr)"Expected 5 - Got ", &a_2};
static const cob_field c_3	= {10, (cob_u8_ptr)"ABC AND DE", &a_2};
static const cob_field c_4	= {26, (cob_u8_ptr)"Expected ABC AND DE - Got ", &a_2};
static const cob_field c_5	= {18, (cob_u8_ptr)"Expected 21 - Got ", &a_2};
static const cob_field c_6	= {11, (cob_u8_ptr)" FG AND HIJ", &a_2};
static const cob_field c_7	= {27, (cob_u8_ptr)"Expected  FG AND HIJ - Got ", &a_2};
static const cob_field c_8	= {18, (cob_u8_ptr)"Expected 40 - Got ", &a_2};

static cob_field cob_all_space	= {1, (cob_u8_ptr)" ", &cob_all_attr};

/* Function prototypes */

static int		prog ();
static int		prog_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 23 2024 11:24:04 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[39] __attribute__((aligned));	/* WS-RECORD */
	static cob_u8_t	b_12[2] __attribute__((aligned));	/* SPACE-2 */
	static cob_u8_t	b_13[15] __attribute__((aligned));	/* WS-DUMMY */
	static cob_u8_t	b_14[2] __attribute__((aligned));	/* WS-POINTER */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_6	= {39, b_6, &a_4};	/* WS-RECORD */
	static cob_field f_12	= {2, b_12, &a_1};	/* SPACE-2 */
	static cob_field f_13	= {15, b_13, &a_1};	/* WS-DUMMY */
	static cob_field f_14	= {2, b_14, &a_3};	/* WS-POINTER */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 16        : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 16        : MOVE               : prog.cob */
  memcpy (b_14, "01", 2);

  /* Line: 18        : PERFORM            : prog.cob */
  /* PERFORM 0001-SUB */
  frame_ptr++;
  frame_ptr->perform_through = 5;
  frame_ptr->return_address_num = 0;
  goto l_5;
  l_6:
  frame_ptr--;

  /* Line: 19        : IF                 : prog.cob */
  if (((int)cob_cmp (&f_13, &cob_all_space) != 0))
  {

    /* Line: 20        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_1, &f_13);
  }

  /* Line: 21        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_14, 2, 5LL, 0) != 0))
  {

    /* Line: 22        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_2, &f_14);
  }

  /* Line: 24        : PERFORM            : prog.cob */
  /* PERFORM 0001-SUB */
  frame_ptr++;
  frame_ptr->perform_through = 5;
  frame_ptr->return_address_num = 1;
  goto l_5;
  l_7:
  frame_ptr--;

  /* Line: 25        : IF                 : prog.cob */
  if (((int)cob_cmp (&f_13, (cob_field *)&c_3) != 0))
  {

    /* Line: 26        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_4, &f_13);
  }

  /* Line: 27        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_14, 2, 21LL, 0) != 0))
  {

    /* Line: 28        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_5, &f_14);
  }

  /* Line: 30        : PERFORM            : prog.cob */
  /* PERFORM 0001-SUB */
  frame_ptr++;
  frame_ptr->perform_through = 5;
  frame_ptr->return_address_num = 2;
  goto l_5;
  l_8:
  frame_ptr--;

  /* Line: 31        : IF                 : prog.cob */
  if (((int)cob_cmp (&f_13, (cob_field *)&c_6) != 0))
  {

    /* Line: 32        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_7, &f_13);
  }

  /* Line: 33        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_14, 2, 40LL, 0) != 0))
  {

    /* Line: 34        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_8, &f_14);
  }

  /* Line: 35        : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Line: 36        : Paragraph 0001-SUB                : prog.cob */
  l_5:;

  /* Line: 37        : UNSTRING           : prog.cob */
  cob_unstring_init (&f_6, &f_14, 1);
  cob_unstring_delimited (&f_12, 1);
  cob_unstring_into (&f_13, 0, 0);
  cob_unstring_finish ();

  /* Implicit PERFORM return */
  if (frame_ptr->perform_through == 5)
    goto P_switch;

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   switch (frame_ptr->return_address_num) {
   case 2:
     goto l_8;
   case 1:
     goto l_7;
   case 0:
     goto l_6;
   }
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memset (b_6, 32, 4);
  memcpy (b_6 + 4, "ABC AND DE", 10);
  memset (b_6 + 14, 32, 7);
  memcpy (b_6 + 21, "FG AND HIJ", 10);
  memset (b_6 + 31, 32, 8);
  memset (b_12, 32, 2);
  memset (b_13, 32, 15);
  memset (b_14, 48, 2);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'prog' */

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([UNSTRING DELIMITED POINTER])
AT_KEYWORDS([backcomp runmisc])

AT_DATA([prog.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:30:26 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 23 2024 11:30:26"
#define  COB_MODULE_DATE		20240423
#define  COB_MODULE_TIME		113026

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:30:26 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x1000, NULL};
static const cob_field_attr a_2 =	{0x10,   2,   0, 0x0000, NULL};
static const cob_field_attr a_3 =	{0x21,   0,   0, 0x0000, NULL};


/* Constants */
static const cob_field c_1	= {18, (cob_u8_ptr)"Expected 48 - Got ", &a_1};
static const cob_field c_2	= {18, (cob_u8_ptr)"Expected 62 - Got ", &a_1};
static const cob_field c_3	= {18, (cob_u8_ptr)"Expected 63 - Got ", &a_1};
static const cob_field c_4	= {5, (cob_u8_ptr)" PIC ", &a_1};
static const cob_field c_5	= {7, (cob_u8_ptr)" COMP-3", &a_1};
static const cob_field c_6	= {1, (cob_u8_ptr)".", &a_1};

/* Function prototypes */

static int		prog ();
static int		prog_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 23 2024 11:30:26 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[66] __attribute__((aligned));	/* WS-LAY-RECORD */
	static cob_u8_t	b_7[50] __attribute__((aligned));	/* WS-DUMMY */
	static cob_u8_t	b_8[32] __attribute__((aligned));	/* WS-KEYWORD */
	static cob_u8_t	b_9[2] __attribute__((aligned));	/* WS-POINTER */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_6	= {66, b_6, &a_3};	/* WS-LAY-RECORD */
	static cob_field f_7	= {50, b_7, &a_3};	/* WS-DUMMY */
	static cob_field f_8	= {32, b_8, &a_3};	/* WS-KEYWORD */
	static cob_field f_9	= {2, b_9, &a_2};	/* WS-POINTER */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 11        : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 11        : MOVE               : prog.cob */
  memcpy (b_6, "        10  AF-RECORD-TYPE-SEQUENCE-04     PIC   9(05) COMP-3.    ", 66);

  /* Line: 14        : MOVE               : prog.cob */
  memcpy (b_9, "01", 2);

  /* Line: 15        : PERFORM            : prog.cob */
  /* PERFORM 0001-SUB */
  frame_ptr++;
  frame_ptr->perform_through = 5;
  frame_ptr->return_address_num = 0;
  goto l_5;
  l_6:
  frame_ptr--;

  /* Line: 16        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_9, 2, 48LL, 0) != 0))
  {

    /* Line: 17        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_1, &f_9);
  }

  /* Line: 18        : ADD                : prog.cob */
  cob_add_int (&f_9, 7, 0);

  /* Line: 20        : PERFORM            : prog.cob */
  /* PERFORM 0001-SUB */
  frame_ptr++;
  frame_ptr->perform_through = 5;
  frame_ptr->return_address_num = 1;
  goto l_5;
  l_7:
  frame_ptr--;

  /* Line: 21        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_9, 2, 62LL, 0) != 0))
  {

    /* Line: 22        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_2, &f_9);
  }

  /* Line: 23        : PERFORM            : prog.cob */
  /* PERFORM 0001-SUB */
  frame_ptr++;
  frame_ptr->perform_through = 5;
  frame_ptr->return_address_num = 2;
  goto l_5;
  l_8:
  frame_ptr--;

  /* Line: 24        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_9, 2, 63LL, 0) != 0))
  {

    /* Line: 25        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_3, &f_9);
  }

  /* Line: 26        : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Line: 27        : Paragraph 0001-SUB                : prog.cob */
  l_5:;

  /* Line: 28        : UNSTRING           : prog.cob */
  cob_unstring_init (&f_6, &f_9, 3);
  cob_unstring_delimited ((cob_field *)&c_4, 0);
  cob_unstring_delimited ((cob_field *)&c_5, 0);
  cob_unstring_delimited ((cob_field *)&c_6, 0);
  cob_unstring_into (&f_7, &f_8, 0);
  cob_unstring_finish ();

  /* Implicit PERFORM return */
  if (frame_ptr->perform_through == 5)
    goto P_switch;

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   switch (frame_ptr->return_address_num) {
   case 2:
     goto l_8;
   case 1:
     goto l_7;
   case 0:
     goto l_6;
   }
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memset (b_6, 32, 66);
  memset (b_7, 32, 50);
  memset (b_8, 32, 32);
  memset (b_9, 48, 2);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'prog' */

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([UNSTRING DELIMITER IN])
AT_KEYWORDS([backcomp runmisc])

AT_DATA([prog.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:31:00 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 23 2024 11:31:00"
#define  COB_MODULE_DATE		20240423
#define  COB_MODULE_TIME		113100

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:31:00 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};



/* Function prototypes */

static int		prog ();
static int		prog_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 23 2024 11:31:00 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Local cob_field items */
	cob_field		f0;
	cob_field		f1;
	cob_field		f2;
	cob_field		f3;
	cob_field		f4;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[8] __attribute__((aligned));	/* WK-CMD */
	static cob_u8_t	b_7[2] __attribute__((aligned));	/* WK-SIGNS */
	static cob_u8_t	b_10[2] __attribute__((aligned));	/* WK-DELIM */
	static cob_u8_t	b_11[6] __attribute__((aligned));	/* WK-DATA */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_6	= {8, b_6, &a_1};	/* WK-CMD */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 13        : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 13        : UNSTRING           : prog.cob */
  cob_unstring_init (&f_6, NULL, 2);
  cob_unstring_delimited (COB_SET_FLD(f0, 1, b_7 + 0, &a_1), 0);
  cob_unstring_delimited (COB_SET_FLD(f0, 1, b_7 + 1, &a_1), 0);
  cob_unstring_into (COB_SET_FLD(f0, 2, b_11 + 2 * 0, &a_1), COB_SET_FLD(f1, 1, b_10 + 0, &a_1), 0);
  cob_unstring_into (COB_SET_FLD(f0, 2, b_11 + 2 * 1, &a_1), COB_SET_FLD(f1, 1, b_10 + 1, &a_1), 0);
  cob_unstring_into (COB_SET_FLD(f0, 2, b_11 + 2 * 2, &a_1), 0, 0);
  cob_unstring_finish ();

  /* Line: 18        : IF                 : prog.cob */
  if (((((((int)memcmp (b_11 + 2 * 0, (cob_u8_ptr)"WW", 2) != 0) || 
      ((int)memcmp (b_11 + 2 * 1, (cob_u8_ptr)"DD", 2) != 0)) || 
      ((int)memcmp (b_11 + 2 * 2, (cob_u8_ptr)"CC", 2) != 0)) || 
      ((int)(int)(*(b_10 + 0) - 65) != 0)) || 
      ((int)(int)(*(b_10 + 1) - 66) != 0)))
  {

    /* Line: 23        : DISPLAY            : prog.cob */
    cob_display (0, 1, 5, COB_SET_FLD(f0, 2, b_11 + 2 * 0, &a_1), COB_SET_FLD(f1, 2, b_11 + 2 * 1, &a_1), COB_SET_FLD(f2, 2, b_11 + 2 * 2, &a_1), COB_SET_FLD(f3, 1, b_10 + 0, &a_1), COB_SET_FLD(f4, 1, b_10 + 1, &a_1));
  }

  /* Line: 30        : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memcpy (b_6, "WWADDBCC", 8);
  memcpy (b_7, "AB", 2);
  memset (b_10, 32, 2);
  memset (b_11, 32, 3);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'prog' */

/* End functions */


]])

AT_CHECK([$COMPILE -ftop-level-occurs-clause=ok prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([UNSTRING combined])
AT_KEYWORDS([backcomp runmisc])

AT_DATA([prog.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:31:55 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 23 2024 11:31:55"
#define  COB_MODULE_DATE		20240423
#define  COB_MODULE_TIME		113155

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:31:55 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x10,   2,   0, 0x0000, NULL};
static const cob_field_attr a_3 =	{0x21,   0,   0, 0x1000, NULL};


/* Constants */
static const cob_field c_1	= {1, (cob_u8_ptr)"|", &a_3};
static const cob_field c_2	= {44, (cob_u8_ptr)"Unstring tallying case 1 should not OVERFLOW", &a_3};
static const cob_field c_3	= {1, (cob_u8_ptr)"-", &a_3};
static const cob_field c_4	= {41, (cob_u8_ptr)"Unstring tallying case 2 should  OVERFLOW", &a_3};
static const cob_field c_5	= {4, (cob_u8_ptr)"ABC1", &a_3};
static const cob_field c_6	= {15, (cob_u8_ptr)"A: RES-TRGT-1 <", &a_3};
static const cob_field c_7	= {11, (cob_u8_ptr)"> != <ABC1>", &a_3};
static const cob_field c_8	= {16, (cob_u8_ptr)"A: RES-DELIM-1 <", &a_3};
static const cob_field c_9	= {8, (cob_u8_ptr)"> != <|>", &a_3};
static const cob_field c_10	= {16, (cob_u8_ptr)"A: RES-COUNT-1 <", &a_3};
static const cob_field c_11	= {8, (cob_u8_ptr)"> != <4>", &a_3};
static const cob_field c_12	= {8, (cob_u8_ptr)"DEF--GHI", &a_3};
static const cob_field c_13	= {15, (cob_u8_ptr)"A: RES-TRGT-2 <", &a_3};
static const cob_field c_14	= {15, (cob_u8_ptr)"> != <DEF--GHI>", &a_3};
static const cob_field c_15	= {15, (cob_u8_ptr)"A: RES-DELIM2 <", &a_3};
static const cob_field c_16	= {10, (cob_u8_ptr)"> != SPACE", &a_3};
static const cob_field c_17	= {8, (cob_u8_ptr)"> != <8>", &a_3};
static const cob_field c_18	= {16, (cob_u8_ptr)"A: STR-POINTER <", &a_3};
static const cob_field c_19	= {9, (cob_u8_ptr)"> != <14>", &a_3};
static const cob_field c_20	= {14, (cob_u8_ptr)"A: RES-TALLY <", &a_3};
static const cob_field c_21	= {8, (cob_u8_ptr)"> != <2>", &a_3};
static const cob_field c_22	= {15, (cob_u8_ptr)"B: RES-TRGT-1 <", &a_3};
static const cob_field c_23	= {16, (cob_u8_ptr)"B: RES-DELIM-1 <", &a_3};
static const cob_field c_24	= {16, (cob_u8_ptr)"B: RES-COUNT-1 <", &a_3};
static const cob_field c_25	= {3, (cob_u8_ptr)"DEF", &a_3};
static const cob_field c_26	= {15, (cob_u8_ptr)"B: RES-TRGT-2 <", &a_3};
static const cob_field c_27	= {10, (cob_u8_ptr)"> != <DEF>", &a_3};
static const cob_field c_28	= {15, (cob_u8_ptr)"B: RES-DELIM2 <", &a_3};
static const cob_field c_29	= {8, (cob_u8_ptr)"> != <->", &a_3};
static const cob_field c_30	= {8, (cob_u8_ptr)"> != <3>", &a_3};
static const cob_field c_31	= {16, (cob_u8_ptr)"B: STR-POINTER <", &a_3};
static const cob_field c_32	= {9, (cob_u8_ptr)"> != <11>", &a_3};
static const cob_field c_33	= {14, (cob_u8_ptr)"B: RES-TALLY <", &a_3};

/* Function prototypes */

static int		UnstringTest ();
static int		UnstringTest_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (UnstringTest ());
}

/* Functions */

/* PROGRAM-ID 'UnstringTest' */

/* ENTRY 'UnstringTest' */

static int
UnstringTest ()
{
  return UnstringTest_ (0);
}

static int
UnstringTest_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 23 2024 11:31:55 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'UnstringTest' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[13] __attribute__((aligned));	/* INP-STRING */
	static cob_u8_t	b_7[2] __attribute__((aligned));	/* STR-POINTER */
	static cob_u8_t	b_8[48] __attribute__((aligned));	/* RES-DATA */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_6	= {13, b_6, &a_1};	/* INP-STRING */
	static cob_field f_7	= {2, b_7, &a_2};	/* STR-POINTER */
	static cob_field f_9	= {20, b_8, &a_1};	/* RES-TRGT-1 */
	static cob_field f_10	= {1, b_8 + 20, &a_1};	/* RES-DELIM-1 */
	static cob_field f_11	= {2, b_8 + 21, &a_2};	/* RES-COUNT-1 */
	static cob_field f_12	= {20, b_8 + 23, &a_1};	/* RES-TRGT-2 */
	static cob_field f_13	= {1, b_8 + 43, &a_1};	/* RES-DELIM-2 */
	static cob_field f_14	= {2, b_8 + 44, &a_2};	/* RES-COUNT-2 */
	static cob_field f_15	= {2, b_8 + 46, &a_2};	/* RES-TALLY */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 26        : Entry     UnstringTest            : prog.cob */
  l_2:;

  /* Line: 26        : INITIALIZE         : prog.cob */
  memset (b_8, 32, 21);
  memset (b_8 + 21, 48, 2);
  memset (b_8 + 23, 32, 21);
  memset (b_8 + 44, 48, 4);

  /* Line: 27        : MOVE               : prog.cob */
  memcpy (b_7, "01", 2);

  /* Line: 29        : UNSTRING           : prog.cob */
  cob_glob_ptr->cob_exception_code = 0;
  cob_unstring_init (&f_6, &f_7, 1);
  cob_unstring_delimited ((cob_field *)&c_1, 0);
  cob_unstring_into (&f_9, &f_10, &f_11);
  cob_unstring_into (&f_12, &f_13, &f_14);
  cob_unstring_tallying (&f_15);
  cob_unstring_finish ();
  if (unlikely ((cob_glob_ptr->cob_exception_code & 0xff00) == 0x0a00))
  {

    /* Line: 38        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &c_2);
  }

  /* Line: 42        : PERFORM            : prog.cob */
  /* PERFORM TEST-CASE-1-RESULT */
  frame_ptr++;
  frame_ptr->perform_through = 5;
  frame_ptr->return_address_num = 0;
  goto l_5;
  l_7:
  frame_ptr--;

  /* Line: 45        : INITIALIZE         : prog.cob */
  memset (b_8, 32, 21);
  memset (b_8 + 21, 48, 2);
  memset (b_8 + 23, 32, 21);
  memset (b_8 + 44, 48, 4);

  /* Line: 46        : MOVE               : prog.cob */
  memcpy (b_7, "01", 2);

  /* Line: 48        : UNSTRING           : prog.cob */
  cob_glob_ptr->cob_exception_code = 0;
  cob_unstring_init (&f_6, &f_7, 2);
  cob_unstring_delimited ((cob_field *)&c_1, 0);
  cob_unstring_delimited ((cob_field *)&c_3, 1);
  cob_unstring_into (&f_9, &f_10, &f_11);
  cob_unstring_into (&f_12, &f_13, &f_14);
  cob_unstring_tallying (&f_15);
  cob_unstring_finish ();
  if (!cob_glob_ptr->cob_exception_code)
  {

    /* Line: 57        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &c_4);
  }

  /* Line: 61        : PERFORM            : prog.cob */
  /* PERFORM TEST-CASE-2-RESULT */
  frame_ptr++;
  frame_ptr->perform_through = 6;
  frame_ptr->return_address_num = 1;
  goto l_6;
  l_8:
  frame_ptr--;

  /* Line: 63        : GOBACK             : prog.cob */
  goto exit_program;

  /* Line: 66        : Paragraph TEST-CASE-1-RESULT      : prog.cob */
  l_5:;

  /* Line: 68        : IF                 : prog.cob */
  if (((int)cob_cmp (&f_9, (cob_field *)&c_5) != 0))
  {

    /* Line: 69        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_6, &f_9, &c_7);
  }

  /* Line: 70        : IF                 : prog.cob */
  if (((int)(int)(*(b_8 + 20) - 124) != 0))
  {

    /* Line: 71        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_8, &f_10, &c_9);
  }

  /* Line: 72        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_8 + 21, 2, 4LL, 0) != 0))
  {

    /* Line: 73        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_10, &f_11, &c_11);
  }

  /* Line: 74        : IF                 : prog.cob */
  if (((int)cob_cmp (&f_12, (cob_field *)&c_12) != 0))
  {

    /* Line: 75        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_13, &f_12, &c_14);
  }

  /* Line: 76        : IF                 : prog.cob */
  if (((int)(int)(*(b_8 + 43) - ' ') != 0))
  {

    /* Line: 77        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_15, &f_13, &c_16);
  }

  /* Line: 78        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_8 + 44, 2, 8LL, 0) != 0))
  {

    /* Line: 79        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_10, &f_14, &c_17);
  }

  /* Line: 80        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_7, 2, 14LL, 0) != 0))
  {

    /* Line: 81        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_18, &f_7, &c_19);
  }

  /* Line: 82        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_8 + 46, 2, 2LL, 0) != 0))
  {

    /* Line: 83        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_20, &f_15, &c_21);
  }

  /* Implicit PERFORM return */
  if (frame_ptr->perform_through == 5)
    goto P_switch;

  /* Line: 85        : Paragraph TEST-CASE-2-RESULT      : prog.cob */
  l_6:;

  /* Line: 87        : IF                 : prog.cob */
  if (((int)cob_cmp (&f_9, (cob_field *)&c_5) != 0))
  {

    /* Line: 88        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_22, &f_9, &c_7);
  }

  /* Line: 89        : IF                 : prog.cob */
  if (((int)(int)(*(b_8 + 20) - 124) != 0))
  {

    /* Line: 90        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_23, &f_10, &c_9);
  }

  /* Line: 91        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_8 + 21, 2, 4LL, 0) != 0))
  {

    /* Line: 92        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_24, &f_11, &c_11);
  }

  /* Line: 93        : IF                 : prog.cob */
  if (((int)cob_cmp (&f_12, (cob_field *)&c_25) != 0))
  {

    /* Line: 94        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_26, &f_12, &c_27);
  }

  /* Line: 95        : IF                 : prog.cob */
  if (((int)(int)(*(b_8 + 43) - 45) != 0))
  {

    /* Line: 96        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_28, &f_13, &c_29);
  }

  /* Line: 97        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_8 + 44, 2, 3LL, 0) != 0))
  {

    /* Line: 98        : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_24, &f_14, &c_30);
  }

  /* Line: 99        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_7, 2, 11LL, 0) != 0))
  {

    /* Line: 100       : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_31, &f_7, &c_32);
  }

  /* Line: 101       : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_8 + 46, 2, 2LL, 0) != 0))
  {

    /* Line: 102       : DISPLAY            : prog.cob */
    cob_display (0, 1, 3, &c_33, &f_15, &c_21);
  }

  /* Implicit PERFORM return */
  if (frame_ptr->perform_through == 6)
    goto P_switch;

  /* Program exit */

  exit_program:

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   switch (frame_ptr->return_address_num) {
   case 1:
     goto l_8;
   case 0:
     goto l_7;
   }
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "UnstringTest";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())UnstringTest;
  module->module_cancel.funcptr = (void *(*)())UnstringTest_;
  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memcpy (b_6, "ABC1|DEF--GHI", 13);
  memset (b_7, 48, 2);
  memset (b_8, 32, 21);
  memset (b_8 + 21, 48, 2);
  memset (b_8 + 23, 32, 21);
  memset (b_8 + 44, 48, 4);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'UnstringTest' */

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([UNSTRING with FUNCTION / literal])
AT_KEYWORDS([backcomp runmisc])

AT_DATA([prog.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:33:04 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 23 2024 11:33:04"
#define  COB_MODULE_DATE		20240423
#define  COB_MODULE_TIME		113304

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:33:04 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x1000, NULL};
static const cob_field_attr a_2 =	{0x21,   0,   0, 0x0000, NULL};


/* Constants */
static const cob_field c_1	= {19, (cob_u8_ptr)"The,Quick,Brown,Fox", &a_1};
static const cob_field c_2	= {1, (cob_u8_ptr)",", &a_1};
static const cob_field c_3	= {10, (cob_u8_ptr)"PRM(1) is ", &a_1};
static const cob_field c_4	= {1, (cob_u8_ptr)":", &a_1};
static const cob_field c_5	= {10, (cob_u8_ptr)"PRM(2) is ", &a_1};
static const cob_field c_6	= {10, (cob_u8_ptr)"PRM(3) is ", &a_1};
static const cob_field c_7	= {10, (cob_u8_ptr)"PRM(4) is ", &a_1};
static const cob_field c_8	= {20, (cob_u8_ptr)"Now using UPPER-CASE", &a_1};
static const cob_field c_9	= {25, (cob_u8_ptr)"Daddy,was,a,Rolling stone", &a_1};
static const cob_field c_10	= {17, (cob_u8_ptr)"Now using Literal", &a_1};
static const cob_field c_11	= {30, (cob_u8_ptr)"Now using Literal + LOWER-CASE", &a_1};

/* Function prototypes */

static int		prog ();
static int		prog_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 23 2024 11:33:04 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Local cob_field items */
	cob_field		f0;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[543] __attribute__((aligned));	/* FILLER 1 */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_7	= {479, b_6, &a_2};	/* TSTUNS */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 9         : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 9         : MOVE               : prog.cob */
  cob_move ((cob_field *)&c_1, &f_7);

  /* Line: 10        : UNSTRING           : prog.cob */
  cob_unstring_init (&f_7, NULL, 1);
  cob_unstring_delimited ((cob_field *)&c_2, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 0, &a_2), 0, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 1, &a_2), 0, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 2, &a_2), 0, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 3, &a_2), 0, 0);
  cob_unstring_finish ();

  /* Line: 12        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_3, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 0, &a_2), &c_4);

  /* Line: 13        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_5, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 1, &a_2), &c_4);

  /* Line: 14        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_6, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 2, &a_2), &c_4);

  /* Line: 15        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_7, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 3, &a_2), &c_4);

  /* Line: 16        : UNSTRING           : prog.cob */
  cob_unstring_init (cob_intr_upper_case (0, 0, &f_7), NULL, 1);
  cob_unstring_delimited ((cob_field *)&c_2, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 0, &a_2), 0, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 1, &a_2), 0, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 2, &a_2), 0, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 3, &a_2), 0, 0);
  cob_unstring_finish ();

  /* Line: 18        : DISPLAY            : prog.cob */
  cob_display (0, 1, 1, &c_8);

  /* Line: 19        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_3, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 0, &a_2), &c_4);

  /* Line: 20        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_5, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 1, &a_2), &c_4);

  /* Line: 21        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_6, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 2, &a_2), &c_4);

  /* Line: 22        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_7, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 3, &a_2), &c_4);

  /* Line: 23        : UNSTRING           : prog.cob */
  cob_unstring_init ((cob_field *)&c_9, NULL, 1);
  cob_unstring_delimited ((cob_field *)&c_2, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 0, &a_2), 0, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 1, &a_2), 0, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 2, &a_2), 0, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 3, &a_2), 0, 0);
  cob_unstring_finish ();

  /* Line: 25        : DISPLAY            : prog.cob */
  cob_display (0, 1, 1, &c_10);

  /* Line: 26        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_3, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 0, &a_2), &c_4);

  /* Line: 27        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_5, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 1, &a_2), &c_4);

  /* Line: 28        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_6, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 2, &a_2), &c_4);

  /* Line: 29        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_7, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 3, &a_2), &c_4);

  /* Line: 30        : UNSTRING           : prog.cob */
  cob_unstring_init (cob_intr_lower_case (0, 0, (cob_field *)&c_9), NULL, 1);
  cob_unstring_delimited ((cob_field *)&c_2, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 0, &a_2), 0, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 1, &a_2), 0, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 2, &a_2), 0, 0);
  cob_unstring_into (COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 3, &a_2), 0, 0);
  cob_unstring_finish ();

  /* Line: 33        : DISPLAY            : prog.cob */
  cob_display (0, 1, 1, &c_11);

  /* Line: 34        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_3, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 0, &a_2), &c_4);

  /* Line: 35        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_5, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 1, &a_2), &c_4);

  /* Line: 36        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_6, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 2, &a_2), &c_4);

  /* Line: 37        : DISPLAY            : prog.cob */
  cob_display (0, 1, 3, &c_7, COB_SET_FLD(f0, 16, b_6 + 479 + 16 * 3, &a_2), &c_4);

  /* Line: 38        : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memset (b_6, 32, 543);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'prog' */

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[PRM(1) is The             :
PRM(2) is Quick           :
PRM(3) is Brown           :
PRM(4) is Fox             :
Now using UPPER-CASE
PRM(1) is THE             :
PRM(2) is QUICK           :
PRM(3) is BROWN           :
PRM(4) is FOX             :
Now using Literal
PRM(1) is Daddy           :
PRM(2) is was             :
PRM(3) is a               :
PRM(4) is Rolling stone   :
Now using Literal + LOWER-CASE
PRM(1) is daddy           :
PRM(2) is was             :
PRM(3) is a               :
PRM(4) is rolling stone   :
], [])

AT_CLEANUP


AT_SETUP([INSPECT TRAILING]) # Note: TRAILING is an extension
AT_KEYWORDS([backcomp extensions])

AT_DATA([prog.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 25 2024 14:47:19 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 25 2024 14:47:19"
#define  COB_MODULE_DATE		20240425
#define  COB_MODULE_TIME		144719

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 25 2024 14:47:19 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x10,   1,   0, 0x1000, NULL};
static const cob_field_attr a_2 =	{0x11,   4,   0, 0x0820, NULL};
static const cob_field_attr a_3 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_4 =	{0x21,   0,   0, 0x1000, NULL};

static const cob_field_attr cob_all_attr = {0x22, 0, 0, 0, NULL};


/* Constants */
static const cob_field c_1	= {1, (cob_u8_ptr)"0", &a_1};
static const cob_field c_2	= {38, (cob_u8_ptr)"Bad Result for Inspect Trailing Case 1", &a_4};
static const cob_field c_3	= {1, (cob_u8_ptr)"A", &a_4};
static const cob_field c_4	= {38, (cob_u8_ptr)"Bad Result for Inspect Trailing Case 2", &a_4};
static const cob_field c_5	= {1, (cob_u8_ptr)"B", &a_4};
static const cob_field c_6	= {38, (cob_u8_ptr)"Bad Result for Inspect Trailing Case 3", &a_4};
static const cob_field c_7	= {38, (cob_u8_ptr)"Bad Result for Inspect Trailing Case 4", &a_4};
static const cob_field c_8	= {38, (cob_u8_ptr)"Bad Result for Inspect Trailing Case 5", &a_4};

static cob_field cob_all_space	= {1, (cob_u8_ptr)" ", &cob_all_attr};

/* Function prototypes */

static int		prog ();
static int		prog_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 25 2024 14:47:19 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[20] __attribute__((aligned));	/* W01-STRING */
	static cob_u8_t	b_7[2] __attribute__((aligned));	/* W01-INDEX */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_6	= {20, b_6, &a_3};	/* W01-STRING */
	static cob_field f_7	= {2, b_7, &a_2};	/* W01-INDEX */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 12        : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 12        : MOVE               : prog.cob */
  cob_move ((cob_field *)&c_1, &f_7);

  /* Line: 13        : INSPECT            : prog.cob */
  cob_inspect_init (&f_6, 0);
  cob_inspect_start ();
  cob_inspect_trailing (&f_7, &cob_all_space);
  cob_inspect_finish ();

  /* Line: 15        : IF                 : prog.cob */
  if (cob_cmp_int (&f_7, 10) != 0)
  {

    /* Line: 17        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &c_2);
  }

  /* Line: 20        : INSPECT            : prog.cob */
  cob_inspect_init (&f_6, 1);
  cob_inspect_start ();
  cob_inspect_trailing ((cob_field *)&c_3, &cob_all_space);
  cob_inspect_finish ();

  /* Line: 21        : IF                 : prog.cob */
  if (((int)memcmp (b_6, (cob_u8_ptr)"0123456789AAAAAAAAAA", 20) != 0))
  {

    /* Line: 23        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &c_4);
  }

  /* Line: 26        : MOVE               : prog.cob */
  cob_move ((cob_field *)&c_1, &f_7);

  /* Line: 27        : INSPECT            : prog.cob */
  cob_inspect_init (&f_6, 0);
  cob_inspect_start ();
  cob_inspect_trailing (&f_7, &cob_all_space);
  cob_inspect_finish ();
  cob_inspect_init (&f_6, 1);
  cob_inspect_start ();
  cob_inspect_trailing ((cob_field *)&c_5, (cob_field *)&c_3);
  cob_inspect_finish ();

  /* Line: 31        : IF                 : prog.cob */
  if (((int)memcmp (b_6, (cob_u8_ptr)"0123456789BBBBBBBBBB", 20) != 0))
  {

    /* Line: 33        : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &c_6);
  }

  /* Line: 36        : MOVE               : prog.cob */
  cob_move ((cob_field *)&c_1, &f_7);

  /* Line: 37        : MOVE               : prog.cob */
  memset (b_6, 32, 20);

  /* Line: 38        : INSPECT            : prog.cob */
  cob_inspect_init (&f_6, 0);
  cob_inspect_start ();
  cob_inspect_trailing (&f_7, (cob_field *)&c_3);
  cob_inspect_finish ();

  /* Line: 41        : IF                 : prog.cob */
  if (cob_cmp_int (&f_7, 0) != 0)
  {

    /* Line: 43        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_7, &f_7);
  }

  /* Line: 47        : MOVE               : prog.cob */
  cob_move ((cob_field *)&c_1, &f_7);

  /* Line: 48        : MOVE               : prog.cob */
  memset (b_6, 32, 20);

  /* Line: 49        : INSPECT            : prog.cob */
  cob_inspect_init (&f_6, 0);
  cob_inspect_start ();
  cob_inspect_trailing (&f_7, &cob_all_space);
  cob_inspect_finish ();

  /* Line: 52        : IF                 : prog.cob */
  if (cob_cmp_int (&f_7, 20) != 0)
  {

    /* Line: 54        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_8, &f_7);
  }

  /* Line: 58        : GOBACK             : prog.cob */
  goto exit_program;

  /* Program exit */

  exit_program:

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memcpy (b_6, "0123456789", 10);
  memset (b_6 + 10, 32, 10);
  memset (b_7, 0, 2);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'prog' */

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP

AT_SETUP([INSPECT REPLACING TRAILING ZEROS BY SPACES])
AT_KEYWORDS([backcomp runmisc figurative constant])

AT_DATA([prog.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:49:12 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 23 2024 11:49:12"
#define  COB_MODULE_DATE		20240423
#define  COB_MODULE_TIME		114912

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:49:12 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};

static const cob_field_attr cob_all_attr = {0x22, 0, 0, 0, NULL};


/* Constants */

static cob_field cob_all_space	= {1, (cob_u8_ptr)" ", &cob_all_attr};
static cob_field cob_all_zero	= {1, (cob_u8_ptr)"0", &cob_all_attr};



/* Function prototypes */

static int		prog ();
static int		prog_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 23 2024 11:49:12 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[4] __attribute__((aligned));	/* X */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_6	= {4, b_6, &a_1};	/* X */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 7         : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 7         : INSPECT            : prog.cob */
  cob_inspect_init (&f_6, 1);
  cob_inspect_start ();
  cob_inspect_trailing (&cob_all_space, &cob_all_zero);
  cob_inspect_finish ();

  /* Line: 8         : IF                 : prog.cob */
  if (((int)memcmp (b_6, (cob_u8_ptr)"1   ", 4) != 0))
  {

    /* Line: 9         : DISPLAY            : prog.cob */
    cob_display (0, 1, 1, &f_6);
  }

  /* Line: 10        : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memcpy (b_6, "1", 1);
  memset (b_6 + 1, 48, 3);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'prog' */

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP

AT_SETUP([INSPECT REPLACING complex])
AT_KEYWORDS([backcomp runmisc CHARACTERS TRAILING])

AT_DATA([prog.c], [[
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:50:30 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h>
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"2.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 23 2024 11:50:30"
#define  COB_MODULE_DATE		20240423
#define  COB_MODULE_TIME		115030

/* Global variables */
/* Generated by           cobc 2.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:50:30 */
/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x21,   0,   0, 0x1000, NULL};

static const cob_field_attr cob_all_attr = {0x22, 0, 0, 0, NULL};


/* Constants */
static const cob_field c_1	= {1, (cob_u8_ptr)"Z", &a_2};
static const cob_field c_2	= {1, (cob_u8_ptr)"A", &a_2};
static const cob_field c_3	= {1, (cob_u8_ptr)"Y", &a_2};
static const cob_field c_4	= {1, (cob_u8_ptr)"B", &a_2};
static const cob_field c_5	= {1, (cob_u8_ptr)"0", &a_2};
static const cob_field c_6	= {1, (cob_u8_ptr)"X", &a_2};
static const cob_field c_7	= {1, (cob_u8_ptr)"C", &a_2};
static const cob_field c_8	= {4, (cob_u8_ptr)"1 - ", &a_2};
static const cob_field c_9	= {1, (cob_u8_ptr)"E", &a_2};
static const cob_field c_10	= {4, (cob_u8_ptr)"2 - ", &a_2};

static cob_field cob_all_space	= {1, (cob_u8_ptr)" ", &cob_all_attr};
static cob_field cob_all_zero	= {1, (cob_u8_ptr)"0", &cob_all_attr};

/* Function prototypes */

static int		prog ();
static int		prog_ (const int);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 2.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 23 2024 11:50:30 */
	/* GnuCOBOL build date    Apr 10 2024 16:39:16 */
	/* GnuCOBOL package date  Sep 06 2017 18:45:29 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-2.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_6[12] __attribute__((aligned));	/* X */
	
	/* End of data storage */
	
	
	/* Fields */
	static cob_field f_6	= {12, b_6, &a_1};	/* X */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 7         : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 7         : INSPECT            : prog.cob */
  cob_inspect_init (&f_6, 1);
  cob_inspect_start ();
  cob_inspect_all ((cob_field *)&c_1, (cob_field *)&c_2);
  cob_inspect_start ();
  cob_inspect_all ((cob_field *)&c_3, (cob_field *)&c_4);
  cob_inspect_start ();
  cob_inspect_all ((cob_field *)&c_5, (cob_field *)&c_1);
  cob_inspect_start ();
  cob_inspect_trailing ((cob_field *)&c_6, (cob_field *)&c_7);
  cob_inspect_finish ();

  /* Line: 12        : IF                 : prog.cob */
  if (((int)memcmp (b_6, (cob_u8_ptr)"Z0ZYYCDCCEXX", 12) != 0))
  {

    /* Line: 13        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_8, &f_6);
  }

  /* Line: 15        : INSPECT            : prog.cob */
  cob_inspect_init (&f_6, 1);
  cob_inspect_start ();
  cob_inspect_before ((cob_field *)&c_7);
  cob_inspect_after ((cob_field *)&c_5);
  cob_inspect_characters (&cob_all_space);
  cob_inspect_start ();
  cob_inspect_before ((cob_field *)&c_9);
  cob_inspect_after ((cob_field *)&c_7);
  cob_inspect_characters (&cob_all_zero);
  cob_inspect_finish ();

  /* Line: 20        : IF                 : prog.cob */
  if (((int)memcmp (b_6, (cob_u8_ptr)"Z0   C000EXX", 12) != 0))
  {

    /* Line: 21        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_10, &f_6);
  }

  /* Line: 23        : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
   cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  /* Initialize module structure */
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->module_returning = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  b_2 = 0;
  memcpy (b_6, "AZABBCDCCECC", 12);

  initialized = 1;
  goto P_ret_initialize;

  /* CANCEL callback handling */
  P_cancel:

  if (!initialized) {
  	return 0;
  }
  if (module->module_active) {
  	cob_fatal_error (COB_FERROR_CANCEL);
  }

  initialized = 0;

  P_clear_decimal:

  return 0;

}

/* End PROGRAM-ID 'prog' */

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CLEANUP


# Note: EXAMINE was dropped with COBOL85, but some dialects
#       still support that

AT_SETUP([EXAMINE TALLYING])
AT_KEYWORDS([backcomp runmisc])

AT_DATA([prog.c], [[
/* Generated by           cobc 3.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:56:21 */
/* GnuCOBOL build date    Apr 17 2024 11:34:39 */
/* GnuCOBOL package date  Jul 28 2023 17:02:56 UTC */
/* Compile command        /opt/gnucobol/gnucobol-3.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h> /* for memcpy, memcmp and friends */
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"3.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 23 2024 11:56:21"
#define  COB_MODULE_DATE		20240423
#define  COB_MODULE_TIME		115621

/* Global variables */
/* Generated by           cobc 3.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:56:21 */
/* GnuCOBOL build date    Apr 17 2024 11:34:39 */
/* GnuCOBOL package date  Jul 28 2023 17:02:56 UTC */
/* Compile command        /opt/gnucobol/gnucobol-3.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Data storage */

/* PROGRAM-ID : prog */
static cob_u8_t	b_4[4] __attribute__((aligned));	/* TALLY */

/* End of data storage */


/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x1b,   5,   0, 0x0820, NULL};
static const cob_field_attr a_3 =	{0x21,   0,   0, 0x1000, NULL};
static const cob_field_attr a_4 =	{0x10,   7,   2, 0x0001, NULL};
static const cob_field_attr a_5 =	{0x10,   1,   0, 0x1000, NULL};
static const cob_field_attr a_6 =	{0x10,   7,   2, 0x0007, NULL};


/* Fields */

/* PROGRAM-ID : prog */
static cob_field f_4	= {4, b_4, &a_2};	/* TALLY */

/* End of fields */


/* Constants */
static const cob_field c_1	= {1, (cob_u8_ptr)"A", &a_3};
static const cob_field c_2	= {19, (cob_u8_ptr)"Should be 4 but is ", &a_3};
static const cob_field c_3	= {19, (cob_u8_ptr)"Should be 2 but is ", &a_3};
static const cob_field c_4	= {1, (cob_u8_ptr)"C", &a_3};
static const cob_field c_5	= {19, (cob_u8_ptr)"Should be 5 but is ", &a_3};
static const cob_field c_6	= {1, (cob_u8_ptr)"Z", &a_3};
static const cob_field c_7	= {26, (cob_u8_ptr)"Should be ZZBZBCZB but is ", &a_3};
static const cob_field c_8	= {26, (cob_u8_ptr)"Should be AABZBCZB but is ", &a_3};
static const cob_field c_9	= {1, (cob_u8_ptr)"X", &a_3};
static const cob_field c_10	= {26, (cob_u8_ptr)"Should be XXXXXCZB but is ", &a_3};
static const cob_field c_11	= {1, (cob_u8_ptr)"Y", &a_3};
static const cob_field c_12	= {19, (cob_u8_ptr)"Should be 8 but is ", &a_3};
static const cob_field c_13	= {26, (cob_u8_ptr)"Should be YYYYYYYY but is ", &a_3};
static const cob_field c_14	= {1, (cob_u8_ptr)"5", &a_5};
static const cob_field c_15	= {1, (cob_u8_ptr)"8", &a_5};
static const cob_field c_16	= {8, (cob_u8_ptr)"-8888855", &a_6};
static const cob_field c_17	= {27, (cob_u8_ptr)"Should be -88888.55 but is ", &a_3};


static COB_INLINE COB_A_INLINE int
cob_cmpswp_u32 (const void *p, const cob_s64_t n)
{
	void		*x;
	unsigned int	val;
	if (unlikely(n < 0)) {
		return 1;
	}
	x = &val;
	optim_memcpy (x, p, 4);
	val = COB_BSWAP_32 (val);
	return (val < n) ? -1 : (val > n);
}



/* Function prototypes */

static int		prog ();
static int		prog_ (const int);
static void		prog_module_init (cob_module *module);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

static void gc_module_so_init () __attribute__ ((constructor));
static void gc_module_so_init ()
{
  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);
}

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 3.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 23 2024 11:56:21 */
	/* GnuCOBOL build date    Apr 17 2024 11:34:39 */
	/* GnuCOBOL package date  Jul 28 2023 17:02:56 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-3.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* LINKAGE SECTION (Items not referenced by USING clause) */
	static unsigned char	*b_9 = NULL;  /* XML-NAMESPACE */
	static unsigned char	*b_10 = NULL;  /* XML-NAMESPACE-PREFIX */
	static unsigned char	*b_11 = NULL;  /* XML-NNAMESPACE */
	static unsigned char	*b_12 = NULL;  /* XML-NNAMESPACE-PREFIX */
	static unsigned char	*b_13 = NULL;  /* XML-NTEXT */
	static unsigned char	*b_14 = NULL;  /* XML-TEXT */
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_17[8] __attribute__((aligned));	/* X */
	static cob_u8_t	b_18[7] __attribute__((aligned));	/* N */
	static cob_u8_t	b_19[10] __attribute__((aligned));	/* T */
	
	/* End of local data storage */
	
	
	/* Fields (local) */
	static cob_field f_17	= {8, b_17, &a_1};	/* X */
	static cob_field f_18	= {7, b_18, &a_4};	/* N */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -10)
  		goto P_dump;
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 9         : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 9         : EXAMINE            : prog.cob */
  memset (/* TALLY */b_4, 0, (int)f_4.size);
  cob_inspect_init (&f_17, 0);
  cob_inspect_start ();
  cob_inspect_all (&f_4, (cob_field *)&c_1);
  cob_inspect_finish ();

  /* Line: 10        : IF                 : prog.cob */
  if (((int)cob_cmpswp_u32 (b_4, 4LL) != 0))
  {

    /* Line: 11        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_2, &f_4);
  }

  /* Line: 12        : EXAMINE            : prog.cob */
  memset (/* TALLY */b_4, 0, (int)f_4.size);
  cob_inspect_init (&f_17, 0);
  cob_inspect_start ();
  cob_inspect_leading (&f_4, (cob_field *)&c_1);
  cob_inspect_finish ();

  /* Line: 13        : IF                 : prog.cob */
  if (((int)cob_cmpswp_u32 (b_4, 2LL) != 0))
  {

    /* Line: 14        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_3, &f_4);
  }

  /* Line: 15        : EXAMINE            : prog.cob */
  memset (/* TALLY */b_4, 0, (int)f_4.size);
  cob_inspect_init (&f_17, 0);
  cob_inspect_start ();
  cob_inspect_before ((cob_field *)&c_4);
  cob_inspect_characters (&f_4);
  cob_inspect_finish ();

  /* Line: 16        : IF                 : prog.cob */
  if (((int)cob_cmpswp_u32 (b_4, 5LL) != 0))
  {

    /* Line: 17        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_5, &f_4);
  }

  /* Line: 18        : EXAMINE            : prog.cob */
  memset (/* TALLY */b_4, 0, (int)f_4.size);
  cob_inspect_init (&f_17, 0);
  cob_inspect_start ();
  cob_inspect_all (&f_4, (cob_field *)&c_1);
  cob_inspect_finish ();
  cob_inspect_init (&f_17, 1);
  cob_inspect_start ();
  cob_inspect_all ((cob_field *)&c_6, (cob_field *)&c_1);
  cob_inspect_finish ();

  /* Line: 19        : IF                 : prog.cob */
  if (((int)cob_cmpswp_u32 (b_4, 4LL) != 0))
  {

    /* Line: 20        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_2, &f_4);
  }

  /* Line: 21        : IF                 : prog.cob */
  if (((int)memcmp (b_17, (cob_u8_ptr)"ZZBZBCZB", 8) != 0))
  {

    /* Line: 22        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_7, &f_17);
  }

  /* Line: 23        : EXAMINE            : prog.cob */
  memset (/* TALLY */b_4, 0, (int)f_4.size);
  cob_inspect_init (&f_17, 0);
  cob_inspect_start ();
  cob_inspect_leading (&f_4, (cob_field *)&c_6);
  cob_inspect_finish ();
  cob_inspect_init (&f_17, 1);
  cob_inspect_start ();
  cob_inspect_leading ((cob_field *)&c_1, (cob_field *)&c_6);
  cob_inspect_finish ();

  /* Line: 24        : IF                 : prog.cob */
  if (((int)cob_cmpswp_u32 (b_4, 2LL) != 0))
  {

    /* Line: 25        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_3, &f_4);
  }

  /* Line: 26        : IF                 : prog.cob */
  if (((int)memcmp (b_17, (cob_u8_ptr)"AABZBCZB", 8) != 0))
  {

    /* Line: 27        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_8, &f_17);
  }

  /* Line: 28        : EXAMINE            : prog.cob */
  memset (/* TALLY */b_4, 0, (int)f_4.size);
  cob_inspect_init (&f_17, 0);
  cob_inspect_start ();
  cob_inspect_before ((cob_field *)&c_4);
  cob_inspect_characters (&f_4);
  cob_inspect_finish ();
  cob_inspect_init (&f_17, 1);
  cob_inspect_start ();
  cob_inspect_before ((cob_field *)&c_4);
  cob_inspect_characters ((cob_field *)&c_9);
  cob_inspect_finish ();

  /* Line: 29        : IF                 : prog.cob */
  if (((int)cob_cmpswp_u32 (b_4, 5LL) != 0))
  {

    /* Line: 30        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_5, &f_4);
  }

  /* Line: 31        : IF                 : prog.cob */
  if (((int)memcmp (b_17, (cob_u8_ptr)"XXXXXCZB", 8) != 0))
  {

    /* Line: 32        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_10, &f_17);
  }

  /* Line: 33        : EXAMINE            : prog.cob */
  memset (/* TALLY */b_4, 0, (int)f_4.size);
  cob_inspect_init (&f_17, 0);
  cob_inspect_start ();
  cob_inspect_before ((cob_field *)&c_11);
  cob_inspect_characters (&f_4);
  cob_inspect_finish ();
  cob_inspect_init (&f_17, 1);
  cob_inspect_start ();
  cob_inspect_before ((cob_field *)&c_11);
  cob_inspect_characters ((cob_field *)&c_11);
  cob_inspect_finish ();

  /* Line: 34        : IF                 : prog.cob */
  if (((int)cob_cmpswp_u32 (b_4, 8LL) != 0))
  {

    /* Line: 35        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_12, &f_4);
  }

  /* Line: 36        : IF                 : prog.cob */
  if (((int)memcmp (b_17, (cob_u8_ptr)"YYYYYYYY", 8) != 0))
  {

    /* Line: 37        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_13, &f_17);
  }

  /* Line: 38        : EXAMINE            : prog.cob */
  memset (/* TALLY */b_4, 0, (int)f_4.size);
  cob_inspect_init (&f_18, 0);
  cob_inspect_start ();
  cob_inspect_before ((cob_field *)&c_14);
  cob_inspect_characters (&f_4);
  cob_inspect_finish ();
  cob_inspect_init (&f_18, 1);
  cob_inspect_start ();
  cob_inspect_before ((cob_field *)&c_14);
  cob_inspect_characters ((cob_field *)&c_15);
  cob_inspect_finish ();

  /* Line: 39        : IF                 : prog.cob */
  if (((int)cob_cmp (&f_18, (cob_field *)&c_16) != 0))
  {

    /* Line: 40        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_17, &f_18);
  }

  /* Line: 45        : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
  P_cgerror:
  	cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  prog_module_init (module);

  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->xml_code = NULL;
  module->xml_event = NULL;
  module->xml_information = NULL;
  module->xml_namespace = NULL;
  module->xml_namespace_prefix = NULL;
  module->xml_nnamespace = NULL;
  module->xml_nnamespace_prefix = NULL;
  module->xml_ntext = NULL;
  module->xml_text = NULL;
  module->json_code = NULL;
  module->json_status = NULL;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  /* initialize field RETURN-CODE */
  b_2 = 0;

  /* initialize field TALLY */
  memset (b_4, 0, 4);

  /* initialize field X */
  memcpy (b_17, "AABABCAB", 8);

  /* initialize field N */
  memcpy (b_18, "111225u", 7);

  /* initialize field T */
  memcpy (b_19, "    8     ", 10);


  if (0 == 1) goto P_cgerror;
  initialized = 1;
  goto P_ret_initialize;

  P_dump:
    return 0;


  /* CANCEL callback handling */
  P_cancel:

  if (!initialized)
  	return 0;
  if (module && module->module_active)
  	cob_fatal_error (COB_FERROR_CANCEL);

  initialized = 0;

  P_clear_decimal:
  return 0;

}

/* End PROGRAM-ID 'prog' */

/* Initialize module structure for prog */
static void prog_module_init (cob_module *module)
{
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->gc_version = COB_PACKAGE_VERSION;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;
  module->flag_debug_trace = 0;
  module->flag_dump_ready = 0;
  module->xml_mode = 1;
  module->module_stmt = 0;
  module->module_sources = NULL;
}

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP

AT_SETUP([EXAMINE REPLACING])
AT_KEYWORDS([backcomp runmisc])

AT_DATA([prog.c], [[
/* Generated by           cobc 3.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:57:18 */
/* GnuCOBOL build date    Apr 17 2024 11:34:39 */
/* GnuCOBOL package date  Jul 28 2023 17:02:56 UTC */
/* Compile command        /opt/gnucobol/gnucobol-3.2/bin/cobc -Cx -fno-computed-goto prog.cob */

#include <string.h> /* for memcpy, memcmp and friends */
#define  COB_KEYWORD_INLINE __inline
#include <libcob.h>

#define  COB_SOURCE_FILE		"prog.cob"
#define  COB_PACKAGE_VERSION		"3.2"
#define  COB_PATCH_LEVEL		0
#define  COB_MODULE_FORMATTED_DATE	"avril 23 2024 11:57:18"
#define  COB_MODULE_DATE		20240423
#define  COB_MODULE_TIME		115718

/* Global variables */
/* Generated by           cobc 3.2.0 */
/* Generated from         prog.cob */
/* Generated at           avril 23 2024 11:57:18 */
/* GnuCOBOL build date    Apr 17 2024 11:34:39 */
/* GnuCOBOL package date  Jul 28 2023 17:02:56 UTC */
/* Compile command        /opt/gnucobol/gnucobol-3.2/bin/cobc -Cx -fno-computed-goto prog.cob */


/* Module path */
static const char		*cob_module_path = NULL;

/* Number of call parameters */
static int		cob_call_params = 0;

/* Attributes */

static const cob_field_attr a_1 =	{0x21,   0,   0, 0x0000, NULL};
static const cob_field_attr a_2 =	{0x21,   0,   0, 0x1000, NULL};
static const cob_field_attr a_3 =	{0x10,   5,   0, 0x0001, NULL};
static const cob_field_attr a_4 =	{0x10,   1,   0, 0x1000, NULL};


/* Constants */
static const cob_field c_1	= {1, (cob_u8_ptr)"X", &a_2};
static const cob_field c_2	= {1, (cob_u8_ptr)"A", &a_2};
static const cob_field c_3	= {26, (cob_u8_ptr)"Should be XXBXBCXB but is ", &a_2};
static const cob_field c_4	= {1, (cob_u8_ptr)"Y", &a_2};
static const cob_field c_5	= {26, (cob_u8_ptr)"Should be YYBXBCXB but is ", &a_2};
static const cob_field c_6	= {1, (cob_u8_ptr)"C", &a_2};
static const cob_field c_7	= {1, (cob_u8_ptr)"B", &a_2};
static const cob_field c_8	= {26, (cob_u8_ptr)"Should be YYCXBCXB but is ", &a_2};
static const cob_field c_9	= {1, (cob_u8_ptr)"Z", &a_2};
static const cob_field c_10	= {26, (cob_u8_ptr)"Should be ZZZZBCXB but is ", &a_2};
static const cob_field c_11	= {1, (cob_u8_ptr)"3", &a_4};
static const cob_field c_12	= {1, (cob_u8_ptr)"1", &a_4};
static const cob_field c_13	= {24, (cob_u8_ptr)"Should be -33322 but is ", &a_2};



/* Function prototypes */

static int		prog ();
static int		prog_ (const int);
static void		prog_module_init (cob_module *module);

/* Main function */
int
main (int argc, char **argv)
{
  cob_init (argc, argv);
  cob_stop_run (prog ());
}

/* Functions */

static void gc_module_so_init () __attribute__ ((constructor));
static void gc_module_so_init ()
{
  cob_check_version (COB_SOURCE_FILE, COB_PACKAGE_VERSION, COB_PATCH_LEVEL);
}

/* PROGRAM-ID 'prog' */

/* ENTRY 'prog' */

static int
prog ()
{
  return prog_ (0);
}

static int
prog_ (const int entry)
{
  /* Program local variables */
  /* Generated by           cobc 3.2.0 */
	/* Generated from         prog.cob */
	/* Generated at           avril 23 2024 11:57:18 */
	/* GnuCOBOL build date    Apr 17 2024 11:34:39 */
	/* GnuCOBOL package date  Jul 28 2023 17:02:56 UTC */
	/* Compile command        /opt/gnucobol/gnucobol-3.2/bin/cobc -Cx -fno-computed-goto prog.cob */
	
	/* Program local variables for 'prog' */
	
	/* Module initialization indicator */
	static unsigned int	initialized = 0;
	
	/* Module structure pointer */
	static cob_module	*module = NULL;
	
	/* Global variable pointer */
	cob_global		*cob_glob_ptr;
	
	
	/* LINKAGE SECTION (Items not referenced by USING clause) */
	static unsigned char	*b_9 = NULL;  /* XML-NAMESPACE */
	static unsigned char	*b_10 = NULL;  /* XML-NAMESPACE-PREFIX */
	static unsigned char	*b_11 = NULL;  /* XML-NNAMESPACE */
	static unsigned char	*b_12 = NULL;  /* XML-NNAMESPACE-PREFIX */
	static unsigned char	*b_13 = NULL;  /* XML-NTEXT */
	static unsigned char	*b_14 = NULL;  /* XML-TEXT */
	
	
	/* Call parameters */
	cob_field		*cob_procedure_params[1];
	
	/* Perform frame stack */
	struct cob_frame	*frame_ptr;
	struct cob_frame	frame_stack[255];
	
	
	/* Data storage */
	static int	b_2;	/* RETURN-CODE */
	static cob_u8_t	b_17[8] __attribute__((aligned));	/* X */
	static cob_u8_t	b_18[1] __attribute__((aligned));	/* Y */
	static cob_u8_t	b_19[5] __attribute__((aligned));	/* N */
	
	/* End of local data storage */
	
	
	/* Fields (local) */
	static cob_field f_17	= {8, b_17, &a_1};	/* X */
	static cob_field f_19	= {5, b_19, &a_3};	/* N */
	
	/* End of fields */
	
	

  /* Start of function code */

  /* CANCEL callback */
  if (unlikely(entry < 0)) {
  	if (entry == -10)
  		goto P_dump;
  	if (entry == -20)
  		goto P_clear_decimal;
  	goto P_cancel;
  }

  /* Check initialized, check module allocated, */
  /* set global pointer, */
  /* push module stack, save call parameter count */
  if (cob_module_global_enter (&module, &cob_glob_ptr, 0, entry, 0))
  	return -1;

  /* Set address of module parameter list */
  module->cob_procedure_params = cob_procedure_params;

  /* Set frame stack pointer */
  frame_ptr = frame_stack;
  frame_ptr->perform_through = 0;

  /* Initialize rest of program */
  if (unlikely(initialized == 0)) {
  	goto P_initialize;
  }
  P_ret_initialize:

  /* Increment module active */
  module->module_active++;

  /* Entry dispatch */
  goto l_2;

  /* PROCEDURE DIVISION */

  /* Line: 9         : Entry     prog                    : prog.cob */
  l_2:;

  /* Line: 9         : EXAMINE            : prog.cob */
  cob_inspect_init (&f_17, 1);
  cob_inspect_start ();
  cob_inspect_all ((cob_field *)&c_1, (cob_field *)&c_2);
  cob_inspect_finish ();

  /* Line: 10        : IF                 : prog.cob */
  if (((int)memcmp (b_17, (cob_u8_ptr)"XXBXBCXB", 8) != 0))
  {

    /* Line: 11        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_3, &f_17);
  }

  /* Line: 12        : EXAMINE            : prog.cob */
  cob_inspect_init (&f_17, 1);
  cob_inspect_start ();
  cob_inspect_leading ((cob_field *)&c_4, (cob_field *)&c_1);
  cob_inspect_finish ();

  /* Line: 13        : IF                 : prog.cob */
  if (((int)memcmp (b_17, (cob_u8_ptr)"YYBXBCXB", 8) != 0))
  {

    /* Line: 14        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_5, &f_17);
  }

  /* Line: 15        : EXAMINE            : prog.cob */
  cob_inspect_init (&f_17, 1);
  cob_inspect_start ();
  cob_inspect_first ((cob_field *)&c_6, (cob_field *)&c_7);
  cob_inspect_finish ();

  /* Line: 16        : IF                 : prog.cob */
  if (((int)memcmp (b_17, (cob_u8_ptr)"YYCXBCXB", 8) != 0))
  {

    /* Line: 17        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_8, &f_17);
  }

  /* Line: 18        : EXAMINE            : prog.cob */
  cob_inspect_init (&f_17, 1);
  cob_inspect_start ();
  cob_inspect_before ((cob_field *)&c_7);
  cob_inspect_characters ((cob_field *)&c_9);
  cob_inspect_finish ();

  /* Line: 19        : IF                 : prog.cob */
  if (((int)memcmp (b_17, (cob_u8_ptr)"ZZZZBCXB", 8) != 0))
  {

    /* Line: 20        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_10, &f_17);
  }

  /* Line: 21        : EXAMINE            : prog.cob */
  cob_inspect_init (&f_19, 1);
  cob_inspect_start ();
  cob_inspect_all ((cob_field *)&c_11, (cob_field *)&c_12);
  cob_inspect_finish ();

  /* Line: 22        : IF                 : prog.cob */
  if (((int)cob_cmp_numdisp (b_19, 5, -33322LL, 1) != 0))
  {

    /* Line: 23        : DISPLAY            : prog.cob */
    cob_display (0, 1, 2, &c_13, &f_19);
  }

  /* Line: 24        : STOP RUN           : prog.cob */
  cob_stop_run (b_2);

  /* Program exit */

  /* Decrement module active count */
  if (module->module_active) {
  	module->module_active--;
  }

  /* Pop module stack */
  cob_module_leave (module);

  /* Program return */
  return b_2;

  /* Frame stack jump table */
  P_switch:
  P_cgerror:
  	cob_fatal_error (COB_FERROR_CODEGEN);


  /* Program initialization */
  P_initialize:

  cob_module_path = cob_glob_ptr->cob_main_argv0;

  prog_module_init (module);

  module->collating_sequence = NULL;
  module->crt_status = NULL;
  module->cursor_pos = NULL;
  module->xml_code = NULL;
  module->xml_event = NULL;
  module->xml_information = NULL;
  module->xml_namespace = NULL;
  module->xml_namespace_prefix = NULL;
  module->xml_nnamespace = NULL;
  module->xml_nnamespace_prefix = NULL;
  module->xml_ntext = NULL;
  module->xml_text = NULL;
  module->json_code = NULL;
  module->json_status = NULL;

  /* Initialize cancel callback */
  cob_set_cancel (module);

  /* Initialize WORKING-STORAGE */
  /* initialize field RETURN-CODE */
  b_2 = 0;

  /* initialize field X */
  memcpy (b_17, "AABABCAB", 8);

  /* initialize field Y */
  *(cob_u8_ptr)(b_18) = (unsigned char)'Y';

  /* initialize field N */
  memcpy (b_19, "1112r", 5);


  if (0 == 1) goto P_cgerror;
  initialized = 1;
  goto P_ret_initialize;

  P_dump:
    return 0;


  /* CANCEL callback handling */
  P_cancel:

  if (!initialized)
  	return 0;
  if (module && module->module_active)
  	cob_fatal_error (COB_FERROR_CANCEL);

  initialized = 0;

  P_clear_decimal:
  return 0;

}

/* End PROGRAM-ID 'prog' */

/* Initialize module structure for prog */
static void prog_module_init (cob_module *module)
{
  module->module_name = "prog";
  module->module_formatted_date = COB_MODULE_FORMATTED_DATE;
  module->module_source = COB_SOURCE_FILE;
  module->gc_version = COB_PACKAGE_VERSION;
  module->module_entry.funcptr = (void *(*)())prog;
  module->module_cancel.funcptr = (void *(*)())prog_;
  module->module_ref_count = NULL;
  module->module_path = &cob_module_path;
  module->module_active = 0;
  module->module_date = COB_MODULE_DATE;
  module->module_time = COB_MODULE_TIME;
  module->module_type = 0;
  module->module_param_cnt = 0;
  module->ebcdic_sign = 0;
  module->decimal_point = '.';
  module->currency_symbol = '$';
  module->numeric_separator = ',';
  module->flag_filename_mapping = 1;
  module->flag_binary_truncate = 1;
  module->flag_pretty_display = 1;
  module->flag_host_sign = 0;
  module->flag_no_phys_canc = 1;
  module->flag_main = 1;
  module->flag_fold_call = 0;
  module->flag_exit_program = 0;
  module->flag_debug_trace = 0;
  module->flag_dump_ready = 0;
  module->xml_mode = 1;
  module->module_stmt = 0;
  module->module_sources = NULL;
}

/* End functions */


]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP
