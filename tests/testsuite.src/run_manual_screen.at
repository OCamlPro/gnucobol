## Copyright (C) 2014-2018,2020-2023 Free Software Foundation, Inc.
## Written by Edward Hart, Simon Sobisch
##
## This file is part of GnuCOBOL.
##
## The GnuCOBOL compiler is free software: you can redistribute it
## and/or modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation, either version 3 of the
## License, or (at your option) any later version.
##
## GnuCOBOL is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with GnuCOBOL.  If not, see <https://www.gnu.org/licenses/>.

### GnuCOBOL Test Suite

### ISO+IEC+1989-2014 9.2 Screens, 13.17 Screen description entry, 13.18 Data
###  division clauses.

AT_SETUP([LINE])
AT_KEYWORDS([screen])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr.
           03  LINE 1 VALUE 'Enter "y" if the numbers below correspond '
               & 'to their line number and are in the '.
           03  LINE 2 VALUE 'first column. (This is line 2.)'.
           03  LINE 3 VALUE '3'.
           03  LINE 4 VALUE '4'.
           03  LINE 5 VALUE '5'.
           03  group-1 LINE - 3.
               05  group-2 COL 5.
                   07  LINE PLUS 6 VALUE '8'.
                   07  LINE MINUS 2 VALUE '6'.
           03  group-3 LINE + 1.
               05 COL 1 VALUE '7'.
           03  LINE + 3 PIC X, REQUIRED USING success-flag.

       PROCEDURE        DIVISION.
           DISPLAY scr
           ACCEPT scr

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([COLUMN (1)])
AT_KEYWORDS([COL])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  dummy        PIC X(5).
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr.
           03  VALUE 'Enter "y" if the numbers below correspond to '
               & 'their column number.'.
           03  LINE 2 VALUE '123456789'.
           03  LINE 3 COLUMN 2.
               05  COL 1 VALUE '1'.
               05  COL 5 VALUE '5'.
               05  COL MINUS 2 VALUE '3'.
               05  COL PLUS 1 VALUE '4'.
               05  group-1 LINE 3.
                   07  VALUE '2'.
                   07  group-2 COLUMN + 4.
                       09  group-3.
                           11 COL + 0 VALUE '6'.
               05  COLUMN + 1, VALUE '7'.
           03  LINE 5 PIC X, REQUIRED, USING success-flag.

       PROCEDURE        DIVISION.
           DISPLAY scr
           ACCEPT scr

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([COLUMN (2)])
AT_KEYWORDS([COL])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  dummy-1     PIC X(10).
       01  dummy-2     PIC X(10).
       01  dummy-3     PIC X(10).

       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       SCREEN          SECTION.
       01  scr.
           03  PIC X(80) VALUE 'Enter "y" if there are three non-'-
               'overlapping input fields on one line below.'.
           03  LINE + 1, PIC X(80) VALUE 'field.'.
           03  LINE + 2, PIC X(10) TO dummy-1.
           03  COL + 2, PIC X(10) TO dummy-2.
           03  COL + 2, PIC X(10) TO dummy-3.
           03  success-field LINE + 2, PIC X, REQUIRED,
                                              USING success-flag.

       PROCEDURE       DIVISION.
           DISPLAY scr
           ACCEPT scr

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([LINE non-zero, COLUMN zero])
AT_KEYWORDS([COL extensions])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr.
           03  LINE 1 VALUE 'Enter "y" if you see 123 on the line '-
               'below starting at column 1.'.
           03  LINE + 3 PIC X, REQUIRED USING success-flag.
           03  LINE 2 VALUE '1'.

       PROCEDURE        DIVISION.
           DISPLAY scr
           DISPLAY '2' LINE 2, COLUMN 0; '3'
           ACCEPT scr

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([LINE zero, COLUMN non-zero])
AT_KEYWORDS([COL zero extensions])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr.
           03  LINE 1 VALUE 'Enter "y" if you see 123 on the line '-
               'below starting at column 1.'.
           03  LINE + 3 PIC X, REQUIRED USING success-flag.
           03  LINE 2 COL 3, VALUE '3'.
           03  LINE 1 COL 80 VALUE ' '.

       PROCEDURE        DIVISION.
           DISPLAY scr
           DISPLAY '1' LINE 0, COLUMN 1; '2'
           ACCEPT scr

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([LINE zero, COLUMN zero])
AT_KEYWORDS([COL extensions])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr.
           03  LINE 1 VALUE 'Enter "y" if you see 1234 on the line '-
               'below starting at column 1.'.
           03  LINE + 3 PIC X, REQUIRED USING success-flag.
           03  LINE 2 VALUE '1'.

       PROCEDURE        DIVISION.
           DISPLAY scr
           DISPLAY '2' LINE 0, COLUMN 0
           DISPLAY '3' LINE 2, COLUMN 3
           DISPLAY '4' AT 0000

           ACCEPT scr

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([DISPLAY AT])
AT_KEYWORDS([extensions])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       01  screen-loc   PIC 9(6) VALUE 4004.

       SCREEN           SECTION.
       01  scr.
           03  VALUE 'Enter "y" if the numbers 1-3 are in a diagonal'-
               ' line from line 2, column 2.'.
           03  success-field PIC X, LINE 6, REQUIRED,
                                    USING success-flag.

       PROCEDURE DIVISION.
           DISPLAY '1' AT 0202
           DISPLAY '2' AT 003003
           DISPLAY '3' AT screen-loc
           DISPLAY scr
           ACCEPT scr

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([DISPLAY LOW-VALUES (one statement)])
AT_KEYWORDS([LOW-VALUE extensions])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr.
           03  LINE 1 VALUE 'Enter "y" if the word below starts at line'
               & ' 3, column 3.'.
           03  LINE + 4 PIC X, REQUIRED USING success-flag.

       PROCEDURE        DIVISION.
           DISPLAY scr
           DISPLAY LOW-VALUES AT LINE 3, COL 3; 'Hello!'
           ACCEPT scr

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([DISPLAY LOW-VALUES (two statements)])
AT_KEYWORDS([LOW-VALUE extensions])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr.
           03  LINE 1 VALUE 'Enter "y" if the word below starts at line'
               & ' 3, column 3.'.
           03  LINE + 4 PIC X, REQUIRED USING success-flag.

       PROCEDURE        DIVISION.
           DISPLAY scr
           DISPLAY LOW-VALUES AT LINE 3, COL 3
           DISPLAY 'Hello!' UPON CRT
           ACCEPT scr

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([DISPLAY SPACES])
AT_KEYWORDS([SPACE extensions])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.

       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr-1.
           03  LINE 1 VALUE 'Enter "y" if all the text after foo in the'
               & ' screen has been erased.'.
           03  LINE 3 VALUE 'Lorem ipsum dolor sit amet, consectetur ad'
               & 'ipiscing elit. Curabitur dapibus dui'.
           03  LINE 4 VALUE 'vitae augue lobortis, non tempor diam tris'
               & 'tique. Donec dignissim ex velit, ut'.
           03  LINE 5 VALUE 'efficitur tellus pharetra at. Curabitur at'
               & ' condimentum nunc, nec accumsan'.
           03  LINE 6 VALUE 'nulla. Nulla at feugiat elit, eget condime'
               & 'ntum justo. Nam lorem lectus,'.
           03  LINE 7 VALUE 'imperdiet sit amet odio eu, eleifend conse'
               & 'ctetur ligula. Duis diam felis, porta'.
           03  LINE 8 VALUE 'id diam id, ultrices finibus augue. Mauris'
               & ' imperdiet, dolor sed sodales porta,'.
           03  LINE 9 VALUE 'justo nunc consequat nulla, iaculis venena'
               & 'tis lorem libero sit amet'.
           03  LINE 10 VALUE 'magna. Nullam pulvinar nullam.'.
           03  success-field LINE + 2, PIC X, REQUIRED,
                                       USING success-flag.

       PROCEDURE        DIVISION.
           DISPLAY scr-1
           DISPLAY SPACES AT LINE 6, COL 8; 'foo' HIGHLIGHT
           ACCEPT success-field

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE -fdisplay-special-fig-consts prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([DISPLAY ALL X'01'])
AT_KEYWORDS([SOH extensions])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.

       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr-1.
           03  LINE 1 VALUE 'Enter "y" if all the text after foo on '
               & 'that line alone has been erased.'.
           03  LINE 3 VALUE 'Lorem ipsum dolor sit amet, consectetur ad'
               & 'ipiscing elit. Curabitur dapibus dui'.
           03  LINE 4 VALUE 'vitae augue lobortis, non tempor diam tris'
               & 'tique. Donec dignissim ex velit, ut'.
           03  LINE 5 VALUE 'efficitur tellus pharetra at. Curabitur at'
               & ' condimentum nunc, nec accumsan'.
           03  LINE 6 VALUE 'nulla. Nulla at feugiat elit, eget condime'
               & 'ntum justo. Nam lorem lectus,'.
           03  LINE 7 VALUE 'imperdiet sit amet odio eu, eleifend conse'
               & 'ctetur ligula. Duis diam felis, porta'.
           03  LINE 8 VALUE 'id diam id, ultrices finibus augue. Mauris'
               & ' imperdiet, dolor sed sodales porta,'.
           03  LINE 9 VALUE 'justo nunc consequat nulla, iaculis venena'
               & 'tis lorem libero sit amet'.
           03  LINE 10 VALUE 'magna. Nullam pulvinar nullam.'.
           03  success-field LINE + 2, PIC X, REQUIRED,
                                       USING success-flag.

       PROCEDURE        DIVISION.
           DISPLAY scr-1
           DISPLAY ALL X'01', LINE 6, COLUMN 8; 'foo' HIGHLIGHT
           ACCEPT success-field

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE -fdisplay-special-fig-consts prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([DISPLAY ALL X'02'])
AT_KEYWORDS([STX extensions])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.

       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr-1.
           03  LINE 3 VALUE 'Lorem ipsum dolor sit amet, consectetur ad'
               & 'ipiscing elit. Curabitur dapibus dui'.
           03  LINE 4 VALUE 'vitae augue lobortis, non tempor diam tris'
               & 'tique. Donec dignissim ex velit, ut'.
           03  LINE 5 VALUE 'efficitur tellus pharetra at. Curabitur at'
               & ' condimentum nunc, nec accumsan'.
           03  LINE 6 VALUE 'nulla. Nulla at feugiat elit, eget condime'
               & 'ntum justo. Nam lorem lectus,'.
           03  LINE 7 VALUE 'imperdiet sit amet odio eu, eleifend conse'
               & 'ctetur ligula. Duis diam felis, porta'.
           03  LINE 8 VALUE 'id diam id, ultrices finibus augue. Mauris'
               & ' imperdiet, dolor sed sodales porta,'.
           03  LINE 9 VALUE 'justo nunc consequat nulla, iaculis venena'
               & 'tis lorem libero sit amet'.
           03  LINE 10 VALUE 'magna. Nullam pulvinar nullam.'.

       01  scr-2.
           03  LINE 6 COL 8 VALUE 'foo' BLANK SCREEN, HIGHLIGHT.
           03  LINE 1 VALUE 'Enter "y" if foo is the only word below.'.

       01  scr-3.
           03  VALUE 'Enter "y" if foo is the only word below.'.
           03  success-field COL + 2, PIC X, REQUIRED,
                                      USING success-flag.

       PROCEDURE        DIVISION.
           DISPLAY scr-1
           DISPLAY ALL X'02' AT LINE 6 COL 8; 'foo' HIGHLIGHT
           DISPLAY scr-3
           ACCEPT scr-3

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE -fdisplay-special-fig-consts prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([DISPLAY ALL X'07'])
AT_KEYWORDS([BELL BEEP extensions])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr.
           03  VALUE 'Enter "y" if you heard a beep:'.
           03  success-field PIC X, COL + 2, REQUIRED, TO success-flag
                                                       FROM 'Y'.
       01  scr2.
           03  LINE 4 VALUE 'system beep may be turned off ' &
                             'on this system.'.
           03  LINE 5 VALUE 'Retesting with COB_BELL=FLASH...'.
           03  LINE + 2
               VALUE 'Enter "y" if you''ve seen your terminal flash'.
           03  success-field PIC X, COL + 2, REQUIRED, TO success-flag
                                                       FROM 'Y'.

       PROCEDURE DIVISION.
           DISPLAY scr
           DISPLAY ALL X'07' UPON CRT
           ACCEPT scr

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           END-IF

           SET ENVIRONMENT 'COB_BELL' TO 'FLASH'
           CALL 'C$SLEEP' USING '1'

           DISPLAY scr2
           DISPLAY ALL X'07' UPON CRT
           ACCEPT scr2

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE -fdisplay-special-fig-consts prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([Screen position after field display])
AT_KEYWORDS([LINE COLUMN])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr.
           03  VALUE 'Enter "y" if this sentence starts at line 1,'-
               ' column 1:'.
           03  success-field PIC X, COL + 2, REQUIRED,
                                             USING success-flag.

       PROCEDURE DIVISION.
           DISPLAY 'ignore this' AT LINE 4 COL 4
           DISPLAY scr
           ACCEPT success-field

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP

# See section 13.17.3

AT_SETUP([Overridden clauses (1)])
AT_KEYWORDS([LINE COLUMN COL])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  dummy        PIC X(5).
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr.
       03  VALUE 'Enter "y" if the numbers below correspond to their'
           & ' column number and all on'.
           03  LINE 2 VALUE 'lines 3 and 4.'.
           03  LINE 3 VALUE '123456789'.
           03  LINE 4 VALUE '  34'.
           03  FILLER LINE + 6.
               05 COL 3.
                   07  COL 1.
                       09  LINE 4 VALUE '1'.
                       09  VALUE '2'.
               05  LINE + 1, COL + 2.
                   07  LINE 4, COL + 1, VALUE '5'.
           03  LINE 6 PIC X, REQUIRED, USING success-flag.

       PROCEDURE        DIVISION.
           DISPLAY scr
           ACCEPT scr

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([Overridden clauses (2)])
AT_KEYWORDS([HIGHLIGHT LOWLIGHT BACKGROUND COLOR COLOUR])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  dummy        PIC X(5).
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr.
           03  VALUE 'Enter "y" if the word below is not dim and has'
               & ' black background.'.
           03  LINE + 1, LOWLIGHT BACKGROUND-COLOR 3.
               05  HIGHLIGHT BACKGROUND-COLOR 0.
                   07 VALUE 'Highlight'.
           03  LINE + 2, PIC X USING success-flag.

       PROCEDURE        DIVISION.
           DISPLAY scr
           ACCEPT scr

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([AUTO])
AT_KEYWORDS([position])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  dummy        PIC X(5).
       01  success-flag PIC X.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr.
           03                PIC X(80) VALUE 'Enter "y" in the bottom'
                             & ' field if:'.
           03  LINE + 1,     PIC X(80) VALUE ' * when the left field is'
                             & ' full, the cursor automatically moves'.
           03  LINE + 1,     PIC X(80) VALUE '   to the next field.'.
           03  LINE + 1,     PIC X(80) VALUE ' * this does not happen'
                             & ' with the other fields.'.
           03  LINE + 1,     PIC X(80) VALUE ' * the fields below are'
                             & ' on one line and separated by a single'
                             & ' column.'.

           03  test-fields   LINE + 2.
               05  field-1   COL 1, PIC X(5) AUTO TO dummy.
               05  field-2   COL + 2, PIC X(5) TO dummy.
               05  field-3   COL + 2, PIC X(5) TO dummy.
           03  success-field LINE + 2, COLUMN 1; PIC X, REQUIRED
                             TO success-flag FROM 'Y'.

       PROCEDURE DIVISION.
           DISPLAY scr
           ACCEPT scr

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([SCREEN BACKGROUND- / FOREGROUND-COLOUR])
AT_KEYWORDS([BACKGROUND-COLOR BACKGROUND-COLOUR FOREGROUND-COLOR
COLOR COLOUR HIGHLIGHT BLINK])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  dummy        PIC X(10).
       01  success-flag PIC X.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr.
           03  PIC X(80)
               VALUE 'Enter "y" if the text below matches the colour '
               & 'of the background/text.'.
           03  LINE + 1, COL 1, PIC X(80)
               VALUE 'Note: the black text is on white background/the '
               & 'white background has black text'.
           03  LINE + 1, COL 1, PIC X(80)
               VALUE 'to make the text visible.'.

           03  LINE + 1.
             05  COL 1,   PIC X(08) VALUE 'Black'   FOREGROUND-COLOR 0
                                                    BACKGROUND-COLOR 7.
             05  COL + 2, PIC X(08) VALUE 'Blue'    FOREGROUND-COLOR 1.
             05  COL + 2, PIC X(08) VALUE 'Green'   FOREGROUND-COLOR 2.
             05  COL + 2, PIC X(08) VALUE 'Cyan'    FOREGROUND-COLOR 3.
             05  COL + 2, PIC X(08) VALUE 'Red'     FOREGROUND-COLOR 4.
             05  COL + 2, PIC X(08) VALUE 'Magenta' FOREGROUND-COLOR 5.
             05  COL + 2, PIC X(15) VALUE 'Brown/Yellow'
                                                    FOREGROUND-COLOR 6.
             05  COL + 2, PIC X(08) VALUE 'White'   FOREGROUND-COLOR 7.

           03  LINE + 1.
             05  COL 1,   PIC X(08) VALUE 'Black'   BACKGROUND-COLOR 0
                                                    FOREGROUND-COLOR 7.
             05  COL + 2, PIC X(08) VALUE 'Blue'    BACKGROUND-COLOR 1.
             05  COL + 2, PIC X(08) VALUE 'Green'   BACKGROUND-COLOR 2.
             05  COL + 2, PIC X(08) VALUE 'Cyan'    BACKGROUND-COLOR 3.
             05  COL + 2, PIC X(08) VALUE 'Red'     BACKGROUND-COLOR 4.
             05  COL + 2, PIC X(08) VALUE 'Magenta' BACKGROUND-COLOR 5.
             05  COL + 2, PIC X(15) VALUE 'Brown/Yellow'
                                                    BACKGROUND-COLOR 6.
             05  COL + 2, PIC X(08) VALUE 'White'   BACKGROUND-COLOR 7
                                                    FOREGROUND-COLOR 0.

           03  LINE + 2.
           03  PIC X(80)
               VALUE 'The following is the same as above, '
               & 'with "extended" attributes set;'.
           03  LINE + 1, COL 1, PIC X(80)
               VALUE 'this should have the same effect as otherwise '
               & 'highlighted for the first line'.
           03  LINE + 1, COL 1, PIC X(80)
               VALUE 'and blinking for the second one.'.

           03  LINE + 1.
             05  COL 1,   PIC X(08) VALUE 'Black'   FOREGROUND-COLOR 8
                                                    BACKGROUND-COLOR 0.
             05  COL + 2, PIC X(08) VALUE 'Blue'    FOREGROUND-COLOR 9.
             05  COL + 2, PIC X(08) VALUE 'Green'   FOREGROUND-COLOR 10.
             05  COL + 2, PIC X(08) VALUE 'Cyan'    FOREGROUND-COLOR 11.
             05  COL + 2, PIC X(08) VALUE 'Red'     FOREGROUND-COLOR 12.
             05  COL + 2, PIC X(08) VALUE 'Magenta' FOREGROUND-COLOR 13.
             05  COL + 2, PIC X(15) VALUE 'Brown/Yellow'
                                                    FOREGROUND-COLOR 14.
             05  COL + 2, PIC X(08) VALUE 'White'   FOREGROUND-COLOR 15.

           03  LINE + 1.
             05  COL 1,   PIC X(08) VALUE 'Black'   BACKGROUND-COLOR 8
                                                    FOREGROUND-COLOR 15.
             05  COL + 2, PIC X(08) VALUE 'Blue'    BACKGROUND-COLOR 9.
             05  COL + 2, PIC X(08) VALUE 'Green'   BACKGROUND-COLOR 10.
             05  COL + 2, PIC X(08) VALUE 'Cyan'    BACKGROUND-COLOR 11.
             05  COL + 2, PIC X(08) VALUE 'Red'     BACKGROUND-COLOR 12.
             05  COL + 2, PIC X(08) VALUE 'Magenta' BACKGROUND-COLOR 13.
             05  COL + 2, PIC X(15) VALUE 'Brown/Yellow'
                                                    BACKGROUND-COLOR 14.
             05  COL + 2, PIC X(08) VALUE 'White'   BACKGROUND-COLOR 15
                                                    FOREGROUND-COLOR 8.

           03  success-field LINE + 2, COL 1, PIC X, REQUIRED,
               TO success-flag FROM 'Y'.

       PROCEDURE DIVISION.
           DISPLAY scr
           ACCEPT scr

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([SCREEN BACKGROUND- / FOREGROUND-COLOUR via COLOR])
AT_KEYWORDS([BACKGROUND-COLOR BACKGROUND-COLOUR FOREGROUND-COLOR
COLOR COLOUR REVERSED])

# Currently not implemented
AT_XFAIL_IF([true])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  dummy        PIC X(10).
       01  success-flag PIC X.
           88  success  VALUE 'Y', 'y'.
       77  CBLACK       PIC 9(05) VALUE 1.
       77  CBLUE        PIC 9(05) VALUE 2.
       77  CGREEN       PIC 9(05) VALUE 3.
       77  CCYAN        PIC 9(05) VALUE 4.
       77  CRED         PIC 9(05) VALUE 5.
       77  CMAGENTA     PIC 9(05) VALUE 6.
       77  CYELLOW      PIC 9(05) VALUE 7.
       77  CWHITE       PIC 9(05) VALUE 8.

       SCREEN           SECTION.
       01  scr.
           03  PIC X(80)
               VALUE 'Enter "y" if the text below matches the colour '
               & 'of the background/text.'.
           03  LINE + 1, COL 1, PIC X(80)
               VALUE 'Note: the black text is on white background/the '
               & 'white background has black text'.
           03  LINE + 1, COL 1, PIC X(80)
               VALUE 'to make the text visible.'.

           03  LINE + 1.
             05  COL 1,   PIC X(08) VALUE 'Black'   COLOR CBLACK.
             05  COL + 2, PIC X(08) VALUE 'Blue'    COLOR CBLUE.
             05  COL + 2, PIC X(08) VALUE 'Green'   COLOR CGREEN.
             05  COL + 2, PIC X(08) VALUE 'Cyan'    COLOR CCYAN.
             05  COL + 2, PIC X(08) VALUE 'Red'     COLOR CRED.
             05  COL + 2, PIC X(08) VALUE 'Magenta' COLOR CMAGENTA.
             05  COL + 2, PIC X(15) VALUE 'Brown/Yellow'
                                                    COLOR CYELLOW.
             05  COL + 2, PIC X(08) VALUE 'White'   COLOR CWHITE.

       01  scr2.
           03  LINE 5.
             05  COL 1,   PIC X(08) VALUE 'Black'   BACKGROUND-COLOR 0
                                                    FOREGROUND-COLOR 7.
             05  COL + 2, PIC X(08) VALUE 'Blue'    BACKGROUND-COLOR 1.
             05  COL + 2, PIC X(08) VALUE 'Green'   BACKGROUND-COLOR 2.
             05  COL + 2, PIC X(08) VALUE 'Cyan'    BACKGROUND-COLOR 3.
             05  COL + 2, PIC X(08) VALUE 'Red'     BACKGROUND-COLOR 4.
             05  COL + 2, PIC X(08) VALUE 'Magenta' BACKGROUND-COLOR 5.
             05  COL + 2, PIC X(15) VALUE 'Brown/Yellow'
                                                    BACKGROUND-COLOR 6.
             05  COL + 2, PIC X(08) VALUE 'White'   BACKGROUND-COLOR 7
                                                    FOREGROUND-COLOR 0.

           03  success-field LINE + 2, COL 1, PIC X, REQUIRED,
               TO success-flag FROM 'Y'.

       PROCEDURE DIVISION.
           ADD  256 TO CBLACK
           DISPLAY scr
           ADD 1024 TO CBLACK, CBLUE, CGREEN, CCYAN,
                       CRED, CMAGENTA, CYELLOW, CWHITE
           DISPLAY scr2
           ACCEPT scr

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([field BACKGROUND- / FOREGROUND-COLOUR])
AT_KEYWORDS([BACKGROUND-COLOR BACKGROUND-COLOUR FOREGROUND-COLOR
COLOR COLOUR HIGHLIGHT BLINK])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  dummy        PIC X(10).
       01  success-flag PIC X.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr.
           03  PIC X(80)
               VALUE 'Enter "y" if the text below matches the colour '
               & 'of the background/text.'.
           03  LINE + 1, COL 1, PIC X(80)
               VALUE 'Note: the black text is on white background/the '
               & 'white background has black text'.
           03  LINE + 1, COL 1, PIC X(80)
               VALUE 'to make the text visible.'.

           03  LINE + 1.
             05  COL 1,   PIC X(08) VALUE 'Black'   FOREGROUND-COLOR 0
                                                    BACKGROUND-COLOR 7.
             05  COL + 2, PIC X(08) VALUE 'Blue'    FOREGROUND-COLOR 1.
             05  COL + 2, PIC X(08) VALUE 'Green'   FOREGROUND-COLOR 2.
             05  COL + 2, PIC X(08) VALUE 'Cyan'    FOREGROUND-COLOR 3.
             05  COL + 2, PIC X(08) VALUE 'Red'     FOREGROUND-COLOR 4.
             05  COL + 2, PIC X(08) VALUE 'Magenta' FOREGROUND-COLOR 5.
             05  COL + 2, PIC X(15) VALUE 'Brown/Yellow'
                                                    FOREGROUND-COLOR 6.
             05  COL + 2, PIC X(08) VALUE 'White'   FOREGROUND-COLOR 7.

           03  LINE + 1.
             05  COL 1,   PIC X(08) VALUE 'Black'   BACKGROUND-COLOR 0
                                                    FOREGROUND-COLOR 7.
             05  COL + 2, PIC X(08) VALUE 'Blue'    BACKGROUND-COLOR 1.
             05  COL + 2, PIC X(08) VALUE 'Green'   BACKGROUND-COLOR 2.
             05  COL + 2, PIC X(08) VALUE 'Cyan'    BACKGROUND-COLOR 3.
             05  COL + 2, PIC X(08) VALUE 'Red'     BACKGROUND-COLOR 4.
             05  COL + 2, PIC X(08) VALUE 'Magenta' BACKGROUND-COLOR 5.
             05  COL + 2, PIC X(15) VALUE 'Brown/Yellow'
                                                    BACKGROUND-COLOR 6.
             05  COL + 2, PIC X(08) VALUE 'White'   BACKGROUND-COLOR 7
                                                    FOREGROUND-COLOR 0.

           03  LINE + 2.
           03  PIC X(80)
               VALUE 'The following is the same as above, '
               & 'with "extended" attributes set;'.
           03  LINE + 1, COL 1, PIC X(80)
               VALUE 'this should have the same effect as otherwise '
               & 'highlighted for the first line'.
           03  LINE + 1, COL 1, PIC X(80)
               VALUE 'and blinking for the second one.'.

           03  LINE + 1.
             05  COL 1,   PIC X(08) VALUE 'Black'   FOREGROUND-COLOR 8
                                                    BACKGROUND-COLOR 0.
             05  COL + 2, PIC X(08) VALUE 'Blue'    FOREGROUND-COLOR 9.
             05  COL + 2, PIC X(08) VALUE 'Green'   FOREGROUND-COLOR 10.
             05  COL + 2, PIC X(08) VALUE 'Cyan'    FOREGROUND-COLOR 11.
             05  COL + 2, PIC X(08) VALUE 'Red'     FOREGROUND-COLOR 12.
             05  COL + 2, PIC X(08) VALUE 'Magenta' FOREGROUND-COLOR 13.
             05  COL + 2, PIC X(15) VALUE 'Brown/Yellow'
                                                    FOREGROUND-COLOR 14.
             05  COL + 2, PIC X(08) VALUE 'White'   FOREGROUND-COLOR 15.

           03  LINE + 1.
             05  COL 1,   PIC X(08) VALUE 'Black'   BACKGROUND-COLOR 8
                                                    FOREGROUND-COLOR 15.
             05  COL + 2, PIC X(08) VALUE 'Blue'    BACKGROUND-COLOR 9.
             05  COL + 2, PIC X(08) VALUE 'Green'   BACKGROUND-COLOR 10.
             05  COL + 2, PIC X(08) VALUE 'Cyan'    BACKGROUND-COLOR 11.
             05  COL + 2, PIC X(08) VALUE 'Red'     BACKGROUND-COLOR 12.
             05  COL + 2, PIC X(08) VALUE 'Magenta' BACKGROUND-COLOR 13.
             05  COL + 2, PIC X(15) VALUE 'Brown/Yellow'
                                                    BACKGROUND-COLOR 14.
             05  COL + 2, PIC X(08) VALUE 'White'   BACKGROUND-COLOR 15
                                                    FOREGROUND-COLOR 8.

           03  success-field LINE + 2, COL 1, PIC X, REQUIRED,
               TO success-flag FROM 'Y'.

       PROCEDURE DIVISION.
           DISPLAY scr
           ACCEPT scr

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([field BACKGROUND- / FOREGROUND-COLOUR via COLOR])
AT_KEYWORDS([BACKGROUND-COLOR BACKGROUND-COLOUR FOREGROUND-COLOR
COLOR COLOUR REVERSED HIGHLIGHT BLINK])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       77  CBLACK       PIC 9(05) COMP-5 VALUE 1.
       77  CBLUE        PIC 9(05) COMP-5 VALUE 2.
       77  CGREEN       PIC 9(05) COMP-5 VALUE 3.
       77  CCYAN        PIC 9(05) COMP-5 VALUE 4.
       77  CRED         PIC 9(05) COMP-5 VALUE 5.
       77  CMAGENTA     PIC 9(05) COMP-5 VALUE 6.
       77  CYELLOW      PIC 9(05) COMP-5 VALUE 7.
       77  CWHITE       PIC 9(05) COMP-5 VALUE 8.
       
       77  LIN          PIC 99    COMP-5.

       01  scr1 PIC X(80)
               VALUE 'Enter "y" if the text below matches the colour '
               & 'of the background/text.'.
       01  scr2 PIC X(80)
               VALUE 'Note: the black text is on white background/the '
               & 'white background has black text'.
       01  scr3 PIC X(80)
               VALUE 'to make the text visible.'.
       01  scr8 PIC X(80)
               VALUE 'following lines should be identical but '
               & 'highlighted for the first line'.
       01  scr9 PIC X(80)
               VALUE 'and blinking for the second one.'.

       01  scrblack PIC X(08) VALUE 'Black'.
       01  scrblue  PIC X(08) VALUE 'Blue'.
       01  scrgreen PIC X(08) VALUE 'Green'.
       01  scrcyan  PIC X(08) VALUE 'Cyan'.
       01  scrred   PIC X(08) VALUE 'Red'.
       01  scrmaggy PIC X(08) VALUE 'Magenta'.
       01  scryell  PIC X(14) VALUE 'Brown/Yellow'.
       01  scrwhite PIC X(08) VALUE 'White'.

       PROCEDURE DIVISION.
       testme.
           ADD  256 TO CBLACK
           DISPLAY scr1 AT 0102
           DISPLAY scr2 AT 0202
           DISPLAY scr3 AT 0303
           MOVE 5 TO LIN
           PERFORM dspcol
           ADD 1024 TO CBLACK, CBLUE, CGREEN, CCYAN,
                       CRED, CMAGENTA, CYELLOW, CWHITE
           MOVE 6 TO LIN
           PERFORM dspcol
           SUBTRACT 1024 FROM CBLACK, CBLUE, CGREEN, CCYAN,
                       CRED, CMAGENTA, CYELLOW, CWHITE
      *
           DISPLAY scr8 AT 0802
           DISPLAY scr9 AT 0903
           ADD 4096 TO CBLACK, CBLUE, CGREEN, CCYAN,
                       CRED, CMAGENTA, CYELLOW, CWHITE
           MOVE 11 TO LIN
           PERFORM dspcol
           SUBTRACT 4096 FROM CBLACK, CBLUE, CGREEN, CCYAN,
                       CRED, CMAGENTA, CYELLOW, CWHITE
           ADD 1024, 16384 TO CBLACK, CBLUE, CGREEN, CCYAN,
                       CRED, CMAGENTA, CYELLOW, CWHITE
           MOVE 12 TO LIN
           PERFORM dspcol
      *
           ACCEPT success-flag AT 1401 UPDATE REQUIRED

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1.

       dspcol.
           DISPLAY scrblack LINE LIN COL 1,  COLOR CBLACK.
           DISPLAY scrblue  LINE LIN COL 11, COLOR CBLUE.
           DISPLAY scrgreen LINE LIN COL 21, COLOR CGREEN.
           DISPLAY scrcyan  LINE LIN COL 31, COLOR CCYAN.
           DISPLAY scrred   LINE LIN COL 41, COLOR CRED.
           DISPLAY scrmaggy LINE LIN COL 51, COLOR CMAGENTA.
           DISPLAY scryell  LINE LIN COL 61, COLOR CYELLOW.
           DISPLAY scrwhite LINE LIN COL 77, COLOR CWHITE.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([field BACKGROUND- / FOREGROUND-COLOUR via CONTROL])
AT_KEYWORDS([screen DISPLAY REVERSED HIGHLIGHT BLINK COLOR
BACKGROUND-COLOR BACKGROUND-COLOUR FOREGROUND-COLOR COLOUR])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [[
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

      * ACU: "=", names only
       77  CBLACK       PIC X(99) VALUE "FCOLOR=BLACK, "
                                      & "BCOLOR=WHITE,".
       77  CBLUE        PIC X(99) VALUE "FCOLOR=BLUE  , "
                                      & "BCOLOR=BLACK,".
      * MF: "IS" or "=" or " ", also extended color numbers
       77  CGREEN       PIC X(99) VALUE "FCOLOR IS GREEN, "
                                      & "BCOLOR BLACK,".
       77  CCYAN        PIC X(99) VALUE "FCOLOR  =CYAN, "
                                      & "BCOLOR= BLACK, ".
       77  CRED         PIC X(99) VALUE "FCOLOR=RED "
                                      & "BCOLOR=BLACK, ".
       77  CMAGENTA     PIC X(99) VALUE "FCOLOR=MAGENTA, "
                                      & "BCOLOR=BLACK,".
       77  CYELLOW      PIC X(99) VALUE "FCOLOR = 6, "
                                      & "BCOLOR=BLACK,".
       77  CWHITE       PIC X(99) VALUE "FCOLOR=WHITE, "
                                      & "BCOLOR=BLACK, ".
       
       77  LIN          PIC 99    COMP-5.

       01  scr1 PIC X(75)
               VALUE 'Enter "y" if the text below matches the colour '
               & 'of the background/text.'.
       01  scr2 PIC X(75)
               VALUE 'Note: the black text is on white background/the '
               & 'white background has black'.
       01  scr3 PIC X(75)
               VALUE 'text to make the text visible.'
               & '  [This text *may* has "surrounding lines".]'.
       01  scr8 PIC X(75)
               VALUE 'following lines should be identical but '
               & 'highlighted for the first line'.
       01  scr9 PIC X(75)
               VALUE 'and blinking for the second one.'.

       01  scrblack PIC X(08) VALUE 'Black'.
       01  scrblue  PIC X(08) VALUE 'Blue'.
       01  scrgreen PIC X(08) VALUE 'Green'.
       01  scrcyan  PIC X(08) VALUE 'Cyan'.
       01  scrred   PIC X(08) VALUE 'Red'.
       01  scrmaggy PIC X(08) VALUE 'Magenta'.
       01  scryell  PIC X(14) VALUE 'Brown/Yellow'.
       01  scrwhite PIC X(08) VALUE 'White'.

       PROCEDURE DIVISION.
       testme.
           MOVE 2 TO LIN
           DISPLAY scr1 ( 1:1) AT LINE LIN COL 2
              CONTROL "LEFTLINE OVERLINE"
           DISPLAY scr1 ( 2:)  AT LINE LIN COL 2 + 1
              CONTROL "OVERLINE"
           DISPLAY scr1 (75:)  AT LINE LIN COL 2 + 75
              CONTROL "OVERLINE  RIGHTLINE"
           ADD  1 TO LIN
           DISPLAY scr2 ( 1:1) AT LINE LIN COL 2
              CONTROL "LEFTLINE"
           DISPLAY scr2 ( 2:)  AT LINE LIN COL 2 + 1
           DISPLAY scr2 (75:)  AT LINE LIN COL 2 + 75
              CONTROL "RIGHTLINE"
           ADD  1 TO LIN
           DISPLAY scr3 ( 1:1) AT LINE LIN COL 2
              CONTROL "LEFTLINE UNDERLINE"
           DISPLAY scr3 ( 2:)  AT LINE LIN COL 2 + 1
              CONTROL "UNDERLINE"
           DISPLAY scr3 (75:)  AT LINE LIN COL 2 + 75
              CONTROL "UNDERLINE  RIGHTLINE"
      *
           ADD  2 TO LIN
           PERFORM dspcol
           MOVE "REVERSE," TO 
               CBLACK (40:), CBLUE (40:), CGREEN (40:), CCYAN (40:),
               CRED (40:), CMAGENTA (40:), CYELLOW (40:), CWHITE (40:)
           ADD  1 TO LIN
           PERFORM dspcol
      *
           INSPECT CRED REPLACING ALL "=" BY " "
           ADD  2 TO LIN
           DISPLAY scr8 AT LINE LIN COL 2
           ADD  1 TO LIN
           DISPLAY scr9 AT LINE LIN COL 2
      *
           MOVE "HIGHLIGHT,NO REVERSE" TO 
               CBLACK (50:), CBLUE (50:), CGREEN (50:), CCYAN (50:),
               CRED (50:), CMAGENTA (50:), CYELLOW (50:), CWHITE (50:)
           ADD  1 TO LIN
           PERFORM dspcol
           MOVE "NO HIGH, BLINK" TO 
               CBLACK (60:), CBLUE (60:), CGREEN (60:), CCYAN (60:),
               CRED (60:), CMAGENTA (60:), CYELLOW (60:), CWHITE (60:)
           MOVE 12 TO LIN
           PERFORM dspcol
      *
           ACCEPT success-flag AT 1801 UPDATE REQUIRED

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1.

       dspcol.
           DISPLAY scrblack LINE LIN COL 1,  CONTROL CBLACK.
           DISPLAY scrblue  LINE LIN COL 10, CONTROL CBLUE.
           DISPLAY scrgreen LINE LIN COL 19, CONTROL CGREEN.
           DISPLAY scrcyan  LINE LIN COL 28, CONTROL CCYAN.
           DISPLAY scrred   LINE LIN COL 37, CONTROL CRED.
           DISPLAY scrmaggy LINE LIN COL 46, CONTROL CMAGENTA.
           DISPLAY scryell  LINE LIN COL 55, CONTROL CYELLOW.
           DISPLAY scrwhite LINE LIN COL 70, CONTROL CWHITE.
]])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([line draw characters via CONTROL GRAPHICS])
AT_KEYWORDS([screen DISPLAY])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [[
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.
       
       77  LIN-START    PIC 99    COMP-5.
       77  LIN          PIC 99    COMP-5.

       01  scr1 PIC X(75)
               VALUE 'Enter "y" if you see line draw characters. '
               & 'The first set (single/double)'.
       01  scr2 PIC X(75)
               VALUE 'uses HIGHLIGHT, the second uses '
               & 'LOWLIGHT, BLINK and MAGENTA.'.

       01  graphcontrol PIC X(50) VALUE 'HIGH, GRAPHICS'.

       PROCEDURE DIVISION.
       testme.
           MOVE 2 TO LIN
           DISPLAY scr1 AT LINE LIN COL 2
           ADD  1 TO LIN
           DISPLAY scr2 AT LINE LIN COL 2
      *
           MOVE 5 TO LIN-START
           PERFORM dspcol
           MOVE 12 TO LIN-START
           MOVE "LOW BLINK FCOLOR=MAGENTA GRAPHICS" TO graphcontrol
           PERFORM dspcol
      *
           ACCEPT success-flag AT 1801 UPDATE REQUIRED

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1.

       dspcol.
      *    Single-line graphics
           MOVE LIN-START TO LIN
           DISPLAY "lqqqqwqqqqk" LINE LIN COL 05, CONTROL graphcontrol.
           ADD  1 TO LIN
           DISPLAY "x    x    x" LINE LIN COL 05, CONTROL graphcontrol.
           ADD  1 TO LIN
           DISPLAY "tqqqqnqqqqu" LINE LIN COL 05, CONTROL graphcontrol.
           ADD  1 TO LIN
           DISPLAY "x    x    x" LINE LIN COL 05, CONTROL graphcontrol.
           ADD  1 TO LIN
           DISPLAY "mqqqqvqqqqj" LINE LIN COL 05, CONTROL graphcontrol.
           ADD  1 TO LIN
      *    Double-line graphics
           MOVE LIN-START TO LIN
           DISPLAY "LQQQQWQQQQK" LINE LIN COL 20, CONTROL graphcontrol.
           ADD  1 TO LIN
           DISPLAY "X    X    X" LINE LIN COL 20, CONTROL graphcontrol.
           ADD  1 TO LIN
           DISPLAY "TQQQQNQQQQU" LINE LIN COL 20, CONTROL graphcontrol.
           ADD  1 TO LIN
           DISPLAY "X    X    X" LINE LIN COL 20, CONTROL graphcontrol.
           ADD  1 TO LIN
           DISPLAY "MQQQQVQQQQJ" LINE LIN COL 20, CONTROL graphcontrol.
]])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([BEEP])
AT_KEYWORDS([BELL FLASH])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr.
           03  BELL.
           03  VALUE 'Enter "y" if you heard a beep:'.
           03  success-field PIC X, COL + 2, REQUIRED, TO success-flag
                                                       FROM 'Y'.
       01  scr2.
           03  LINE 4 VALUE 'system beep may be turned off ' &
                             'on this system.'.
           03  LINE 5 VALUE 'Retesting with COB_BELL=FLASH...'.
           03  LINE + 2,
               VALUE 'Enter "y" if you''ve seen your terminal flash'.
           03  success-field PIC X, COL + 2, REQUIRED, TO success-flag
                                                       FROM 'Y'.

       PROCEDURE DIVISION.
           DISPLAY scr
           ACCEPT scr

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           END-IF

           SET ENVIRONMENT 'COB_BELL' TO 'FLASH'
           CALL 'C$SLEEP' USING '1'

           DISPLAY scr2
           DISPLAY ALL X'07' UPON CRT
           ACCEPT scr2

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([BLANK LINE])
AT_KEYWORDS([screen])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.

       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr-1.
           03  LINE 3 VALUE 'Lorem ipsum dolor sit amet, consectetur ad'
               & 'ipiscing elit. Curabitur dapibus dui'.
           03  LINE 4 VALUE 'vitae augue lobortis, non tempor diam tris'
               & 'tique. Donec dignissim ex velit, ut'.
           03  LINE 5 VALUE 'efficitur tellus pharetra at. Curabitur at'
               & ' condimentum nunc, nec accumsan'.
           03  LINE 6 VALUE 'nulla. Nulla at feugiat elit, eget condime'
               & 'ntum justo. Nam lorem lectus,'.
           03  LINE 7 VALUE 'imperdiet sit amet odio eu, eleifend conse'
               & 'ctetur ligula. Duis diam felis, porta'.
           03  LINE 8 VALUE 'id diam id, ultrices finibus augue. Mauris'
               & ' imperdiet, dolor sed sodales porta,'.
           03  LINE 9 VALUE 'justo nunc consequat nulla, iaculis venena'
               & 'tis lorem libero sit amet'.
           03  LINE 10 VALUE 'magna. Nullam pulvinar nullam.'.
           03  success-field LINE + 2, PIC X, REQUIRED,
                                              USING success-flag.

       01  scr-2.
           03  LINE 6 COL 8 VALUE 'foo' BLANK LINE, HIGHLIGHT.
           03  LINE 1 VALUE 'Enter "y" if foo is the only word on one'
               & ' line.'.

       PROCEDURE        DIVISION.
           DISPLAY scr-1
           DISPLAY scr-2
           ACCEPT success-field

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([BLANK SCREEN])
AT_KEYWORDS([screen])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.

       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr-1.
           03  LINE 3 VALUE 'Lorem ipsum dolor sit amet, consectetur ad'
               & 'ipiscing elit. Curabitur dapibus dui'.
           03  LINE 4 VALUE 'vitae augue lobortis, non tempor diam tris'
               & 'tique. Donec dignissim ex velit, ut'.
           03  LINE 5 VALUE 'efficitur tellus pharetra at. Curabitur at'
               & ' condimentum nunc, nec accumsan'.
           03  LINE 6 VALUE 'nulla. Nulla at feugiat elit, eget condime'
               & 'ntum justo. Nam lorem lectus,'.
           03  LINE 7 VALUE 'imperdiet sit amet odio eu, eleifend conse'
               & 'ctetur ligula. Duis diam felis, porta'.
           03  LINE 8 VALUE 'id diam id, ultrices finibus augue. Mauris'
               & ' imperdiet, dolor sed sodales porta,'.
           03  LINE 9 VALUE 'justo nunc consequat nulla, iaculis venena'
               & 'tis lorem libero sit amet'.
           03  LINE 10 VALUE 'magna. Nullam pulvinar nullam.'.
           03  success-field LINE + 2, PIC X, REQUIRED,
                                              USING success-flag.

       01  scr-2.
           03  LINE 6 COL 8 VALUE 'foo' BLANK SCREEN, HIGHLIGHT.
           03  LINE 1 VALUE 'Enter "y" if foo is the only word below.'.

       PROCEDURE        DIVISION.
           DISPLAY scr-1
           DISPLAY scr-2
           ACCEPT success-field

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([BLANK ignored in ACCEPT])
AT_KEYWORDS([screen])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.

       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr.
           03  LINE 1 VALUE 'Enter "y" if you can see lorem ipsum '
               & 'filler text.'.
           03  LINE 3 COL 3 VALUE 'Lorem ipsum dolor sit amet,'
               & ' consectetur ad ipiscing elit.'.

       01  success-scr.
           03 LINE 3, BLANK LINE, PIC X, REQUIRED, USING success-flag.

       PROCEDURE        DIVISION.
           DISPLAY scr
           ACCEPT success-scr

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([BLINK])
AT_KEYWORDS([screen])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr.
           03  PIC X(80)
               VALUE 'Enter "y" if the string below is blinking:'.
           03  LINE + 1, PIC X(10) VALUE 'Blink' BLINK.
           03  success-field LINE + 2, PIC X, REQUIRED,
                                              USING success-flag.

       PROCEDURE DIVISION.
           DISPLAY scr
           ACCEPT scr

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([ERASE EOS])
AT_KEYWORDS([screen])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.

       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr-1.
           03  LINE 1 VALUE 'Enter "y" if all the text after foo in the'
               & ' screen has been erased.'.
           03  LINE 3 VALUE 'Lorem ipsum dolor sit amet, consectetur ad'
               & 'ipiscing elit. Curabitur dapibus dui'.
           03  LINE 4 VALUE 'vitae augue lobortis, non tempor diam tris'
               & 'tique. Donec dignissim ex velit, ut'.
           03  LINE 5 VALUE 'efficitur tellus pharetra at. Curabitur at'
               & ' condimentum nunc, nec accumsan'.
           03  LINE 6 VALUE 'nulla. Nulla at feugiat elit, eget condime'
               & 'ntum justo. Nam lorem lectus,'.
           03  LINE 7 VALUE 'imperdiet sit amet odio eu, eleifend conse'
               & 'ctetur ligula. Duis diam felis, porta'.
           03  LINE 8 VALUE 'id diam id, ultrices finibus augue. Mauris'
               & ' imperdiet, dolor sed sodales porta,'.
           03  LINE 9 VALUE 'justo nunc consequat nulla, iaculis venena'
               & 'tis lorem libero sit amet'.
           03  LINE 10 VALUE 'magna. Nullam pulvinar nullam.'.
           03  success-field LINE + 2, PIC X, REQUIRED,
                                              USING success-flag.

       01  scr-2.
           03  LINE 6 COL 8 VALUE 'foo' ERASE EOS, HIGHLIGHT.

       PROCEDURE        DIVISION.
           DISPLAY scr-1
           DISPLAY scr-2
           ACCEPT success-field

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([ERASE EOL])
AT_KEYWORDS([screen])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.

       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr-1.
           03  LINE 1 VALUE 'Enter "y" if all the text after foo on '
               & 'that line alone has been erased.'.
           03  LINE 3 VALUE 'Lorem ipsum dolor sit amet, consectetur ad'
               & 'ipiscing elit. Curabitur dapibus dui'.
           03  LINE 4 VALUE 'vitae augue lobortis, non tempor diam tris'
               & 'tique. Donec dignissim ex velit, ut'.
           03  LINE 5 VALUE 'efficitur tellus pharetra at. Curabitur at'
               & ' condimentum nunc, nec accumsan'.
           03  LINE 6 VALUE 'nulla. Nulla at feugiat elit, eget condime'
               & 'ntum justo. Nam lorem lectus,'.
           03  LINE 7 VALUE 'imperdiet sit amet odio eu, eleifend conse'
               & 'ctetur ligula. Duis diam felis, porta'.
           03  LINE 8 VALUE 'id diam id, ultrices finibus augue. Mauris'
               & ' imperdiet, dolor sed sodales porta,'.
           03  LINE 9 VALUE 'justo nunc consequat nulla, iaculis venena'
               & 'tis lorem libero sit amet'.
           03  LINE 10 VALUE 'magna. Nullam pulvinar nullam.'.
           03  success-field LINE + 2, PIC X, REQUIRED,
                                              USING success-flag.

       01  scr-2.
           03  LINE 6 COL 8 VALUE 'foo' ERASE EOL, HIGHLIGHT.

       PROCEDURE        DIVISION.
           DISPLAY scr-1
           DISPLAY scr-2
           ACCEPT success-field

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([ERASE ignored in ACCEPT])
AT_KEYWORDS([EOS])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.

       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr.
           03  LINE 1 VALUE 'Enter "y" if you can see lorem ipsum '
               & 'filler text.'.
           03  LINE 3 VALUE 'Lorem ipsum dolor sit amet, consectetur ad'
               & 'ipiscing elit. Curabitur dapibus dui'.
           03  LINE 4 VALUE 'vitae augue lobortis, non tempor diam tris'
               & 'tique. Donec dignissim ex velit, ut'.
           03  LINE 5 VALUE 'efficitur tellus pharetra at. Curabitur at'
               & ' condimentum nunc, nec accumsan'.
           03  LINE 6 VALUE 'nulla. Nulla at feugiat elit, eget condime'
               & 'ntum justo. Nam lorem lectus,'.
           03  LINE 7 VALUE 'imperdiet sit amet odio eu, eleifend conse'
               & 'ctetur ligula. Duis diam felis, porta'.
           03  LINE 8 VALUE 'id diam id, ultrices finibus augue. Mauris'
               & ' imperdiet, dolor sed sodales porta,'.
           03  LINE 9 VALUE 'justo nunc consequat nulla, iaculis venena'
               & 'tis lorem libero sit amet'.
           03  LINE 10 VALUE 'magna. Nullam pulvinar nullam.'.
           03  LINE 3 ERASE EOS.
           03  success-field LINE 12, PIC X, REQUIRED,
                                             USING success-flag.

       PROCEDURE        DIVISION.
           DISPLAY scr
           ACCEPT scr

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([FULL and REQUIRED])
AT_KEYWORDS([screen])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  dummy        PIC X(10).
       01  success-flag PIC X.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr.
           03  PIC X(80)
               VALUE 'Enter "y" if you cannot continue without filling '
               & 'all of the below field:'.
           03  LINE + 1, PIC X(10), FULL, REQUIRED, TO dummy.
                    *> no initial value for success as we request input
           03  success-field LINE + 2, PIC X, REQUIRED, TO success-flag.

       PROCEDURE DIVISION.
           DISPLAY scr
           ACCEPT scr

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([HIGHLIGHT])
AT_KEYWORDS([screen])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr.
           03  PIC X(80)
               VALUE 'Enter "y" if the text below is bright '
               & '(highlighted):'.
           03  LINE + 1, PIC X(10) VALUE 'Highlight' HIGHLIGHT.
           03  success-field LINE + 2, PIC X, REQUIRED,
                                              USING success-flag.

       PROCEDURE DIVISION.
           DISPLAY scr
           ACCEPT scr

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([INITIAL])
AT_KEYWORDS([screen])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  dummy-1     PIC X(10).
       01  dummy-2     PIC X(10).
       01  dummy-3     PIC X(10).

       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       SCREEN          SECTION.
       01  scr.
           03  PIC X(80) VALUE 'Enter "y" if the cursor is initially '-
               'located at the start of the rightmost'.
           03  LINE + 1, PIC X(80) VALUE 'field.'.
           03  LINE + 2, PIC X(10) TO dummy-1.
           03  COL + 2, PIC X(10) TO dummy-2.
           03  COL + 2, PIC X(10) TO dummy-3, INITIAL.
           03  success-field LINE + 2, PIC X, REQUIRED,
                                              USING success-flag.

       PROCEDURE       DIVISION.
           DISPLAY scr
           ACCEPT scr

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([LEFTLINE])
AT_KEYWORDS([GRID])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

# Currently not implemented
AT_XFAIL_IF([true])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr.
           03  PIC X(80)
               VALUE 'Enter "y" if the string has a vertical line to '
               & 'its left:'.
           03  LINE + 1, COL 2, PIC X(10) VALUE 'Leftline' LEFTLINE.
           03  success-field LINE + 2, PIC X, REQUIRED,
                                              USING success-flag.

       PROCEDURE DIVISION.
           DISPLAY scr
           ACCEPT scr

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([LOWLIGHT])
AT_KEYWORDS([screen])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr.
           03  PIC X(80)
               VALUE 'Enter "y" if the string below is dim (lowlight):'.
           03  LINE + 1, PIC X(10) VALUE 'Lowlight' LOWLIGHT.
           03  success-field LINE + 2, PIC X, REQUIRED,
                                              USING success-flag.

       PROCEDURE DIVISION.
           DISPLAY scr
           ACCEPT scr

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([OVERLINE])
AT_KEYWORDS([screen])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

# Currently not implemented
AT_XFAIL_IF([true])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr.
           03  PIC X(80)
               VALUE 'Enter "y" if the string below is overlined:'.
           03  LINE + 1, PIC X(10) VALUE 'Overline' OVERLINE.
           03  success-field LINE + 2, PIC X, REQUIRED,
                                              USING success-flag.

       PROCEDURE DIVISION.
           DISPLAY scr
           ACCEPT scr

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([REVERSE-VIDEO])
AT_KEYWORDS([screen])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr.
           03  PIC X(80)
               VALUE 'Enter "y" if the background and foreground '
               & 'colours of the string below have'.
           03  LINE + 1, PIC X(80) VALUE 'swapped:'.
           03  LINE + 1, PIC X(20) VALUE 'Reversed colours'
               REVERSE-VIDEO.
           03  success-field LINE + 2, PIC X USING success-flag.

       PROCEDURE DIVISION.
           DISPLAY scr
           ACCEPT scr

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([SECURE])
AT_KEYWORDS([PASSWORD])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  dummy        PIC X(10).
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr.
           03  PIC X(80)
               VALUE 'Enter "y" if text in the field below is replaced '
               & 'with asterisks:'.
           03  LINE + 1, PIC X(10) SECURE TO dummy, PROMPT CHARACTER
               "-".
           03  success-field LINE + 2, PIC X, REQUIRED,
                                              USING success-flag.

       PROCEDURE DIVISION.
           DISPLAY scr
           ACCEPT scr

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([SIZE with items])
AT_KEYWORDS([PROTECTED extensions])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       01  num-1		PIC 9(5) VALUE 12345.
       01  num-2        PIC X(10) VALUE '12345'.
       01  num-3        PIC 9(4) VALUE 1234.

       01  four         PIC 9 VALUE 4.

       PROCEDURE        DIVISION.
           DISPLAY 'Enter "y" if you see exactly four rows of 1234, all'
               & ' aligned.' LINE 1

           DISPLAY num-1 LINE 3 COL 3, SIZE 4;
               num-2 LINE 4 COL 3, SIZE four;
               num-3 LINE 5 COL 3, SIZE 8;
               '1234' LINE 6 COL 3, SIZE ZERO

           ACCEPT success-flag LINE 8, REQUIRED UPDATE

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([SIZE with figurative constants])
AT_KEYWORDS([PROTECTED extensions])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       PROCEDURE        DIVISION.
           DISPLAY 'Enter "y" if you see exactly three rows of quotes, '
               & 'zeroes and ''abc'',', LINE 1
           DISPLAY '8 characters long, all aligned.', LINE 2

           DISPLAY QUOTES LINE 4 COL 3, SIZE 8;
               ZEROES LINE 5 COL 3, SIZE 8;
               ALL 'abc' LINE 6 COL 3, SIZE 8

           DISPLAY '123456789' LINE 7 COL 3
           DISPLAY SPACE LINE 7 COL 3, SIZE 9

           ACCEPT success-flag LINE 8, REQUIRED UPDATE

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([UPDATE])
AT_KEYWORDS([extensions])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  n-str        PIC X(12) VALUE SPACES.
       01  success-flag PIC X.
           88  success VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr.
           03  VALUE 'Enter "y" if the entry field below is filled with'
                 & ' N''s'.
           03  n-field, LINE + 1, PIC X(12) USING n-str.
           03  success-field, LINE + 2, PIC X, REQUIRED,
               TO success-flag, FROM 'Y'.

       PROCEDURE        DIVISION.
           DISPLAY scr
           MOVE ALL 'N' TO n-str
           ACCEPT scr

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE -fno-accept-update prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([UNDERLINE])
AT_KEYWORDS([screen])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.

       SCREEN           SECTION.
       01  scr.
           03  PIC X(80)
               VALUE 'Enter "y" if the string below is underlined:'.
           03  LINE + 1, PIC X(10) VALUE 'Underline' UNDERLINE.
           03  success-field LINE + 2, PIC X, REQUIRED,
                                              USING success-flag.

       PROCEDURE DIVISION.
           DISPLAY scr
           ACCEPT scr

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([SPECIAL-NAMES CURSOR phrase 6-digit with field])
AT_KEYWORDS([position ACCEPT])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
       CURSOR IS cur-pos.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  cur-pos      pic 9(06).
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.
       01  ws-x-20      PIC X(20).
       PROCEDURE DIVISION.
       testme.
           set environment 'COB_SCREEN_EXCEPTIONS' to 'TRUE'
           set environment 'COB_SCREEN_ESC'        to 'TRUE'

           DISPLAY "If the cursor below is positioned at the 'C'"
               LINE 1 COLUMN 1.
           DISPLAY "(third column) below, then position it at the"
               LINE 2 COLUMN 1.
           DISPLAY "'E' (fifth column) and press ENTER."
               LINE 3 COLUMN 1.

           MOVE "ABCDEFG   " TO WS-X-20.
           MOVE 005003       TO cur-pos.
           ACCEPT WS-X-20
               LINE 5 COLUMN 1
               WITH
                   AUTO-SKIP
                   SIZE 10
                   UPDATE.

           IF cur-pos = 005005 AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([SPECIAL-NAMES CURSOR phrase 4-digit with field])
AT_KEYWORDS([position ACCEPT])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
       CURSOR IS cur-pos.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  cur-pos      pic 9(04).
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.
       01  ws-x-20      PIC X(20).
       PROCEDURE DIVISION.
       testme.
           set environment 'COB_SCREEN_EXCEPTIONS' to 'TRUE'
           set environment 'COB_SCREEN_ESC'        to 'TRUE'

           DISPLAY "If the cursor below is positioned at the 'C'"
               LINE 1 COLUMN 1.
           DISPLAY "(third column) below, then position it at the"
               LINE 2 COLUMN 1.
           DISPLAY "'E' (fifth column) and press ENTER."
               LINE 3 COLUMN 1.

           MOVE "ABCDEFG   " TO WS-X-20.
           MOVE 0503         TO cur-pos.
           ACCEPT WS-X-20
               LINE 5 COLUMN 1
               WITH
                   AUTO-SKIP
                   SIZE 10
                   UPDATE.

           IF cur-pos = 0505 AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([ACCEPT field WITH CURSOR data-item])
AT_KEYWORDS([position])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  cur-pos      pic 9(04).
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.
       01  ws-x-20      PIC X(20).
       PROCEDURE DIVISION.
       testme.
           set environment 'COB_SCREEN_EXCEPTIONS' to 'TRUE'
           set environment 'COB_SCREEN_ESC'        to 'TRUE'

           DISPLAY "If the cursor below is positioned at the 'C'"
               LINE 1 COLUMN 1.
           DISPLAY "(third column in field) below, then position it at"
               LINE 2 COLUMN 1.
           DISPLAY "the 'E' (fifth column) and press ENTER."
               LINE 3 COLUMN 1.

           MOVE "ABCDEFG   " TO WS-X-20.
           MOVE 0003         TO cur-pos.
           ACCEPT WS-X-20
               LINE 5 COLUMN 3
               WITH
                   AUTO-SKIP
                   SIZE 10
                   CURSOR cur-pos
                   UPDATE.

           IF cur-pos = 0005 AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([ACCEPT field WITH CURSOR size overflow])
AT_KEYWORDS([position])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  cur-pos      pic 9(04).
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.
       01  ws-x-20      PIC X(10).
       PROCEDURE DIVISION.
       testme.
           set environment 'COB_SCREEN_EXCEPTIONS' to 'TRUE'
           set environment 'COB_SCREEN_ESC'        to 'TRUE'

           DISPLAY "If the cursor below is positioned at the last"
               LINE 1 COLUMN 1.
           DISPLAY "column in the field below, then position it at"
               LINE 2 COLUMN 1.
           DISPLAY "the 'C' (third column) and press ENTER."
               LINE 3 COLUMN 1.

           MOVE "ABCDEFGHIJ" TO WS-X-20.
           MOVE 0012         TO cur-pos.
           ACCEPT WS-X-20
               LINE 5 COLUMN 3
               WITH
                   AUTO-SKIP
                   SIZE 10
                   CURSOR cur-pos
                   UPDATE.

           IF cur-pos = 0003 AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([ACCEPT field WITH CURSOR data overflow I])
AT_KEYWORDS([position])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  cur-pos      pic 9(04).
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.
       01  ws-x-20      PIC X(20).
       PROCEDURE DIVISION.
       testme.
           set environment 'COB_SCREEN_EXCEPTIONS' to 'TRUE'
           set environment 'COB_SCREEN_ESC'        to 'TRUE'

           DISPLAY "If the cursor below is positioned at the 'E'"
               LINE 1 COLUMN 1.
           DISPLAY "(fifth column in field) below, then position it at"
               LINE 2 COLUMN 1.
           DISPLAY "the 'C' (third column) and press ENTER."
               LINE 3 COLUMN 1.

           MOVE "ABCDE     " TO WS-X-20.
           MOVE 0008         TO cur-pos.
           ACCEPT WS-X-20
               LINE 5 COLUMN 3
               WITH
                   AUTO-SKIP
                   SIZE 10
                   CURSOR cur-pos
                   UPDATE.

           IF cur-pos = 0003 AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([ACCEPT field WITH CURSOR data overflow II])
AT_KEYWORDS([position UNDERLINE])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  cur-pos      pic 9(04).
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.
       01  ws-x-20      PIC X(20).
       PROCEDURE DIVISION.
       testme.
           set environment 'COB_SCREEN_EXCEPTIONS' to 'TRUE'
           set environment 'COB_SCREEN_ESC'        to 'TRUE'

           DISPLAY "If the cursor below is positioned at the first"
               LINE 1 COLUMN 1.
           DISPLAY "column in the field below and it is empty, then"
               LINE 2 COLUMN 1.
           DISPLAY "enter 'AB', position after the 'B' and press ENTER."
               LINE 3 COLUMN 1.

           MOVE "ABCDE     " TO WS-X-20.
           MOVE 0008         TO cur-pos.
           ACCEPT WS-X-20
               LINE 5 COLUMN 3
               WITH
                   SIZE 10
                   UNDERLINE
                   CURSOR cur-pos.

           IF cur-pos = 0003 AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([ACCEPT field WITH CURSOR literal])
AT_KEYWORDS([position])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.
       01  ws-x-20      PIC X(20).
       PROCEDURE DIVISION.
       testme.
           set environment 'COB_SCREEN_EXCEPTIONS' to 'TRUE'
           set environment 'COB_SCREEN_ESC'        to 'TRUE'

           DISPLAY "If the cursor below is positioned at the 'C'"
               LINE 1 COLUMN 1.
           DISPLAY "(third column in field) below, then press ENTER."
               LINE 2 COLUMN 1.

           MOVE "ABCDEFG   " TO WS-X-20.
           ACCEPT WS-X-20
               LINE 4 COLUMN 2
               WITH
                   AUTO-SKIP
                   SIZE 10
                   CURSOR 3
                   UPDATE.

           IF COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([HOME key])
AT_KEYWORDS([HOME SIZE])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.
       01  ws-x-20      PIC X(20).
       PROCEDURE DIVISION.
           DISPLAY "Enter 'y' if multiple presses of the HOME key"
               LINE 1 COLUMN 1.
           DISPLAY "go to the beginning of the field and the beginning"
               LINE 2 COLUMN 1.
           DISPLAY "of the characters."
               LINE 3 COLUMN 1.

           MOVE "    ABC   " TO WS-X-20.
           ACCEPT WS-X-20
               LINE 5 COLUMN 1
               WITH
                   AUTO-SKIP
                   SIZE 10
                   UPDATE.

           ACCEPT SUCCESS-FLAG
               LINE 7 COLUMN 1
               WITH UPDATE.

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([END key])
AT_KEYWORDS([END SIZE])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.
       01  ws-x-20      PIC X(20).
       PROCEDURE DIVISION.
           DISPLAY "Enter 'y' if multiple presses of the END key"
               LINE 1 COLUMN 1.
           DISPLAY "go to the end of the field and just after the end"
               LINE 2 COLUMN 1.
           DISPLAY "of the characters."
               LINE 3 COLUMN 1.

           MOVE "   ABC    " TO WS-X-20.
           ACCEPT WS-X-20
               LINE 5 COLUMN 1
               WITH
                   AUTO-SKIP
                   SIZE 10
                   UPDATE.

           ACCEPT SUCCESS-FLAG
               LINE 7 COLUMN 1
               WITH UPDATE.

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([INSERT key])
AT_KEYWORDS([INSERT SIZE])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.
       01  ws-x-20      PIC X(20).
       PROCEDURE DIVISION.
           DISPLAY "Enter 'y' if multiple presses of the INSERT key"
               LINE 1 COLUMN 1.
           DISPLAY "go back and forth between"
               LINE 2 COLUMN 1.
           DISPLAY "Insert Mode ON (characters move to the right)"
               LINE 3 COLUMN 1.
           DISPLAY "and Insert Mode OFF (characters type over)."
               LINE 4 COLUMN 1.

           MOVE "ABCD      " TO WS-X-20.
           ACCEPT WS-X-20
               LINE 6 COLUMN 1
               WITH
                   AUTO-SKIP
                   SIZE 10
                   UPDATE.

           ACCEPT SUCCESS-FLAG
               LINE 8 COLUMN 1
               WITH UPDATE.

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([BACKSPACE key])
AT_KEYWORDS([BACKSPACE SIZE CURSOR])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
       CURSOR IS cur-pos.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  cur-pos      pic 9(06).
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.
       01  ws-x-20      PIC X(20).
       PROCEDURE DIVISION.
           DISPLAY "Enter 'y' if each press of the BACKSPACE key"
               LINE 1 COLUMN 1.
           DISPLAY "deletes the character to the left and moves the"
               LINE 2 COLUMN 1.
           DISPLAY "cursor and remaining characters one space to the"
               LINE 3 COLUMN 1.
           DISPLAY "left."
               LINE 4 COLUMN 1.

           MOVE "ABCD      " TO WS-X-20.
           MOVE 006002       TO cur-pos.
           ACCEPT WS-X-20
               LINE 6 COLUMN 1
               WITH
                   AUTO-SKIP
                   SIZE 10
                   UPDATE.

           ACCEPT SUCCESS-FLAG
               LINE 8 COLUMN 1
               WITH UPDATE.

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([DELETE key])
AT_KEYWORDS([DELETE SIZE])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.
       01  ws-x-20      PIC X(20).
       PROCEDURE DIVISION.
           DISPLAY "Enter 'y' if each press of the DELETE key deletes"
               LINE 1 COLUMN 1.
           DISPLAY "the cursor character and moves the remaining"
               LINE 2 COLUMN 1.
           DISPLAY "characters one space to the left.  And the cursor"
               LINE 3 COLUMN 1.
           DISPLAY "does not move."
               LINE 4 COLUMN 1.

           MOVE "ABCD      " TO WS-X-20.
           ACCEPT WS-X-20
               LINE 6 COLUMN 1
               WITH
                   AUTO-SKIP
                   SIZE 10
                   UPDATE.

           ACCEPT SUCCESS-FLAG
               LINE 8 COLUMN 1
               WITH UPDATE.

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([ALT DELETE key])
AT_KEYWORDS([ALT-DELETE SIZE])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.
       01  ws-x-20      PIC X(20).
       PROCEDURE DIVISION.
           DISPLAY "Enter 'y' if pressing the ALT and DELETE keys"
               LINE 1 COLUMN 1.
           DISPLAY "deletes all characters from the cursor to the end"
               LINE 2 COLUMN 1.
           DISPLAY "of the field.  And the cursor does not move."
               LINE 3 COLUMN 1.

           MOVE "ABCD      " TO WS-X-20.
           ACCEPT WS-X-20
               LINE 5 COLUMN 1
               WITH
                   AUTO-SKIP
                   SIZE 10
                   UPDATE.

           ACCEPT SUCCESS-FLAG
               LINE 7 COLUMN 1
               WITH UPDATE.

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([ALT LEFT-ARROW key])
AT_KEYWORDS([ALT-LEFT-ARROW SIZE])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.
       01  ws-x-20      PIC X(20).
       PROCEDURE DIVISION.
           DISPLAY "Enter 'y' if pressing the ALT and LEFT-ARROW keys"
               LINE 1 COLUMN 1.
           DISPLAY "at the first column does not exit the field."
               LINE 2 COLUMN 1.
           DISPLAY "But the LEFT-ARROW without ALT does exit."
               LINE 3 COLUMN 1.

           MOVE "ABCD      " TO WS-X-20.
           ACCEPT WS-X-20
               LINE 5 COLUMN 1
               WITH
                   AUTO-SKIP
                   SIZE 10
                   UPDATE.

           ACCEPT SUCCESS-FLAG
               LINE 7 COLUMN 1
               WITH UPDATE.

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([ALT RIGHT-ARROW key])
AT_KEYWORDS([SIZE])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  success-flag PIC X VALUE 'Y'.
           88  success  VALUE 'Y', 'y'.
       01  ws-x-10      PIC X(10).
       PROCEDURE DIVISION.
           DISPLAY "Enter 'y' if pressing the ALT and RIGHT-ARROW keys"
               LINE 1 COLUMN 1.
           DISPLAY "at the last column does not exit the field."
               LINE 2 COLUMN 1.
           DISPLAY "But the RIGHT-ARROW without ALT does exit."
               LINE 3 COLUMN 1.

           MOVE "ABCDE" TO WS-X-10.
           ACCEPT WS-X-10
               LINE 5 COLUMN 1
               WITH
                   AUTO-SKIP
                   SIZE 5
                   UPDATE.

           ACCEPT SUCCESS-FLAG
               LINE 7 COLUMN 1
               WITH UPDATE.

           IF success AND COB-CRT-STATUS = 0
               GOBACK RETURNING 0
           ELSE
               GOBACK RETURNING 1
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([CURSOR clause])
AT_KEYWORDS([SPECIAL-NAMES])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog1.cob], [
       identification division.
       program-id. prog.

       environment division.
       configuration section.
       special-names.
           cursor is my-cur.
       data division.
       working-storage section.

       01 my-cur.
          05 my-row pic  9(3) value 0.
          05 my-col pic  9(3) value 0.

       77 loop      pic 99.
       77 cursor-moves-here pic x(20).

       screen section.

       01 screen-example .
          05 message1  value is "row (view only)   is " line 1 col 10.
          05 filler    pic 9(3) from  my-row.

          05 message2  value is "col (adjust only) is " line 2 col 10.
          05 filler    pic 9(3) using my-col.

          05 filler    pic x(20) using cursor-moves-here line 3 col 14.

       procedure division.

           perform varying loop from 1 by 1
                  until loop > 10
              display "screen accept no. "
                      at line 10 col 4
                      loop "/10"
              display screen-example
              accept  screen-example
           end-perform

           goback.
])

# note: same test, but this time with different specified
#       special-names reference
AT_DATA([prog2.cob], [
       identification division.
       program-id. prog.

       data division.
       working-storage section.

       01 my-cur is special-names cursor.
          05 my-row pic  9(3) value 0.
          05 my-col pic  9(3) value 0.

       77 loop      pic 99.
       77 cursor-moves-here pic x(20).

       screen section.

       01 screen-example .
          05 message1  value is "row (view only)   is " line 1 col 10.
          05 filler    pic 9(3) from  my-row.

          05 message2  value is "col (adjust only) is " line 2 col 10.
          05 filler    pic 9(3) using my-col.

          05 filler    pic x(20) using cursor-moves-here line 3 col 14.

       procedure division.

           perform varying loop from 1 by 1
                  until loop > 10
              display "screen accept no. "
                      at line 10 col 4
                      loop "/10"
              display screen-example
              accept  screen-example
           end-perform

           goback.
])

AT_CHECK([$COMPILE prog1.cob], [0], [], [])
AT_CHECK([$COMPILE prog2.cob], [0], [], [])

# user-instructions what to test is missing
AT_SKIP_IF([true])

MANUAL_CHECK([$COBCRUN_DIRECT ./prog1], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog2], [0], [], [])

AT_CLEANUP


AT_SETUP([CRT STATUS clause])
AT_KEYWORDS([SPECIAL-NAMES])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog1.cob], [
       identification division.
       program-id. prog.

       environment division.
       configuration section.
       special-names.
           crt status is my-status.
       data division.
       working-storage section.

       01 my-status.
          05 one     pic  X.
          05 two     pic  X.
          05 three   pic  X.
          05 four    pic  X.

       77 loop       pic 99.
       77 test-field pic x(5).

       screen section.

       01 screen-example .
          05 message1  value is "status:     " line 1 col 10.
          05 filler    pic x(4) from  my-status.

          05 message2  value is "test-field: " line 2 col 10.
          05 filler    pic x(5) using test-field.

       procedure division.

           set environment 'COB_SCREEN_EXCEPTIONS' to 'TRUE'
           set environment 'COB_SCREEN_ESC'        to 'TRUE'
           perform varying loop from 1 by 1
                  until loop > 10
              display "screen accept no. "
                      at line 10 col 4
                      loop "/10"
              display screen-example
              accept  screen-example
           end-perform

           goback.
])

# note: same test, but this time with different specified
#       special-names reference
AT_DATA([prog2.cob], [
       identification division.
       program-id. prog.

       data division.
       working-storage section.

       77 my-status  pic 9(05) is special-names crt status.

       77 loop       pic 99.
       77 test-field pic x(5).

       screen section.

       01 screen-example .
          05 message1  value is "status:     " line 1 col 10.
          05 filler    pic 9(05) from  my-status.

          05 message2  value is "test-field: " line 2 col 10.
          05 filler    pic x(5) using test-field.

       procedure division.

           set environment 'COB_SCREEN_EXCEPTIONS' to 'TRUE'
           set environment 'COB_SCREEN_ESC'        to 'TRUE'
           perform varying loop from 1 by 1
                  until loop > 10
              display "screen accept no. "
                      at line 10 col 4
                      loop "/10"
              display screen-example
              accept  screen-example
           end-perform

           goback.
])

AT_CHECK([$COMPILE prog1.cob], [0], [], [])
AT_CHECK([$COMPILE prog2.cob], [0], [], [])

# user-instructions what to test is missing
AT_SKIP_IF([true])

MANUAL_CHECK([$COBCRUN_DIRECT ./prog1], [0], [], [])
MANUAL_CHECK([$COBCRUN_DIRECT ./prog2], [0], [], [])

AT_CLEANUP


AT_SETUP([CRT STATUS clause])
AT_KEYWORDS([SPECIAL-NAMES])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       identification division.
       program-id. prog-crt4.

       data division.
       working-storage section.

       01 crt4 pic 9(4) is special-names crt status.

       01 test-tab.
         05 test-01 pic x(20) value "Function key 01 1001".
         05 test-02 pic x(20) value "Function key 02 1002".
         05 test-03 pic x(20) value "Function key 03 1003".
         05 test-04 pic x(20) value "Function key 04 1004".
         05 test-05 pic x(20) value "Function key 05 1005".
         05 test-06 pic x(20) value "Prev-page key   2001".
         05 test-07 pic x(20) value "Next-page key   2002".

       01 test-rab-r redefines test-tab.
         05 test-data occurs 7 times.
           10 test-name         pic x(16).
           10 test-crt4         pic 9(4).

       01 linenr                pic 9(2) value 0.

       01 test-result-4         pic 9(4).

       01 return-value          pic 9 value 0.

       77 loop                  pic 9(2).
       77 test-field            pic x.


       procedure division.

       set environment 'COB_SCREEN_EXCEPTIONS' to 'TRUE'
       set environment 'COB_SCREEN_ESC'        to 'TRUE'

       perform forever
         display spaces with blank screen

         move 0 to return-value
         perform varying loop from 1 by 1 until loop > 7
           compute linenr = loop + 5

           display "Please press " line linenr, column 1
           display test-name(loop) line linenr, column 14

           move spaces to test-field
           accept test-field
            line linenr column 30

           display crt4 line linenr, column 30

           if crt4 = test-crt4(loop)
             display "passed" line linenr, column 36
           else
             move 1 to return-value
             display "failed" line linenr, column 36
           end-if
         end-perform

         if return-value = 0
           exit perform
         end-if

         display "Try again? (Y/n) " line 20, column 1
         move "Y" to test-field
         accept test-field line 20, column 18
         if not (test-field = "Y" or "y")
           exit perform
         end-if
       end-perform

       goback returning return-value
       .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([X/Open CRT STATUS clause])
AT_KEYWORDS([SPECIAL-NAMES])

AT_SKIP_IF([test "$COB_HAS_CURSES" != "yes"])

AT_DATA([prog.cob], [
       identification division.
       program-id. prog-crt3.

       data division.
       working-storage section.

       01 crt3 is special-names crt status.
         05 crt3-1   pic 9.
         05 crt3-2   usage binary-char unsigned.
         05 crt3-3   usage binary-char unsigned.

       01 test-tab.
         05 test-01 pic x(20) value "Function key 01 1001".
         05 test-02 pic x(20) value "Function key 02 1002".
         05 test-03 pic x(20) value "Function key 03 1003".
         05 test-04 pic x(20) value "Function key 04 1004".
         05 test-05 pic x(20) value "Function key 05 1005".
         05 test-06 pic x(20) value "Prev-page key   2001".
         05 test-07 pic x(20) value "Next-page key   2002".

       01 test-rab-r redefines test-tab.
         05 test-data occurs 7 times.
           10 test-name         pic x(16).
           10 test-crt31        pic 9.
           10 test-crt32        pic 9(3).

       01 linenr                pic 9(2) value 0.

       01 test-result-1         pic 9.
       01 test-result-3         pic 9(3).

       01 return-value          pic 9 value 0.

       77 loop                  pic 9(2).
       77 test-field            pic x.


       procedure division.

       set environment 'COB_SCREEN_EXCEPTIONS' to 'TRUE'
       set environment 'COB_SCREEN_ESC'        to 'TRUE'

       perform forever
         display spaces with blank screen

         move 0 to return-value
         perform varying loop from 1 by 1 until loop > 7
           compute linenr = loop + 5

           display "Please press " line linenr, column 1
           display test-name(loop) line linenr, column 14

           move spaces to test-field
           accept test-field
            line linenr column 30

           move crt3-1 to test-result-1
           display test-result-1 line linenr, column 30

           move crt3-2 to test-result-3
           display test-result-3 line linenr, column 32

           if test-result-1 = test-crt31(loop) and
            test-result-3 = test-crt32(loop)
             display "passed" line linenr, column 36
           else
             move 1 to return-value
             display "failed" line linenr, column 36
           end-if
         end-perform

         if return-value = 0
           exit perform
         end-if

         display "Try again? (Y/n) " line 20, column 1
         move "Y" to test-field
         accept test-field line 20, column 18
         if not (test-field = "Y" or "y")
           exit perform
         end-if
       end-perform

       goback returning return-value
       .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

MANUAL_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP

