## Copyright (C) 2003-2012, 2015-2019,2021-2023 Free Software Foundation, Inc.
## Written by Keisuke Nishida, Roger While, Simon Sobisch, Edward Hart
##
## This file is part of GnuCOBOL.
##
## The GnuCOBOL compiler is free software: you can redistribute it
## and/or modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation, either version 3 of the
## License, or (at your option) any later version.
##
## GnuCOBOL is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with GnuCOBOL.  If not, see <https://www.gnu.org/licenses/>.

### GnuCOBOL Test Suite

### ISO+IEC+1989-2002 13.16.36 OCCURS clause
### ISO+IEC+1989-202x 3rd WD 13.18.38 OCCURS clause

## .2 Syntax rules


# 1a) level number rules (extended with level 78)

AT_SETUP([OCCURS with level 01 and 77])
#AT_KEYWORDS([occurs])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-01          PIC X OCCURS 10.
       01 G             OCCURS 10.
         02 X-02        PIC X OCCURS 10.
       01 G2.
         02 X2-02       PIC X OCCURS 10.
       77 X-77          PIC X OCCURS 10.
])

AT_CHECK([$COMPILE_ONLY -std=cobol2014 prog.cob], [1], [],
[prog.cob:6: error: 01/77 OCCURS does not conform to COBOL 2014
prog.cob:7: error: 01/77 OCCURS does not conform to COBOL 2014
prog.cob:11: error: 01/77 OCCURS does not conform to COBOL 2014
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY -ftop-level-occurs-clause=warning prog.cob], [0], [],
[prog.cob:6: warning: 01/77 OCCURS used
prog.cob:7: warning: 01/77 OCCURS used
prog.cob:11: warning: 01/77 OCCURS used
])

AT_CLEANUP


# FIXME: should be a single test but the error recovery is broken
#AT_SETUP([OCCURS with level 66 / 78 / 88])
#AT_KEYWORDS([RENAMES])
#
#AT_DATA([prog.cob], [
#       IDENTIFICATION   DIVISION.
#       PROGRAM-ID.      prog.
#       DATA             DIVISION.
#       WORKING-STORAGE  SECTION.
#       01  x PIC X.
#       66  y RENAMES x OCCURS 10.
#         88  y VALUE "a" OCCURS 10.
#         78  y VALUE "a" OCCURS 10.
#])
#
#AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
#[prog.cob:7: error: syntax error, unexpected OCCURS, expecting .
#prog.cob:8: error: syntax error, unexpected OCCURS, expecting .
#prog.cob:9: error: syntax error, unexpected OCCURS, expecting .
#])
#AT_CLEANUP


AT_SETUP([OCCURS with level 66])
AT_KEYWORDS([RENAMES])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  x PIC X.
       66  y RENAMES x OCCURS 10.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:7: error: syntax error, unexpected OCCURS
])

AT_CLEANUP


AT_SETUP([OCCURS with level 78])
#AT_KEYWORDS([occurs])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       78  c value "a" OCCURS 10.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:6: error: syntax error, unexpected OCCURS
])

AT_CLEANUP


AT_SETUP([OCCURS with level 88])
#AT_KEYWORDS([occurs])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  x PIC X.
           88  y VALUE "a" OCCURS 10.
])

# note: the message is from level-88 content-validation entry format,
#       which is mixed in the parser (as it may be used as) condition format
AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:7: error: syntax error, unexpected OCCURS
])

AT_CLEANUP

# 1b) with ODO below (allowed with IBM extension)

AT_SETUP([OCCURS with variable-occurrence data item])
AT_KEYWORDS([nested depending extensions odo odoslide directive])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G-1.
         02 G-2         OCCURS 10.
           03 X         PIC X(10) OCCURS 1 TO 4 DEPENDING ON I.
       77 I             PIC 9.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G-1.
         02 G-2         OCCURS 1 TO 10 DEPENDING ON I.
           03 X         PIC X(10) OCCURS 1 TO 4 DEPENDING ON I.
       77 I             PIC 9.
       PROCEDURE        DIVISION.
           DISPLAY  X(I, I) END-DISPLAY
           DISPLAY  G-2 (I) END-DISPLAY
           DISPLAY  G-1     END-DISPLAY
           .

])

AT_DATA([prog3.cob], [
       $SET ODOSLIDE
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G-1.
         02 G-2         OCCURS 10.
           03 X         PIC X(10) OCCURS 1 TO 4 DEPENDING ON I.
       77 I             PIC 9.
])

AT_DATA([prog4.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G-1.
         02 G-2         OCCURS 10.
           03 X         PIC X(10) OCCURS 1 TO 4 DEPENDING ON I.
       77 I             PIC X.
])

AT_DATA([prog5.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G-1.
         05 G-1-F1      PIC  X(002).
         05 G-2.
          07 G-3
            OCCURS 1 TO 99999
            DEPENDING ON     G-3-ELEMENTS
            ASCENDING KEY IS G-4-KEY
            INDEXED BY       IND.
           10 G-4.
             15 N       PIC  9(001).
      *
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:7: error: 'G-2' cannot have an OCCURS clause due to 'X'
])

AT_CHECK([$COMPILE_ONLY -fcomplex-odo prog.cob], [0], [], [])

AT_CHECK([$COMPILE_ONLY -fcomplex-odo prog2.cob], [1], [],
[prog2.cob:8: error: 'X' cannot have nested OCCURS DEPENDING
])

AT_CHECK([$COMPILE_ONLY -fodoslide prog2.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY prog3.cob prog2.cob], [1], [],
[prog2.cob:7: error: 'G-2' cannot have an OCCURS clause due to 'X'
prog2.cob:8: error: 'X' cannot have nested OCCURS DEPENDING
])

AT_CHECK([$COMPILE_ONLY prog4.cob], [1], [],
[prog4.cob:7: error: 'G-2' cannot have an OCCURS clause due to 'X'
prog4.cob:8: error: 'I' is not numeric
])

AT_CHECK([$COMPILE_ONLY -fcomplex-odo prog4.cob], [1], [],
[prog4.cob:8: error: 'I' is not numeric
])

AT_CHECK([$COMPILE_ONLY prog5.cob], [1], [],
[prog5.cob:11: error: 'G-3-ELEMENTS' is not defined
prog5.cob:12: error: 'G-4-KEY IN G-2 IN G-1' is not defined
])

AT_CLEANUP


AT_SETUP([OCCURS UNBOUNDED])
#AT_KEYWORDS([ibm])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       LINKAGE  SECTION.
       01 G-1.
          07 G-2-ELEMENTS   PIC 9(08).
          07 G-2
            OCCURS UNBOUNDED
            DEPENDING ON    G-2-ELEMENTS.
           10 X             PIC X.
        PROCEDURE DIVISION USING G-1.
           DISPLAY G-1.
           GOBACK.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       LINKAGE  SECTION.
       01 G-1.
         05 G-1-F1          PIC X(22).
         05 G-1-F2          PIC X(12).
         05 G-2.
          07 G-3-ELEMENTS   PIC 9(08).
          07 G-3
            OCCURS UNBOUNDED
            DEPENDING ON    G-3-ELEMENTS.
           10 G-4.
             15 X           PIC  9(22).
        PROCEDURE DIVISION USING G-1.
           DISPLAY G-1.
           GOBACK.
])

AT_DATA([bad.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G-1.
          07 G-2-ELEMENTS   PIC 9(08).
          07 G-2
            OCCURS UNBOUNDED
            DEPENDING ON    G-2-ELEMENTS.
           10 X             PIC X.
])

AT_DATA([bad2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G-1.
         05 G-1-F1          PIC X(22).
         05 G-2.
          07 G-3-ELEMENTS   PIC 9(08).
          07 G-3
             OCCURS UNBOUNDED.
           10 G-4.
             15 X           PIC  9(22).
])

AT_DATA([bad3.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G-1.
         05 G-1-F1          PIC X(22).
         05 G-1-F2          PIC X(12).
         05 G-2.
          07 G-3
            OCCURS UNBOUNDED
            DEPENDING ON    G-3-ELEMENTS.
           10 G-4.
             15 X           PIC  9(22).
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY -std=ibm-strict prog.cob], [0], [], [])

# TODO: opt to a different path, if UNBOUNDED is not reserved
AT_CHECK([$COMPILE_ONLY -std=cobol2014  prog.cob], [1], [],
[prog.cob:9: error: syntax error, unexpected Identifier, expecting UNBOUNDED
])

AT_CHECK([$COMPILE_ONLY prog2.cob], [0], [], [])

AT_CHECK([$COMPILE_ONLY bad.cob], [1], [],
[bad.cob:8: error: 'G-2' is not in LINKAGE SECTION
])

AT_CHECK([$COMPILE_ONLY bad2.cob], [1], [],
[bad2.cob:11: error: syntax error, unexpected ., expecting DEPENDING
])

AT_CHECK([$COMPILE_ONLY bad3.cob], [1], [],
[bad3.cob:10: error: 'G-3' is not in LINKAGE SECTION
bad3.cob:12: error: 'G-3-ELEMENTS' is not defined
])

AT_CLEANUP


# 2) no subscript for key+index

AT_SETUP([OCCURS data-items for INDEXED and KEY])
AT_KEYWORDS([ASCENDING DESCENDING])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  . *> the "filler" explicit checks bugs #699 and #776
           05  TAB-ENTRY1
                  OCCURS 5 TIMES
                  ASCENDING KEY IS X1
                                OF TAB-ENTRY1
                                OF TAB
                  INDEXED BY IDX1 OF TAB.
              10 X1 PIC 9.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:9: error: a subscripted data-item cannot be used here
prog.cob:12: error: a subscripted data-item cannot be used here
])

AT_CLEANUP

# 3) KEY specification

# 4) TODO

# 5) TODO

# 6) TODO

# 7) TODO

# 8) TODO


# 9) DONE

AT_SETUP([Nested OCCURS clause])
#AT_KEYWORDS([occurs])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G-1.
        02 G-2          OCCURS 2.
         03 G-3         OCCURS 2.
          04 G-4        OCCURS 2.
           05 G-5       OCCURS 2.
            06 G-6      OCCURS 2.
             07 G-7     OCCURS 2.
              08 G-8    OCCURS 2.
               09 X     PIC X.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])

AT_CLEANUP


# 10) TODO

# 11) TODO

# 12) TODO

# 13) TODO

# 14) TODO

# 15) TODO

# in COBOL 2014 this is rule 16, not sure about COBOL 2002.
AT_SETUP([OCCURS DEPENDING with wrong size])
AT_KEYWORDS([range])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 FILLER.
         02 G-1         PIC X OCCURS  1 TO 1 DEPENDING ON I.
       01 FILLER.
         02 G-2         PIC X OCCURS -1 TO 1 DEPENDING ON I.
       01 FILLER.
         02 G-3         PIC X OCCURS +1 TO 1 DEPENDING ON I.
       01 FILLER.
         02 G-4         PIC X OCCURS  0 TO 1 DEPENDING ON I.
       01 I             PIC 9.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:7: error: OCCURS TO must be greater than OCCURS FROM
prog.cob:9: error: unsigned integer value expected
prog.cob:11: error: unsigned integer value expected
])

AT_CLEANUP


# 16) TODO

# 17) TODO

# 18) TODO

# 19) TODO


# 20) DONE

AT_SETUP([OCCURS DEPENDING followed by another field])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G-1.
         02 X           PIC X OCCURS 1 TO 3 DEPENDING ON I.
         02 Y           PIC X.
       01 G-2.
         02 G-3         OCCURS 1 TO 3 DEPENDING ON I.
           03 X         PIC X.
         02 Y           PIC X.
       01 G-4.
         02 G-5.
           03 X         PIC X OCCURS 1 TO 3 DEPENDING ON I.
         02 Y           PIC X.
       01 I             PIC 9.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:7: error: 'X' cannot have OCCURS DEPENDING because of 'Y'
prog.cob:10: error: 'G-3' cannot have OCCURS DEPENDING because of 'Y'
prog.cob:15: error: 'X' cannot have OCCURS DEPENDING because of 'Y'
])

AT_CHECK([$COMPILE_ONLY -fcomplex-odo prog.cob], [0], [], [])

AT_CLEANUP


# 21) TODO

# 22) TODO

# 23) TODO

# 24) 
# in COBOL 2014 this is rule 24, not sure about COBOL 2002.
# for X3-Test, see also bug #544
AT_SETUP([OCCURS with unmatched DEPENDING / TO phrases])
AT_KEYWORDS([odo])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 Y             PIC 9.
       01 XTAB.
          03 X  PIC X OCCURS 10 DEPENDING ON Y.
       01 XTAB2.
          03 X2 PIC X OCCURS 1 TO 10.
       01 XTAB3.
          03 X3 PIC X OCCURS 1 TO 10 DEPENDING ON MISSING.
       PROCEDURE DIVISION.
           MOVE 'A' TO X(1), X2(2), X3(3)
           GOBACK.
])

AT_CHECK([$COMPILE_ONLY -std=cobol2014 prog.cob], [1], [],
[prog.cob:8: error: OCCURS DEPENDING ON without TO phrase does not conform to COBOL 2014
prog.cob:10: error: TO phrase without DEPENDING phrase
prog.cob:12: error: 'MISSING' is not defined
])
AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:8: warning: OCCURS DEPENDING ON without TO phrase used
prog.cob:10: error: TO phrase without DEPENDING phrase
prog.cob:12: error: 'MISSING' is not defined
])
AT_CHECK([$COMPILE_ONLY -frelax-syntax prog.cob], [1], [],
[prog.cob:8: warning: OCCURS DEPENDING ON without TO phrase used
prog.cob:10: warning: TO phrase without DEPENDING phrase
prog.cob:10: note: maximum number of occurrences assumed to be exact number
prog.cob:12: error: 'MISSING' is not defined
])

AT_CLEANUP


# GnuCOBOL additional checks


AT_SETUP([OCCURS INDEXED before KEY])
AT_KEYWORDS([ASCENDING DESCENDING])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  TAB.
           05  TAB-ENTRY1
                  OCCURS 5 TIMES
                  INDEXED BY IDX1
                  ASCENDING KEY IS X1
                  DESCENDING Y1.
             10  X1 PIC 9(4).
             10  Y1 PIC X.
           05  TAB-ENTRY
                  OCCURS 2 TIMES
                  INDEXED BY IDX2
                  DESCENDING KEY IS X2
                  ASCENDING  Y2.
             10  X2 PIC 9(4).
             10  Y2 PIC X.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:10: error: INDEXED should follow ASCENDING/DESCENDING
prog.cob:17: error: INDEXED should follow ASCENDING/DESCENDING
])

AT_CHECK([$COMPILE_ONLY -frelax-syntax-checks prog.cob], [0], [],
[prog.cob:10: warning: INDEXED should follow ASCENDING/DESCENDING
prog.cob:17: warning: INDEXED should follow ASCENDING/DESCENDING
])

AT_CLEANUP


AT_SETUP([OCCURS size check])
AT_KEYWORDS([limit])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X1.
          03 X  PIC X OCCURS 1530001234 TIMES.
       01 X2.
          03 X  PIC X OCCURS 2147483648 TIMES.
       01 X3.
          03 X  PIC X OCCURS 9223372036854775808 TIMES.
])

# Don't check actual output here as the actual limit depends on INT_MAX, therefore
# all entries may raise this error but only the last error message is guaranteed.
AT_CHECK([$COMPILE_ONLY prog.cob], [1], [], ignore)
AT_CHECK([$COMPILE_ONLY prog.cob 2>&1 | \
$GREP "prog.cob:11: error: numeric literal '9223372036854775808' exceeds limit"],
[0], ignore, [])

AT_CLEANUP


AT_SETUP([SET to out-of-range literal])
#AT_KEYWORDS([SET])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 10 INDEXED I.
       01 LVL-01-CST    CONSTANT 12.
       78 LVL-78-CST    VALUE 13.
       PROCEDURE        DIVISION.
           SET I TO ZERO.
           SET I TO 11.
           SET I TO LVL-01-CST.
           SET I TO LVL-78-CST.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -fopt-check-subscript-set prog.cob], [0], [],
[prog.cob:11: warning: SET I TO 0 is out of bounds
prog.cob:12: warning: SET I TO 11 is out of bounds
prog.cob:13: warning: SET I TO 12 is out of bounds
prog.cob:14: warning: SET I TO 13 is out of bounds
])

AT_CLEANUP


AT_SETUP([SET index])
#AT_KEYWORDS([SET])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  BINB   PIC 9(9) COMP-5 VALUE 42.
       01  NIDX   PIC S99.
       01  MYIDX  USAGE IS INDEX.
       01  MAXIDX PIC 9999 VALUE 3 COMP-5.
       01  TBL.
           05  FILLER PIC X(8) VALUE "Fred".
           05  FILLER PIC X(8) VALUE "Barney".
           05  FILLER PIC X(8) VALUE "Wilma".
           05  FILLER PIC X(8) VALUE "Betty".
       01  FILLER REDEFINES TBL.
           05  MYNAME PIC X(8) OCCURS 4 INDEXED BY IB1.
       01  TBL2.
           05  MYMRK  PIC X(3)
               OCCURS 2 TO 5 DEPENDING ON MAXIDX
               INDEXED BY IB2.
       PROCEDURE DIVISION.
           MOVE 5 TO MAXIDX
           SET NIDX TO IB1.
           DISPLAY "Initial value: " NIDX.
           SET IB2 TO 0.2.
           SET IB2 TO "fred".
           SET IB2 TO 10.
           MOVE "A:" TO MYMRK (1)
           MOVE "B:" TO MYMRK (2)
           MOVE "C:" TO MYMRK (3)
           MOVE "D:" TO MYMRK (4)
           MOVE "E:" TO MYMRK (5)
           MOVE 3 TO MAXIDX.
           SET IB1 TO 2.
           SET MYIDX TO IB1.
           SET IB1 TO 1.
           SET MYIDX TO IB1.
           SET IB1, IB2 TO 4.
           SET IB2 TO MAXIDX.
           SET IB1, IB2 UP BY 1.
           SET IB1 TO 3.
           SET MYIDX TO IB1.
           MOVE -1 TO NIDX
           SET IB1 TO NIDX.
           SET IB1 TO -9.
           SET IB1 TO 300.
           MOVE 400 TO IB1.
           PERFORM VARYING IB1 FROM 1 BY 1 UNTIL IB1 > MAXIDX
               SET IB2   TO IB1
               SET NIDX  TO IB1
               SET MYIDX TO IB1
               DISPLAY NIDX ": " MYMRK (IB2) MYNAME (IB1) "."
               IF MYNAME (NIDX) = "Fred"
                  MOVE "Freddy" TO MYNAME (NIDX)
               END-IF
           END-PERFORM.
           PERFORM VARYING IB2 FROM 1 BY 1 UNTIL IB2 > 4
               SET IB1   TO IB2
               SET NIDX  TO IB1
               SET MYIDX TO IB1
               DISPLAY NIDX ": " MYMRK (IB2) MYNAME (IB1) "."
               IF MYNAME (IB1) = "Fred"
                  MOVE "Freddy" TO MYNAME (IB1)
               END-IF
           END-PERFORM.
           STOP RUN.
           END PROGRAM prog.
])

AT_CHECK([$COMPILE_ONLY -fopt-check-subscript-set prog.cob], [1], [], [prog.cob:25: error: an integer, INDEX, or a POINTER is expected here
prog.cob:26: error: an integer, INDEX, or a POINTER is expected here
prog.cob:27: warning: SET IB2 TO 10 is out of bounds
prog.cob:45: warning: SET IB1 TO -9 is out of bounds
prog.cob:46: warning: SET IB1 TO 300 is out of bounds
])

AT_CLEANUP

