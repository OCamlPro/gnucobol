## Copyright (C) 2003-2012, 2014-2022 Free Software Foundation, Inc.
## Written by Keisuke Nishida, Roger While, Simon Sobisch, Edward Hart,
## Ron Norman
##
## This file is part of GnuCOBOL.
##
## The GnuCOBOL compiler is free software: you can redistribute it
## and/or modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation, either version 3 of the
## License, or (at your option) any later version.
##
## GnuCOBOL is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with GnuCOBOL.  If not, see <https://www.gnu.org/licenses/>.

### GnuCOBOL Test Suite


AT_SETUP([Comma separator without space])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           DISPLAY 1,1,1 NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [111])

AT_CLEANUP


## TODO: Check if the following DECIMAL-POINT tests are really all extensions.


AT_SETUP([DECIMAL-POINT is COMMA (1)])
AT_KEYWORDS([misc extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT    IS COMMA.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC 99V99.
       PROCEDURE        DIVISION.
           MOVE FUNCTION MIN (3,,,,,,5) TO X.
           DISPLAY X
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[00,50
])

AT_CLEANUP


AT_SETUP([DECIMAL-POINT is COMMA (2)])
AT_KEYWORDS([misc extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT    IS COMMA.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC 99V99.
       PROCEDURE        DIVISION.
           MOVE FUNCTION MIN (3,,,,,, 5) TO X.
           DISPLAY X
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[03,00
])

AT_CLEANUP


AT_SETUP([DECIMAL-POINT is COMMA (3)])
AT_KEYWORDS([misc extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT    IS COMMA.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC 99V99.
       PROCEDURE        DIVISION.
           MOVE FUNCTION MIN (3,,,,,, 1,5) TO X.
           DISPLAY X
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[01,50
])

AT_CLEANUP


AT_SETUP([DECIMAL-POINT is COMMA (4)])
AT_KEYWORDS([misc extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT    IS COMMA.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC 99V99.
       PROCEDURE        DIVISION.
           MOVE FUNCTION MIN (3,,,,,,1,5) TO X.
           DISPLAY X
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[00,10
])

AT_CLEANUP


AT_SETUP([DECIMAL-POINT is COMMA (5)])
AT_KEYWORDS([misc extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT    IS COMMA.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC 99V99.
       PROCEDURE        DIVISION.
           COMPUTE X=1 + ,1
           END-COMPUTE
           DISPLAY X
           END-DISPLAY.
           COMPUTE X=1*,1
           END-COMPUTE
           DISPLAY X
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[01,10
00,10
])

AT_CLEANUP


AT_SETUP([CURRENCY SIGN])
AT_KEYWORDS([misc fundamental])

AT_DATA([prog.cob], [
       PROGRAM-ID.   prog.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           CURRENCY SIGN IS "Y".

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77  amount    pic Y(6)9.99.

       PROCEDURE DIVISION.
           Move 1512.34 to Amount
           Display "Amount is #" Amount '#' with no advancing.

           GOBACK
           .
       END PROGRAM prog.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[Amount is #  Y1512.34#])

AT_CLEANUP


AT_SETUP([CURRENCY SIGN WITH PICTURE SYMBOL])
AT_KEYWORDS([misc fundamental])

# FIXME - see FR #246
AT_XFAIL_IF(true)

AT_DATA([prog.cob], [
       PROGRAM-ID.   prog.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           *> note the space after EUR / before ct.
           CURRENCY SIGN IS "EUR "      WITH PICTURE SYMBOL "U",
           CURRENCY SIGN IS " ct (EUR)" WITH PICTURE SYMBOL "c",
           Currency Sign is "$US" with Picture Symbol "$".

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77  EUROS    PIC U99v99.
       77  cents    PIC c9,999.
       77  DOLLARS  Pic $$,$$9.99.

       PROCEDURE DIVISION.
           MOVE 12.34 TO EUROS
           MULTIPLY euros BY 1000 GIVING cents.
           DISPLAY "#" EUROS "# equal #" cents '#'.
           Move 1500 to Invoice-Amount
           Display "Invoice amount #1 is " Invoice-Amount '.'.
           Move 12.34 to Invoice-Amount
           Display "Invoice amount #2 is " Invoice-Amount '.'.

           GOBACK
           .
       END PROGRAM prog.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[#EUR 12.34# equal #1,234 ct (EUR)#
Invoice amount #1 is  $US1,500.00.
Invoice amount #2 is     $US12.34.
])

AT_CLEANUP


AT_SETUP([LOCAL-STORAGE (1)])
AT_KEYWORDS([runmisc])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 WRK-X         PIC XXX VALUE "abc".
       LOCAL-STORAGE    SECTION.
       01 LCL-X         PIC XXX VALUE "abc".
       PROCEDURE        DIVISION.
           DISPLAY WRK-X LCL-X NO ADVANCING
           END-DISPLAY.
           MOVE ZERO TO WRK-X LCL-X.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       PROCEDURE        DIVISION.
           CALL "callee"
           END-CALL.
           CALL "callee"
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE -o prog caller.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [abcabc000abc], [])

AT_CLEANUP


AT_SETUP([LOCAL-STORAGE (2)])
AT_KEYWORDS([runmisc])

AT_DATA([callee2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee2.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01 LNK-X         PIC XXX.
       PROCEDURE        DIVISION USING LNK-X.
           DISPLAY LNK-X NO ADVANCING.
           EXIT PROGRAM.
])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       LOCAL-STORAGE    SECTION.
       01 LCL-X.
          05 FILLER     PIC XXX VALUE "abc".
       PROCEDURE        DIVISION.
           CALL "callee2" USING LCL-X.
           MOVE ZERO TO LCL-X.
           CALL "callee2" USING LCL-X.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       PROCEDURE        DIVISION.
           CALL "callee".
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE callee2.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE -o prog caller.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [abc000], [])

AT_CLEANUP


AT_SETUP([EXTERNAL data item])
AT_KEYWORDS([runmisc])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 EXT-VAR       PIC X(5) EXTERNAL.
       PROCEDURE        DIVISION.
           IF EXT-VAR NOT = "Hello"
              DISPLAY EXT-VAR
              END-DISPLAY
           END-IF.
           MOVE "World" TO EXT-VAR.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 EXT-VAR       PIC X(5) EXTERNAL.
       PROCEDURE        DIVISION.
           MOVE "Hello" TO EXT-VAR.
           CALL "callee"
           END-CALL.
           IF EXT-VAR NOT = "World"
              DISPLAY EXT-VAR
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [], [])

AT_CLEANUP


AT_SETUP([EXTERNAL AS data item])
AT_KEYWORDS([runmisc])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 PRG-VAR       PIC X(5) EXTERNAL AS "WRK-VAR".
       01 EXT-VAR       PIC X(5) EXTERNAL.
       PROCEDURE        DIVISION.
           IF PRG-VAR NOT = "Extrn"
              DISPLAY PRG-VAR
              END-DISPLAY
           END-IF.
           IF EXT-VAR NOT = "Hello"
              DISPLAY EXT-VAR
              END-DISPLAY
           END-IF.
           MOVE "World" TO EXT-VAR.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 MYVAR         PIC X(5) EXTERNAL AS "EXT-VAR".
       01 WRK-VAR       PIC X(5) EXTERNAL.
       PROCEDURE        DIVISION.
           MOVE "Extrn" TO WRK-VAR.
           MOVE "Hello" TO MYVAR.
           CALL "callee"
           END-CALL.
           IF MYVAR NOT = "World"
              DISPLAY MYVAR
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [], [])

AT_CLEANUP


AT_SETUP([EXTERNAL data item size mismatch])
AT_KEYWORDS([runmisc])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 PRG-VAR       PIC X(8) EXTERNAL AS "WRK-VAR".
       01 COB-VAR       PIC X(8) EXTERNAL.
       01 EXT-VAR       PIC X(8) EXTERNAL.
       PROCEDURE        DIVISION.
           IF PRG-VAR NOT = "Extrn"
              DISPLAY 'local named external is not correct: ' PRG-VAR.
           IF COB-VAR NOT = "Hello"
              DISPLAY 'remote named external is not correct: ' COB-VAR.
           MOVE "World" TO EXT-VAR.
           EXIT PROGRAM.
])

AT_DATA([bigger.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      error.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 WRK-VAR       PIC X(10) EXTERNAL.
       01 MYVAR         PIC X(10) EXTERNAL AS "COB-VAR".
       01 EXT-VAR       PIC X(10) EXTERNAL.
       PROCEDURE        DIVISION.
           MOVE "Extrn" TO WRK-VAR
           MOVE "Hello" TO MYVAR
           MOVE SPACES  TO EXT-VAR
           CALL "callee"
           IF EXT-VAR NOT = "World"
              DISPLAY 'simple external back not correct: ' EXT-VAR.
           STOP RUN.
])

AT_DATA([smaller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      error.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 WRK-VAR       PIC X(5) EXTERNAL.
       01 MYVAR         PIC X(5) EXTERNAL AS "COB-VAR".
       01 EXT-VAR       PIC X(5) EXTERNAL.
       PROCEDURE        DIVISION.
           MOVE "Extrn" TO WRK-VAR
           MOVE "Hello" TO MYVAR
           MOVE SPACES  TO EXT-VAR
           CALL "callee"
           IF EXT-VAR NOT = "World"
              DISPLAY 'simple external back not correct: ' EXT-VAR.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE bigger.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./bigger], [0], [], ignore)

AT_CHECK([$COMPILE smaller.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./smaller], [1], [], ignore)

# FIXME - messages should be adjusted, see Bug #445
AT_XFAIL_IF(true)

AT_CHECK([$COBCRUN_DIRECT ./bigger], [0], [],
[libcob: callee.cob:6: warning: EXTERNAL item 'WRK-VAR' previously allocated with size 10, requested size is 8
libcob: callee.cob:7: warning: EXTERNAL item 'EXT-VAR' previously allocated with size 10, requested size is 8
libcob: callee.cob:8: warning: EXTERNAL item 'EXT-VAR' previously allocated with size 10, requested size is 8
])

AT_CHECK([$COBCRUN_DIRECT ./smaller], [1], [],
[libcob: callee.cob:6: error: EXTERNAL item 'WRK-VAR' previously allocated with size 5, requested size is 8
])

AT_CLEANUP


## MOVE statement

AT_SETUP([MOVE to itself])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC 99 VALUE 12.
       PROCEDURE        DIVISION.
           MOVE X TO X.
           IF X NOT = 12
              DISPLAY X.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [],
[prog.cob:8: warning: overlapping MOVE may produce unpredictable results
])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([MOVE with refmod])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC 9(4) VALUE 0.
       PROCEDURE        DIVISION.
           MOVE "1" TO X(1:1).
           IF X NOT = 1000
              DISPLAY X.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([MOVE with refmod (variable)])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(4) VALUE "1234".
       01 Y             PIC X(4) VALUE "abcd".
       01 I             PIC 9 VALUE 1.
       PROCEDURE        DIVISION.
           MOVE X(1:I) TO Y.
           IF Y NOT = "1   "
              DISPLAY Y.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([MOVE with group refmod])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC 9999 VALUE 1234.
       PROCEDURE        DIVISION.
           MOVE "99" TO G(3:2).
           IF G NOT = "1299"
              DISPLAY G.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([MOVE indexes])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 10 INDEXED I.
       PROCEDURE        DIVISION.
           SET I TO ZERO.
           MOVE I TO X(1).
           IF X(1) NOT = "0"
              DISPLAY X(1).
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([MOVE X'00'])
AT_KEYWORDS([runmisc])

AT_DATA([dump.c], [
#include <stdio.h>
#include <libcob.h>

COB_EXT_EXPORT int
dump (unsigned char *data)
{
  printf ("%02x%02x%02x", data[[0]], data[[1]], data[[2]]);
  return 0;
}
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC XXX.
       PROCEDURE        DIVISION.
           MOVE X"000102" TO X.
           CALL "dump" USING X
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE dump.c], [0], [], [])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [000102])

AT_CLEANUP


AT_SETUP([MOVE Z'literal'])
AT_KEYWORDS([runmisc literal])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC XXXX.
       01  XRED REDEFINES X.
           03  XBYTE1   PIC X.
           03  XBYTE2   PIC X.
           03  XBYTE3   PIC X.
           03  XBYTE4   PIC X.
       PROCEDURE        DIVISION.
           MOVE Z"012" TO X.
           IF XBYTE1 = "0" AND
              XBYTE2 = "1" AND
              XBYTE3 = "2" AND
              XBYTE4 = LOW-VALUE
              DISPLAY "OK" NO ADVANCING
              END-DISPLAY
           ELSE
              DISPLAY "X = " X (1:3) NO ADVANCING
              END-DISPLAY
              IF XBYTE4 = LOW-VALUE
                 DISPLAY " WITH LOW-VALUE"
                 END-DISPLAY
              ELSE
                 DISPLAY " WITHOUT LOW-VALUE BUT '" XBYTE4 "'"
                 END-DISPLAY
              END-IF
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [OK], [])

AT_CLEANUP


AT_SETUP([Floating continuation indicator])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY "OK"-
            "OK"
             NO ADVANCING
           END-DISPLAY
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [OKOK])

AT_CLEANUP


AT_SETUP([Fixed continuation indicator])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(333) VALUE
           '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWX
      -    'YZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUV
      -    'WXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRST
      -    'UVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQR
      -    'STUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOP
      -             'QRSTUVWXYZ'.
       PROCEDURE        DIVISION.
           DISPLAY X NO ADVANCING
           END-DISPLAY.
           DISPLAY '_'
           END-DISPLAY.
           MOVE
           "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567
      -    "89abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012345
      -    "6789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123
      -    "456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01
      -     "23456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXY
      -                                                               "Z
      -             "0123456789" TO X.
           DISPLAY X NO ADVANCING
           END-DISPLAY.
           DISPLAY '_'
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ                       _
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789                       _
])

AT_CLEANUP


AT_SETUP([Concatenation operator])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77 STR           PIC X(05).
       PROCEDURE        DIVISION.
           MOVE "OK" & " "
            & "OK"
             TO STR
           DISPLAY STR NO ADVANCING
           END-DISPLAY
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [OK OK])

AT_CLEANUP


AT_SETUP([SOURCE FIXED/FREE directives])
AT_KEYWORDS([runmisc SOURCEFORMAT FIXED FREE])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       >>SOURCE FREE
   DATA             DIVISION.
   WORKING-STORAGE  SECTION.
   >>SOURCE FIXED
       PROCEDURE        DIVISION.                                       FIXED
             DISPLAY "OK" NO ADVANCING
             END-DISPLAY.
       >>SOURCE FREE
                                                                        DISPLAY
   "OK"
 NO ADVANCING
   END-DISPLAY.
   >>SET SOURCEFORMAT "FIXED"
             DISPLAY "OK" NO ADVANCING                                  FIXED
             END-DISPLAY.
       >>SET SOURCEFORMAT "FREE"
                                                                        DISPLAY
   "OK"
 NO ADVANCING
   END-DISPLAY.
             STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[OKOKOKOK])

AT_CLEANUP


AT_SETUP([TURN directive])
AT_KEYWORDS([runmisc BOUND NOBOUND directives])

# note: we only check here that the TURN directive applies
#       for more general tests, including command line options
#       and extension directives, see run_subscript.at, run_refmod.at

AT_DATA([prog.cob], [
       >>TURN EC-BOUND-SUBSCRIPT CHECKING ON
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x VALUE "12345!".
           03  y PIC X OCCURS 5 TIMES.
           03  z PIC X.
       01  idx PIC 99 VALUE 6.

       PROCEDURE DIVISION.
       >>TURN EC-BOUND-SUBSCRIPT CHECKING OFF
           DISPLAY y (idx) WITH NO ADVANCING
       >>TURN EC-BOUND-SUBSCRIPT CHECKING ON WITH LOCATION
       >>TURN EC-BOUND, EC-PROGRAM CHECKING OFF
           DISPLAY y (idx) WITH NO ADVANCING
       >>TURN EC-BOUND-SUBSCRIPT CHECKING ON
           DISPLAY y (idx) WITH NO ADVANCING
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [1], [!!],
[libcob: prog.cob:20: error: subscript of 'y' out of bounds: 6
note: maximum subscript for 'y': 5
])

AT_CLEANUP


## OCCURS clause

AT_SETUP([Level 01 subscripts])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X OCCURS 10.
       PROCEDURE        DIVISION.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -std=cobol2014 prog.cob], [1], [],
[prog.cob:6: error: level 01 item 'X' cannot have a OCCURS clause
])

AT_CLEANUP


## Expressions

AT_SETUP([Class check with reference modification])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(6) VALUE "123   ".
       PROCEDURE        DIVISION.
           IF X(1:3) NUMERIC
              STOP RUN
           END-IF.
           DISPLAY "NG" NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([Index and parenthesized expression])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 1 INDEXED BY I.
       PROCEDURE        DIVISION.
         IF I < (I + 2)
           DISPLAY "OK" NO ADVANCING
           END-DISPLAY
         END-IF.
         STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [OK], [])

AT_CLEANUP


AT_SETUP([Alphanumeric and binary numeric])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-X           PIC XXXX VALUE "0001".
       01 X-9           PIC 9999 COMP VALUE 1.
       PROCEDURE        DIVISION.
         IF X-X = X-9
            STOP RUN
         END-IF.
         DISPLAY "NG" NO ADVANCING
         END-DISPLAY
         STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([Non-numeric data in numeric items])

AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X.
          03 X-NUM      PIC 9(06) VALUE 123.
       77 NUM           PIC 9(06).
       PROCEDURE        DIVISION.
           MOVE x"0000" TO X (2:2)
           IF X-NUM NUMERIC
              DISPLAY "low-value is numeric" UPON SYSERR
              END-DISPLAY
           END-IF
           MOVE x"01" TO X (3:1)
           IF X-NUM NUMERIC
              DISPLAY "SOH is numeric" UPON SYSERR
              END-DISPLAY
           END-IF
           MOVE X-NUM TO NUM
           DISPLAY "test over"
           END-DISPLAY
      *
           GOBACK.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X.
          03 X-NUM      PIC 9(06) PACKED-DECIMAL VALUE 123.
       77 NUM           PIC 9(06).
       PROCEDURE        DIVISION.
           MOVE x"0A" TO X (2:1)
           IF X-NUM NUMERIC
              DISPLAY "bad prog"
              END-DISPLAY
           END-IF
           MOVE X-NUM TO NUM
           DISPLAY "test over"
           END-DISPLAY
      *
           GOBACK.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBC -x -o unchecked_prog prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./unchecked_prog], [0],
[test over
], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [1], [],
[libcob: prog.cob:20: error: 'X-NUM' (Type: NUMERIC DISPLAY) not numeric: '0\000\001123'
])

AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([$COBC -x -o unchecked_prog2 prog2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./unchecked_prog2], [0],
[test over
], [])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [1], [],
[libcob: prog2.cob:15: error: 'X-NUM' (Type: PACKED-DECIMAL) not numeric: '0x000a123f'
])

AT_CLEANUP


## CALL statement

AT_SETUP([Dynamic call with static linking])
AT_KEYWORDS([runmisc])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       PROCEDURE        DIVISION.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       PROCEDURE        DIVISION.
           CALL "callee"
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE -c callee.cob], [0], [], [])
AT_CHECK([$COMPILE -c caller.cob], [0], [], [])
AT_CHECK([$COMPILE -o prog caller.$COB_OBJECT_EXT callee.$COB_OBJECT_EXT], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CHECK([$COMPILE -o prog2 caller.cob callee.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [0], [], [])

AT_CLEANUP


AT_SETUP([Static call with static linking])
AT_KEYWORDS([runmisc])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       PROCEDURE        DIVISION.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       PROCEDURE        DIVISION.
           CALL STATIC "callee"
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE -c callee.cob], [0], [], [])
AT_CHECK([$COMPILE -c caller.cob], [0], [], [])
AT_CHECK([$COMPILE -o prog caller.$COB_OBJECT_EXT callee.$COB_OBJECT_EXT], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CHECK([$COMPILE -o prog2 -static caller.cob callee.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [0], [], [])
AT_CHECK([$COMPILE -o prog3 caller.cob callee.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog3], [0], [], [])

AT_CLEANUP


AT_SETUP([Dynamic CALL with ON EXCEPTION])

AT_KEYWORDS([runmisc])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       PROCEDURE        DIVISION.
           CALL "callee1" ON EXCEPTION
              CALL "callee2" ON EXCEPTION
                  DISPLAY "neither calee1 nor callee2 found"
              END-CALL
           END-CALL
           GOBACK.
])

AT_DATA([callee2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee2.
       PROCEDURE        DIVISION.
           DISPLAY "this is callee2" NO ADVANCING
           GOBACK.
])

AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE callee2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0],
[this is callee2], [])

AT_CLEANUP


AT_SETUP([Static CALL with ON EXCEPTION])

AT_KEYWORDS([runmisc])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       PROCEDURE        DIVISION.
           CALL "callee1" ON EXCEPTION
              CALL "callee2" ON EXCEPTION
                  DISPLAY "neither calee1 nor callee2 found"
              END-CALL
           END-CALL
           GOBACK.
])

AT_DATA([callee2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee2.
       PROCEDURE        DIVISION.
           DISPLAY "this is callee2" NO ADVANCING
           GOBACK.
])


AT_CHECK([$COMPILE_MODULE -c callee2.cob], [0], [], [])
AT_CHECK([$COMPILE -c caller.cob], [0], [], [])
AT_CHECK([$COMPILE -o prog caller.$COB_OBJECT_EXT callee2.$COB_OBJECT_EXT], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[this is callee2], [])
AT_CHECK([$COMPILE -o prog2 -static caller.cob callee2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [0],
[this is callee2], [])
AT_CHECK([$COMPILE -o prog3 caller.cob callee2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog3], [0],
[this is callee2], [])

AT_CLEANUP


AT_SETUP([CALL m1. CALL m2. CALL m1.])
AT_KEYWORDS([runmisc])

AT_DATA([m1.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      m1.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC 9(4).
       PROCEDURE        DIVISION.
           COMPUTE X = 1 + 2
           END-COMPUTE.
           IF X NOT = 3
              DISPLAY X
              END-DISPLAY
           END-IF.
])

AT_DATA([m2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      m2.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC 9(4).
       PROCEDURE        DIVISION.
           COMPUTE X = 3 + 4
           END-COMPUTE.
           IF X NOT = 7
              DISPLAY X
              END-DISPLAY
           END-IF.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       PROCEDURE        DIVISION.
           CALL "m1"
           END-CALL.
           CALL "m2"
           END-CALL.
           CALL "m1"
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE m1.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE m2.cob], [0], [], [])
AT_CHECK([$COMPILE caller.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [], [])

AT_CLEANUP


AT_SETUP([Recursive CALL of RECURSIVE program])
AT_KEYWORDS([runmisc CANCEL EXTERNAL])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller IS RECURSIVE.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  STOPPER      PIC S9 EXTERNAL.
       PROCEDURE        DIVISION.
           MOVE 0 TO STOPPER
           CALL "callee"
           DISPLAY 'OK' NO ADVANCING END-DISPLAY
      *> FIXME: CANCEL broken on special environments
      *>   CANCEL "callee" , "callee2"
           DISPLAY ' + FINE' NO ADVANCING END-DISPLAY
           STOP RUN.
])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee IS RECURSIVE.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  STOPPER      PIC S9 EXTERNAL.
       PROCEDURE        DIVISION.
           IF STOPPER = 9
              MOVE -1 TO STOPPER
           ELSE
              ADD   1 TO STOPPER
              CALL "callee2"
           END-IF
           GOBACK.
])

AT_DATA([callee2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee2 IS RECURSIVE.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  STOPPER      PIC S9 EXTERNAL.
       PROCEDURE        DIVISION.
           IF STOPPER NOT EQUAL -1
             CALL "callee"
           END-IF
           GOBACK.
])

AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE callee2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [OK + FINE], [])

AT_CLEANUP


AT_SETUP([Recursive CALL of INITIAL program])
AT_KEYWORDS([runmisc])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  STOPPER      PIC 9 EXTERNAL.
       PROCEDURE        DIVISION.
           MOVE 0 TO STOPPER
           CALL "callee" END-CALL.
           GOBACK.
])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee IS INITIAL.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  STOPPER      PIC 9 EXTERNAL.
       PROCEDURE        DIVISION.
           IF STOPPER = 1
              DISPLAY 'INITIAL prog was called RECURSIVE'
              END-DISPLAY
              STOP RUN RETURNING 1
           ELSE
              MOVE 1 TO STOPPER
              CALL "callee2" END-CALL
           END-IF.
           GOBACK.
])

AT_DATA([callee2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee2.
       PROCEDURE        DIVISION.
           CALL "callee" END-CALL.
           GOBACK.
])

AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE callee2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [1], [],
[libcob: callee2.cob:5: error: recursive CALL from 'callee2' to 'callee' which is NOT RECURSIVE
])

AT_CLEANUP


AT_SETUP([Recursive CALL with RECURSIVE assumed])
AT_KEYWORDS([runmisc])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  STOPPER      PIC 9 EXTERNAL.
       PROCEDURE        DIVISION.
           MOVE 0 TO STOPPER
           CALL "callee" END-CALL.
           GOBACK.
])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee IS INITIAL.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  STOPPER      PIC 9 EXTERNAL.
       PROCEDURE        DIVISION.
           IF STOPPER = 8
              DISPLAY 'OK' NO ADVANCING END-DISPLAY.
           IF STOPPER NOT = 9
              ADD  1 TO STOPPER END-ADD
              CALL "callee2" END-CALL.
           GOBACK.
])

AT_DATA([callee2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee2.
       PROCEDURE        DIVISION.
           CALL "callee" END-CALL.
           GOBACK.
])

AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE -fno-recursive-check callee.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE -fno-recursive-check callee2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [OK], [])

AT_CLEANUP


AT_SETUP([Recursive CALL with ON EXCEPTION])

AT_KEYWORDS([runmisc EXCEPTION-STATUS])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  STOPPER      PIC 9 EXTERNAL.
       PROCEDURE        DIVISION.
           MOVE 0 TO STOPPER
           CALL "callee" END-CALL.
           GOBACK.
])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee IS INITIAL.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  STOPPER      PIC 9 EXTERNAL.
       PROCEDURE        DIVISION.
           IF STOPPER = 1
              DISPLAY 'INITIAL prog was called RECURSIVE'
              END-DISPLAY
              STOP RUN RETURNING 1
           ELSE
              MOVE 1 TO STOPPER
              CALL "callee2" END-CALL
           END-IF.
           GOBACK.
])

AT_DATA([callee2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee2.
       PROCEDURE        DIVISION.
           CALL "callee"
           ON EXCEPTION
              DISPLAY "Exception " FUNCTION EXCEPTION-STATUS ";"
                 UPON SYSERR
              STOP RUN RETURNING 1
           END-CALL.
           GOBACK.
])

AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE callee2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [1], [],
[Exception EC-PROGRAM-RECURSIVE-CALL      ;
])

AT_CLEANUP


AT_SETUP([Multiple calls of INITIAL program])
AT_KEYWORDS([runmisc CALL])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  PARAM1       PIC X(08).
       01  PARAM2       PIC 9999 COMP VALUE 08.
       PROCEDURE        DIVISION.
           MOVE ' PARAM 1' TO PARAM1
           PERFORM 10 TIMES
              CALL "callee" USING PARAM1 PARAM2 END-CALL
           END-PERFORM
           DISPLAY 'PARAM1 = ' PARAM1
           END-DISPLAY
           STOP RUN.
])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee IS INITIAL.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  COUNTER      PIC 999 VALUE ZERO.
       01  LPARAM       PIC 9(8) COMP.
       LINKAGE SECTION.
       01  PARAM1       PIC X(08).
       01  PARAM2       PIC 9999 COMP.
       PROCEDURE        DIVISION USING PARAM1 PARAM2.
           ADD 1 TO COUNTER END-ADD
           CALL 'C$PARAMSIZE' USING 1 GIVING LPARAM END-CALL
           DISPLAY 'COUNTER = ' COUNTER ' LPARAM1 = ' LPARAM
                   ' PARAM1 = ' PARAM1
           END-DISPLAY
           GOBACK.
])

AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [COUNTER = 001 LPARAM1 = 00000008 PARAM1 =  PARAM 1
COUNTER = 001 LPARAM1 = 00000008 PARAM1 =  PARAM 1
COUNTER = 001 LPARAM1 = 00000008 PARAM1 =  PARAM 1
COUNTER = 001 LPARAM1 = 00000008 PARAM1 =  PARAM 1
COUNTER = 001 LPARAM1 = 00000008 PARAM1 =  PARAM 1
COUNTER = 001 LPARAM1 = 00000008 PARAM1 =  PARAM 1
COUNTER = 001 LPARAM1 = 00000008 PARAM1 =  PARAM 1
COUNTER = 001 LPARAM1 = 00000008 PARAM1 =  PARAM 1
COUNTER = 001 LPARAM1 = 00000008 PARAM1 =  PARAM 1
COUNTER = 001 LPARAM1 = 00000008 PARAM1 =  PARAM 1
PARAM1 =  PARAM 1
])

AT_CLEANUP


AT_SETUP([CALL binary literal parameter/LENGTH OF])
AT_KEYWORDS([runmisc])

AT_DATA([dump.c], [
#include <stdio.h>
#include <libcob.h>

COB_EXT_EXPORT int
dump (int *p)
{
  printf ("%8.8d\n", *p);
  return 0;
}
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  MYOCC        PIC 9(8) COMP.
       01  MYTAB.
           03  MYBYTE   PIC X OCCURS 1 TO 20
                        DEPENDING ON MYOCC.
       PROCEDURE        DIVISION.
           MOVE 9 TO MYOCC.
           CALL "dump" USING BY CONTENT 1
           END-CALL.
           CALL "dump" USING BY CONTENT LENGTH OF MYTAB
           END-CALL.
           CALL "dump" USING BY CONTENT LENGTH OF MYOCC
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE dump.c], [0], [], [])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[00000001
00000009
00000004
])
AT_CHECK([$COMPILE -fbinary-byteorder=native prog.cob -o prog2], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [0],
[00000001
00000009
00000004
])

AT_CLEANUP


## INSPECT

AT_SETUP([INSPECT REPLACING LEADING ZEROS BY SPACES])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(4) VALUE "0001".
       PROCEDURE        DIVISION.
           INSPECT X REPLACING LEADING ZEROS BY SPACES.
           IF X NOT = "   1"
              DISPLAY "Should be '   1' but is '" X "'".
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([INSPECT No repeat conversion check])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(3) VALUE "BCA".
       01 Y             PIC X(6) VALUE "   BCA".
       PROCEDURE        DIVISION.
           INSPECT X CONVERTING "ABC" TO "BCD".
           IF X NOT = "CDB"
              DISPLAY "X: " X.
           INSPECT Y CONVERTING "ABC" TO "BCD".
           IF Y NOT = "   CDB"
              DISPLAY "Y: " Y.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([TRANSFORM statement])
AT_KEYWORDS([runmisc CONVERTING ALPHABET])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           ALPHABET MY-ASCII  IS STANDARD-1.
           ALPHABET MY-EBCDIC IS EBCDIC.

       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(3) VALUE "BCA".
       PROCEDURE        DIVISION.
      *> internally: "alias" to INSPECT CONVERTING
           TRANSFORM X FROM "ABC" TO "BCD".
           IF X NOT = "CDB"
              DISPLAY "X: " X.
      *> optional CHARACTERS and ALPHABETs (value test is separate)
           TRANSFORM X CHARACTERS FROM MY-ASCII TO MY-EBCDIC.
      *>
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([INSPECT CONVERTING alphabet])
AT_KEYWORDS([runmisc ASCII EBCDIC])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. charset.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           ALPHABET ALPHA IS ASCII.
           ALPHABET BETA  IS EBCDIC.

       DATA DIVISION.
       WORKING-STORAGE SECTION.

       01 TESTHEX PIC X(10) VALUE X'C17BD6F2F0F1F8404040'.

       procedure division.
       sample-main.

           INSPECT testhex CONVERTING BETA TO ALPHA
           DISPLAY 'Converted: "' TESTHEX '"' WITH NO ADVANCING

           GOBACK.
       END PROGRAM charset.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[Converted: "A#O2018   "], [])

AT_CLEANUP


AT_SETUP([INSPECT CONVERTING TO figurative constant])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(3) VALUE "BCA".
       PROCEDURE        DIVISION.
           INSPECT X CONVERTING "ABC" TO SPACES.
           IF X NOT = SPACES
              DISPLAY X.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([INSPECT CONVERTING NULL])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(3) VALUE LOW-VALUES.
       PROCEDURE        DIVISION.
           INSPECT X CONVERTING NULL TO "A".
           IF X NOT = "AAA"
              DISPLAY X.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([INSPECT CONVERTING TO NULL])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(3) VALUE "AAA".
       PROCEDURE        DIVISION.
           INSPECT X CONVERTING "A" TO NULL
           IF X NOT = LOW-VALUES
              DISPLAY "NG".
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([INSPECT CONVERTING complex])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(12) VALUE "AZABBCDCCECC".
       PROCEDURE        DIVISION.
           INSPECT X CONVERTING "ABZC" TO "ZY0X"
           IF X NOT = "Z0ZYYXDXXEXX"
              DISPLAY "1 - " X
              MOVE "Z0ZYYXDXXEXX" TO X.

           INSPECT X CONVERTING "XD" TO SPACES
              BEFORE  "E" AFTER "D"
           IF X NOT = "Z0ZYYXD  EXX"
              DISPLAY "2 - " X
              MOVE "Z0ZYYXD  EXX" TO X.

           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CLEANUP


AT_SETUP([INSPECT numeric signed])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 SEPARATE1     PIC S99 VALUE -11 SIGN LEADING  SEPARATE.
       01 SEPARATE2     PIC S99 VALUE +11 SIGN LEADING  SEPARATE.
       01 TSEPARATE1    PIC S99 VALUE -11 SIGN TRAILING SEPARATE.
       01 TSEPARATE2    PIC S99 VALUE +11 SIGN TRAILING SEPARATE.
       01 NSEPARATE1    PIC S99 VALUE -11.
       01 NSEPARATE2    PIC S99 VALUE +11.
       01 TRAILING1     PIC S99 VALUE -11 SIGN TRAILING.
       01 TRAILING2     PIC S99 VALUE +11 SIGN TRAILING.
       77 CNT           USAGE BINARY-INT.
       PROCEDURE        DIVISION.
           MOVE 0 TO CNT
           INSPECT SEPARATE1  TALLYING CNT FOR ALL "1"
           IF CNT NOT = 2
              DISPLAY "T1 - " CNT.
           MOVE 0 TO CNT
           INSPECT SEPARATE2  TALLYING CNT FOR ALL "1"
           IF CNT NOT = 2
              DISPLAY "T2 - " CNT.
           MOVE 0 TO CNT
           INSPECT TSEPARATE1 TALLYING CNT FOR ALL "1"
           IF CNT NOT = 2
              DISPLAY "T3 - " CNT.
           MOVE 0 TO CNT
           INSPECT TSEPARATE2 TALLYING CNT FOR ALL "1"
           IF CNT NOT = 2
              DISPLAY "T4 - " CNT.
           MOVE 0 TO CNT
           INSPECT NSEPARATE1 TALLYING CNT FOR ALL "1"
           IF CNT NOT = 2
              DISPLAY "T5 - " CNT.
           MOVE 0 TO CNT
           INSPECT NSEPARATE2 TALLYING CNT FOR ALL "1"
           IF CNT NOT = 2
              DISPLAY "T6 - " CNT.
           MOVE 0 TO CNT
           INSPECT TRAILING1  TALLYING CNT FOR ALL "1"
           IF CNT NOT = 2
              DISPLAY "T7 - " CNT.
           MOVE 0 TO CNT
           INSPECT TRAILING2  TALLYING CNT FOR ALL "1"
           IF CNT NOT = 2
              DISPLAY "T8 - " CNT.

           INSPECT SEPARATE1  CONVERTING "123" TO "234"
           IF SEPARATE1 NOT = -22
              DISPLAY "C1 - " SEPARATE1
              MOVE -22 TO SEPARATE1.
           INSPECT SEPARATE2  CONVERTING "123" TO "234"
           IF SEPARATE2 NOT = +22
              DISPLAY "C2 - " SEPARATE2
              MOVE +22 TO SEPARATE2.
           INSPECT TSEPARATE1 CONVERTING "123" TO "234"
           IF TSEPARATE1 NOT = -22
              DISPLAY "C3 - " TSEPARATE1
              MOVE -22 TO TSEPARATE1.
           INSPECT TSEPARATE2 CONVERTING "123" TO "234"
           IF TSEPARATE2 NOT = +22
              DISPLAY "C4 - " TSEPARATE2
              MOVE +22 TO TSEPARATE2.
           INSPECT NSEPARATE1 CONVERTING "123" TO "234"
           IF NSEPARATE1 NOT = -22
              DISPLAY "C5 - " NSEPARATE1
              MOVE -22 TO NSEPARATE1.
           INSPECT NSEPARATE2 CONVERTING "123" TO "234"
           IF NSEPARATE2 NOT = +22
              DISPLAY "C6 - " NSEPARATE2
              MOVE +22 TO NSEPARATE2.
           INSPECT TRAILING1  CONVERTING "123" TO "234"
           IF TRAILING1 NOT = -22
              DISPLAY "C7 - " TRAILING1
              MOVE -22 TO TRAILING1.
           INSPECT TRAILING2  CONVERTING "123" TO "234"
           IF TRAILING2 NOT = +22
              DISPLAY "C8 - " TRAILING2
              MOVE +22 TO TRAILING2.

           INSPECT SEPARATE1  REPLACING ALL "1" BY "2"
                                            "2" BY "3"
                                            "3" BY "4"
           IF SEPARATE1 NOT = -33
              DISPLAY "R1 - " SEPARATE1
              MOVE -33 TO SEPARATE1.
           INSPECT SEPARATE2  REPLACING ALL "1" BY "2"
                                            "2" BY "3"
                                            "3" BY "4"
           IF SEPARATE2 NOT = +33
              DISPLAY "R2 - " SEPARATE2
              MOVE +33 TO SEPARATE2.
           INSPECT TSEPARATE1 REPLACING ALL "1" BY "2"
                                            "2" BY "3"
                                            "3" BY "4"
           IF TSEPARATE1 NOT = -33
              DISPLAY "R3 - " TSEPARATE1
              MOVE -33 TO TSEPARATE1.
           INSPECT TSEPARATE2 REPLACING ALL "1" BY "2"
                                            "2" BY "3"
                                            "3" BY "4"
           IF TSEPARATE2 NOT = +33
              DISPLAY "R4 - " TSEPARATE2
              MOVE +33 TO TSEPARATE2.
           INSPECT NSEPARATE1 REPLACING ALL "1" BY "2"
                                            "2" BY "3"
                                            "3" BY "4"
           IF NSEPARATE1 NOT = -33
              DISPLAY "R5 - " NSEPARATE1
              MOVE -33 TO NSEPARATE1.
           INSPECT NSEPARATE2 REPLACING ALL "1" BY "2"
                                            "2" BY "3"
                                            "3" BY "4"
           IF NSEPARATE2 NOT = +33
              DISPLAY "R6 - " NSEPARATE2
              MOVE +33 TO NSEPARATE2.
           INSPECT TRAILING1  REPLACING ALL "1" BY "2"
                                            "2" BY "3"
                                            "3" BY "4"
           IF TRAILING1 NOT = -33
              DISPLAY "R7 - " TRAILING1
              MOVE -33 TO TRAILING1.
           INSPECT TRAILING2  REPLACING ALL "1" BY "2"
                                            "2" BY "3"
                                            "3" BY "4"
           IF TRAILING2 NOT = +33
              DISPLAY "R8 - " TRAILING2
              MOVE +33 TO TRAILING2.

           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CLEANUP


AT_SETUP([INSPECT TALLYING BEFORE])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(4) VALUE "ABC ".
       01 TAL           PIC 999 VALUE 0.
       PROCEDURE        DIVISION.
           MOVE 0 TO TAL.
           INSPECT X TALLYING TAL FOR CHARACTERS
                     BEFORE INITIAL " ".
           IF TAL NOT = 3
              DISPLAY TAL.

           MOVE 0 TO TAL.
           MOVE " ABC" TO X.
           INSPECT X TALLYING TAL FOR CHARACTERS
                     BEFORE INITIAL " ".
           IF TAL NOT = 0
              DISPLAY TAL.

           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([INSPECT TALLYING AFTER])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(4) VALUE "ABC ".
       01 TAL           PIC 999 VALUE 0.
       PROCEDURE        DIVISION.
           MOVE 0 TO TAL.
           INSPECT X TALLYING TAL FOR CHARACTERS
                     AFTER INITIAL " ".
           IF TAL NOT = 0
              DISPLAY TAL.

           MOVE 0 TO TAL.
           MOVE " ABC" TO X.
           INSPECT X TALLYING TAL FOR CHARACTERS
                     AFTER INITIAL " ".
           IF TAL NOT = 3
              DISPLAY TAL.

           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([INSPECT REPLACING figurative constant])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(3) VALUE "BCA".
       PROCEDURE        DIVISION.
           INSPECT X REPLACING ALL "BC" BY SPACE.
           IF X NOT = "  A"
              DISPLAY X.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([INSPECT REPLACING TRAILING ZEROS BY SPACES])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(4) VALUE "1000".
       PROCEDURE        DIVISION.
           INSPECT X REPLACING TRAILING ZEROS BY SPACES.
           IF X NOT = "1   "
              DISPLAY X.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([INSPECT REPLACING complex])
AT_KEYWORDS([runmisc CHARACTERS])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(12) VALUE "AZABBCDCCECC".
       PROCEDURE        DIVISION.
           INSPECT X REPLACING
             ALL      "A" BY "Z"
                      "B" BY "Y"
                      "Z" BY "0"
             TRAILING "C" BY "X"
           IF X NOT = "Z0ZYYCDCCEXX"
              DISPLAY "1 - " X.

           INSPECT X REPLACING
             CHARACTERS BY SPACES
              BEFORE  "C" AFTER "0"
             CHARACTERS BY ZEROES
              BEFORE  "E" AFTER "C"
           IF X NOT = "Z0   C000EXX"
              DISPLAY "2 - " X.

           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CLEANUP


AT_SETUP([SWITCHES (environment COB_SWITCH_n and SET)])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           SWITCH-1 IS SWIT1
             ON  IS SWIT1-ON
             OFF IS SWIT1-OFF
           SWITCH-2 IS SWIT2
             ON  IS SWIT2-ON
             OFF IS SWIT2-OFF
           SWITCH-3
             ON  IS SWIT3-ON
             OFF IS SWIT3-OFF
           SWITCH-4 IS SWIT4
             OFF IS SWIT4-OFF
           SWITCH-31
             ON  IS SWIT31-ON
           SWITCH-36 IS SWIT36
             OFF IS SWIT36-OFF.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           IF SWIT1-ON
              DISPLAY "ON" NO ADVANCING
           ELSE
              DISPLAY "OFF" NO ADVANCING.

           IF SWIT2-ON
              DISPLAY " ON" NO ADVANCING
           ELSE
              DISPLAY " OFF" NO ADVANCING.

           IF SWIT3-ON
              DISPLAY " ON" NO ADVANCING
           ELSE
              DISPLAY " OFF" NO ADVANCING.

           IF NOT SWIT4-OFF
              DISPLAY " ON" NO ADVANCING
           ELSE
              DISPLAY " OFF" NO ADVANCING.

           SET SWIT1 TO OFF.
           SET SWIT2 TO ON.
           IF SWIT1-ON
              DISPLAY " ON" NO ADVANCING
           ELSE
              DISPLAY " OFF" NO ADVANCING.

           IF SWIT2-ON
              DISPLAY " ON" NO ADVANCING
           ELSE
              DISPLAY " OFF" NO ADVANCING.

           IF SWIT31-ON
              DISPLAY " ON" NO ADVANCING
           ELSE
              DISPLAY " OFF" NO ADVANCING.

           IF NOT SWIT36-OFF
              DISPLAY " ON" NO ADVANCING
           ELSE
              DISPLAY " OFF" NO ADVANCING.

           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([COB_SWITCH_1=1 COB_SWITCH_2=0 COB_SWITCH_3=OFF COB_SWITCH_4=ON COB_SWITCH_36=ON ./prog], [0],
[ON OFF OFF ON OFF ON OFF ON])

AT_CLEANUP


## PERFORM

AT_SETUP([Nested PERFORM])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           PERFORM 2 TIMES
             DISPLAY "X" NO ADVANCING
             END-DISPLAY
             PERFORM 2 TIMES
               DISPLAY "Y" NO ADVANCING
             END-PERFORM
           END-PERFORM.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [XYYXYY])

AT_CLEANUP


AT_SETUP([PERFORM VARYING BY -0.2 decimal])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77 X             PIC 9v9.
       PROCEDURE        DIVISION.
           PERFORM VARYING X FROM 0.8 BY -0.2
                   UNTIL   X < 0.4
             DISPLAY "X" NO ADVANCING
           END-PERFORM.
           IF X NOT = 0.2
             DISPLAY "WRONG X: " X END-DISPLAY
           END-IF
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [XXX])

AT_CLEANUP


AT_SETUP([PERFORM VARYING Float])
AT_KEYWORDS([perform])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  i USAGE FLOAT-LONG.

       PROCEDURE DIVISION.
           PERFORM VARYING i FROM 1.0 BY 1.0 UNTIL i > 5.0
                 DISPLAY i " " NO ADVANCING
           END-PERFORM .
           DISPLAY "Test Part 1 Completed".
           PERFORM VARYING i FROM 1 BY 1 UNTIL i > 5
                 DISPLAY i " " NO ADVANCING
           END-PERFORM .
           DISPLAY "Test Part 2 Completed".
           PERFORM VARYING i FROM 5 BY -1 UNTIL i < 1
                 DISPLAY i " " NO ADVANCING
           END-PERFORM .
           DISPLAY "Test Part 3 Completed".
           STOP RUN.
           END PROGRAM prog.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[1 2 3 4 5 Test Part 1 Completed
1 2 3 4 5 Test Part 2 Completed
5 4 3 2 1 Test Part 3 Completed
], [])

AT_CLEANUP


AT_SETUP([PERFORM VARYING BY phrase omitted])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77 X             PIC 9.
       PROCEDURE        DIVISION.
           PERFORM VARYING X FROM 4
                   UNTIL   X > 6
             DISPLAY "X" NO ADVANCING
           END-PERFORM.
           IF X NOT = 7
             DISPLAY "WRONG X: " X
           END-IF
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -std=cobol85 prog.cob], [1], [],
[prog.cob:9: error: PERFORM VARYING without BY phrase does not conform to COBOL 85
])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [XXX])

AT_CLEANUP


## EXIT PERFORM  see ISO/IEC 1989:2002(E) 14.8.13 Format 5

AT_SETUP([EXIT PERFORM])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           PERFORM 2 TIMES
             DISPLAY "OK" NO ADVANCING
             EXIT PERFORM
             DISPLAY "NOT OK"
           END-PERFORM
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [OK], [])

AT_CLEANUP


## EXIT PERFORM  see ISO/IEC 1989:2002(E) 14.8.13 Format 5

AT_SETUP([EXIT PERFORM CYCLE])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           PERFORM 2 TIMES
             DISPLAY "OK" NO ADVANCING
             EXIT PERFORM CYCLE
             DISPLAY "NOT OK"
           END-PERFORM
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [OKOK])

AT_CLEANUP


## EXIT PARAGRAPH  see ISO/IEC 1989:2002(E) 14.8.13 Format 6

AT_SETUP([EXIT PARAGRAPH])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 INDVAL        PIC 9(4).
       PROCEDURE        DIVISION.
       A01.
           PERFORM VARYING INDVAL FROM 1 BY 1 UNTIL INDVAL > 10
            IF INDVAL > 2
               EXIT PARAGRAPH
            END-IF
           END-PERFORM.
       A02.
           IF INDVAL NOT = 3
              DISPLAY INDVAL
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


## EXIT SECTION  see ISO/IEC 1989:2002(E) 14.8.13 Format 6

AT_SETUP([EXIT SECTION])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 INDVAL        PIC 9(4).
       PROCEDURE        DIVISION.
       A01 SECTION.
       A011.
           PERFORM VARYING INDVAL FROM 1 BY 1 UNTIL INDVAL > 10
            IF INDVAL > 2
               EXIT SECTION
            END-IF
           END-PERFORM.
       A012.
           DISPLAY INDVAL.
       A02 SECTION.
           IF INDVAL NOT = 3
              DISPLAY INDVAL.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([PERFORM FOREVER / PERFORM UNTIL EXIT])
AT_KEYWORDS([runmisc extension])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  INDVAL       PIC 9(4).
       PROCEDURE        DIVISION.
       A01.
           MOVE 0 TO INDVAL
           PERFORM UNTIL EXIT
            ADD 1 TO INDVAL
            IF INDVAL > 2
               EXIT PERFORM
            END-IF
           END-PERFORM
           IF INDVAL NOT = 3
              DISPLAY "1: " INDVAL
              END-DISPLAY
           END-IF
           PERFORM FOREVER
            ADD 1 TO INDVAL
            IF INDVAL > 4
               EXIT PERFORM
            END-IF
           END-PERFORM
           IF INDVAL NOT = 5
              DISPLAY "2: " INDVAL
              END-DISPLAY
           END-IF
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([PERFORM inline (1)])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  INDVAL       PIC 9(4).
       PROCEDURE        DIVISION.
           PERFORM VARYING INDVAL FROM 1
            BY 1 UNTIL INDVAL > 2
           END-PERFORM
           IF INDVAL NOT = 3
              DISPLAY INDVAL
           END-IF
           STOP RUN
           .
])

AT_CHECK([$COMPILE -fmissing-statement=ok prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([PERFORM inline (2)])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  INDVAL       PIC 9(4).
       PROCEDURE        DIVISION.
           PERFORM VARYING INDVAL FROM 1
            BY 1 UNTIL INDVAL > 2.
           IF INDVAL NOT = 3
              DISPLAY INDVAL
           END-IF
           .
])

AT_CHECK([$COMPILE -frelax-syntax-checks -w prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([Non-overflow after overflow])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC 9(2) VALUE 0.
       01  Y            PIC 9(2) VALUE 0.
       PROCEDURE        DIVISION.
           COMPUTE X = 100
           END-COMPUTE.
           COMPUTE Y = 99
           END-COMPUTE.
           IF Y NOT = 99
              DISPLAY Y
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


## PERFORM statement

AT_SETUP([PERFORM ... CONTINUE])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           PERFORM 2 TIMES
             CONTINUE
           END-PERFORM.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])

AT_CLEANUP


AT_SETUP([STRING with subscript reference])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  G.
           02 X         PIC X(3) OCCURS 3.
       PROCEDURE        DIVISION.
           MOVE   SPACES TO G.
           STRING "abc" INTO X(2)
           END-STRING.
           IF G NOT = "   abc   "
              DISPLAY X(1)
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([STRING / UNSTRING [NOT] ON OVERFLOW])
AT_KEYWORDS([runmisc exceptions])

AT_DATA([prog.cob], [
       identification division.
       program-id. prog.
       data division.
       working-storage section.
       77 simple-str     pic x(20).
       77 err-str        pic x(50).
      *-----------------------------------------------------------------
       procedure division.
      *    STRING test
           move spaces to simple-str
           string 'data'
             delimited by size
             into simple-str
             on overflow
               move spaces to err-str
               string 'STRING OVERFLOW'
                  delimited by size
                  into err-str
               end-string
               display err-str upon syserr
               end-display
               display '1 failed'
               end-display
             not on overflow
               display '1 passed'
               end-display
           end-string
           if simple-str not = 'data'
             display 'STRING ERROR (1): "' simple-str '"'
             end-display
           end-if
      *
           move spaces to simple-str
           string 'data is too big here...'
             delimited by size
             into simple-str
             on overflow
               display '2 passed'
               end-display
             not on overflow
               display '2 failed'
               end-display
               move spaces to err-str
               string 'missing OVERFLOW'
                  delimited by size
                  into err-str
               end-string
               display err-str upon syserr
               end-display
           end-string
           if simple-str not = 'data is too big here'
             display 'STRING ERROR (2): "' simple-str '"'
             end-display
           end-if
      *
      *    UNSTRING test
           move spaces to simple-str
           unstring 'data'
             into simple-str
             on overflow
               move spaces to err-str
               unstring 'UNSTRING OVERFLOW'
                  into err-str
               end-unstring
               display err-str upon syserr
               end-display
               display '3 failed'
               end-display
             not on overflow
               display '3 passed'
               end-display
           end-unstring
           if simple-str not = 'data'
             display 'UNSTRING ERROR (1): "' simple-str '"'
             end-display
           end-if
      *
           move spaces to simple-str
           unstring 'data is too big here...'
             into simple-str
             on overflow
               display '4 passed'
               end-display
             not on overflow
               display '4 failed'
               end-display
               move spaces to err-str
               string 'missing OVERFLOW'
                  delimited by size
                  into err-str
               end-string
               display err-str upon syserr
               end-display
           end-unstring
           if simple-str not = 'data is too big here'
             display 'UNSTRING ERROR (2): "' simple-str '"'
             end-display
           end-if
      *
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[1 passed
2 passed
3 passed
4 passed
], [])

AT_CLEANUP


AT_SETUP([UNSTRING DELIMITED ALL LOW-VALUE])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  G.
           03 FILLER    PIC XXX VALUE "ABC".
           03 FILLER    PIC XX  VALUE LOW-VALUES.
           03 FILLER    PIC XXX VALUE "DEF".
       01  A            PIC XXX.
       01  B            PIC XXX.
       PROCEDURE        DIVISION.
           UNSTRING G DELIMITED BY ALL LOW-VALUES
                      INTO A B
           END-UNSTRING.
           IF A NOT = "ABC"
              DISPLAY A
              END-DISPLAY
           END-IF.
           IF B NOT = "DEF"
              DISPLAY B
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([UNSTRING DELIMITED ALL SPACE-2])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.
       ENVIRONMENT     DIVISION.
       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  WS-RECORD.
           02 VALUE SPACE           PIC X(04).
           02 VALUE "ABC AND DE"    PIC X(10).
           02 VALUE SPACE           PIC X(07).
           02 VALUE "FG AND HIJ"    PIC X(10).
           02 VALUE SPACE           PIC X(08).
       01  SPACE-2                  PIC X(02) VALUE SPACE.
       01  WS-DUMMY                 PIC X(15).
       01  WS-POINTER               PIC 99.
       PROCEDURE       DIVISION.
           MOVE 1 TO WS-POINTER.
      *
           PERFORM 0001-SUB.
           IF WS-DUMMY NOT = SPACE
              DISPLAY "Expected space - Got " WS-DUMMY
              END-DISPLAY
           END-IF.
           IF WS-POINTER NOT = 5
              DISPLAY "Expected 5 - Got " WS-POINTER
              END-DISPLAY
           END-IF.
      *
           PERFORM 0001-SUB.
           IF WS-DUMMY NOT = "ABC AND DE"
              DISPLAY "Expected ABC AND DE - Got " WS-DUMMY
              END-DISPLAY
           END-IF.
           IF WS-POINTER NOT = 21
              DISPLAY "Expected 21 - Got " WS-POINTER
              END-DISPLAY
           END-IF.
      *
           PERFORM 0001-SUB.
           IF WS-DUMMY NOT = " FG AND HIJ"
              DISPLAY "Expected  FG AND HIJ - Got " WS-DUMMY
              END-DISPLAY
           END-IF.
           IF WS-POINTER NOT = 40
              DISPLAY "Expected 40 - Got " WS-POINTER
              END-DISPLAY
           END-IF.
           STOP RUN.
       0001-SUB.
           UNSTRING WS-RECORD
                    DELIMITED BY ALL SPACE-2
              INTO WS-DUMMY
              POINTER WS-POINTER
           END-UNSTRING.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([UNSTRING DELIMITED POINTER])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.
       ENVIRONMENT     DIVISION.
       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  WS-LAY-RECORD            PIC X(66).
       01  WS-DUMMY                 PIC X(50).
       01  WS-KEYWORD               PIC X(32).
       01  WS-POINTER               PIC 99.
       PROCEDURE       DIVISION.
           MOVE
       '        10  AF-RECORD-TYPE-SEQUENCE-04     PIC   9(05) COMP-3.'
                  TO WS-LAY-RECORD.
           MOVE 1 TO WS-POINTER.
           PERFORM 0001-SUB.
           IF WS-POINTER NOT = 48
              DISPLAY "Expected 48 - Got " WS-POINTER
              END-DISPLAY
           END-IF.
           ADD 7  TO WS-POINTER
           END-ADD.
           PERFORM 0001-SUB.
           IF WS-POINTER NOT = 62
              DISPLAY "Expected 62 - Got " WS-POINTER
              END-DISPLAY
           END-IF.
           PERFORM 0001-SUB.
           IF WS-POINTER NOT = 63
              DISPLAY "Expected 63 - Got " WS-POINTER
              END-DISPLAY
           END-IF.
           STOP RUN.
       0001-SUB.
           UNSTRING WS-LAY-RECORD
                    DELIMITED
                    BY ' PIC '
                    OR ' COMP-3'
                    OR '.'
              INTO WS-DUMMY
              DELIMITER WS-KEYWORD
              POINTER WS-POINTER
           END-UNSTRING.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([UNSTRING DELIMITER IN])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       DATA             DIVISION.
       WORKING-STORAGE SECTION.
       01  WK-CMD       PIC X(8) VALUE "WWADDBCC".
       01  WK-SIGNS     PIC XX   VALUE "AB".
       01  WKS REDEFINES WK-SIGNS.
           03 WK-SIGN   PIC X OCCURS 2.
       01  WK-DELIM     PIC X OCCURS 2.
       01  WK-DATA      PIC X(2) OCCURS 3.
       PROCEDURE        DIVISION.
           UNSTRING WK-CMD DELIMITED BY WK-SIGN(1) OR WK-SIGN(2)
           INTO WK-DATA(1) DELIMITER IN WK-DELIM(1)
                WK-DATA(2) DELIMITER IN WK-DELIM(2)
                WK-DATA(3)
           END-UNSTRING
           IF  WK-DATA(1)   NOT = "WW"
            OR WK-DATA(2)   NOT = "DD"
            OR WK-DATA(3)   NOT = "CC"
            OR WK-DELIM(1)  NOT = "A"
            OR WK-DELIM(2)  NOT = "B"
               DISPLAY WK-DATA(1)
                       WK-DATA(2)
                       WK-DATA(3)
                       WK-DELIM(1)
                       WK-DELIM(2)
               END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE -ftop-level-occurs-clause=ok prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([UNSTRING with FUNCTION / literal])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  FILLER.
         05  TSTUNS PIC X(479).
         05  PRM    PIC X(16) OCCURS 4 TIMES.
       PROCEDURE DIVISION.
           MOVE "The,Quick,Brown,Fox" TO TSTUNS.
           UNSTRING TSTUNS DELIMITED BY ','
              INTO  PRM(1), PRM(2), PRM(3), PRM(4).
           DISPLAY "PRM(1) is " PRM(1) ":".
           DISPLAY "PRM(2) is " PRM(2) ":".
           DISPLAY "PRM(3) is " PRM(3) ":".
           DISPLAY "PRM(4) is " PRM(4) ":".
           UNSTRING FUNCTION UPPER-CASE(TSTUNS) DELIMITED BY ','
              INTO  PRM(1), PRM(2), PRM(3), PRM(4).
           DISPLAY "Now using UPPER-CASE"
           DISPLAY "PRM(1) is " PRM(1) ":".
           DISPLAY "PRM(2) is " PRM(2) ":".
           DISPLAY "PRM(3) is " PRM(3) ":".
           DISPLAY "PRM(4) is " PRM(4) ":".
           UNSTRING "Daddy,was,a,Rolling stone" DELIMITED BY ','
              INTO  PRM(1), PRM(2), PRM(3), PRM(4).
           DISPLAY "Now using Literal"
           DISPLAY "PRM(1) is " PRM(1) ":".
           DISPLAY "PRM(2) is " PRM(2) ":".
           DISPLAY "PRM(3) is " PRM(3) ":".
           DISPLAY "PRM(4) is " PRM(4) ":".
           UNSTRING FUNCTION LOWER-CASE("Daddy,was,a,Rolling stone")
                DELIMITED BY ','
              INTO  PRM(1), PRM(2), PRM(3), PRM(4).
           DISPLAY "Now using Literal + LOWER-CASE"
           DISPLAY "PRM(1) is " PRM(1) ":".
           DISPLAY "PRM(2) is " PRM(2) ":".
           DISPLAY "PRM(3) is " PRM(3) ":".
           DISPLAY "PRM(4) is " PRM(4) ":".
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[PRM(1) is The             :
PRM(2) is Quick           :
PRM(3) is Brown           :
PRM(4) is Fox             :
Now using UPPER-CASE
PRM(1) is THE             :
PRM(2) is QUICK           :
PRM(3) is BROWN           :
PRM(4) is FOX             :
Now using Literal
PRM(1) is Daddy           :
PRM(2) is was             :
PRM(3) is a               :
PRM(4) is Rolling stone   :
Now using Literal + LOWER-CASE
PRM(1) is daddy           :
PRM(2) is was             :
PRM(3) is a               :
PRM(4) is rolling stone   :
], [])

AT_CLEANUP


AT_SETUP([SORT: table sort])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G             VALUE "d4b2e1a3c5".
         02 TBL         OCCURS 5.
           03 X         PIC X.
           03 Y         PIC 9.
       PROCEDURE        DIVISION.
           SORT TBL ASCENDING KEY X.
           IF G NOT = "a3b2c5d4e1"
              DISPLAY G
              END-DISPLAY
           END-IF.
           SORT TBL DESCENDING KEY Y.
           IF G NOT = "c5d4a3b2e1"
              DISPLAY G
              END-DISPLAY
           END-IF.
           SORT TBL ASCENDING KEY TBL.
           IF G NOT = "a3b2c5d4e1"
              DISPLAY G
              END-DISPLAY
           END-IF.
           SORT TBL DESCENDING KEY.
           IF G NOT = "e1d4c5b2a3"
              DISPLAY G
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([SORT: table sort (2)])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 K                 PIC 9(2).

       01 CNT1              PIC 9(9) COMP-5 VALUE 4.
       01 TAB1.
          05 ROW1 OCCURS 1 TO 4 DEPENDING CNT1
                                 DESCENDING TAB1-NR.
             10 TAB1-NR     PIC 99.

       01 TAB2.
          05 CNT2           PIC 9(9) COMP-5 VALUE 4.
          05 ROW2 OCCURS 1 TO 4 DEPENDING CNT2
                                 DESCENDING TAB2-NR.
             10 TAB2-NR PIC 99.

       01 TAB3.
          05 CNT3           PIC 9(9) COMP-5 VALUE 10.
          05 ROW3 OCCURS 1 TO 10 DEPENDING CNT3
                                  DESCENDING TAB3-NR
                                  ASCENDING TAB3-DATA.
             10 TAB3-NR     PIC 99.
             10 FILLER      PIC X(2).
             10 TAB3-DATA   PIC X(5).
             10 FILLER      PIC X(2).
             10 TAB3-DATA2  PIC X(5).


       PROCEDURE DIVISION.
       A.
           PERFORM VARYING K FROM 1 BY 1 UNTIL K > 4
             MOVE K TO TAB1-NR(K), TAB2-NR(K)
           END-PERFORM

           MOVE 1 TO TAB3-NR(1).
           MOVE 1 TO TAB3-NR(8).
           MOVE 1 TO TAB3-NR(4).
           MOVE 6 TO TAB3-NR(2).
           MOVE 5 TO TAB3-NR(3).
           MOVE 5 TO TAB3-NR(9).
           MOVE 2 TO TAB3-NR(5).
           MOVE 2 TO TAB3-NR(10).
           MOVE 4 TO TAB3-NR(6).
           MOVE 3 TO TAB3-NR(7).

           MOVE "abcde" TO TAB3-DATA(1).
           MOVE "AbCde" TO TAB3-DATA(2).
           MOVE "abcde" TO TAB3-DATA(3).
           MOVE "zyx" TO TAB3-DATA(4).
           MOVE "12345" TO TAB3-DATA(5).
           MOVE "zyx" TO TAB3-DATA(6).
           MOVE "abcde" TO TAB3-DATA(7).
           MOVE "AbCde" TO TAB3-DATA(8).
           MOVE "abc" TO TAB3-DATA(9).
           MOVE "12346" TO TAB3-DATA(10).

           MOVE "day" TO TAB3-DATA2(1).
           MOVE "The" TO TAB3-DATA2(2).
           MOVE "eats" TO TAB3-DATA2(3).
           MOVE "." TO TAB3-DATA2(4).
           MOVE "mooos" TO TAB3-DATA2(5).
           MOVE "grass" TO TAB3-DATA2(6).
           MOVE "and" TO TAB3-DATA2(7).
           MOVE "whole" TO TAB3-DATA2(8).
           MOVE "cow" TO TAB3-DATA2(9).
           MOVE "the" TO TAB3-DATA2(10).

           SORT ROW1 DESCENDING TAB1-NR
           SORT ROW2 DESCENDING TAB2-NR

           DISPLAY "SINGLE TABLE" END-DISPLAY
           PERFORM VARYING K FROM 1 BY 1 UNTIL K > 4
             DISPLAY  FUNCTION TRIM(TAB1-NR(K)) END-DISPLAY
           END-PERFORM

           DISPLAY "LOWER LEVEL TABLE" END-DISPLAY
           PERFORM VARYING K FROM 1 BY 1 UNTIL K > 4
             DISPLAY  FUNCTION TRIM(TAB2-NR(K)) END-DISPLAY
           END-PERFORM

           SORT ROW3 DESCENDING TAB3-NR ASCENDING TAB3-DATA

           DISPLAY "MULTY KEY SORT" END-DISPLAY
           PERFORM VARYING K FROM 1 BY 1 UNTIL K > 10
             DISPLAY  FUNCTION TRIM(ROW3(K))
             END-DISPLAY
           END-PERFORM

           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [SINGLE TABLE
04
03
02
01
LOWER LEVEL TABLE
04
03
02
01
MULTY KEY SORT
06  AbCde  The
05  abc    cow
05  abcde  eats
04  zyx    grass
03  abcde  and
02  12345  mooos
02  12346  the
01  AbCde  whole
01  abcde  day
01  zyx    .
], [])

AT_CLEANUP


AT_SETUP([SORT: table sort (3)])

AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 K                 PIC 9(2).

       01 CNT1              PIC 9(9) COMP-5 VALUE 4.
       01 TAB1.
          05 ROW1 OCCURS 1 TO 4 DEPENDING CNT1
                                  DESCENDING TAB1-NR.
             10 TAB1-NR     PIC 99.
             10 TAB-DATA    PIC X(5).
       01 TAB2.
          05 ROW2 OCCURS 1 TO 4 DEPENDING CNT1
                                  ASCENDING ROW2.
             10 TAB2-NR     PIC 99.
             10 TAB2-DATA   PIC X(5).

       PROCEDURE DIVISION.
       A.
           PERFORM VARYING K FROM 1 BY 1 UNTIL K > 4
             MOVE K     TO TAB1-NR (K)
             MOVE 'BLA' TO TAB-DATA(K)
           END-PERFORM

           SORT ROW1

           PERFORM VARYING K FROM 1 BY 1 UNTIL K > 4
             DISPLAY TAB1-NR(K) NO ADVANCING END-DISPLAY
           END-PERFORM

           MOVE TAB1 TO TAB2
           SORT ROW2

           PERFORM VARYING K FROM 1 BY 1 UNTIL K > 4
             DISPLAY TAB2-NR(K) NO ADVANCING END-DISPLAY
           END-PERFORM

           STOP RUN.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog2.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 K                 PIC 9(2).

       01 CNT1              PIC 9(9) COMP-5 VALUE 4.
       01 TAB1.
          05 ROW1 OCCURS 5        DESCENDING TAB1-NR.
             10 TAB1-NR     PIC 99 VALUE ZERO.
             10 TAB-DATA    PIC X(5).
       01 TAB2.
          05 ROW1 OCCURS 1 TO 4 DEPENDING CNT1
                                  DESCENDING TAB1-NR.
             10 TAB1-NR     PIC 99.
             10 TAB-DATA    PIC X(5).

       PROCEDURE DIVISION.
       A.
           DISPLAY TAB1-NR OF TAB1 (2) NO ADVANCING END-DISPLAY

           PERFORM VARYING K FROM 1 BY 1 UNTIL K > 4
             MOVE K     TO TAB1-NR  OF TAB2(K)
             MOVE 'BLA' TO TAB-DATA OF TAB2(K)
           END-PERFORM

           SORT ROW1 OF TAB2.

           PERFORM VARYING K FROM 1 BY 1 UNTIL K > 4
             DISPLAY TAB1-NR OF TAB2(K) NO ADVANCING END-DISPLAY
           END-PERFORM

           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [0403020101020304], [])

AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [0], [0004030201], [])

AT_CLEANUP


AT_SETUP([SORT: table sort (toplevel)])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 VAL           PIC X(5) VALUE "43512".
       01 TBL           REDEFINES VAL PIC X OCCURS 5.
       PROCEDURE        DIVISION.
           SORT TBL ASCENDING
           IF VAL NOT = "12345" DISPLAY VAL.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([SORT: EBCDIC table sort])
AT_KEYWORDS([runmisc ALPHABET OBJECT-COMPUTER])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           ALPHABET ALPHA IS EBCDIC.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 Z  PIC X(10)  VALUE "d4b2e1a3c5".
       01 G.
         02 TBL         OCCURS 10.
           03 X         PIC X.
       PROCEDURE        DIVISION.
           MOVE Z TO G.
           SORT TBL ASCENDING KEY X SEQUENCE ALPHA.
           IF G NOT = "abcde12345"
              DISPLAY G
              END-DISPLAY
           END-IF.
           MOVE Z TO G.
           SORT TBL DESCENDING KEY X SEQUENCE ALPHA.
           IF G NOT = "54321edcba"
              DISPLAY G
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
           OBJECT-COMPUTER.
             x86 PROGRAM COLLATING SEQUENCE IS EBCDIC-CODE.
       SPECIAL-NAMES.
           ALPHABET EBCDIC-CODE IS EBCDIC.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 Z  PIC X(10)  VALUE "d4b2e1a3c5".
       01 G.
         02 TBL         OCCURS 10.
           03 X         PIC X.
       PROCEDURE        DIVISION.
           MOVE Z TO G.
           SORT TBL ASCENDING KEY X.
           IF G NOT = "abcde12345"
              DISPLAY G.
           MOVE Z TO G.
           SORT TBL DESCENDING KEY X.
           IF G NOT = "54321edcba"
              DISPLAY G.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [0], [], [])

AT_CLEANUP


AT_SETUP([PIC ZZZ-, ZZZ+])
AT_KEYWORDS([runmisc editing])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X-ZZZN                    PIC ZZZ-.
       01  XZN-RED REDEFINES X-ZZZN  PIC X(4).
       01  X-ZZZP                    PIC ZZZ+.
       01  XZP-RED REDEFINES X-ZZZP  PIC X(4).
       PROCEDURE        DIVISION.
           MOVE -1 TO X-ZZZN.
           IF XZN-RED NOT = "  1-"
              DISPLAY "(" X-ZZZN ")"
              END-DISPLAY
           END-IF.
           MOVE  0 TO X-ZZZN.
           IF XZN-RED NOT = "    "
              DISPLAY "(" X-ZZZN ")"
              END-DISPLAY
           END-IF.
           MOVE +1 TO X-ZZZN.
           IF XZN-RED NOT = "  1 "
              DISPLAY "(" X-ZZZN ")"
              END-DISPLAY
           END-IF.

           MOVE -1 TO X-ZZZP.
           IF XZP-RED NOT = "  1-"
              DISPLAY "(" X-ZZZP ")"
              END-DISPLAY
           END-IF.
           MOVE  0 TO X-ZZZP.
           IF XZP-RED NOT = "    "
              DISPLAY "(" X-ZZZP ")"
              END-DISPLAY
           END-IF.
           MOVE +1 TO X-ZZZP.
           IF XZP-RED NOT = "  1+"
              DISPLAY "(" X-ZZZP ")"
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([PERFORM type OSVS])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  MYOCC        PIC 9(8) COMP VALUE 0.
       PROCEDURE        DIVISION.
       ASTART SECTION.
       A01.
           PERFORM BTEST.
           IF MYOCC NOT = 2
              DISPLAY MYOCC
              END-DISPLAY
           END-IF.
           STOP RUN.
       BTEST SECTION.
       B01.
           PERFORM B02 VARYING MYOCC FROM 1 BY 1
                   UNTIL MYOCC > 5.
           GO TO B99.
       B02.
           IF MYOCC > 1
              GO TO B99
           END-IF.
       B99.
           EXIT.
])

AT_CHECK([$COMPILE -fperform-osvs prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([Sticky LINKAGE])
AT_KEYWORDS([runmisc])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01 P1            PIC X.
       01 P2            PIC X(6).
       01 P3            PIC X(6).
       PROCEDURE        DIVISION USING P1 P2.
           IF P1 = "A"
              SET ADDRESS OF P3 TO ADDRESS OF P2
           ELSE
              IF P3 NOT = "OKOKOK"
                 DISPLAY P3
                 END-DISPLAY
              END-IF
           END-IF.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 P1            PIC X    VALUE "A".
       01 P2            PIC X(6) VALUE "NOT OK".
       PROCEDURE        DIVISION.
           CALL "callee" USING P1 P2
           END-CALL.
           MOVE "B"      TO P1.
           MOVE "OKOKOK" TO P2.
           CALL "callee" USING P1
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE -fsticky-linkage callee.cob], [0], [], [])
AT_CHECK([$COMPILE -fsticky-linkage caller.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [], [])

AT_CLEANUP


AT_SETUP([COB_PRE_LOAD])
AT_KEYWORDS([runmisc])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee2.
       PROCEDURE        DIVISION.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       PROCEDURE        DIVISION.
           CALL "callee2"
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([COB_PRE_LOAD=callee $COBCRUN_DIRECT ./caller], [0], [], [])

AT_CLEANUP


AT_SETUP([COB_PRE_LOAD with entry points])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog.

        DATA DIVISION.
        WORKING-STORAGE SECTION.

        01 VAR1 PIC X(5) VALUE '12abc'.
        01 VAR2 PIC X(2) VALUE '11'.

        PROCEDURE DIVISION.

        ENTRY 'ent1'.
        DISPLAY VAR1 END-DISPLAY
        GOBACK.

        ENTRY 'ent2'.
        DISPLAY VAR2 END-DISPLAY
        GOBACK.
])

AT_DATA([prog1.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog1.

        DATA DIVISION.
        WORKING-STORAGE SECTION.

        01 VAR2 PIC X(2) VALUE '55'.
        01 VAR3 PIC X(5) VALUE 'xxxxx'.

        PROCEDURE DIVISION.

        ENTRY 'ent2'.
        DISPLAY VAR2 END-DISPLAY
        GOBACK.

        ENTRY 'ent3'.
        DISPLAY VAR3 END-DISPLAY
        GOBACK.
])

AT_DATA([main-prog.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. main-prog.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        PROCEDURE DIVISION.

        CALL 'ent1' END-CALL
        CALL 'ent2' END-CALL
        CALL 'ent3' END-CALL

        STOP RUN.
])

AT_CHECK([$COMPILE_MODULE prog.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE prog1.cob], [0], [], [])
AT_CHECK([$COMPILE main-prog.cob], [0], [], [])
AT_CHECK([COB_PRE_LOAD="prog"$PATHSEP"prog1" $COBCRUN_DIRECT ./main-prog], [0],
[12abc
11
xxxxx
], [])

AT_CLEANUP


AT_SETUP([Lookup ENTRY from main executable])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 PROGRAM-LINK         USAGE PROGRAM-POINTER.

       PROCEDURE DIVISION.
       SET PROGRAM-LINK TO ENTRY "subprogram"
       IF PROGRAM-LINK EQUAL NULL THEN
           DISPLAY "error: no subprogram linkage" UPON SYSERR
           END-DISPLAY
       ELSE
           CALL PROGRAM-LINK
               ON EXCEPTION
                   DISPLAY "hard error: unable to invoke subprogram"
                      UPON SYSERR
                   END-DISPLAY
           END-CALL
           DISPLAY RETURN-CODE WITH NO ADVANCING
           END-DISPLAY
       END-IF
       GOBACK.

       ENTRY "subprogram".
           DISPLAY "subprogram" WITH NO ADVANCING
           END-DISPLAY
           SET RETURN-CODE TO 42
       .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [42], [subprogram+000000042], [])

AT_CLEANUP


AT_SETUP([COB_LOAD_CASE=UPPER])
AT_KEYWORDS([runmisc CALL COB_LOAD_CASE])

AT_DATA([CALLEE.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       PROCEDURE        DIVISION.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       PROCEDURE        DIVISION.
           CALL "callee"
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE CALLEE.cob], [0], [], [])
AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([COB_LOAD_CASE=UPPER ./caller], [0], [], [])

AT_CLEANUP


AT_SETUP([ALLOCATE / FREE with BASED item (1)])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01  MYFLD        PIC X(6) BASED VALUE "ABCDEF".
       PROCEDURE        DIVISION.
       ASTART SECTION.
       A01.
           ALLOCATE MYFLD INITIALIZED
           IF MYFLD NOT = "ABCDEF"
              DISPLAY MYFLD
           END-IF
           FREE ADDRESS OF MYFLD
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([ALLOCATE / FREE with BASED item (2)])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 MYFLD         BASED.
             03 MYFLDX  PIC X.
             03 MYFLD9  PIC 9.
       PROCEDURE        DIVISION.
           IF ADDRESS OF MYFLD NOT = NULL
              DISPLAY "BASED ITEM WITH ADDRESS ON START"
           END-IF
           FREE MYFLD
           ALLOCATE MYFLD
           IF ADDRESS OF MYFLD = NULL
              DISPLAY "BASED ITEM WITHOUT ADDRESS AFTER ALLOCATE"
           END-IF
           INITIALIZE MYFLD
           IF MYFLD NOT = " 0"
              DISPLAY "BASED ITEM INITIALIZED WRONG: "
                 WITH NO ADVANCING
              END-DISPLAY
              DISPLAY MYFLD
           END-IF

           FREE ADDRESS OF MYFLD
           IF ADDRESS OF MYFLD NOT = NULL
              DISPLAY "BASED ITEM WITH ADDRESS AFTER FREE"
           END-IF
           GOBACK.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
# Run both executable and module as we have a different code generation here
AT_CHECK([$COMPILE_MODULE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN prog], [0], [], [])

AT_CLEANUP


AT_SETUP([ALLOCATE CHARACTERS INITIALIZED (TO)])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  MYPTR        USAGE POINTER.
       LINKAGE          SECTION.
       01  MYFLD        PIC X(4).
       PROCEDURE        DIVISION.
       ASTART SECTION.
       A01.
           ALLOCATE 4 CHARACTERS
                    INITIALIZED TO "ABCD"
                    RETURNING MYPTR
           SET ADDRESS OF MYFLD TO MYPTR
           IF MYFLD NOT = "ABCD"
              DISPLAY MYFLD
           END-IF
           FREE MYPTR
           ALLOCATE 4 CHARACTERS
                    INITIALIZED TO ALL "Z"
                    RETURNING MYPTR
           SET ADDRESS OF MYFLD TO MYPTR
           IF MYFLD NOT = "ZZZZ"
              DISPLAY MYFLD
           END-IF
           FREE MYPTR
           ALLOCATE 4 CHARACTERS
                    INITIALIZED
                    RETURNING MYPTR
           SET ADDRESS OF MYFLD TO MYPTR
           IF MYFLD NOT = LOW-VALUES
              DISPLAY MYFLD
           END-IF
           FREE MYPTR
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([Initialized value with defaultbyte])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  MYFLD        PIC X(6).
       PROCEDURE        DIVISION.
       ASTART SECTION.
       A01.
           IF MYFLD NOT = "AAAAAA"
              DISPLAY MYFLD
           END-IF
           STOP RUN.
])

AT_CHECK([$COMPILE -fdefaultbyte=A prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([CALL with OMITTED parameter])
AT_KEYWORDS([runmisc])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01 P1            PIC X.
       01 P2            PIC X(6).
       PROCEDURE        DIVISION USING P1 OPTIONAL P2.
           IF P2 NOT OMITTED
              DISPLAY P2
           END-IF
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 P1            PIC X    VALUE "A".
       PROCEDURE        DIVISION.
           CALL "callee" USING P1
           CALL "callee" USING P1 OMITTED
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [], [])

AT_CLEANUP


AT_SETUP([direct CALL in from C w/wo error])
AT_KEYWORDS([runmisc cobcall cob_call cob_init cob_runtime_hint])

# tests and showcases direct C calls, including:
# as long as the module comes back the caller has control
# and its return code; but not in the case for errors or STOP RUN

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01 P1            PIC X.
       01 P2            PIC X(6).
       PROCEDURE        DIVISION USING P1 OPTIONAL P2.
           IF P2 NOT OMITTED
              DISPLAY 'UNEXPECTED P2: ' P2
              END-DISPLAY
           END-IF
           DISPLAY 'P1: ' P1 WITH NO ADVANCING.
           GOBACK.
])

AT_DATA([callee2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee2.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01 P             PIC 99.
       PROCEDURE        DIVISION USING P.
           DISPLAY 'P: ' P WITH NO ADVANCING.
           STOP RUN RETURNING P.
])

AT_DATA([caller.c], [[
#include <stdio.h>
#include <libcob.h>

#ifndef NULL
#define NULL (void*)0
#endif

int
main (int argc, char **argv)
{
   /* for storing COBOL return code */
   int cob_ret;

   /* initialize parameters */
   void *cob_argv[2];

   cob_argv[0] = argv[2];
   cob_argv[1] = NULL;

   /* initialize the COBOL run-time library */
   cob_init(argc, argv);

   /* call COBOL program */
   cob_ret = cob_call (argv[1], 2, cob_argv);

   cob_runtime_hint("program exited normally, "
       "without STOP RUN with status %d", cob_ret);

   /* Clean up and terminate - This does not return */
   cob_stop_run (cob_ret);
}
]])

AT_CHECK([$COMPILE caller.c], [0], [], [])
AT_CHECK([$COMPILE_MODULE callee.cob callee2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller callee A], [0], [P1: A],
[note: program exited normally, without STOP RUN with status 0
])
AT_CHECK([$COBCRUN_DIRECT ./caller callee2 42], [42], [P: 42], [])
AT_CHECK([$COBCRUN_DIRECT ./caller notthere], [1], [],
[libcob: error: module 'notthere' not found
])

AT_CLEANUP


AT_SETUP([direct CALL in from C w/wo error; no exit])
AT_KEYWORDS([runmisc cobcall cob_call cob_call_with_exception_check cob_runtime_hint])

# tests and showcases the "functional call" of GnuCOBOL modules;
# in every case (plain goback, STOP RUN, error) the caller gets control,
# but the actual return / error code has to be queried with an extra call

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01 P1            PIC X.
       01 RC            PIC 99.
       01 P2            PIC X(6).
       PROCEDURE        DIVISION USING P1 RC OPTIONAL P2.
           IF P2 NOT OMITTED
              DISPLAY 'UNEXPECTED P2: ' P2.
           DISPLAY 'P1: ' P1 WITH NO ADVANCING
           GOBACK RETURNING RC.
])

AT_DATA([callee2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee2.
       PROCEDURE        DIVISION.
           DISPLAY 'STOP WITH 2' WITH NO ADVANCING
           STOP RUN RETURNING 2.
])

AT_DATA([buggy.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      buggy.
       DATA             DIVISION.
       LOCAL-STORAGE    SECTION.
       77 VAR           PIC X.
       77 VPOS          PIC 9 VALUE 2.
       PROCEDURE        DIVISION.
           DISPLAY 'out of bounds - refmod following' WITH NO ADVANCING
           DISPLAY VAR (VPOS:)
           DISPLAY 'AFTER ERROR'
           GOBACK.
])

AT_DATA([caller.c], [[
#include <stdio.h>
#include <libcob.h>

#ifndef NULL
#define NULL (void*)0
#endif

int
main (int argc, char **argv)
{
   /* for storing libcob return state */
   int cob_ret;

   /* initialize parameters */
   void *cob_argv[3];

   char *p1 = "A";
   cob_argv[0] = p1;
   cob_argv[1] = argv[2];
   cob_argv[2] = NULL;

   /* initialize the COBOL run-time library */
   cob_init (argc, argv);

   /* call COBOL program */
   cob_ret = cob_call_with_exception_check (argv[1], 2, cob_argv);

   switch (cob_ret) {
   case 0:  /* program coming back */

      /* Clean up and terminate runtime */
      cob_runtime_hint("program exited with return code %d",
         cob_last_exit_code ());
      cob_tidy ();
      break;

   case 1:  /* normal exit */
      cob_runtime_hint("STOP RUN with return code %d",
         cob_last_exit_code ());
      break;

   case -1:  /* error exit */
      cob_runtime_hint("error exit with return code %d and error \"%s\"",
         cob_last_exit_code (), cob_last_runtime_error ());
      break;

   case -2:  /* hard error exit */
      cob_runtime_hint("hard error exit with return code %d and error \"%s\"",
         cob_last_exit_code (), cob_last_runtime_error ());
      break;

   case -3:  /* signal handler  exit */
      cob_runtime_hint("signal handler exit with signal %d and error \"%s\"",
         cob_last_exit_code (), cob_last_runtime_error ());
      break;

   default:
      cob_runtime_hint("unexpected return from cob_call_with_exception_check, "
         "last exit code %d, last error \"%s\"",
         cob_last_exit_code (), cob_last_runtime_error ());
      break;
   }
   return 0;
}
]])

AT_CHECK([$COMPILE caller.c], [0], [], [])
AT_CHECK([$COMPILE_MODULE callee.cob callee2.cob buggy.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller callee 00], [0], [P1: A],
[note: program exited with return code 0
])
AT_CHECK([$COBCRUN_DIRECT ./caller callee 42], [0], [P1: A],
[note: program exited with return code 42
])
AT_CHECK([$COBCRUN_DIRECT ./caller callee2], [0], [STOP WITH 2],
[note: STOP RUN with return code 2
])
AT_CHECK([$COBCRUN_DIRECT ./caller buggy], [0], [out of bounds - refmod following],
[libcob: buggy.cob:10: error: offset of 'VAR' out of bounds: 2, maximum: 1
note: error exit with return code -1 and error "buggy.cob:10: offset of 'VAR' out of bounds: 2, maximum: 1"
])
AT_CHECK([$COBCRUN_DIRECT ./caller notthere], [0], [],
[libcob: error: module 'notthere' not found
note: error exit with return code -1 and error "module 'notthere' not found"
])

AT_CLEANUP


AT_SETUP([CALL in from C, cob_call_params explicitly set])
AT_KEYWORDS([runmisc])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01 P1            PIC X.
       01 P2            PIC X(6).
       PROCEDURE        DIVISION USING P1 OPTIONAL P2.
           IF P2 NOT OMITTED
              DISPLAY 'UNEXPECTED P2: ' P2
           END-IF
           DISPLAY 'P1: ' P1 WITH NO ADVANCING
           EXIT PROGRAM.
])

AT_DATA([caller.c], [[
#include <stdio.h>
#include <libcob.h>

int callee (char *, char *);

#ifndef NULL
#define NULL (void*)0
#endif

int
main (int argc, char **argv)
{
   cob_global *cobol_global;
   /* for storing COBOL return code */
   int cob_ret;

   /* initialize parameters */
   char *p1 = "A";

   /* initialize the COBOL run-time library */
   cob_init(argc, argv);

   /* setup for COBOL parameter handling */
   cobol_global = cob_get_global_ptr ();
   cobol_global->cob_call_params = 1;

   /* call COBOL program */
   cob_ret = callee (p1, NULL);

   /* Clean up and terminate - This does not return */
   cob_stop_run (cob_ret);
}
]])

AT_CHECK([$COMPILE -o caller caller.c callee.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [P1: A], [])

AT_CLEANUP


AT_SETUP([CALL in from C, cob_call_params unknown])
AT_KEYWORDS([runmisc])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01 P1            PIC X.
       01 P2            PIC X(6).
       PROCEDURE        DIVISION USING P1 P2.
           IF P1 NOT EQUAL "A"
              DISPLAY P1
              END-DISPLAY
           END-IF.
           IF P2 NOT EQUAL "FROM C"
              DISPLAY P2
              END-DISPLAY
           ELSE
              DISPLAY "OK" WITH NO ADVANCING
              END-DISPLAY
           END-IF.
           EXIT PROGRAM.
])

AT_DATA([caller.c], [[
#include <stdio.h>
#include <libcob.h>

int callee (char *, char *);

int
main (int argc, char **argv)
{
   /* for storing COBOL return code */
   int cob_ret;

   /* initialize parameters */
   char *p1 = "A";
   char *p2 = "FROM C";

   /* initialize the COBOL run-time library */
   cob_init (argc, argv);

   /* call COBOL program */
   cob_ret = callee (p1, p2);

   /* Clean up and terminate - This does not return */
   cob_stop_run (cob_ret);
}
]])

AT_CHECK([$COMPILE -o caller caller.c callee.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [OK], [])

AT_CLEANUP


AT_SETUP([CALL C with callback, PROCEDURE DIVISION EXTERN])
AT_KEYWORDS([runmisc extensions CALL-CONVENTION])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 CB            USAGE PROGRAM-POINTER.
       PROCEDURE        DIVISION.
           SET CB TO ENTRY "callback"
           CALL STATIC "cprog" USING BY VALUE CB
           END-CALL
           EXIT PROGRAM.
       END PROGRAM prog.

       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callback.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           CALL-CONVENTION 0 IS EXTERN.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01 P1            USAGE POINTER.
       01 P2            USAGE BINARY-LONG.
       01 P3            PIC X(8).
       PROCEDURE        DIVISION EXTERN USING
                        BY VALUE P1 P2 BY REFERENCE P3.
           IF P1 NOT EQUAL ADDRESS OF P3
              DISPLAY P1
              END-DISPLAY
           END-IF
           IF P2 NOT EQUAL 42
              DISPLAY P2
              END-DISPLAY
           END-IF
           IF P3 NOT EQUAL "CALLBACK"
              DISPLAY P3
              END-DISPLAY
           END-IF
           EXIT PROGRAM.
])

AT_DATA([cprog.c], [[
#include <stdio.h>
#include <libcob.h>

COB_EXT_EXPORT int
cprog (void *cb)
{
   char *p1;
   int  p2 = 42;
   char *p3 = "CALLBACK";

   p1 = p3;
   ((int (*)(char *, int, char *))cb)(p1, p2, p3);
   return 0;
}
]])

AT_CHECK([$COMPILE -Wno-unfinished -o prog prog.cob cprog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([CALL C with callback, ENTRY-CONVENTION EXTERN])
AT_KEYWORDS([runmisc CALL-CONVENTION LINKAGE OPTIONS])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       OPTIONS.
           ENTRY-CONVENTION COBOL.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 CB            USAGE PROGRAM-POINTER.
       PROCEDURE        DIVISION.
           SET CB TO ENTRY "callback"
           CALL STATIC "cprog" USING BY VALUE CB
           END-CALL
           EXIT PROGRAM.
       END PROGRAM prog.

       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callback.
       OPTIONS.
           ENTRY-CONVENTION EXTERN.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01 P1            USAGE POINTER.
       01 P2            USAGE BINARY-LONG.
       01 P3            PIC X(8).
       PROCEDURE        DIVISION USING
                        BY VALUE P1 P2 BY REFERENCE P3.
           IF P1 NOT EQUAL ADDRESS OF P3
              DISPLAY P1
              END-DISPLAY
           END-IF
           IF P2 NOT EQUAL 42
              DISPLAY P2
              END-DISPLAY
           END-IF
           IF P3 NOT EQUAL "CALLBACK"
              DISPLAY P3
              END-DISPLAY
           END-IF
           EXIT PROGRAM.
])

AT_DATA([cprog.c], [[
#include <stdio.h>
#include <libcob.h>

COB_EXT_EXPORT int
cprog (void *cb)
{
   char *p1;
   int  p2 = 42;
   char *p3 = "CALLBACK";

   p1 = p3;
   ((int (*)(char *, int, char *))cb)(p1, p2, p3);
   return 0;
}
]])

AT_CHECK([$COMPILE -Wno-unfinished -o prog prog.cob cprog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 CB            USAGE PROGRAM-POINTER.
       PROCEDURE        DIVISION.
           SET CB TO ENTRY "callback"
           CALL STATIC "cprog" USING BY VALUE CB
           END-CALL
           EXIT PROGRAM.
       END PROGRAM prog.

       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callback.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01 P1            USAGE POINTER.
       01 P2            USAGE BINARY-LONG.
       01 P3            PIC X(8).
       PROCEDURE        DIVISION WITH C LINKAGE
                        USING BY VALUE P1 P2 BY REFERENCE P3.
           IF P1 NOT EQUAL ADDRESS OF P3
              DISPLAY P1
              END-DISPLAY
           END-IF
           IF P2 NOT EQUAL 42
              DISPLAY P2
              END-DISPLAY
           END-IF
           IF P3 NOT EQUAL "CALLBACK"
              DISPLAY P3
              END-DISPLAY
           END-IF
           EXIT PROGRAM.
])

AT_DATA([prog3.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 CB            USAGE PROGRAM-POINTER.
       PROCEDURE        DIVISION.
           SET CB TO ENTRY "callback"
           CALL STATIC "cprog" USING BY VALUE CB
           END-CALL
           EXIT PROGRAM.
       END PROGRAM prog.

       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callback.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           CALL-CONVENTION 0 IS EXTERN.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01 P1            USAGE POINTER.
       01 P2            USAGE BINARY-LONG.
       01 P3            PIC X(8).
       PROCEDURE        DIVISION EXTERN
                        USING BY VALUE P1 P2 BY REFERENCE P3.
           IF P1 NOT EQUAL ADDRESS OF P3
              DISPLAY P1
              END-DISPLAY
           END-IF
           IF P2 NOT EQUAL 42
              DISPLAY P2
              END-DISPLAY
           END-IF
           IF P3 NOT EQUAL "CALLBACK"
              DISPLAY P3
              END-DISPLAY
           END-IF
           EXIT PROGRAM.
])

AT_CHECK([$COMPILE -Wno-unfinished -o prog prog2.cob cprog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CHECK([$COMPILE -Wno-unfinished -o prog prog3.cob cprog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([CALL in from C with init missing / implicit])
AT_KEYWORDS([runmisc implicit-init])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01 P1            PIC X.
       01 P2            PIC X(6).
       PROCEDURE        DIVISION USING P1 P2.
           IF P1 NOT EQUAL "A"
              DISPLAY P1
              END-DISPLAY
           END-IF.
           IF P2 NOT EQUAL "FROM C"
              DISPLAY P2
              END-DISPLAY
           ELSE
              DISPLAY "OK" WITH NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_DATA([caller.c], [[
int callee (char *, char *);

int
main (int argc, char **argv)
{
   /* initialize parameters */
   char *p1 = "A";
   char *p2 = "FROM C";

   /* call COBOL program (initialization missing)
      note: COBOL program terminates the program by STOP RUN */
   (void)callee (p1, p2);
}
]])

AT_CHECK([$COMPILE -o caller caller.c callee.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [1], [],
[libcob: error: cob_init() has not been called
])

AT_CHECK([$COMPILE -fimplicit-init -o caller caller.c callee.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [OK], [])

AT_CLEANUP


AT_SETUP([CALL STATIC C from COBOL])
AT_KEYWORDS([runmisc])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 P1            PIC X VALUE "A".
       01 P2            PIC X(7).
       77 P2-COB        PIC X(7).
       PROCEDURE        DIVISION.
           CALL STATIC 'callee' USING P1 P2
           IF P1 NOT EQUAL "B"
              DISPLAY 'NOT A: ' P1
              END-DISPLAY
           END-IF
           UNSTRING P2 DELIMITED BY LOW-VALUE
              INTO P2-COB
           END-UNSTRING
           EVALUATE TRUE
              WHEN P2-COB NOT EQUAL "FROM C"
                 DISPLAY P2-COB '-' P2
                 END-DISPLAY
              WHEN RETURN-CODE NOT = 3
                 DISPLAY RETURN-CODE
                 END-DISPLAY
              WHEN OTHER
                 DISPLAY 'OK'  WITH NO ADVANCING
                 END-DISPLAY
                 MOVE 0  TO RETURN-CODE
           END-EVALUATE
           EXIT PROGRAM.
])

AT_DATA([callee.c], [[
#include <string.h>

int
callee (char *p1, char *p2)
{
   if (p1[0] == 'A') {
      p1[0] = 'B';
   }
   memcpy (p2, "FROM C", 6);

   return 3;
}
]])

AT_CHECK([$COMPILE -o caller caller.cob callee.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [OK], [])

AT_CLEANUP


AT_SETUP([ANY LENGTH (1)])
AT_KEYWORDS([runmisc CALL])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 P2            PIC 99.
       LINKAGE          SECTION.
       01 P1            PIC X ANY LENGTH.
       PROCEDURE        DIVISION USING P1.
           MOVE LENGTH OF P1 TO P2.
           IF P2 NOT = 6
              DISPLAY P2
              END-DISPLAY
           END-IF.
           IF P1 NOT = "OKOKOK"
              DISPLAY P1
              END-DISPLAY
           END-IF.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 P1            PIC X(6) VALUE "OKOKOK".
       PROCEDURE        DIVISION.
           CALL "callee" USING P1
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [], [])

AT_CLEANUP


AT_SETUP([ANY LENGTH (2)])
AT_KEYWORDS([runmisc CALL])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 P2            PIC XXX.
       LINKAGE          SECTION.
       01 P1            PIC X ANY LENGTH.
       PROCEDURE        DIVISION USING P1.
           MOVE P1 TO P2.
           IF P2 NOT = "OK "
              DISPLAY P2
              END-DISPLAY
           END-IF.
           MOVE SPACE TO P1.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 P1            PIC X(2) VALUE "OK".
       PROCEDURE        DIVISION.
           CALL "callee" USING P1
           END-CALL.
           IF P1 NOT = SPACE
              DISPLAY P1
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [], [])

AT_CLEANUP


AT_SETUP([ANY LENGTH (3)])
AT_KEYWORDS([runmisc CALL])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 str PIC X(20) VALUE ALL "X".

       PROCEDURE DIVISION.
           CALL "subprog" USING str
           .
       END PROGRAM prog.

       IDENTIFICATION DIVISION.
       PROGRAM-ID. subprog.

       DATA DIVISION.
       LINKAGE SECTION.
       01 str PIC X ANY LENGTH.

       PROCEDURE DIVISION USING str.
           MOVE "abcd" TO str
           DISPLAY FUNCTION TRIM (str)
           MOVE "abcd" TO str (5:)
           DISPLAY FUNCTION TRIM (str)
           MOVE ALL "a" TO str
           DISPLAY FUNCTION TRIM (str)
           .
       END PROGRAM subprog.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[abcd
abcdabcd
aaaaaaaaaaaaaaaaaaaa
])
AT_CLEANUP


AT_SETUP([ANY LENGTH (4)])
AT_KEYWORDS([runmisc IF CALL])

# comparision of any length was done only for first character - see bug 511

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 str PIC X(20) VALUE ALL "X".

       PROCEDURE DIVISION.
           CALL "subprog" USING str
           move '   45'   to str
           CALL "subprog" USING str
           .
       END PROGRAM prog.

       IDENTIFICATION DIVISION.
       PROGRAM-ID. subprog.

       DATA DIVISION.
       LINKAGE SECTION.
       01 str PIC X ANY LENGTH.

       PROCEDURE DIVISION USING str.
           IF str = 'X'
             DISPLAY 'X is X'
           END-IF
           IF str = space
             DISPLAY 'X is space'
           END-IF
           .
       END PROGRAM subprog.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CLEANUP


AT_SETUP([ANY LENGTH (5)])
AT_KEYWORDS([runmisc])

# any length variables resulted in SIGSEGV when module was first program called

AT_DATA([subprog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. subprog.

       DATA DIVISION.
       LINKAGE SECTION.
       01 str1 PIC X ANY LENGTH.
       01 str2 PIC X ANY LENGTH.

       PROCEDURE DIVISION USING str1 str2.
           DISPLAY 'IN' WITH NO ADVANCING
           .
       END PROGRAM subprog.
])

AT_CHECK([$COMPILE_MODULE subprog.cob], [0], [], [])
AT_CHECK([$COBCRUN subprog some test stuff], [0], [IN], [])
AT_CLEANUP


AT_SETUP([access to BASED item without allocation])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(4) BASED.
       PROCEDURE        DIVISION.
           DISPLAY X NO ADVANCING
           STOP RUN.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             BASED.
          05 Y          PIC X(4).
       PROCEDURE        DIVISION.
           DISPLAY Y NO ADVANCING
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COMPILE prog2.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [1], [],
[libcob: prog.cob:8: error: BASED/LINKAGE item 'X' has NULL address
])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [1], [],
[libcob: prog2.cob:9: error: BASED/LINKAGE item 'X' (accessed by 'Y') has NULL address
])

AT_CLEANUP


AT_SETUP([access to OPTIONAL LINKAGE item not passed])
AT_KEYWORDS([runmisc])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(4) VALUE '9876'.
       PROCEDURE        DIVISION.
           CALL 'callee' USING X
           END-CALL
           CALL 'callee' USING OMITTED
           END-CALL
           STOP RUN.
])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01 X.
          05 Y          PIC X(4).
       PROCEDURE        DIVISION USING OPTIONAL X.
           IF Y NOT = '9876'
              DISPLAY Y.
           GOBACK.
])

AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./caller], [1], [],
[libcob: callee.cob:9: error: LINKAGE item 'X' (accessed by 'Y') not passed by caller
])

AT_CLEANUP


AT_SETUP([STOP RUN WITH NORMAL STATUS])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           STOP RUN WITH NORMAL STATUS.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([STOP RUN WITH ERROR STATUS])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           STOP RUN WITH ERROR STATUS.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [1])

AT_CLEANUP


AT_SETUP([STOP ERROR])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           CALL "prog2".
           DISPLAY "Whatever".
           STOP RUN.
       END PROGRAM      prog.
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       PROCEDURE        DIVISION.
           STOP ERROR.
])

AT_CHECK([$COMPILE prog.cob -fstop-error-statement=ok], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [1], [],
[libcob: prog.cob:12: error: STOP ERROR
])

AT_CLEANUP


AT_SETUP([SYMBOLIC clause])
AT_KEYWORDS([runmisc ALPHABET])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           ALPHABET A-EBC IS EBCDIC
           ALPHABET A-ASC IS ASCII
           SYMBOLIC Z-EBC IS 241 IN A-EBC
           SYMBOLIC Z-ASC IS  49 IN A-ASC
           .
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  Z            PIC X.
       PROCEDURE        DIVISION.
           MOVE Z-ASC   TO Z.
           IF Z NOT = "0"
              DISPLAY Z
              END-DISPLAY
           END-IF.
           MOVE Z-EBC   TO Z.
           IF Z NOT = "0"
              DISPLAY Z
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([OCCURS clause with 1 entry])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  D1.
           03  FILLER   OCCURS 1.
               05 D1-ENTRY   PIC X(03) value '123'.
       01  D2.
           03  D2-ENTRY   PIC X(03)  value 'ABC'  OCCURS 1.
       01  D1TOR.
           03  FILLER   PIC X(03) value '456'.
       01  D1-R         REDEFINES D1TOR.
           03  FILLER   OCCURS 1.
               05 D1-R-ENTRY   PIC X(03).
       01  D2TOR.
           03  FILLER   PIC X(03) value 'DEF'.
       01  D2-R         REDEFINES D2TOR.
           03  D2-R-ENTRY   PIC X(03)   OCCURS 1.

       PROCEDURE        DIVISION.
           IF D1-ENTRY (1) NOT = "123"
              DISPLAY D1-ENTRY (1)
              END-DISPLAY
           END-IF.
           IF D2-ENTRY (1) NOT = "ABC"
              DISPLAY D2-ENTRY (1)
              END-DISPLAY
           END-IF.
           IF D1-R-ENTRY (1) NOT = "456"
              DISPLAY D1-R-ENTRY (1)
              END-DISPLAY
           END-IF.
           IF D2-R-ENTRY (1) NOT = "DEF"
              DISPLAY D2-R-ENTRY (1)
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([Computing of different USAGEs w/o decimal point])
AT_KEYWORDS([runmisc
BINARY-C-LONG BINARY-CHAR BINARY-DOUBLE BINARY-LONG
COMP COMP-1 COMP-2 COMP-3 COMP-5 COMP-6 COMP-X COMP-N
FLOAT-DECIMAL-16 FLOAT-DECIMAL-34 FLOAT-LONG FLOAT-SHORT])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'prog'.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.

      *
       77  BCL-A           BINARY-C-LONG    VALUE 1.
       77  BCL-B           BINARY-C-LONG    VALUE 10.
       77  BCL-RES         BINARY-C-LONG.
      *
       77  BC-A            BINARY-CHAR      VALUE 1.
       77  BC-B            BINARY-CHAR      VALUE 10.
       77  BC-RES          BINARY-CHAR.
      *
       77  BD-A            BINARY-DOUBLE    VALUE 1.
       77  BD-B            BINARY-DOUBLE    VALUE 10.
       77  BD-RES          BINARY-DOUBLE.
      *
       77  BL-A            BINARY-LONG      VALUE 1.
       77  BL-B            BINARY-LONG      VALUE 10.
       77  BL-RES          BINARY-LONG.
      *
       77  C-A     PIC S99 COMP             VALUE 1.
       77  C-B     PIC S99 COMP             VALUE 10.
       77  C-RES   PIC S99 COMP.
      *
       77  C1-A            COMP-1           VALUE 1.
       77  C1-B            COMP-1           VALUE 10.
       77  C1-RES          COMP-1.
      *
       77  C2-A            COMP-2           VALUE 1.
       77  C2-B            COMP-2           VALUE 10.
       77  C2-RES          COMP-2.
      *
       77  C3-A    PIC S99 COMP-3           VALUE 1.
       77  C3-B    PIC S99 COMP-3           VALUE 10.
       77  C3-RES  PIC S99 COMP-3.
      *
       77  C5-A    PIC S99 COMP-5           VALUE 1.
       77  C5-B    PIC S99 COMP-5           VALUE 10.
       77  C5-RES  PIC S99 COMP-5.
      *
       77  C6-A    PIC  99 COMP-6           VALUE 1.
       77  C6-B    PIC  99 COMP-6           VALUE 10.
       77  C6-RES  PIC  99 COMP-6.
      *
       77  CN9-A   PIC  99 COMP-N           VALUE 1.
       77  CN9-B   PIC  99 COMP-N           VALUE 10.
       77  CN9-RES PIC  99 COMP-N.
      *
       77  CNX-A   PIC  X  COMP-N           VALUE 1.
       77  CNX-B   PIC  X  COMP-N           VALUE 10.
       77  CNX-RES PIC  X  COMP-N.
      *
       77  CX9-A   PIC  99 COMP-X           VALUE 1.
       77  CX9-B   PIC  99 COMP-X           VALUE 10.
       77  CX9-RES PIC  99 COMP-X.
      *
       77  CXX-A   PIC  X  COMP-X           VALUE 1.
       77  CXX-B   PIC  X  COMP-X           VALUE 10.
       77  CXX-RES PIC  X  COMP-X.
      *
       77  D-A     PIC  S99                 VALUE 1.
       77  D-B     PIC  S99                 VALUE 10.
       77  D-RES   PIC  S99.
      *
       77  FD16-A          FLOAT-DECIMAL-16 VALUE 1.
       77  FD16-B          FLOAT-DECIMAL-16 VALUE 10.
       77  FD16-RES        FLOAT-DECIMAL-16.
      *
       77  FD34-A          FLOAT-DECIMAL-34 VALUE 1.
       77  FD34-B          FLOAT-DECIMAL-34 VALUE 10.
       77  FD34-RES        FLOAT-DECIMAL-34.
      *
       77  FL-A            FLOAT-LONG       VALUE 1.
       77  FL-B            FLOAT-LONG       VALUE 10.
       77  FL-RES          FLOAT-LONG.
      *
       77  FS-A            FLOAT-SHORT      VALUE 1.
       77  FS-B            FLOAT-SHORT      VALUE 10.
       77  FS-RES          FLOAT-SHORT.
      *
       PROCEDURE DIVISION.
      *
           ADD  BCL-B  TO BCL-A END-ADD.
           MOVE BCL-A  TO BCL-RES.
           IF BCL-RES NOT = 11
              DISPLAY 'ERROR BINARY-C-LONG + BINARY-C-LONG'
              END-DISPLAY
           END-IF.
           MOVE 1     TO BCL-A.
           ADD  10    TO BCL-A END-ADD.
           MOVE BCL-A  TO BCL-RES.
           IF BCL-RES NOT = 11
              DISPLAY 'ERROR BINARY-C-LONG + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO BCL-A.
           SUBTRACT BCL-B FROM BCL-A END-SUBTRACT.
           MOVE BCL-A  TO BCL-RES.
           IF BCL-RES NOT = 1
              DISPLAY 'ERROR BINARY-C-LONG - BINARY-C-LONG'
              END-DISPLAY
           END-IF.
           MOVE 11    TO BCL-A.
           SUBTRACT 10   FROM BCL-A END-SUBTRACT.
           MOVE BCL-A  TO BCL-RES.
           IF BCL-RES NOT = 1
              DISPLAY 'ERROR BINARY-C-LONG - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  BC-B  TO BC-A END-ADD.
           MOVE BC-A  TO BC-RES.
           IF BC-RES NOT = 11
              DISPLAY 'ERROR BINARY-CHAR + BINARY-CHAR'
              END-DISPLAY
           END-IF.
           MOVE 1     TO BC-A.
           ADD  10    TO BC-A END-ADD.
           MOVE BC-A  TO BC-RES.
           IF BC-RES NOT = 11
              DISPLAY 'ERROR BINARY-CHAR + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO BC-A.
           SUBTRACT BC-B FROM BC-A END-SUBTRACT.
           MOVE BC-A  TO BC-RES.
           IF BC-RES NOT = 1
              DISPLAY 'ERROR BINARY-CHAR - BINARY-CHAR'
              END-DISPLAY
           END-IF.
           MOVE 11    TO BC-A.
           SUBTRACT 10   FROM BC-A END-SUBTRACT.
           MOVE BC-A  TO BC-RES.
           IF BC-RES NOT = 1
              DISPLAY 'ERROR BINARY-CHAR - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  BD-B  TO BD-A END-ADD.
           MOVE BD-A  TO BD-RES.
           IF BD-RES NOT = 11
              DISPLAY 'ERROR BINARY-DOUBLE + BINARY-DOUBLE'
              END-DISPLAY
           END-IF.
           MOVE 1     TO BD-A.
           ADD  10    TO BD-A END-ADD.
           MOVE BD-A  TO BD-RES.
           IF BD-RES NOT = 11
              DISPLAY 'ERROR BINARY-DOUBLE + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO BD-A.
           SUBTRACT BD-B FROM BD-A END-SUBTRACT.
           MOVE BD-A  TO BD-RES.
           IF BD-RES NOT = 1
              DISPLAY 'ERROR BINARY-DOUBLE - BINARY-DOUBLE'
              END-DISPLAY
           END-IF.
           MOVE 11    TO BD-A.
           SUBTRACT 10   FROM BD-A END-SUBTRACT.
           MOVE BD-A  TO BD-RES.
           IF BD-RES NOT = 1
              DISPLAY 'ERROR BINARY-DOUBLE - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  BL-B  TO BL-A END-ADD.
           MOVE BL-A  TO BL-RES.
           IF BL-RES NOT = 11
              DISPLAY 'ERROR BINARY-LONG + BINARY-LONG'
              END-DISPLAY
           END-IF.
           MOVE 1     TO BL-A.
           ADD  10    TO BL-A END-ADD.
           MOVE BL-A  TO BL-RES.
           IF BL-RES NOT = 11
              DISPLAY 'ERROR BINARY-LONG + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO BL-A.
           SUBTRACT BL-B FROM BL-A END-SUBTRACT.
           MOVE BL-A  TO BL-RES.
           IF BL-RES NOT = 1
              DISPLAY 'ERROR BINARY-LONG - BINARY-LONG'
              END-DISPLAY
           END-IF.
           MOVE 11    TO BL-A.
           SUBTRACT 10   FROM BL-A END-SUBTRACT.
           MOVE BL-A  TO BL-RES.
           IF BL-RES NOT = 1
              DISPLAY 'ERROR BINARY-LONG - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  C-B  TO C-A END-ADD.
           MOVE C-A  TO C-RES.
           IF C-RES NOT = 11
              DISPLAY 'ERROR COMP + COMP'
              END-DISPLAY
           END-IF.
           MOVE 1     TO C-A.
           ADD  10    TO C-A END-ADD.
           MOVE C-A  TO C-RES.
           IF C-RES NOT = 11
              DISPLAY 'ERROR COMP + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO C-A.
           SUBTRACT C-B FROM C-A END-SUBTRACT.
           MOVE C-A  TO C-RES.
           IF C-RES NOT = 1
              DISPLAY 'ERROR COMP - COMP'
              END-DISPLAY
           END-IF.
           MOVE 11    TO C-A.
           SUBTRACT 10   FROM C-A END-SUBTRACT.
           MOVE C-A  TO C-RES.
           IF C-RES NOT = 1
              DISPLAY 'ERROR COMP - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  C1-B  TO C1-A END-ADD.
           MOVE C1-A  TO C1-RES.
           IF C1-RES NOT = 11
              DISPLAY 'ERROR COMP-1 + COMP-1'
              END-DISPLAY
           END-IF.
           MOVE 1     TO C1-A.
           ADD  10    TO C1-A END-ADD.
           MOVE C1-A  TO C1-RES.
           IF C1-RES NOT = 11
              DISPLAY 'ERROR COMP-1 + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO C1-A.
           SUBTRACT C1-B FROM C1-A END-SUBTRACT.
           MOVE C1-A  TO C1-RES.
           IF C1-RES NOT = 1
              DISPLAY 'ERROR COMP-1 - COMP-1'
              END-DISPLAY
           END-IF.
           MOVE 11    TO C1-A.
           SUBTRACT 10   FROM C1-A END-SUBTRACT.
           MOVE C1-A  TO C1-RES.
           IF C1-RES NOT = 1
              DISPLAY 'ERROR COMP-1 - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  C2-B  TO C2-A END-ADD.
           MOVE C2-A  TO C2-RES.
           IF C2-RES NOT = 11
              DISPLAY 'ERROR COMP-2 + COMP-2'
              END-DISPLAY
           END-IF.
           MOVE 1     TO C2-A.
           ADD  10    TO C2-A END-ADD.
           MOVE C2-A  TO C2-RES.
           IF C2-RES NOT = 11
              DISPLAY 'ERROR COMP-2 + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO C2-A.
           SUBTRACT C2-B FROM C2-A END-SUBTRACT.
           MOVE C2-A  TO C2-RES.
           IF C2-RES NOT = 1
              DISPLAY 'ERROR COMP-2 - COMP-2'
              END-DISPLAY
           END-IF.
           MOVE 11    TO C2-A.
           SUBTRACT 10   FROM C2-A END-SUBTRACT.
           MOVE C2-A  TO C2-RES.
           IF C2-RES NOT = 1
              DISPLAY 'ERROR COMP-2 - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  C3-B  TO C3-A END-ADD.
           MOVE C3-A  TO C3-RES.
           IF C3-RES NOT = 11
              DISPLAY 'ERROR COMP-3 + COMP-3'
              END-DISPLAY
           END-IF.
           MOVE 1     TO C3-A.
           ADD  10    TO C3-A END-ADD.
           MOVE C3-A  TO C3-RES.
           IF C3-RES NOT = 11
              DISPLAY 'ERROR COMP-3 + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO C3-A.
           SUBTRACT C3-B FROM C3-A END-SUBTRACT.
           MOVE C3-A  TO C3-RES.
           IF C3-RES NOT = 1
              DISPLAY 'ERROR COMP-3 - COMP-3'
              END-DISPLAY
           END-IF.
           MOVE 11    TO C3-A.
           SUBTRACT 10   FROM C3-A END-SUBTRACT.
           MOVE C3-A  TO C3-RES.
           IF C3-RES NOT = 1
              DISPLAY 'ERROR COMP-3 - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  C5-B  TO C5-A END-ADD.
           MOVE C5-A  TO C5-RES.
           IF C5-RES NOT = 11
              DISPLAY 'ERROR COMP-5 + COMP-5'
              END-DISPLAY
           END-IF.
           MOVE 1     TO C5-A.
           ADD  10    TO C5-A END-ADD.
           MOVE C5-A  TO C5-RES.
           IF C5-RES NOT = 11
              DISPLAY 'ERROR COMP-5 + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO C5-A.
           SUBTRACT C5-B FROM C5-A END-SUBTRACT.
           MOVE C5-A  TO C5-RES.
           IF C5-RES NOT = 1
              DISPLAY 'ERROR COMP-5 - COMP-5'
              END-DISPLAY
           END-IF.
           MOVE 11    TO C5-A.
           SUBTRACT 10   FROM C5-A END-SUBTRACT.
           MOVE C5-A  TO C5-RES.
           IF C5-RES NOT = 1
              DISPLAY 'ERROR COMP-5 - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  C6-B  TO C6-A END-ADD.
           MOVE C6-A  TO C6-RES.
           IF C6-RES NOT = 11
              DISPLAY 'ERROR COMP-6 + COMP-6'
              END-DISPLAY
           END-IF.
           MOVE 1     TO C6-A.
           ADD  10    TO C6-A END-ADD.
           MOVE C6-A  TO C6-RES.
           IF C6-RES NOT = 11
              DISPLAY 'ERROR COMP-6 + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO C6-A.
           SUBTRACT C6-B FROM C6-A END-SUBTRACT.
           MOVE C6-A  TO C6-RES.
           IF C6-RES NOT = 1
              DISPLAY 'ERROR COMP-6 - COMP-6'
              END-DISPLAY
           END-IF.
           MOVE 11    TO C6-A.
           SUBTRACT 10   FROM C6-A END-SUBTRACT.
           MOVE C6-A  TO C6-RES.
           IF C6-RES NOT = 1
              DISPLAY 'ERROR COMP-6 - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  CN9-B  TO CN9-A END-ADD.
           MOVE CN9-A  TO CN9-RES.
           IF CN9-RES NOT = 11
              DISPLAY 'ERROR COMP-N + COMP-N'
              END-DISPLAY
           END-IF.
           MOVE 1     TO CN9-A.
           ADD  10    TO CN9-A END-ADD.
           MOVE CN9-A  TO CN9-RES.
           IF CN9-RES NOT = 11
              DISPLAY 'ERROR COMP-N + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO CN9-A.
           SUBTRACT CN9-B FROM CN9-A END-SUBTRACT.
           MOVE CN9-A  TO CN9-RES.
           IF CN9-RES NOT = 1
              DISPLAY 'ERROR COMP-N - COMP-N'
              END-DISPLAY
           END-IF.
           MOVE 11    TO CN9-A.
           SUBTRACT 10   FROM CN9-A END-SUBTRACT.
           MOVE CN9-A  TO CN9-RES.
           IF CN9-RES NOT = 1
              DISPLAY 'ERROR COMP-N - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  CNX-B  TO CNX-A END-ADD.
           MOVE CNX-A  TO CNX-RES.
           IF CNX-RES NOT = 11
              DISPLAY 'ERROR COMP-N + COMP-N'
              END-DISPLAY
           END-IF.
           MOVE 1     TO CNX-A.
           ADD  10    TO CNX-A END-ADD.
           MOVE CNX-A  TO CNX-RES.
           IF CNX-RES NOT = 11
              DISPLAY 'ERROR COMP-N + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO CNX-A.
           SUBTRACT CNX-B FROM CNX-A END-SUBTRACT.
           MOVE CNX-A  TO CNX-RES.
           IF CNX-RES NOT = 1
              DISPLAY 'ERROR COMP-N - COMP-N'
              END-DISPLAY
           END-IF.
           MOVE 11    TO CNX-A.
           SUBTRACT 10   FROM CNX-A END-SUBTRACT.
           MOVE CNX-A  TO CNX-RES.
           IF CNX-RES NOT = 1
              DISPLAY 'ERROR COMP-N - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  CX9-B  TO CX9-A END-ADD.
           MOVE CX9-A  TO CX9-RES.
           IF CX9-RES NOT = 11
              DISPLAY 'ERROR COMP-X + COMP-X'
              END-DISPLAY
           END-IF.
           MOVE 1     TO CX9-A.
           ADD  10    TO CX9-A END-ADD.
           MOVE CX9-A  TO CX9-RES.
           IF CX9-RES NOT = 11
              DISPLAY 'ERROR COMP-X + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO CX9-A.
           SUBTRACT CX9-B FROM CX9-A END-SUBTRACT.
           MOVE CX9-A  TO CX9-RES.
           IF CX9-RES NOT = 1
              DISPLAY 'ERROR COMP-X - COMP-X'
              END-DISPLAY
           END-IF.
           MOVE 11    TO CX9-A.
           SUBTRACT 10   FROM CX9-A END-SUBTRACT.
           MOVE CX9-A  TO CX9-RES.
           IF CX9-RES NOT = 1
              DISPLAY 'ERROR COMP-X - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  CXX-B  TO CXX-A END-ADD.
           MOVE CXX-A  TO CXX-RES.
           IF CXX-RES NOT = 11
              DISPLAY 'ERROR COMP-X + COMP-X'
              END-DISPLAY
           END-IF.
           MOVE 1     TO CXX-A.
           ADD  10    TO CXX-A END-ADD.
           MOVE CXX-A  TO CXX-RES.
           IF CXX-RES NOT = 11
              DISPLAY 'ERROR COMP-X + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO CXX-A.
           SUBTRACT CXX-B FROM CXX-A END-SUBTRACT.
           MOVE CXX-A  TO CXX-RES.
           IF CXX-RES NOT = 1
              DISPLAY 'ERROR COMP-X - COMP-X'
              END-DISPLAY
           END-IF.
           MOVE 11    TO CXX-A.
           SUBTRACT 10   FROM CXX-A END-SUBTRACT.
           MOVE CXX-A  TO CXX-RES.
           IF CXX-RES NOT = 1
              DISPLAY 'ERROR COMP-X - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  D-B  TO D-A END-ADD.
           MOVE D-A  TO D-RES.
           IF D-RES NOT = 11
              DISPLAY 'ERROR DISPLAY + DISPLAY'
              END-DISPLAY
           END-IF.
           MOVE 1     TO D-A.
           ADD  10    TO D-A END-ADD.
           MOVE D-A  TO D-RES.
           IF D-RES NOT = 11
              DISPLAY 'ERROR DISPLAY + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO D-A.
           SUBTRACT D-B FROM D-A END-SUBTRACT.
           MOVE D-A  TO D-RES.
           IF D-RES NOT = 1
              DISPLAY 'ERROR DISPLAY - DISPLAY'
              END-DISPLAY
           END-IF.
           MOVE 11    TO D-A.
           SUBTRACT 10   FROM D-A END-SUBTRACT.
           MOVE D-A  TO D-RES.
           IF D-RES NOT = 1
              DISPLAY 'ERROR DISPLAY - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  FD16-B  TO FD16-A END-ADD.
           MOVE FD16-A  TO FD16-RES.
           IF FD16-RES NOT = 11
              DISPLAY 'ERROR FLOAT-DECIMAL-16 + FLOAT-DECIMAL-16'
              END-DISPLAY
           END-IF.
           MOVE 1     TO FD16-A.
           ADD  10    TO FD16-A END-ADD.
           MOVE FD16-A  TO FD16-RES.
           IF FD16-RES NOT = 11
              DISPLAY 'ERROR FLOAT-DECIMAL-16 + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO FD16-A.
           SUBTRACT FD16-B FROM FD16-A END-SUBTRACT.
           MOVE FD16-A  TO FD16-RES.
           IF FD16-RES NOT = 1
              DISPLAY 'ERROR FLOAT-DECIMAL-16 - FLOAT-DECIMAL-16'
              END-DISPLAY
           END-IF.
           MOVE 11    TO FD16-A.
           SUBTRACT 10   FROM FD16-A END-SUBTRACT.
           MOVE FD16-A  TO FD16-RES.
           IF FD16-RES NOT = 1
              DISPLAY 'ERROR FLOAT-DECIMAL-16 - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  FD34-B  TO FD34-A END-ADD.
           MOVE FD34-A  TO FD34-RES.
           IF FD34-RES NOT = 11
              DISPLAY 'ERROR FLOAT-DECIMAL-34 + FLOAT-DECIMAL-34'
              END-DISPLAY
           END-IF.
           MOVE 1     TO FD34-A.
           ADD  10    TO FD34-A END-ADD.
           MOVE FD34-A  TO FD34-RES.
           IF FD34-RES NOT = 11
              DISPLAY 'ERROR FLOAT-DECIMAL-34 + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO FD34-A.
           SUBTRACT FD34-B FROM FD34-A END-SUBTRACT.
           MOVE FD34-A  TO FD34-RES.
           IF FD34-RES NOT = 1
              DISPLAY 'ERROR FLOAT-DECIMAL-34 - FLOAT-DECIMAL-34'
              END-DISPLAY
           END-IF.
           MOVE 11    TO FD34-A.
           SUBTRACT 10   FROM FD34-A END-SUBTRACT.
           MOVE FD34-A  TO FD34-RES.
           IF FD34-RES NOT = 1
              DISPLAY 'ERROR FLOAT-DECIMAL-34 - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  FL-B  TO FL-A END-ADD.
           MOVE FL-A  TO FL-RES.
           IF FL-RES NOT = 11
              DISPLAY 'ERROR FLOAT-LONG + FLOAT-LONG'
              END-DISPLAY
           END-IF.
           MOVE 1     TO FL-A.
           ADD  10    TO FL-A END-ADD.
           MOVE FL-A  TO FL-RES.
           IF FL-RES NOT = 11
              DISPLAY 'ERROR FLOAT-LONG + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO FL-A.
           SUBTRACT FL-B FROM FL-A END-SUBTRACT.
           MOVE FL-A  TO FL-RES.
           IF FL-RES NOT = 1
              DISPLAY 'ERROR FLOAT-LONG - FLOAT-LONG'
              END-DISPLAY
           END-IF.
           MOVE 11    TO FL-A.
           SUBTRACT 10   FROM FL-A END-SUBTRACT.
           MOVE FL-A  TO FL-RES.
           IF FL-RES NOT = 1
              DISPLAY 'ERROR FLOAT-LONG - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  FS-B  TO FS-A END-ADD.
           MOVE FS-A  TO FS-RES.
           IF FS-RES NOT = 11
              DISPLAY 'ERROR FLOAT-SHORT + FLOAT-SHORT'
              END-DISPLAY
           END-IF.
           MOVE 1     TO FS-A.
           ADD  10    TO FS-A END-ADD.
           MOVE FS-A  TO FS-RES.
           IF FS-RES NOT = 11
              DISPLAY 'ERROR FLOAT-SHORT + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO FS-A.
           SUBTRACT FS-B FROM FS-A END-SUBTRACT.
           MOVE FS-A  TO FS-RES.
           IF FS-RES NOT = 1
              DISPLAY 'ERROR FLOAT-SHORT - FLOAT-SHORT'
              END-DISPLAY
           END-IF.
           MOVE 11    TO FS-A.
           SUBTRACT 10   FROM FS-A END-SUBTRACT.
           MOVE FS-A  TO FS-RES.
           IF FS-RES NOT = 1
              DISPLAY 'ERROR FLOAT-SHORT - NUM'
              END-DISPLAY
           END-IF.
      *
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CHECK([$COMPILE -fnotrunc prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([Computing of different USAGEs w/- decimal point])
AT_KEYWORDS([runmisc
BINARY-C-LONG BINARY-CHAR BINARY-DOUBLE BINARY-LONG
COMP COMP-1 COMP-2 COMP-3 COMP-5 COMP-6 COMP-N COMP-X
FLOAT-DECIMAL-16 FLOAT-DECIMAL-34 FLOAT-LONG FLOAT-SHORT])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'prog'.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
      *
       77  BCL-A           BINARY-C-LONG    VALUE 1.0.
       77  BCL-B           BINARY-C-LONG    VALUE 10.0.
       77  BCL-RES         BINARY-C-LONG.
      *
       77  BC-A            BINARY-CHAR      VALUE 1.0.
       77  BC-B            BINARY-CHAR      VALUE 10.0.
       77  BC-RES          BINARY-CHAR.
      *
       77  BD-A            BINARY-DOUBLE    VALUE 1.0.
       77  BD-B            BINARY-DOUBLE    VALUE 10.0.
       77  BD-RES          BINARY-DOUBLE.
      *
       77  BL-A            BINARY-LONG      VALUE 1.0.
       77  BL-B            BINARY-LONG      VALUE 10.0.
       77  BL-RES          BINARY-LONG.
      *
       77  C-A     PIC S99 COMP             VALUE 1.0.
       77  C-B     PIC S99 COMP             VALUE 10.0.
       77  C-RES   PIC S99 COMP.
      *
       77  C1-A            COMP-1           VALUE 1.0.
       77  C1-B            COMP-1           VALUE 10.0.
       77  C1-RES          COMP-1.
      *
       77  C2-A            COMP-2           VALUE 1.0.
       77  C2-B            COMP-2           VALUE 10.0.
       77  C2-RES          COMP-2.
      *
       77  C3-A    PIC S99 COMP-3           VALUE 1.0.
       77  C3-B    PIC S99 COMP-3           VALUE 10.0.
       77  C3-RES  PIC S99 COMP-3.
      *
       77  C5-A    PIC S99 COMP-5           VALUE 1.0.
       77  C5-B    PIC S99 COMP-5           VALUE 10.0.
       77  C5-RES  PIC S99 COMP-5.
      *
       77  C6-A    PIC  99 COMP-6           VALUE 1.0.
       77  C6-B    PIC  99 COMP-6           VALUE 10.0.
       77  C6-RES  PIC  99 COMP-6.
      *
       77  CN9-A   PIC  99 COMP-N           VALUE 1.
       77  CN9-B   PIC  99 COMP-N           VALUE 10.
       77  CN9-RES PIC  99 COMP-N.
      *
       77  CNX-A   PIC  X  COMP-N           VALUE 1.
       77  CNX-B   PIC  X  COMP-N           VALUE 10.
       77  CNX-RES PIC  X  COMP-N.
      *
       77  CX9-A   PIC  99 COMP-X           VALUE 1.
       77  CX9-B   PIC  99 COMP-X           VALUE 10.
       77  CX9-RES PIC  99 COMP-X.
      *
       77  CXX-A   PIC  X  COMP-X           VALUE 1.
       77  CXX-B   PIC  X  COMP-X           VALUE 10.
       77  CXX-RES PIC  X  COMP-X.
      *
       77  D-A     PIC  S99                 VALUE 1.0.
       77  D-B     PIC  S99                 VALUE 10.0.
       77  D-RES   PIC  S99.
      *
       77  FD16-A          FLOAT-DECIMAL-16 VALUE 1.0.
       77  FD16-B          FLOAT-DECIMAL-16 VALUE 10.0.
       77  FD16-RES        FLOAT-DECIMAL-16.
      *
       77  FD34-A          FLOAT-DECIMAL-34 VALUE 1.0.
       77  FD34-B          FLOAT-DECIMAL-34 VALUE 10.0.
       77  FD34-RES        FLOAT-DECIMAL-34.
      *
       77  FL-A            FLOAT-LONG       VALUE 1.0.
       77  FL-B            FLOAT-LONG       VALUE 10.0.
       77  FL-RES          FLOAT-LONG.
      *
       77  FS-A            FLOAT-SHORT      VALUE 1.0.
       77  FS-B            FLOAT-SHORT      VALUE 10.0.
       77  FS-RES          FLOAT-SHORT.
      *
       PROCEDURE DIVISION.
      *
           ADD  BCL-B  TO BCL-A END-ADD.
           MOVE BCL-A  TO BCL-RES.
           IF BCL-RES NOT = 11.0
              DISPLAY 'ERROR BINARY-C-LONG + BINARY-C-LONG'
              END-DISPLAY
           END-IF.
           MOVE 1.0   TO BCL-A.
           ADD  10.0  TO BCL-A END-ADD.
           MOVE BCL-A  TO BCL-RES.
           IF BCL-RES NOT = 11.0
              DISPLAY 'ERROR BINARY-C-LONG + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO BCL-A.
           SUBTRACT BCL-B FROM BCL-A END-SUBTRACT.
           MOVE BCL-A  TO BCL-RES.
           IF BCL-RES NOT = 1.0
              DISPLAY 'ERROR BINARY-C-LONG - BINARY-C-LONG'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO BCL-A.
           SUBTRACT 10.0 FROM BCL-A END-SUBTRACT.
           MOVE BCL-A  TO BCL-RES.
           IF BCL-RES NOT = 1.0
              DISPLAY 'ERROR BINARY-C-LONG - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  BC-B  TO BC-A END-ADD.
           MOVE BC-A  TO BC-RES.
           IF BC-RES NOT = 11.0
              DISPLAY 'ERROR BINARY-CHAR + BINARY-CHAR'
              END-DISPLAY
           END-IF.
           MOVE 1.0   TO BC-A.
           ADD  10.0  TO BC-A END-ADD.
           MOVE BC-A  TO BC-RES.
           IF BC-RES NOT = 11.0
              DISPLAY 'ERROR BINARY-CHAR + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO BC-A.
           SUBTRACT BC-B FROM BC-A END-SUBTRACT.
           MOVE BC-A  TO BC-RES.
           IF BC-RES NOT = 1.0
              DISPLAY 'ERROR BINARY-CHAR - BINARY-CHAR'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO BC-A.
           SUBTRACT 10.0 FROM BC-A END-SUBTRACT.
           MOVE BC-A  TO BC-RES.
           IF BC-RES NOT = 1.0
              DISPLAY 'ERROR BINARY-CHAR - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  BD-B  TO BD-A END-ADD.
           MOVE BD-A  TO BD-RES.
           IF BD-RES NOT = 11.0
              DISPLAY 'ERROR BINARY-DOUBLE + BINARY-DOUBLE'
              END-DISPLAY
           END-IF.
           MOVE 1.0   TO BD-A.
           ADD  10.0  TO BD-A END-ADD.
           MOVE BD-A  TO BD-RES.
           IF BD-RES NOT = 11.0
              DISPLAY 'ERROR BINARY-DOUBLE + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO BD-A.
           SUBTRACT BD-B FROM BD-A END-SUBTRACT.
           MOVE BD-A  TO BD-RES.
           IF BD-RES NOT = 1.0
              DISPLAY 'ERROR BINARY-DOUBLE - BINARY-DOUBLE'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO BD-A.
           SUBTRACT 10.0 FROM BD-A END-SUBTRACT.
           MOVE BD-A  TO BD-RES.
           IF BD-RES NOT = 1.0
              DISPLAY 'ERROR BINARY-DOUBLE - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  BL-B  TO BL-A END-ADD.
           MOVE BL-A  TO BL-RES.
           IF BL-RES NOT = 11.0
              DISPLAY 'ERROR BINARY-LONG + BINARY-LONG'
              END-DISPLAY
           END-IF.
           MOVE 1.0   TO BL-A.
           ADD  10.0  TO BL-A END-ADD.
           MOVE BL-A  TO BL-RES.
           IF BL-RES NOT = 11.0
              DISPLAY 'ERROR BINARY-LONG + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO BL-A.
           SUBTRACT BL-B FROM BL-A END-SUBTRACT.
           MOVE BL-A  TO BL-RES.
           IF BL-RES NOT = 1.0
              DISPLAY 'ERROR BINARY-LONG - BINARY-LONG'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO BL-A.
           SUBTRACT 10.0 FROM BL-A END-SUBTRACT.
           MOVE BL-A  TO BL-RES.
           IF BL-RES NOT = 1.0
              DISPLAY 'ERROR BINARY-LONG - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  C-B  TO C-A END-ADD.
           MOVE C-A  TO C-RES.
           IF C-RES NOT = 11.0
              DISPLAY 'ERROR COMP + COMP'
              END-DISPLAY
           END-IF.
           MOVE 1.0   TO C-A.
           ADD  10.0  TO C-A END-ADD.
           MOVE C-A  TO C-RES.
           IF C-RES NOT = 11.0
              DISPLAY 'ERROR COMP + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO C-A.
           SUBTRACT C-B FROM C-A END-SUBTRACT.
           MOVE C-A  TO C-RES.
           IF C-RES NOT = 1.0
              DISPLAY 'ERROR COMP - COMP'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO C-A.
           SUBTRACT 10.0 FROM C-A END-SUBTRACT.
           MOVE C-A  TO C-RES.
           IF C-RES NOT = 1.0
              DISPLAY 'ERROR COMP - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  C1-B  TO C1-A END-ADD.
           MOVE C1-A  TO C1-RES.
           IF C1-RES NOT = 11.0
              DISPLAY 'ERROR COMP-1 + COMP-1'
              END-DISPLAY
           END-IF.
           MOVE 1.0   TO C1-A.
           ADD  10.0  TO C1-A END-ADD.
           MOVE C1-A  TO C1-RES.
           IF C1-RES NOT = 11.0
              DISPLAY 'ERROR COMP-1 + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO C1-A.
           SUBTRACT C1-B FROM C1-A END-SUBTRACT.
           MOVE C1-A  TO C1-RES.
           IF C1-RES NOT = 1.0
              DISPLAY 'ERROR COMP-1 - COMP-1'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO C1-A.
           SUBTRACT 10.0 FROM C1-A END-SUBTRACT.
           MOVE C1-A  TO C1-RES.
           IF C1-RES NOT = 1.0
              DISPLAY 'ERROR COMP-1 - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  C2-B  TO C2-A END-ADD.
           MOVE C2-A  TO C2-RES.
           IF C2-RES NOT = 11.0
              DISPLAY 'ERROR COMP-2 + COMP-2'
              END-DISPLAY
           END-IF.
           MOVE 1.0   TO C2-A.
           ADD  10.0  TO C2-A END-ADD.
           MOVE C2-A  TO C2-RES.
           IF C2-RES NOT = 11.0
              DISPLAY 'ERROR COMP-2 + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO C2-A.
           SUBTRACT C2-B FROM C2-A END-SUBTRACT.
           MOVE C2-A  TO C2-RES.
           IF C2-RES NOT = 1.0
              DISPLAY 'ERROR COMP-2 - COMP-2'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO C2-A.
           SUBTRACT 10.0 FROM C2-A END-SUBTRACT.
           MOVE C2-A  TO C2-RES.
           IF C2-RES NOT = 1.0
              DISPLAY 'ERROR COMP-2 - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  C3-B  TO C3-A END-ADD.
           MOVE C3-A  TO C3-RES.
           IF C3-RES NOT = 11.0
              DISPLAY 'ERROR COMP-3 + COMP-3'
              END-DISPLAY
           END-IF.
           MOVE 1.0   TO C3-A.
           ADD  10.0  TO C3-A END-ADD.
           MOVE C3-A  TO C3-RES.
           IF C3-RES NOT = 11.0
              DISPLAY 'ERROR COMP-3 + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO C3-A.
           SUBTRACT C3-B FROM C3-A END-SUBTRACT.
           MOVE C3-A  TO C3-RES.
           IF C3-RES NOT = 1.0
              DISPLAY 'ERROR COMP-3 - COMP-3'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO C3-A.
           SUBTRACT 10.0 FROM C3-A END-SUBTRACT.
           MOVE C3-A  TO C3-RES.
           IF C3-RES NOT = 1.0
              DISPLAY 'ERROR COMP-3 - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  C5-B  TO C5-A END-ADD.
           MOVE C5-A  TO C5-RES.
           IF C5-RES NOT = 11.0
              DISPLAY 'ERROR COMP-5 + COMP-5'
              END-DISPLAY
           END-IF.
           MOVE 1.0   TO C5-A.
           ADD  10.0  TO C5-A END-ADD.
           MOVE C5-A  TO C5-RES.
           IF C5-RES NOT = 11.0
              DISPLAY 'ERROR COMP-5 + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO C5-A.
           SUBTRACT C5-B FROM C5-A END-SUBTRACT.
           MOVE C5-A  TO C5-RES.
           IF C5-RES NOT = 1.0
              DISPLAY 'ERROR COMP-5 - COMP-5'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO C5-A.
           SUBTRACT 10.0 FROM C5-A END-SUBTRACT.
           MOVE C5-A  TO C5-RES.
           IF C5-RES NOT = 1.0
              DISPLAY 'ERROR COMP-5 - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  C6-B  TO C6-A END-ADD.
           MOVE C6-A  TO C6-RES.
           IF C6-RES NOT = 11.0
              DISPLAY 'ERROR COMP-6 + COMP-6'
              END-DISPLAY
           END-IF.
           MOVE 1.0   TO C6-A.
           ADD  10.0  TO C6-A END-ADD.
           MOVE C6-A  TO C6-RES.
           IF C6-RES NOT = 11.0
              DISPLAY 'ERROR COMP-6 + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO C6-A.
           SUBTRACT C6-B FROM C6-A END-SUBTRACT.
           MOVE C6-A  TO C6-RES.
           IF C6-RES NOT = 1.0
              DISPLAY 'ERROR COMP-6 - COMP-6'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO C6-A.
           SUBTRACT 10.0 FROM C6-A END-SUBTRACT.
           MOVE C6-A  TO C6-RES.
           IF C6-RES NOT = 1.0
              DISPLAY 'ERROR COMP-6 - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  CN9-B  TO CN9-A END-ADD.
           MOVE CN9-A  TO CN9-RES.
           IF CN9-RES NOT = 11.0
              DISPLAY 'ERROR COMP-N + COMP-N'
              END-DISPLAY
           END-IF.
           MOVE 1.0    TO CN9-A.
           ADD  10.0   TO CN9-A END-ADD.
           MOVE CN9-A  TO CN9-RES.
           IF CN9-RES NOT = 11.0
              DISPLAY 'ERROR COMP-N + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0   TO CN9-A.
           SUBTRACT CN9-B FROM CN9-A END-SUBTRACT.
           MOVE CN9-A  TO CN9-RES.
           IF CN9-RES NOT = 1.0
              DISPLAY 'ERROR COMP-N - COMP-N'
              END-DISPLAY
           END-IF.
           MOVE 11.0   TO CN9-A.
           SUBTRACT 10.0  FROM CN9-A END-SUBTRACT.
           MOVE CN9-A  TO CN9-RES.
           IF CN9-RES NOT = 1.0
              DISPLAY 'ERROR COMP-N - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  CNX-B  TO CNX-A END-ADD.
           MOVE CNX-A  TO CNX-RES.
           IF CNX-RES NOT = 11.0
              DISPLAY 'ERROR COMP-N + COMP-N'
              END-DISPLAY
           END-IF.
           MOVE 1.0    TO CNX-A.
           ADD  10.0   TO CNX-A END-ADD.
           MOVE CNX-A  TO CNX-RES.
           IF CNX-RES NOT = 11.0
              DISPLAY 'ERROR COMP-N + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0   TO CNX-A.
           SUBTRACT CNX-B FROM CNX-A END-SUBTRACT.
           MOVE CNX-A  TO CNX-RES.
           IF CNX-RES NOT = 1.0
              DISPLAY 'ERROR COMP-N - COMP-N'
              END-DISPLAY
           END-IF.
           MOVE 11.0   TO CNX-A.
           SUBTRACT 10.0 FROM CNX-A END-SUBTRACT.
           MOVE CNX-A  TO CNX-RES.
           IF CNX-RES NOT = 1.0
              DISPLAY 'ERROR COMP-N - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  CX9-B  TO CX9-A END-ADD.
           MOVE CX9-A  TO CX9-RES.
           IF CX9-RES NOT = 11.0
              DISPLAY 'ERROR COMP-X + COMP-X'
              END-DISPLAY
           END-IF.
           MOVE 1.0    TO CX9-A.
           ADD  10.0   TO CX9-A END-ADD.
           MOVE CX9-A  TO CX9-RES.
           IF CX9-RES NOT = 11.0
              DISPLAY 'ERROR COMP-X + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0   TO CX9-A.
           SUBTRACT CX9-B FROM CX9-A END-SUBTRACT.
           MOVE CX9-A  TO CX9-RES.
           IF CX9-RES NOT = 1.0
              DISPLAY 'ERROR COMP-X - COMP-X'
              END-DISPLAY
           END-IF.
           MOVE 11.0   TO CX9-A.
           SUBTRACT 10.0 FROM CX9-A END-SUBTRACT.
           MOVE CX9-A  TO CX9-RES.
           IF CX9-RES NOT = 1.0
              DISPLAY 'ERROR COMP-X - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  CXX-B  TO CXX-A END-ADD.
           MOVE CXX-A  TO CXX-RES.
           IF CXX-RES NOT = 11.0
              DISPLAY 'ERROR COMP-X + COMP-X'
              END-DISPLAY
           END-IF.
           MOVE 1.0    TO CXX-A.
           ADD  10.0   TO CXX-A END-ADD.
           MOVE CXX-A  TO CXX-RES.
           IF CXX-RES NOT = 11.0
              DISPLAY 'ERROR COMP-X + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0    TO CXX-A.
           SUBTRACT CXX-B FROM CXX-A END-SUBTRACT.
           MOVE CXX-A  TO CXX-RES.
           IF CXX-RES NOT = 1.0
              DISPLAY 'ERROR COMP-X - COMP-X'
              END-DISPLAY
           END-IF.
           MOVE 11.0   TO CXX-A.
           SUBTRACT 10.0 FROM CXX-A END-SUBTRACT.
           MOVE CXX-A  TO CXX-RES.
           IF CXX-RES NOT = 1.0
              DISPLAY 'ERROR COMP-X - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  D-B  TO D-A END-ADD.
           MOVE D-A  TO D-RES.
           IF D-RES NOT = 11.0
              DISPLAY 'ERROR DISPLAY + DISPLAY'
              END-DISPLAY
           END-IF.
           MOVE 1.0  TO D-A.
           ADD  10.0 TO D-A END-ADD.
           MOVE D-A  TO D-RES.
           IF D-RES NOT = 11.0
              DISPLAY 'ERROR DISPLAY + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0 TO D-A.
           SUBTRACT D-B FROM D-A END-SUBTRACT.
           MOVE D-A  TO D-RES.
           IF D-RES NOT = 1.0
              DISPLAY 'ERROR DISPLAY - DISPLAY'
              END-DISPLAY
           END-IF.
           MOVE 11.0 TO D-A.
           SUBTRACT 10.0 FROM D-A END-SUBTRACT.
           MOVE D-A  TO D-RES.
           IF D-RES NOT = 1.0
              DISPLAY 'ERROR DISPLAY - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  FD16-B  TO FD16-A END-ADD.
           MOVE FD16-A  TO FD16-RES.
           IF FD16-RES NOT = 11.0
              DISPLAY 'ERROR FLOAT-DECIMAL-16 + FLOAT-DECIMAL-16'
              END-DISPLAY
           END-IF.
           MOVE 1.0   TO FD16-A.
           ADD  10.0  TO FD16-A END-ADD.
           MOVE FD16-A  TO FD16-RES.
           IF FD16-RES NOT = 11.0
              DISPLAY 'ERROR FLOAT-DECIMAL-16 + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO FD16-A.
           SUBTRACT FD16-B FROM FD16-A END-SUBTRACT.
           MOVE FD16-A  TO FD16-RES.
           IF FD16-RES NOT = 1.0
              DISPLAY 'ERROR FLOAT-DECIMAL-16 - FLOAT-DECIMAL-16'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO FD16-A.
           SUBTRACT 10.0 FROM FD16-A END-SUBTRACT.
           MOVE FD16-A  TO FD16-RES.
           IF FD16-RES NOT = 1.0
              DISPLAY 'ERROR FLOAT-DECIMAL-16 - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  FD34-B  TO FD34-A END-ADD.
           MOVE FD34-A  TO FD34-RES.
           IF FD34-RES NOT = 11.0
              DISPLAY 'ERROR FLOAT-DECIMAL-34 + FLOAT-DECIMAL-34'
              END-DISPLAY
           END-IF.
           MOVE 1.0   TO FD34-A.
           ADD  10.0  TO FD34-A END-ADD.
           MOVE FD34-A  TO FD34-RES.
           IF FD34-RES NOT = 11.0
              DISPLAY 'ERROR FLOAT-DECIMAL-34 + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO FD34-A.
           SUBTRACT FD34-B FROM FD34-A END-SUBTRACT.
           MOVE FD34-A  TO FD34-RES.
           IF FD34-RES NOT = 1.0
              DISPLAY 'ERROR FLOAT-DECIMAL-34 - FLOAT-DECIMAL-34'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO FD34-A.
           SUBTRACT 10.0 FROM FD34-A END-SUBTRACT.
           MOVE FD34-A  TO FD34-RES.
           IF FD34-RES NOT = 1.0
              DISPLAY 'ERROR FLOAT-DECIMAL-34 - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  FL-B  TO FL-A END-ADD.
           MOVE FL-A  TO FL-RES.
           IF FL-RES NOT = 11.0
              DISPLAY 'ERROR FLOAT-LONG + FLOAT-LONG'
              END-DISPLAY
           END-IF.
           MOVE 1.0   TO FL-A.
           ADD  10.0  TO FL-A END-ADD.
           MOVE FL-A  TO FL-RES.
           IF FL-RES NOT = 11.0
              DISPLAY 'ERROR FLOAT-LONG + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO FL-A.
           SUBTRACT FL-B FROM FL-A END-SUBTRACT.
           MOVE FL-A  TO FL-RES.
           IF FL-RES NOT = 1.0
              DISPLAY 'ERROR FLOAT-LONG - FLOAT-LONG'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO FL-A.
           SUBTRACT 10.0 FROM FL-A END-SUBTRACT.
           MOVE FL-A  TO FL-RES.
           IF FL-RES NOT = 1.0
              DISPLAY 'ERROR FLOAT-LONG - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  FS-B  TO FS-A END-ADD.
           MOVE FS-A  TO FS-RES.
           IF FS-RES NOT = 11.0
              DISPLAY 'ERROR FLOAT-SHORT + FLOAT-SHORT'
              END-DISPLAY
           END-IF.
           MOVE 1.0   TO FS-A.
           ADD  10.0  TO FS-A END-ADD.
           MOVE FS-A  TO FS-RES.
           IF FS-RES NOT = 11.0
              DISPLAY 'ERROR FLOAT-SHORT + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO FS-A.
           SUBTRACT FS-B FROM FS-A END-SUBTRACT.
           MOVE FS-A  TO FS-RES.
           IF FS-RES NOT = 1.0
              DISPLAY 'ERROR FLOAT-SHORT - FLOAT-SHORT'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO FS-A.
           SUBTRACT 10.0 FROM FS-A END-SUBTRACT.
           MOVE FS-A  TO FS-RES.
           IF FS-RES NOT = 1.0
              DISPLAY 'ERROR FLOAT-SHORT - NUM'
              END-DISPLAY
           END-IF.
      *
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CHECK([$COMPILE -fnotrunc prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([C/C++ reserved words/predefined identifiers])
AT_KEYWORDS([runmisc])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
      *
      * Reserved Words in C (that aren't reserved in COBOL)
      * var names MUST BE IN LOWER CASE (!)
      *
       77  const                       PIC X VALUE "A".
       77  double                      PIC X VALUE "B".
       77  float                       PIC X VALUE "C".
       77  int                         PIC X VALUE "D".
       77  short                       PIC X VALUE "E".
       77  struct                      PIC X VALUE "F".
       77  break                       PIC X VALUE "G".
       77  long                        PIC X VALUE "H".
       77  switch                      PIC X VALUE "I".
       77  void                        PIC X VALUE "J".
       77  case                        PIC X VALUE "K".
       77  enum                        PIC X VALUE "L".
       77  goto                        PIC X VALUE "M".
       77  register                    PIC X VALUE "N".
       77  sizeof                      PIC X VALUE "O".
       77  volatile                    PIC X VALUE "P".
       77  char                        PIC X VALUE "Q".
       77  do                          PIC X VALUE "R".
       77  extern                      PIC X VALUE "S".
       77  static                      PIC X VALUE "T".
       77  union                       PIC X VALUE "U".
       77  while                       PIC X VALUE "V".
      *
      * More Reserved Words in C++
      * var names MUST BE IN LOWER CASE (!)
      *
       77  asm                         PIC X VALUE "W".
       77  dynamic_cast                PIC X VALUE "X".
       77  namespace                   PIC X VALUE "Y".
       77  reinterpret_cast            PIC X VALUE "Z".
       77  try                         PIC X VALUE "a".
       77  bool                        PIC X VALUE "b".
       77  explicit                    PIC X VALUE "c".
       77  new                         PIC X VALUE "d".
       77  static_cast                 PIC X VALUE "e".
       77  typeid                      PIC X VALUE "f".
       77  catch                       PIC X VALUE "g".
       77  operator                    PIC X VALUE "h".
       77  template                    PIC X VALUE "i".
       77  typename                    PIC X VALUE "j".
       77  friend                      PIC X VALUE "k".
       77  private                     PIC X VALUE "l".
       77  this                        PIC X VALUE "m".
       77  const_cast                  PIC X VALUE "n".
       77  inline                      PIC X VALUE "o".
       77  public                      PIC X VALUE "p".
       77  throw                       PIC X VALUE "q".
       77  virtual                     PIC X VALUE "r".
       77  mutable                     PIC X VALUE "s".
       77  protected                   PIC X VALUE "t".
       77  wchar_t                     PIC X VALUE "u".
      *
      * More Reserved Words in C++ (not essential)
      * var names MUST BE IN LOWER CASE (!)
      *
       77  bitand                      PIC X VALUE "v".
       77  compl                       PIC X VALUE "w".
       77  not_eq                      PIC X VALUE "x".
       77  or_eq                       PIC X VALUE "y".
       77  xor_eq                      PIC X VALUE "z".
       77  and_eq                      PIC X VALUE "0".
       77  bitor                       PIC X VALUE "1".
       77  xor                         PIC X VALUE "2".
      *
       PROCEDURE        DIVISION.
           CALL "callee" USING   const
                                 double
                                 float
                                 int
                                 short
                                 struct
                                 break
                                 long
                                 switch
                                 void
                                 case
                                 enum
                                 goto
                                 register
                                 sizeof
                                 volatile
                                 char
                                 do
                                 *>extern
                                 *>static
                                 union
                                 while
           END-CALL.
           CALL "callee2" USING  asm
                                 dynamic_cast
                                 namespace
                                 reinterpret_cast
                                 try
                                 bool
                                 explicit
                                 new
                                 static_cast
                                 typeid
                                 catch
                                 operator
                                 template
                                 typename
                                 friend
                                 private
                                 this
                                 const_cast
                                 inline
                                 public
                                 throw
                                 virtual
                                 mutable
                                 protected
                                 wchar_t
                                 bitand
                                 compl
                                 not_eq
                                 or_eq
                                 xor_eq
                                 and_eq
                                 bitor
                                 xor
           END-CALL.
           MOVE x'00' TO         const
                                 double
                                 float
                                 int
                                 short
                                 struct
                                 break
                                 long
                                 switch
                                 void
                                 case
                                 enum
                                 goto
                                 register
                                 sizeof
                                 volatile
                                 char
                                 do
                                 extern
                                 static
                                 union
                                 while
                                 asm
                                 dynamic_cast
                                 namespace
                                 reinterpret_cast
                                 try
                                 bool
                                 explicit
                                 new
                                 static_cast
                                 typeid
                                 catch
                                 operator
                                 template
                                 typename
                                 friend
                                 private
                                 this
                                 const_cast
                                 inline
                                 public
                                 throw
                                 virtual
                                 mutable
                                 protected
                                 wchar_t
                                 bitand
                                 compl
                                 not_eq
                                 or_eq
                                 xor_eq
                                 and_eq
                                 bitor
                                 xor
                                 .
           STOP RUN.
])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       LINKAGE SECTION.
      *
      * Reserved Words in C (that aren't reserved in COBOL)
      * var names MUST BE IN LOWER CASE (!)
      *
       77  const                       PIC X.
       77  double                      PIC X.
       77  float                       PIC X.
       77  int                         PIC X.
       77  short                       PIC X.
       77  struct                      PIC X.
       77  break                       PIC X.
       77  long                        PIC X.
       77  switch                      PIC X.
       77  void                        PIC X.
       77  case                        PIC X.
       77  enum                        PIC X.
       77  goto                        PIC X.
       77  register                    PIC X.
       77  sizeof                      PIC X.
       77  volatile                    PIC X.
       77  char                        PIC X.
       77  do                          PIC X.
      *77  extern                      PIC X.
      *77  static                      PIC X.
       77  union                       PIC X.
       77  while                       PIC X.
       PROCEDURE        DIVISION USING
                                 const
                                 double
                                 float
                                 int
                                 short
                                 struct
                                 break
                                 long
                                 switch
                                 void
                                 case
                                 enum
                                 goto
                                 register
                                 sizeof
                                 volatile
                                 char
                                 do
                                *>extern
                                *>static
                                 union
                                 while
                                 .
           IF (const                       NOT = "A") OR
              (double                      NOT = "B") OR
              (float                       NOT = "C") OR
              (int                         NOT = "D") OR
              (short                       NOT = "E") OR
              (struct                      NOT = "F") OR
              (break                       NOT = "G") OR
              (long                        NOT = "H") OR
              (switch                      NOT = "I") OR
              (void                        NOT = "J") OR
              (case                        NOT = "K") OR
              (enum                        NOT = "L") OR
              (goto                        NOT = "M") OR
              (register                    NOT = "N") OR
              (sizeof                      NOT = "O") OR
              (volatile                    NOT = "P") OR
              (char                        NOT = "Q") OR
              (do                          NOT = "R") OR
            *>(extern                      NOT = "S") OR
            *>(static                      NOT = "T") OR
              (union                       NOT = "U") OR
              (while                       NOT = "V")
              DISPLAY "At least one var has wrong content!"
              END-DISPLAY
           END-IF.
           MOVE x'FF' TO         const
                                 double
                                 float
                                 int
                                 short
                                 struct
                                 break
                                 long
                                 switch
                                 void
                                 case
                                 enum
                                 goto
                                 register
                                 sizeof
                                 volatile
                                 char
                                 do
                               *>extern
                               *>static
                                 union
                                 while
                                 .
           EXIT PROGRAM.
])

AT_DATA([callee2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee2.
       DATA             DIVISION.
       LINKAGE SECTION.
      *
      * More Reserved Words in C++
      * var names MUST BE IN LOWER CASE (!)
      *
       77  asm                         PIC X.
       77  dynamic_cast                PIC X.
       77  namespace                   PIC X.
       77  reinterpret_cast            PIC X.
       77  try                         PIC X.
       77  bool                        PIC X.
       77  explicit                    PIC X.
       77  new                         PIC X.
       77  static_cast                 PIC X.
       77  typeid                      PIC X.
       77  catch                       PIC X.
       77  operator                    PIC X.
       77  template                    PIC X.
       77  typename                    PIC X.
       77  friend                      PIC X.
       77  private                     PIC X.
       77  this                        PIC X.
       77  const_cast                  PIC X.
       77  inline                      PIC X.
       77  public                      PIC X.
       77  throw                       PIC X.
       77  virtual                     PIC X.
       77  mutable                     PIC X.
       77  protected                   PIC X.
       77  wchar_t                     PIC X.
      *
      * More Reserved Words in C++ (not essential)
      *
       77  bitand                      PIC X.
       77  compl                       PIC X.
       77  not_eq                      PIC X.
       77  or_eq                       PIC X.
       77  xor_eq                      PIC X.
       77  and_eq                      PIC X.
       77  bitor                       PIC X.
       77  xor                         PIC X.
       PROCEDURE        DIVISION USING
                                 asm
                                 dynamic_cast
                                 namespace
                                 reinterpret_cast
                                 try
                                 bool
                                 explicit
                                 new
                                 static_cast
                                 typeid
                                 catch
                                 operator
                                 template
                                 typename
                                 friend
                                 private
                                 this
                                 const_cast
                                 inline
                                 public
                                 throw
                                 virtual
                                 mutable
                                 protected
                                 wchar_t
                                 bitand
                                 compl
                                 not_eq
                                 or_eq
                                 xor_eq
                                 and_eq
                                 bitor
                                 xor
                                 .
           IF (asm                         NOT = "W") OR
              (dynamic_cast                NOT = "X") OR
              (namespace                   NOT = "Y") OR
              (reinterpret_cast            NOT = "Z") OR
              (try                         NOT = "a") OR
              (bool                        NOT = "b") OR
              (explicit                    NOT = "c") OR
              (new                         NOT = "d") OR
              (static_cast                 NOT = "e") OR
              (typeid                      NOT = "f") OR
              (catch                       NOT = "g") OR
              (operator                    NOT = "h") OR
              (template                    NOT = "i") OR
              (typename                    NOT = "j") OR
              (friend                      NOT = "k") OR
              (private                     NOT = "l") OR
              (this                        NOT = "m") OR
              (const_cast                  NOT = "n") OR
              (inline                      NOT = "o") OR
              (public                      NOT = "p") OR
              (throw                       NOT = "q") OR
              (virtual                     NOT = "r") OR
              (mutable                     NOT = "s") OR
              (protected                   NOT = "t") OR
              (wchar_t                     NOT = "u") OR
              (bitand                      NOT = "v") OR
              (compl                       NOT = "w") OR
              (not_eq                      NOT = "x") OR
              (or_eq                       NOT = "y") OR
              (xor_eq                      NOT = "z") OR
              (and_eq                      NOT = "0") OR
              (bitor                       NOT = "1") OR
              (xor                         NOT = "2")
              DISPLAY "At least one var has wrong content!"
              END-DISPLAY
           END-IF.
           MOVE x'FF' TO         asm
                                 dynamic_cast
                                 namespace
                                 reinterpret_cast
                                 try
                                 bool
                                 explicit
                                 new
                                 static_cast
                                 typeid
                                 catch
                                 operator
                                 template
                                 typename
                                 friend
                                 private
                                 this
                                 const_cast
                                 inline
                                 public
                                 throw
                                 virtual
                                 mutable
                                 protected
                                 wchar_t
                                 bitand
                                 compl
                                 not_eq
                                 or_eq
                                 xor_eq
                                 and_eq
                                 bitor
                                 xor
                                 .
           EXIT PROGRAM.
])

AT_CHECK([$COMPILE_MODULE -fnot-reserved=double,float,new,volatile,xor callee.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE -fnot-reserved=double,float,new,volatile,xor callee2.cob], [0], [], [])
AT_CHECK([$COMPILE -fnot-reserved=double,float,new,volatile,xor -o prog caller.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([PICTURE with Edit mask])
AT_KEYWORDS([numeric])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  TST.
           05 DEPT-SUB        PIC 9(7)V999 VALUE 18536.232.
           05 DEPT-COST-YTD   PIC 9(5)V999 VALUE 18536.232.
           05 DL-PROD-COST    PIC $$$,$$9.99.
       77  WFLT  PIC $$$,$$9.99.

       PROCEDURE DIVISION.
           MOVE 18536.23 TO WFLT.
           DISPLAY "WFLT IS " WFLT.
           MULTIPLY DEPT-COST-YTD BY 1 GIVING DL-PROD-COST ROUNDED.
           DISPLAY "COST IS " DL-PROD-COST.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[WFLT IS $18,536.23
COST IS $18,536.23
], [])

AT_CLEANUP


AT_SETUP([COMP-3 Index])
AT_KEYWORDS([numeric])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 WS-PAGE-NUMBER PIC 9(4) COMP-3 VALUE ZERO.
       01 WS-LINE-NUMBER PIC 9(3) VALUE ZERO.
       PROCEDURE DIVISION.
       PERFORM VARYING WS-LINE-NUMBER FROM 1 BY 1
                 UNTIL WS-LINE-NUMBER > 10
       ADD 1 TO WS-PAGE-NUMBER
       DISPLAY WS-PAGE-NUMBER
       END-PERFORM.
       STOP RUN RETURNING 0.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[0001
0002
0003
0004
0005
0006
0007
0008
0009
0010
], [])

AT_CLEANUP


AT_SETUP([POINTER])
AT_KEYWORDS([numeric])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID. prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 XX.
         02 XX-1           PIC X(4) VALUE "1234".
         02 XX-2           PIC X(4) VALUE "5678".
       01 P-XX-1        POINTER.
       01 P-XX-2        POINTER.
       LINKAGE          SECTION.
       01 Y2            PIC X(4).
       PROCEDURE        DIVISION.
         SET P-XX-1 TO ADDRESS OF XX-1
         SET P-XX-2 TO ADDRESS OF XX-2
         SET ADDRESS OF Y2 TO ADDRESS OF XX-1
         SET ADDRESS OF Y2 UP BY 4
         IF Y2 NOT = XX-2
            DISPLAY "Test 2 '" Y2 "'"
            END-DISPLAY
         END-IF
         IF ADDRESS OF Y2 NOT = P-XX-2
            DISPLAY "NOK"
         END-IF
         STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([ON EXCEPTION clause of DISPLAY])
AT_KEYWORDS([runmisc exceptions screen])

AT_CHECK([test "$COB_HAS_CURSES" = "yes" || exit 77])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.

       PROCEDURE DIVISION.
           DISPLAY "hello" AT COLUMN 500
               ON EXCEPTION
                   GOBACK RETURNING 0
               NOT ON EXCEPTION
                   GOBACK RETURNING 1
           END-DISPLAY
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([COB_EXIT_WAIT=0 $COBCRUN_DIRECT ./prog], [0], ignore, [])

AT_CLEANUP


AT_SETUP([EC-SCREEN-LINE-NUMBER and -STARTING-COLUMN])
AT_KEYWORDS([runmisc exceptions screen])

AT_CHECK([test "$COB_HAS_CURSES" = "yes" || exit 77])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.

       DATA           DIVISION.
       SCREEN         SECTION.
       01  invalid-line.
           03  a      VALUE "a" LINE 99999999.
       01  invalid-col.
           03  c      VALUE "c" COLUMN 99999999.

       PROCEDURE      DIVISION.
           DISPLAY invalid-line END-DISPLAY
           IF FUNCTION EXCEPTION-STATUS = "EC-SCREEN-LINE-NUMBER"
               CONTINUE
           ELSE
               GOBACK RETURNING 1
           END-IF

           DISPLAY invalid-col END-DISPLAY
           IF FUNCTION EXCEPTION-STATUS = "EC-SCREEN-STARTING-COLUMN"
               CONTINUE
           ELSE
               GOBACK RETURNING 2
           END-IF

           GOBACK RETURNING 0
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([COB_EXIT_WAIT=0 $COBCRUN_DIRECT ./prog], [0], ignore, [])

AT_CLEANUP


AT_SETUP([LINE/COLUMN 0 exceptions])
AT_KEYWORDS([LINE COLUMN runmisc exceptions extensions screen])

AT_CHECK([test "$COB_HAS_CURSES" = "yes" || exit 77])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  zero-var PIC 9 VALUE 0.

       SCREEN SECTION.
       01  scr.
           03  VALUE "a".

       PROCEDURE DIVISION.
           DISPLAY scr AT LINE zero-var
           IF FUNCTION EXCEPTION-STATUS <> "EC-SCREEN-LINE-NUMBER"
               GOBACK RETURNING 1
           END-IF

           DISPLAY scr AT COLUMN zero-var
           IF FUNCTION EXCEPTION-STATUS <> "EC-SCREEN-STARTING-COLUMN"
               GOBACK RETURNING 2
           END-IF

           GOBACK RETURNING 0
           .
])

AT_CHECK([$COMPILE  -faccept-display-extensions=error prog.cob], [0], [], [])
AT_CHECK([COB_EXIT_WAIT=0 $COBCRUN_DIRECT ./prog], [0], ignore, [])

AT_CLEANUP


AT_SETUP([SET LAST EXCEPTION TO OFF])
AT_KEYWORDS([runmisc exceptions EXCEPTION-STATUS EXCEPTION-LOCATION])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x PIC 9.

       PROCEDURE DIVISION.
           COMPUTE x = 10
           DISPLAY FUNCTION TRIM(FUNCTION EXCEPTION-STATUS)
           DISPLAY FUNCTION TRIM(FUNCTION EXCEPTION-LOCATION)
           DISPLAY FUNCTION TRIM(FUNCTION EXCEPTION-STATUS)
           DISPLAY FUNCTION TRIM(FUNCTION EXCEPTION-LOCATION)
           SET LAST EXCEPTION TO OFF
           DISPLAY FUNCTION TRIM(FUNCTION EXCEPTION-STATUS)
           DISPLAY FUNCTION TRIM(FUNCTION EXCEPTION-LOCATION)
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[EC-SIZE-OVERFLOW
prog; ; 10
EC-SIZE-OVERFLOW
prog; ; 10


])
AT_CLEANUP


# PROCEDURE DIVISION RETURNING OMITTED
AT_SETUP([void PROCEDURE])
AT_KEYWORDS([runmisc])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       PROCEDURE        DIVISION RETURNING OMITTED.
           MOVE 42 TO RETURN-CODE
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       PROCEDURE        DIVISION.
           CALL "callee" RETURNING OMITTED
           END-CALL.
           DISPLAY RETURN-CODE WITH NO ADVANCING
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [+000000000], [])

AT_CLEANUP


AT_SETUP([Figurative constants to numeric field])
AT_KEYWORDS([Numeric])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  NUM9    PIC 9(6).
       PROCEDURE DIVISION.
           MOVE SPACES TO NUM9
           DISPLAY "NUM9 value SPACES is " NUM9 "." UPON SYSOUT
           MOVE LOW-VALUES TO NUM9
           IF NUM9 = LOW-VALUES
              DISPLAY "9(6) tests OK for LOW-VALUES" UPON SYSOUT
           ELSE
              DISPLAY "9(6) Does NOT test OK for LOW-VALUES"
                 UPON SYSOUT
              IF NUM9 = ZERO
                 DISPLAY "9(6) tests as ZERO instead of LOW-VALUES"
                    UPON SYSOUT
              END-IF
           END-IF.
           MOVE HIGH-VALUES TO NUM9
           IF NUM9 = HIGH-VALUES
              DISPLAY "9(6) tests OK for HIGH-VALUES" UPON SYSOUT
           ELSE
              DISPLAY "9(6) Does NOT test OK for HIGH-VALUES"
                 UPON SYSOUT
              IF NUM9 = ZERO
                 DISPLAY "9(6) tests as ZERO instead of HIGH-VALUES"
                    UPON SYSOUT
              END-IF
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE -std=mf prog.cob], [0], [],
[prog.cob:8: warning: source is non-numeric - substituting zero
prog.cob:10: warning: source is non-numeric - substituting zero
prog.cob:21: warning: source is non-numeric - substituting zero
])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[NUM9 value SPACES is 000000.
9(6) Does NOT test OK for LOW-VALUES
9(6) tests as ZERO instead of LOW-VALUES
9(6) Does NOT test OK for HIGH-VALUES
9(6) tests as ZERO instead of HIGH-VALUES
], [])

AT_CHECK([$COMPILE -std=acu prog.cob -o aprog], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./aprog], [0],
[NUM9 value SPACES is       .
9(6) tests OK for LOW-VALUES
9(6) tests OK for HIGH-VALUES
], [])

AT_CLEANUP


AT_SETUP([MF FIGURATIVE to NUMERIC])
AT_KEYWORDS([MOVE])

# FIXME: This test will NOT work on EBCDIC machines,
#        either add it explicit here and split into two or add
#        a pre-test and check the expected "native" result

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID. prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  MYFLD        PIC 9(4) VALUE 96.
       01  BIGFLT       COMP-1 VALUE 543.12345E10.
       PROCEDURE        DIVISION.
       MAIN-1.
           DISPLAY "Initial value"
           PERFORM SHOW-IT.
           DISPLAY "MOVE BIGFLT"
           MOVE BIGFLT TO MYFLD.
           PERFORM SHOW-IT.
           DISPLAY "MOVE SPACES"
           MOVE SPACES TO MYFLD.
           PERFORM SHOW-IT.
           DISPLAY "MOVE LOW-VALUES"
           MOVE LOW-VALUES TO MYFLD.
           PERFORM SHOW-IT.
           DISPLAY "MOVE HIGH-VALUES"
           MOVE HIGH-VALUES TO MYFLD.
           PERFORM SHOW-IT.
           DISPLAY "MOVE QUOTE"
           MOVE QUOTE TO MYFLD.
           PERFORM SHOW-IT.
           DISPLAY "MOVE ALL *"
           MOVE ALL '*' TO MYFLD.
           PERFORM SHOW-IT.
           DISPLAY "MOVE ALL 0"
           MOVE ALL '0' TO MYFLD.
           PERFORM SHOW-IT.
           DISPLAY "MOVE ALL 'A1'"
           MOVE ALL 'A1' TO MYFLD.
           PERFORM SHOW-IT.
           DISPLAY "MOVE ALL '21'"
           MOVE ALL '21' TO MYFLD.
           PERFORM SHOW-IT.
           DISPLAY "MOVE HIGH-VALUES TO (1:)"
           MOVE HIGH-VALUES TO MYFLD (1:).
           PERFORM SHOW-IT.

           DISPLAY "MOVE HIGH-VALUES TO BIGFLT"
           MOVE HIGH-VALUES TO BIGFLT.
           PERFORM SHOW-BIG.
           CALL "dump" USING BIGFLT.
           DISPLAY "MOVE QUOTE TO BIGFLT"
           MOVE QUOTE TO BIGFLT.
           PERFORM SHOW-BIG.
           CALL "dump" USING BIGFLT.
           DISPLAY "MOVE ALL * TO BIGFLT"
           MOVE ALL '*' TO BIGFLT.
           PERFORM SHOW-BIG.
      *>   Note: the next results are dependant on endianess
      *>         therefore no dump here
           DISPLAY "MOVE ALL '21' TO BIGFLT"
           MOVE ALL '21' TO BIGFLT.
           PERFORM SHOW-BIG.
           STOP RUN.
       SHOW-IT.
           CALL "dump" USING MYFLD.
       SHOW-BIG.
           DISPLAY "BIGFLT is " BIGFLT.
])

AT_DATA([cmod.c], [[
#include <stdio.h>
#include <libcob.h>

COB_EXT_EXPORT int
dump (unsigned char *data)
{
  int i;
  for (i = 0; i < 4; i++)
    printf ("%02X", data[i]);
  puts (" .");
  return 0;
}
]])

AT_CHECK([$COMPILE -std=mf -fno-move-non-numeric-lit-to-numeric-is-zero prog.cob cmod.c], [0], [],
[prog.cob: in paragraph 'MAIN-1':
prog.cob:28: warning: numeric value is expected
prog.cob:6: note: 'MYFLD' defined here as PIC 9(4)
prog.cob:34: warning: numeric value is expected
prog.cob:6: note: 'MYFLD' defined here as PIC 9(4)
prog.cob:52: warning: numeric value is expected
prog.cob:7: note: 'BIGFLT' defined here as USAGE FLOAT
])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[Initial value
30303936 .
MOVE BIGFLT
38333034 .
MOVE SPACES
20202020 .
MOVE LOW-VALUES
00000000 .
MOVE HIGH-VALUES
FFFFFFFF .
MOVE QUOTE
22222222 .
MOVE ALL *
2A2A2A2A .
MOVE ALL 0
30303030 .
MOVE ALL 'A1'
41314131 .
MOVE ALL '21'
32313231 .
MOVE HIGH-VALUES TO (1:)
FFFFFFFF .
MOVE HIGH-VALUES TO BIGFLT
BIGFLT is NaN
FFFFFFFF .
MOVE QUOTE TO BIGFLT
BIGFLT is 2.1973164E-18
22222222 .
MOVE ALL * TO BIGFLT
BIGFLT is 5.4312347E+12
MOVE ALL '21' TO BIGFLT
BIGFLT is 2.1212121E+37
], [])

AT_CLEANUP


AT_SETUP([CALL RETURNING])
AT_KEYWORDS([runmisc GIVING RETURN-CODE])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       PROCEDURE        DIVISION.
           MOVE 43 TO RETURN-CODE
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77 my-display-return   PIC 99.
       77 my-binary-return    USAGE BINARY-LONG.
       PROCEDURE        DIVISION.
           CALL "callee" RETURNING my-display-return
           END-CALL
           IF RETURN-CODE NOT = 0
              DISPLAY '1 - unexpected RETURN-CODE: ' RETURN-CODE.
           IF my-display-return NOT = 43
              DISPLAY '1- unexpected RETURNING: ' my-display-return.
      *>
           STOP RUN.
])

AT_CHECK([$COMPILE -static caller.cob callee.cob -o prog], [0], [], [])
#AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [], [])

AT_CLEANUP


# PROCEDURE DIVISION RETURNING OMITTED, CALL RETURNING NOTHING
AT_SETUP([void PROCEDURE, NOTHING return])
AT_KEYWORDS([runmisc PROCEDURE USING RETURNING OMITTED CALL GIVING])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       PROCEDURE        DIVISION RETURNING OMITTED.
           MOVE 43 TO RETURN-CODE
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       PROCEDURE        DIVISION.
           MOVE 42 TO RETURN-CODE
           CALL "callee" RETURNING NOTHING
           END-CALL.
           IF RETURN-CODE NOT = 42
              DISPLAY 'unexpected RETURN-CODE: ' RETURN-CODE.
           STOP RUN.
])

AT_CHECK([$COMPILE -static caller.cob callee.cob -o prog], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [42], [], [])
AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [42], [], [])

AT_CLEANUP


# Checks both -ftrace(all), which needs to be manually set
# and    -fsource-location, which is implied by -debug/g
AT_SETUP([READY TRACE / RESET TRACE])
AT_KEYWORDS([runmisc -ftrace -ftraceall -fsource-location
CALL RECURSIVE RETURN-CODE SEARCH
COB_PHYSICAL_CANCEL COB_PRE_LOAD])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
      *>
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 ttab.
          03 tentries   PIC 9 VALUE 0.
          03 tentry     OCCURS 0 TO 5    DEPENDING ON tentries
                        ASCENDING KEY tkey INDEXED BY tidx.
             05 tkey    pic x(3).
      *>
       PROCEDURE        DIVISION.
           READY TRACE
           MOVE 1 TO RETURN-CODE
           RESET TRACE
           CALL "callee1"
           END-CALL
           READY TRACE
           MOVE 2 TO RETURN-CODE
           CALL "callee1"
           END-CALL
           CALL "callee1"
           CANCEL "callee1"
           CALL "callrec"
           MOVE 0 TO RETURN-CODE
      *>
           SEARCH ALL tentry
              AT END
                 ADD  1    TO tentries
                 SET  tidx TO tentries
                 MOVE 'A'  TO tkey(tidx)
              WHEN tkey(tidx) = 'A'
                 DISPLAY '*Magic*'
           END-SEARCH
      *> tidx is still one, expect a direct find
           SEARCH tentry
              AT END
                 DISPLAY '*Dark Magic*'
              WHEN tkey(tidx) = 'A'
                 ADD  1    TO tentries
                 SET  tidx TO tentries
                 MOVE 'B'  TO tkey(tidx)
           END-SEARCH
      *> tidx is still two, expect end
           SEARCH tentry
              VARYING tidx
              AT END
                 ADD  1    TO tentries
                 SET  tidx TO tentries
                 MOVE 'C'  TO tkey(tidx)
              WHEN tkey(tidx) = 'A'
                 DISPLAY '* Darker Magic *'
           END-SEARCH
           SEARCH ALL tentry
              AT END
                 DISPLAY 'NO COMMENT'
              WHEN tkey(tidx) = 'C'
                 CONTINUE
           END-SEARCH
      *>
           STOP RUN.
])

AT_DATA([callee1.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee1.
       PROCEDURE        DIVISION.
           ADD 1 TO RETURN-CODE
             NOT ON SIZE ERROR
               IF RETURN-CODE = 1
                 CONTINUE
               ELSE IF RETURN-CODE = 2
                 CONTINUE
               ELSE
                 CONTINUE
           .
           EVALUATE RETURN-CODE
           WHEN 1
             CONTINUE
           WHEN 2
           WHEN 3
             CONTINUE
           WHEN OTHER
             CONTINUE
           END-EVALUATE
           EVALUATE TRUE
           WHEN RETURN-CODE = 1
             CONTINUE
           WHEN RETURN-CODE = 2
           WHEN RETURN-CODE = 3
             CONTINUE
           WHEN OTHER
             CONTINUE
           END-EVALUATE
           CALL "callee2"  END-CALL
           CANCEL "callee2"  CALL "callee2b" END-CALL  CANCEL "callee2b"
           SUBTRACT 1 FROM RETURN-CODE
           EXIT PROGRAM.
])

AT_DATA([callee2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee2.
       PROCEDURE        DIVISION.
           COMPUTE RETURN-CODE
                 = 1 + 1
              ON SIZE ERROR
                 MOVE -1 TO RETURN-CODE
              NOT ON SIZE ERROR
                 COMPUTE RETURN-CODE
                       = 1 + 1
                 END-COMPUTE
           END-COMPUTE.
           CALL "callee2c" END-CALL
           CANCEL "callee2c"
           MOVE 0 TO RETURN-CODE.
           EXIT PROGRAM.
])

AT_DATA([preload.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee2b.
       PROCEDURE        DIVISION.
       DECLARATIVES.
       DEC SECTION. USE EXCEPTION CONDITION EC-BOUNDS.
           DISPLAY "BADDY".
       END DECLARATIVES.
       SOME-SEC SECTION.
       SOME-PAR.
           PERFORM OTHER-SEC
           MOVE 0 TO RETURN-CODE.
       ENTRY "LEAVE-ME".
       END-PAR.
           EXIT PROGRAM.
       OTHER-SEC SECTION.
           COMPUTE RETURN-CODE = 1 + 2 END-COMPUTE.
       EX. EXIT.
])

AT_DATA([preload2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callrec IS RECURSIVE.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 filler        PIC 9 VALUE 0.
          88 first-call VALUE 0.
          88 called     VALUE 1.
       PROCEDURE        DIVISION.
       SOME-SEC SECTION.
           IF first-call
              SET called TO TRUE
              CALL 'callrec'
           END-IF
           GOBACK.
])

AT_DATA([callee2c.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee2c.
       PROCEDURE        DIVISION.
       SOME-SEC SECTION.
       SOME-PAR.
           PERFORM OTHER-SEC
           MOVE 0 TO RETURN-CODE.
       END-PAR.
           EXIT PROGRAM.
       OTHER-SEC SECTION.
           COMPUTE RETURN-CODE = 1 + 2.
       EX. EXIT.
])

AT_CHECK([COB_OLD_TRACE=y \
$COBC -ftraceall callee1.cob], [0], [], [])
AT_CHECK([COB_OLD_TRACE=y \
$COBC callee2.cob], [0], [], [])
AT_CHECK([COB_OLD_TRACE=y \
$COBC -ftrace -w preload.cob], [0], [], [])
AT_CHECK([COB_OLD_TRACE=y \
$COBC -ftraceall preload2.cob], [0], [], [])
AT_CHECK([COB_OLD_TRACE=y \
$COBC -fsource-location callee2c.cob], [0], [], [])
AT_CHECK([COB_OLD_TRACE=y \
$COBC -x -o prog -ftraceall caller.cob], [0], [], [])
AT_CHECK([COB_PHYSICAL_CANCEL=1 COB_PRE_LOAD="preload"$PATHSEP"preload2" $COBCRUN_DIRECT ./prog], [0], [],
[Source :    'caller.cob'
Program-Id: caller           Statement: MOVE                   Line: 15
Program-Id: caller           Statement: RESET TRACE            Line: 16
Program-Id: caller           Statement: MOVE                   Line: 20
Program-Id: caller           Statement: CALL                   Line: 21
Source:     'callee1.cob'
Program-Id: callee1          Entry:     callee1                Line: 5
Program-Id: callee1          Section:   (None)                 Line: 5
Program-Id: callee1          Paragraph: (None)                 Line: 5
Program-Id: callee1          Statement: ADD                    Line: 5
Program-Id: callee1          Statement: IF                     Line: 7
Program-Id: callee1          Statement: IF                     Line: 9
Program-Id: callee1          Statement: CONTINUE               Line: 12
Program-Id: callee1          Statement: EVALUATE               Line: 14
Program-Id: callee1          Statement: WHEN                   Line: 15
Program-Id: callee1          Statement: WHEN                   Line: 18
Program-Id: callee1          Statement: CONTINUE               Line: 21
Program-Id: callee1          Statement: EVALUATE               Line: 23
Program-Id: callee1          Statement: WHEN                   Line: 24
Program-Id: callee1          Statement: WHEN                   Line: 27
Program-Id: callee1          Statement: CONTINUE               Line: 30
Program-Id: callee1          Statement: CALL                   Line: 32
Source :    'callee2c.cob'
Program-Id: callee2c         Statement: PERFORM                Line: 7
Program-Id: callee2c         Statement: COMPUTE                Line: 12
Program-Id: callee2c         Statement: EXIT                   Line: 13
Program-Id: callee2c         Statement: MOVE                   Line: 8
Program-Id: callee2c         Statement: EXIT PROGRAM           Line: 10
Source :    'callee1.cob'
Program-Id: callee1          Statement: CANCEL                 Line: 33
Program-Id: callee1          Statement: CALL                   Line: 33
Source:     'preload.cob'
Program-Id: callee2b         Entry:     callee2b               Line: 8
Program-Id: callee2b         Section:   SOME-SEC               Line: 9
Program-Id: callee2b         Paragraph: SOME-PAR               Line: 10
Program-Id: callee2b         Section:   OTHER-SEC              Line: 16
Program-Id: callee2b         Paragraph: (None)                 Line: 16
Program-Id: callee2b         Paragraph: EX                     Line: 18
Program-Id: callee2b         Entry:     LEAVE-ME               Line: 13
Program-Id: callee2b         Paragraph: END-PAR                Line: 14
Program-Id: callee2b         Exit:      callee2b
Source :    'callee1.cob'
Program-Id: callee1          Statement: CANCEL                 Line: 33
Program-Id: callee1          Statement: SUBTRACT               Line: 34
Program-Id: callee1          Statement: EXIT PROGRAM           Line: 35
Program-Id: callee1          Exit:      callee1
Source :    'caller.cob'
Program-Id: caller           Statement: CALL                   Line: 23
Source:     'callee1.cob'
Program-Id: callee1          Entry:     callee1                Line: 5
Program-Id: callee1          Section:   (None)                 Line: 5
Program-Id: callee1          Paragraph: (None)                 Line: 5
Program-Id: callee1          Statement: ADD                    Line: 5
Program-Id: callee1          Statement: IF                     Line: 7
Program-Id: callee1          Statement: IF                     Line: 9
Program-Id: callee1          Statement: CONTINUE               Line: 12
Program-Id: callee1          Statement: EVALUATE               Line: 14
Program-Id: callee1          Statement: WHEN                   Line: 15
Program-Id: callee1          Statement: WHEN                   Line: 18
Program-Id: callee1          Statement: CONTINUE               Line: 21
Program-Id: callee1          Statement: EVALUATE               Line: 23
Program-Id: callee1          Statement: WHEN                   Line: 24
Program-Id: callee1          Statement: WHEN                   Line: 27
Program-Id: callee1          Statement: CONTINUE               Line: 30
Program-Id: callee1          Statement: CALL                   Line: 32
Source :    'callee2c.cob'
Program-Id: callee2c         Statement: PERFORM                Line: 7
Program-Id: callee2c         Statement: COMPUTE                Line: 12
Program-Id: callee2c         Statement: EXIT                   Line: 13
Program-Id: callee2c         Statement: MOVE                   Line: 8
Program-Id: callee2c         Statement: EXIT PROGRAM           Line: 10
Source :    'callee1.cob'
Program-Id: callee1          Statement: CANCEL                 Line: 33
Program-Id: callee1          Statement: CALL                   Line: 33
Source:     'preload.cob'
Program-Id: callee2b         Entry:     callee2b               Line: 8
Program-Id: callee2b         Section:   SOME-SEC               Line: 9
Program-Id: callee2b         Paragraph: SOME-PAR               Line: 10
Program-Id: callee2b         Section:   OTHER-SEC              Line: 16
Program-Id: callee2b         Paragraph: (None)                 Line: 16
Program-Id: callee2b         Paragraph: EX                     Line: 18
Program-Id: callee2b         Entry:     LEAVE-ME               Line: 13
Program-Id: callee2b         Paragraph: END-PAR                Line: 14
Program-Id: callee2b         Exit:      callee2b
Source :    'callee1.cob'
Program-Id: callee1          Statement: CANCEL                 Line: 33
Program-Id: callee1          Statement: SUBTRACT               Line: 34
Program-Id: callee1          Statement: EXIT PROGRAM           Line: 35
Program-Id: callee1          Exit:      callee1
Source :    'caller.cob'
Program-Id: caller           Statement: CANCEL                 Line: 24
Program-Id: caller           Statement: CALL                   Line: 25
Source:     'preload2.cob'
Program-Id: callrec          Entry:     callrec                Line: 10
Program-Id: callrec          Section:   SOME-SEC               Line: 10
Program-Id: callrec          Paragraph: (None)                 Line: 10
Program-Id: callrec          Statement: IF                     Line: 11
Program-Id: callrec          Statement: SET                    Line: 12
Program-Id: callrec          Statement: CALL                   Line: 13
Program-Id: callrec          Entry:     callrec                Line: 10
Program-Id: callrec          Section:   SOME-SEC               Line: 10
Program-Id: callrec          Paragraph: (None)                 Line: 10
Program-Id: callrec          Statement: IF                     Line: 11
Program-Id: callrec          Statement: GOBACK                 Line: 15
Program-Id: callrec          Exit:      callrec
Program-Id: callrec          Statement: GOBACK                 Line: 15
Program-Id: callrec          Exit:      callrec
Source :    'caller.cob'
Program-Id: caller           Statement: MOVE                   Line: 26
Program-Id: caller           Statement: SEARCH ALL             Line: 28
Program-Id: caller           Statement: AT END                 Line: 29
Program-Id: caller           Statement: ADD                    Line: 30
Program-Id: caller           Statement: SET                    Line: 31
Program-Id: caller           Statement: MOVE                   Line: 32
Program-Id: caller           Statement: SEARCH                 Line: 37
Program-Id: caller           Statement: WHEN                   Line: 40
Program-Id: caller           Statement: ADD                    Line: 41
Program-Id: caller           Statement: SET                    Line: 42
Program-Id: caller           Statement: MOVE                   Line: 43
Program-Id: caller           Statement: SEARCH                 Line: 46
Program-Id: caller           Statement: WHEN                   Line: 52
Program-Id: caller           Statement: SEARCH VARYING         Line: 47
Program-Id: caller           Statement: AT END                 Line: 48
Program-Id: caller           Statement: ADD                    Line: 49
Program-Id: caller           Statement: SET                    Line: 50
Program-Id: caller           Statement: MOVE                   Line: 51
Program-Id: caller           Statement: SEARCH ALL             Line: 55
Program-Id: caller           Statement: WHEN                   Line: 58
Program-Id: caller           Statement: CONTINUE               Line: 59
Program-Id: caller           Statement: STOP RUN               Line: 62
])

AT_CHECK([$COBC -ftraceall callee1.cob], [0], [], [])
AT_CHECK([$COBC callee2.cob], [0], [], [])
AT_CHECK([$COBC -ftrace -w preload.cob], [0], [], [])
AT_CHECK([$COBC -ftraceall preload2.cob], [0], [], [])
AT_CHECK([$COBC -fsource-location -w callee2c.cob], [0], [], [])
AT_CHECK([$COBC -x -o prog -ftraceall caller.cob], [0], [], [])
AT_CHECK([COB_PHYSICAL_CANCEL=1 COB_PRE_LOAD="preload"$PATHSEP"preload2" $COBCRUN_DIRECT ./prog], [0], [],
[Source: 'caller.cob'
Program-Id:  caller
Program-Id:  caller                      MOVE                            Line:     15
Program-Id:  caller                      RESET TRACE                     Line:     16
Program-Id:  caller                      MOVE                            Line:     20
Program-Id:  caller                      CALL                            Line:     21
Source: 'callee1.cob'
Program-Id:  callee1
Program-Id:  callee1              Entry: callee1                         Line:      5
Program-Id:  callee1                     ADD                             Line:      5
Program-Id:  callee1                     IF                              Line:      7
Program-Id:  callee1                     IF                              Line:      9
Program-Id:  callee1                     CONTINUE                        Line:     12
Program-Id:  callee1                     EVALUATE                        Line:     14
Program-Id:  callee1                     WHEN                            Line:     15
Program-Id:  callee1                     WHEN                            Line:     18
Program-Id:  callee1                     CONTINUE                        Line:     21
Program-Id:  callee1                     EVALUATE                        Line:     23
Program-Id:  callee1                     WHEN                            Line:     24
Program-Id:  callee1                     WHEN                            Line:     27
Program-Id:  callee1                     CONTINUE                        Line:     30
Program-Id:  callee1                     CALL                            Line:     32
Program-Id:  callee1                     CANCEL                          Line:     33
Program-Id:  callee1                     CALL                            Line:     33
Source: 'preload.cob'
Program-Id:  callee2b
Program-Id:  callee2b             Entry: callee2b                        Line:      8
Program-Id:  callee2b           Section: SOME-SEC                        Line:      9
Program-Id:  callee2b         Paragraph: SOME-PAR                        Line:     10
Program-Id:  callee2b           Section: OTHER-SEC                       Line:     16
Program-Id:  callee2b         Paragraph: EX                              Line:     18
Program-Id:  callee2b             Entry: LEAVE-ME                        Line:     18
Program-Id:  callee2b         Paragraph: END-PAR                         Line:     14
Program-Id:  callee2b              Exit: callee2b                        Line:     14
Source: 'callee1.cob'
Program-Id:  callee1
Program-Id:  callee1                     CANCEL                          Line:     33
Program-Id:  callee1                     SUBTRACT                        Line:     34
Program-Id:  callee1                     EXIT PROGRAM                    Line:     35
Program-Id:  callee1               Exit: callee1                         Line:     35
Source: 'caller.cob'
Program-Id:  caller
Program-Id:  caller                      CALL                            Line:     23
Source: 'callee1.cob'
Program-Id:  callee1
Program-Id:  callee1              Entry: callee1                         Line:      5
Program-Id:  callee1                     ADD                             Line:      5
Program-Id:  callee1                     IF                              Line:      7
Program-Id:  callee1                     IF                              Line:      9
Program-Id:  callee1                     CONTINUE                        Line:     12
Program-Id:  callee1                     EVALUATE                        Line:     14
Program-Id:  callee1                     WHEN                            Line:     15
Program-Id:  callee1                     WHEN                            Line:     18
Program-Id:  callee1                     CONTINUE                        Line:     21
Program-Id:  callee1                     EVALUATE                        Line:     23
Program-Id:  callee1                     WHEN                            Line:     24
Program-Id:  callee1                     WHEN                            Line:     27
Program-Id:  callee1                     CONTINUE                        Line:     30
Program-Id:  callee1                     CALL                            Line:     32
Program-Id:  callee1                     CANCEL                          Line:     33
Program-Id:  callee1                     CALL                            Line:     33
Source: 'preload.cob'
Program-Id:  callee2b
Program-Id:  callee2b             Entry: callee2b                        Line:      8
Program-Id:  callee2b           Section: SOME-SEC                        Line:      9
Program-Id:  callee2b         Paragraph: SOME-PAR                        Line:     10
Program-Id:  callee2b           Section: OTHER-SEC                       Line:     16
Program-Id:  callee2b         Paragraph: EX                              Line:     18
Program-Id:  callee2b             Entry: LEAVE-ME                        Line:     18
Program-Id:  callee2b         Paragraph: END-PAR                         Line:     14
Program-Id:  callee2b              Exit: callee2b                        Line:     14
Source: 'callee1.cob'
Program-Id:  callee1
Program-Id:  callee1                     CANCEL                          Line:     33
Program-Id:  callee1                     SUBTRACT                        Line:     34
Program-Id:  callee1                     EXIT PROGRAM                    Line:     35
Program-Id:  callee1               Exit: callee1                         Line:     35
Source: 'caller.cob'
Program-Id:  caller
Program-Id:  caller                      CANCEL                          Line:     24
Program-Id:  caller                      CALL                            Line:     25
Source: 'preload2.cob'
Program-Id:  callrec
Program-Id:  callrec              Entry: callrec                         Line:     10
Program-Id:  callrec            Section: SOME-SEC                        Line:     10
Program-Id:  callrec                     IF                              Line:     11
Program-Id:  callrec                     SET                             Line:     12
Program-Id:  callrec                     CALL                            Line:     13
Program-Id:  callrec              Entry: callrec                         Line:     10
Program-Id:  callrec            Section: SOME-SEC                        Line:     10
Program-Id:  callrec                     IF                              Line:     11
Program-Id:  callrec                     GOBACK                          Line:     15
Program-Id:  callrec               Exit: callrec                         Line:     15
Program-Id:  callrec                     GOBACK                          Line:     15
Program-Id:  callrec               Exit: callrec                         Line:     15
Source: 'caller.cob'
Program-Id:  caller
Program-Id:  caller                      MOVE                            Line:     26
Program-Id:  caller                      SEARCH ALL                      Line:     28
Program-Id:  caller                      AT END                          Line:     29
Program-Id:  caller                      ADD                             Line:     30
Program-Id:  caller                      SET                             Line:     31
Program-Id:  caller                      MOVE                            Line:     32
Program-Id:  caller                      SEARCH                          Line:     37
Program-Id:  caller                      WHEN                            Line:     40
Program-Id:  caller                      ADD                             Line:     41
Program-Id:  caller                      SET                             Line:     42
Program-Id:  caller                      MOVE                            Line:     43
Program-Id:  caller                      SEARCH                          Line:     46
Program-Id:  caller                      WHEN                            Line:     52
Program-Id:  caller                      SEARCH VARYING                  Line:     47
Program-Id:  caller                      AT END                          Line:     48
Program-Id:  caller                      ADD                             Line:     49
Program-Id:  caller                      SET                             Line:     50
Program-Id:  caller                      MOVE                            Line:     51
Program-Id:  caller                      SEARCH ALL                      Line:     55
Program-Id:  caller                      WHEN                            Line:     55
Program-Id:  caller                      CONTINUE                        Line:     59
Program-Id:  caller                      STOP RUN                        Line:     62
])

AT_CLEANUP


AT_SETUP([Trace feature with subroutine])
#AT_KEYWORDS([Trace])

# FIXME: check if the one above is enough and either
#        remove this test or exchange by a non-IDX version
AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])

AT_DATA([callsub.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. callsub.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 NUM-A     PIC 9(3) VALUE 399.
       01 NUM-B     PIC 9(3) VALUE 211.
       01 RSLT      PIC 9(5)V99.

       LINKAGE SECTION.
       01  n PIC 99.

       PROCEDURE DIVISION USING n.
       MAIN-10.
           ADD 1 TO n.
           COMPUTE RSLT = ((NUM-A / (100.55 + -0.550))
                         -  (NUM-B / (10.11 * 10 - 1.1)))
                             * (220 / 2.2) * n.
       END PROGRAM callsub.
])

AT_CHECK([$COMPILE_MODULE callsub.cob], [0], [], [])


AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.

       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT OPTIONAL TSPFILE
           ASSIGN TO "testisam"
           ORGANIZATION INDEXED ACCESS DYNAMIC
           RECORD KEY IS CM-CUST-NUM
           ALTERNATE RECORD KEY IS CM-TELEPHONE WITH DUPLICATES
           ALTERNATE RECORD KEY IS CM-DISK WITH DUPLICATES
           FILE STATUS IS CUST-STAT.

           SELECT TSTFILE
           ASSIGN TO "testisam"
           ORGANIZATION INDEXED ACCESS DYNAMIC
           RECORD KEY IS TS-CUST-NUM
           ALTERNATE RECORD KEY IS TS-TELEPHONE WITH DUPLICATES
           ALTERNATE RECORD KEY IS TS-DISK WITH DUPLICATES
           FILE STATUS IS CUST-STAT.

           SELECT FLATFILE
           ASSIGN EXTERNAL RELFIX
           ORGANIZATION RELATIVE
           ACCESS IS RANDOM RELATIVE KEY IS REC-NUM
           FILE STATUS IS CUST-STAT.

       DATA  DIVISION.
       FILE SECTION.
       FD  TSPFILE
           BLOCK CONTAINS 5 RECORDS.

       01  TSPFL-RECORD.
           05  TSPFL-REC.
           10  CM-CUST-NUM.
             15  CM-CUST-PRE                   PICTURE X(3).
             15  CM-CUST-NNN                   PICTURE X(5).
           10  CM-STATUS                       PICTURE X.
           10  CM-COMPANY                      PICTURE X(25).
           10  CM-ADDRESS-1                    PICTURE X(25).
           10  CM-ADDRESS-2                    PICTURE X(25).
           10  CM-ADDRESS-3                    PICTURE X(25).
           10  CM-TELEPHONE                    PICTURE 9(10).
           10  CM-DP-MGR                       PICTURE X(25).
           10  CM-MACHINE                      PICTURE X(8).
           10  CM-MEMORY                       PICTURE X(4).
           10  CM-DISK                         PICTURE X(8).
           10  CM-TAPE                         PICTURE X(8).
           10  CM-NO-TERMINALS                 PICTURE 9(5).

       FD  TSTFILE
           BLOCK CONTAINS 5 RECORDS.

       01  TSTFL-RECORD.
           05  TSTFL-REC.
           10  TS-CUST-NUM                     PICTURE X(8).
           10  TS-STATUS                       PICTURE X.
           10  TS-COMPANY                      PICTURE X(25).
           10  TS-ADDRESS-1                    PICTURE X(25).
           10  TS-ADDRESS-2                    PICTURE X(25).
           10  TS-ADDRESS-3                    PICTURE X(25).
           10  TS-TELEPHONE                    PICTURE 9(10).
           10  TS-DP-MGR                       PICTURE X(25).
           10  TS-MACHINE                      PICTURE X(8).
           10  TS-MEMORY                       PICTURE X(4).
           10  TS-DISK                         PICTURE X(8).
           10  TS-TAPE                         PICTURE X(8).

       FD  FLATFILE
           BLOCK CONTAINS 5 RECORDS.

       01  TSP2-RECORD.
           10  C2-CUST-NUM                     PICTURE X(8).
           10  C2-COMPANY                      PICTURE X(25).
           10  C2-DISK                         PICTURE X(8).
           10  C2-NO-TERMINALS                 PICTURE 9(4) COMP-4.
           10  C2-PK-DATE                      PICTURE S9(14) COMP-3.

       WORKING-STORAGE SECTION.

       01  CUST-STAT.
           05  FILLER PICTURE XX.
       77  MAX-SUB           VALUE  16         PICTURE 9(5) COMP SYNC.
       77  CALL-NUM          VALUE  00         PICTURE 99.

       01  TEST-DATA.

         02  DATA-CUST-NUM-TBL.

           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "GAM00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
           05  FILLER PIC X(8) VALUE "GIB00000".
           05  FILLER PIC X(8) VALUE "H&J00000".
           05  FILLER PIC X(8) VALUE "INC00000".
           05  FILLER PIC X(8) VALUE "JOH00000".
           05  FILLER PIC X(8) VALUE "KON00000".
           05  FILLER PIC X(8) VALUE "LEW00000".
           05  FILLER PIC X(8) VALUE "MOR00000".
           05  FILLER PIC X(8) VALUE "NEW00000".
           05  FILLER PIC X(8) VALUE "OLD00000".
           05  FILLER PIC X(8) VALUE "PRE00000".

         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 16.
         02  DATA-COMPANY-TBL.

           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
           05  FILLER PIC X(25) VALUE "GIBRALTER LIFE INSURANCE ".
           05  FILLER PIC X(25) VALUE "H & J PLUMBING SUPPLIES  ".
           05  FILLER PIC X(25) VALUE "INCREMENTAL BACKUP CORP. ".
           05  FILLER PIC X(25) VALUE "JOHNSON BOATING SUPPLIES ".
           05  FILLER PIC X(25) VALUE "KONFLAB PLASTIC PRODUCTS.".
           05  FILLER PIC X(25) VALUE "LEWISTON GRAPHICS LTD.   ".
           05  FILLER PIC X(25) VALUE "MORNINGSIDE CARPENTRY.   ".
           05  FILLER PIC X(25) VALUE "NEW WAVE SURF SHOPS INC. ".
           05  FILLER PIC X(25) VALUE "OLD TYME PIZZA MFG. CO.  ".
           05  FILLER PIC X(25) VALUE "PRESTIGE OFFICE FURNITURE".

         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 16.
         02  DATA-ADDRESS-1-TBL.

           05  FILLER PIC X(25) VALUE "123 MAIN STREET          ".
           05  FILLER PIC X(25) VALUE "1090 2ND AVE. WEST       ".
           05  FILLER PIC X(25) VALUE "1401 JEFFERSON BLVD.     ".
           05  FILLER PIC X(25) VALUE "1620 ARIZONA WAY         ".
           05  FILLER PIC X(25) VALUE "1184 EAST FIRST STREET   ".
           05  FILLER PIC X(25) VALUE "114 JOHN F. KENNEDY AVE. ".
           05  FILLER PIC X(25) VALUE "650 LIBERTY CRESCENT     ".
           05  FILLER PIC X(25) VALUE "77 SUNSET BLVD.          ".
           05  FILLER PIC X(25) VALUE "10908 SANTA MONICA BLVD. ".
           05  FILLER PIC X(25) VALUE "1134 PARIS ROAD          ".
           05  FILLER PIC X(25) VALUE "808 NORTHWEST MAIN ST.   ".
           05  FILLER PIC X(25) VALUE "9904 QUEEN STREET        ".
           05  FILLER PIC X(25) VALUE "1709 DUNDAS CRESCENT W.  ".
           05  FILLER PIC X(25) VALUE "3240 MARIS AVENUE        ".
           05  FILLER PIC X(25) VALUE "1705 WISCONSIN ROAD      ".
           05  FILLER PIC X(25) VALUE "114A MAPLE GROVE         ".

         02  DATA-ADDRESS-1 REDEFINES DATA-ADDRESS-1-TBL
                                       PIC X(25) OCCURS 16.
         02  DATA-ADDRESS-2-TBL.

           05  FILLER PIC X(10) VALUE "NEW YORK  ".
           05  FILLER PIC X(10) VALUE "ATLANTA   ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "TORONTO   ".
           05  FILLER PIC X(10) VALUE "CALGARY   ".
           05  FILLER PIC X(10) VALUE "SAN DIEGO ".
           05  FILLER PIC X(10) VALUE "LOS RIOS  ".
           05  FILLER PIC X(10) VALUE "MADISON   ".
           05  FILLER PIC X(10) VALUE "WILBUR    ".
           05  FILLER PIC X(10) VALUE "TOPEKA    ".
           05  FILLER PIC X(10) VALUE "SEATTLE   ".
           05  FILLER PIC X(10) VALUE "NEW JERSEY".
           05  FILLER PIC X(10) VALUE "FORT WAYNE".
           05  FILLER PIC X(10) VALUE "COLUMBUS  ".
           05  FILLER PIC X(10) VALUE "RICHMOND  ".
           05  FILLER PIC X(10) VALUE "WHITEPLAIN".

         02  DATA-ADDRESS-2 REDEFINES DATA-ADDRESS-2-TBL
                                       PIC X(10) OCCURS 16.
         02  DATA-ADDRESS-3-TBL.

           05  FILLER PIC X(10) VALUE "N.Y.      ".
           05  FILLER PIC X(10) VALUE "GEORGIA   ".
           05  FILLER PIC X(10) VALUE "D.C.      ".
           05  FILLER PIC X(10) VALUE "CANADA    ".
           05  FILLER PIC X(10) VALUE "CANADA    ".
           05  FILLER PIC X(10) VALUE "CALIFORNIA".
           05  FILLER PIC X(10) VALUE "NEW MEXICO".
           05  FILLER PIC X(10) VALUE "WISCONSIN ".
           05  FILLER PIC X(10) VALUE "DELAWARE  ".
           05  FILLER PIC X(10) VALUE "KANSAS    ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "N.J.      ".
           05  FILLER PIC X(10) VALUE "COLORADO  ".
           05  FILLER PIC X(10) VALUE "OHIO      ".
           05  FILLER PIC X(10) VALUE "VIRGINIA  ".
           05  FILLER PIC X(10) VALUE "N.Y.      ".

         02  DATA-ADDRESS-3 REDEFINES DATA-ADDRESS-3-TBL
                                       PIC X(10) OCCURS 16.
         02  DATA-TELEPHONE-TBL.

           05  FILLER PIC 9(10) VALUE 3131234432.
           05  FILLER PIC 9(10) VALUE 4082938498.
           05  FILLER PIC 9(10) VALUE 8372487274.
           05  FILLER PIC 9(10) VALUE 4169898509.
           05  FILLER PIC 9(10) VALUE 5292398745.
           05  FILLER PIC 9(10) VALUE 8009329492.
           05  FILLER PIC 9(10) VALUE 6456445643.
           05  FILLER PIC 9(10) VALUE 6546456333.
           05  FILLER PIC 9(10) VALUE 3455445444.
           05  FILLER PIC 9(10) VALUE 6456445643.
           05  FILLER PIC 9(10) VALUE 7456434355.
           05  FILLER PIC 9(10) VALUE 6554456433.
           05  FILLER PIC 9(10) VALUE 4169898509.
           05  FILLER PIC 9(10) VALUE 7534587453.
           05  FILLER PIC 9(10) VALUE 8787458374.
           05  FILLER PIC 9(10) VALUE 4169898509.

         02  DATA-TELEPHONE REDEFINES DATA-TELEPHONE-TBL
                                       PIC 9(10) OCCURS 16.
         02  DATA-DP-MGR-TBL.

           05  FILLER PIC X(20) VALUE "MR. DAVE HARRIS     ".
           05  FILLER PIC X(20) VALUE "MS. JANICE SILCOX   ".
           05  FILLER PIC X(20) VALUE "MR. ALLAN JONES     ".
           05  FILLER PIC X(20) VALUE "MR. PETER MACKAY    ".
           05  FILLER PIC X(20) VALUE "MRS. DONNA BREWER   ".
           05  FILLER PIC X(20) VALUE "MR. MICHAEL SMYTHE  ".
           05  FILLER PIC X(20) VALUE "MR. D.A. MORRISON   ".
           05  FILLER PIC X(20) VALUE "MR. BRIAN PATTERSON ".
           05  FILLER PIC X(20) VALUE "MR. DARRYL TOWNSEND ".
           05  FILLER PIC X(20) VALUE "MS. VALERIE HARPER  ".
           05  FILLER PIC X(20) VALUE "MR. FRED MILLER     ".
           05  FILLER PIC X(20) VALUE "MR. DONALD FISCHER  ".
           05  FILLER PIC X(20) VALUE "MR. STEVEN YOURDIN  ".
           05  FILLER PIC X(20) VALUE "MS. Goldie Hawn     ".
           05  FILLER PIC X(20) VALUE "MS. ALICE WINSTON   ".
           05  FILLER PIC X(20) VALUE "MR. THOMAS JEFFERSON".

         02  DATA-DP-MGR    REDEFINES DATA-DP-MGR-TBL
                                       PIC X(20) OCCURS 16.
         02  DATA-MACHINE-TBL.

           05  FILLER PIC X(8) VALUE "UNI-9030".
           05  FILLER PIC X(8) VALUE "UNI-9040".
           05  FILLER PIC X(8) VALUE "UNI-80/3".
           05  FILLER PIC X(8) VALUE "UNI-80/5".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-9040".
           05  FILLER PIC X(8) VALUE "UNI-9040".

         02  DATA-MACHINE   REDEFINES DATA-MACHINE-TBL
                                       PIC X(8) OCCURS 16.
         02  DATA-NO-TERMINALS-TBL.

           05  FILLER PIC 9(3) COMP-3 VALUE 85.
           05  FILLER PIC 9(3) COMP-3 VALUE 34.
           05  FILLER PIC 9(3) COMP-3 VALUE 75.
           05  FILLER PIC 9(3) COMP-3 VALUE 45.
           05  FILLER PIC 9(3) COMP-3 VALUE 90.
           05  FILLER PIC 9(3) COMP-3 VALUE 107.
           05  FILLER PIC 9(3) COMP-3 VALUE 67.
           05  FILLER PIC 9(3) COMP-3 VALUE 32.
           05  FILLER PIC 9(3) COMP-3 VALUE 16.
           05  FILLER PIC 9(3) COMP-3 VALUE 34.
           05  FILLER PIC 9(3) COMP-3 VALUE 128.
           05  FILLER PIC 9(3) COMP-3 VALUE 64.
           05  FILLER PIC 9(3) COMP-3 VALUE 110.
           05  FILLER PIC 9(3) COMP-3 VALUE 324.
           05  FILLER PIC 9(3) COMP-3 VALUE 124.
           05  FILLER PIC 9(3) COMP-3 VALUE 86.

         02  DATA-NO-TERMINALS REDEFINES DATA-NO-TERMINALS-TBL
                                       PIC 9(3) COMP-3 OCCURS 16.

       01  WORK-AREA.
           05  REC-NUM                         PICTURE 9(6) VALUE 0.
           05  REC-MAX                         PICTURE 9(6) VALUE 10.
           05  SUB                             PICTURE 9(4) COMP SYNC.
               88  ODD-RECORD                  VALUE 1 3 5 7 9 10 11.

           05  TSPFL-KEY                       PICTURE X(8).

       PROCEDURE DIVISION.

       MAINFILE.
           OPEN OUTPUT TSPFILE
           CLOSE TSPFILE.

           OPEN I-O TSPFILE
           MOVE '99' TO CUST-STAT
           READ  TSPFILE NEXT RECORD WITH NO LOCK
           IF CUST-STAT NOT = "10"
               DISPLAY "Error " CUST-STAT " on read of empty file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           MOVE LOW-VALUES                     TO TSPFL-RECORD.
           START TSPFILE KEY GREATER THAN CM-CUST-NUM
           IF CUST-STAT NOT = "23"
               DISPLAY "Error " CUST-STAT " starting empty file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           READ  TSPFILE NEXT RECORD WITH NO LOCK
           IF CUST-STAT NOT = "46"
               DISPLAY "Error " CUST-STAT " start/read of empty file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           DISPLAY "OK: Operations on empty file"
           CLOSE TSPFILE.

           PERFORM LOADFILE.
           PERFORM LISTFILE.



      *> check that multiple empty lines are handled correctly







           STOP RUN.

       LOADFILE.
           DISPLAY "Loading sample data file."
                            UPON CONSOLE.

           OPEN OUTPUT TSPFILE
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT
               " opening 'testisam' file" UPON CONSOLE
               STOP RUN
           END-IF.

           PERFORM 1000-LOAD-RECORD
                        VARYING SUB FROM 1 BY 1
                          UNTIL SUB > MAX-SUB.

           DISPLAY "Sample data file load complete."
                            UPON CONSOLE.
           CLOSE TSPFILE.

      *---------------------------------------------------------------*
      *         LOAD A RECORD FROM DATA TABLES                        *
      *---------------------------------------------------------------*

       1000-LOAD-RECORD.

           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE CM-CUST-NUM                  TO TSPFL-KEY.
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE DATA-ADDRESS-1     (SUB)     TO CM-ADDRESS-1.
           MOVE DATA-ADDRESS-2     (SUB)     TO CM-ADDRESS-2.
           MOVE DATA-ADDRESS-3     (SUB)     TO CM-ADDRESS-3.
           MOVE DATA-TELEPHONE     (SUB)     TO CM-TELEPHONE.
           MOVE DATA-DP-MGR        (SUB)     TO CM-DP-MGR.
           MOVE DATA-MACHINE       (SUB)     TO CM-MACHINE.
           MOVE DATA-NO-TERMINALS  (SUB)     TO CM-NO-TERMINALS.

           IF  ODD-RECORD
               MOVE "8417"                   TO CM-DISK
               MOVE "1600 BPI"               TO CM-TAPE
               MOVE "1MEG"                   TO CM-MEMORY
           ELSE
               MOVE "8470"                   TO CM-DISK
               MOVE "6250 BPI"               TO CM-TAPE
               MOVE "3MEG"                   TO CM-MEMORY.

           WRITE TSPFL-RECORD.
           IF CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "02"
               DISPLAY "Load - Key: " TSPFL-KEY ", Status: " CUST-STAT
                                 UPON CONSOLE.

       LISTFILE.
           DISPLAY "LIST SAMPLE FILE" UPON CONSOLE.
           OPEN INPUT TSTFILE
           MOVE SPACES                       TO TSTFL-RECORD.
           MOVE "PRE00000" TO CM-CUST-NUM.
           START TSTFILE KEY GREATER THAN OR EQUAL TO TS-CUST-NUM
           READ  TSTFILE NEXT RECORD
           READ  TSTFILE NEXT RECORD
           CLOSE TSTFILE.

           MOVE ZERO TO REC-NUM
           OPEN INPUT TSPFILE
           IF CUST-STAT NOT = "00"
               DISPLAY "ERROR " CUST-STAT " OPENING INPUT FILE"
                                             UPON CONSOLE
               STOP RUN
           END-IF.
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE "PRE00000" TO CM-CUST-NUM.
           START TSPFILE KEY GREATER THAN OR EQUAL TO CM-CUST-NUM
           READ  TSPFILE NEXT RECORD
           READ  TSPFILE NEXT RECORD

           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE "DEL00000" TO CM-CUST-NUM.
           START TSPFILE KEY GREATER THAN CM-CUST-NUM
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " starting file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           READ  TSPFILE NEXT RECORD WITH NO LOCK
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on 1st read of file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           PERFORM UNTIL CUST-STAT NOT = "00"  *> no WITH AFTER for trace check
                      OR REC-NUM > REC-MAX
               DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
               CALL "callsub" USING CALL-NUM
               READ TSPFILE NEXT RECORD
                    AT END
                        MOVE "99" TO CUST-STAT
               END-READ
               ADD 1 TO REC-NUM
           END-PERFORM
           IF CUST-STAT = "99"
               DISPLAY "Hit End of File: " CALL-NUM UPON CONSOLE
           ELSE
               DISPLAY "Stop read after: " CALL-NUM UPON CONSOLE
           END-IF.

           DISPLAY "LIST SAMPLE FILE DESCENDING" UPON CONSOLE.
           MOVE ZERO TO REC-NUM
           START TSPFILE KEY LESS THAN CM-CUST-NUM
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " starting file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           READ  TSPFILE PREVIOUS RECORD WITH NO LOCK
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on 1st read of file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           PERFORM  WITH TEST AFTER  UNTIL CUST-STAT NOT = "00"
                      OR REC-NUM > REC-MAX
               DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
               READ TSPFILE PREVIOUS RECORD
                    AT END
                        MOVE "99" TO CUST-STAT
               END-READ
               ADD 1 TO REC-NUM
           END-PERFORM.

           CLOSE TSPFILE.

           OPEN I-O TSPFILE.
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (2)       TO CM-CUST-NUM.
           MOVE 'X'                          TO CM-CUST-NUM (5:1).
           READ TSPFILE KEY IS CM-CUST-NUM
           IF  CUST-STAT NOT = "23"
               DISPLAY "Error " CUST-STAT " instead of 23."
                                UPON CONSOLE
           END-IF.
           MOVE DATA-CUST-NUM      (2)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (2)       TO CM-COMPANY.
           READ TSPFILE KEY IS CM-CUST-NUM
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on primary read ."
                                UPON CONSOLE
           ELSE
               DISPLAY "Got: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
           END-IF.
           READ TSPFILE NEXT RECORD
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on next read"
                                UPON CONSOLE
           ELSE
               DISPLAY "Nxt: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
           END-IF.
           MOVE DATA-TELEPHONE     (7)       TO CM-TELEPHONE.
           MOVE DATA-MACHINE       (7)       TO CM-MACHINE.
           READ TSPFILE KEY IS CM-TELEPHONE
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 23"
                                UPON CONSOLE
           ELSE
               DISPLAY "Ky2: " CM-CUST-NUM " is " CM-COMPANY
                        " Mach=" CM-MACHINE "."
                         UPON CONSOLE
           END-IF.
           WRITE TSPFL-RECORD
           IF  CUST-STAT NOT = "22"
               DISPLAY "Error " CUST-STAT " instead of 22"
                                UPON CONSOLE
           ELSE
               DISPLAY "  Write: " CM-CUST-NUM " got 22 as expected"
                         UPON CONSOLE
           END-IF.
           MOVE DATA-CUST-NUM      (3)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (3)       TO CM-COMPANY.
           READ TSPFILE KEY IS CM-CUST-NUM
           DISPLAY "   Read: " CM-CUST-NUM " got "
                         CUST-STAT " as expected "
                         CM-NO-TERMINALS " terminals"
                         UPON CONSOLE.
           ADD 5 TO CM-NO-TERMINALS
           REWRITE TSPFL-RECORD
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 00"
                                UPON CONSOLE
           ELSE

               DISPLAY "ReWrite: " CM-CUST-NUM " got "
                       CUST-STAT " as expected "
                       CM-NO-TERMINALS " terminals"
                       UPON CONSOLE
           END-IF.
           MOVE DATA-CUST-NUM      (2)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (2)       TO CM-COMPANY.
           READ TSPFILE KEY IS CM-CUST-NUM
           DISPLAY "   Read: " CM-CUST-NUM " got "
                         CUST-STAT " as expected "
                         CM-NO-TERMINALS " terminals"
                         UPON CONSOLE.
           MOVE DATA-CUST-NUM      (3)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (3)       TO CM-COMPANY.
           REWRITE TSPFL-RECORD
           IF  CUST-STAT NOT = "02"
           AND CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 00/02"
                                UPON CONSOLE
           ELSE
               DISPLAY "ReWrite: " CM-CUST-NUM " got "
                       "00/02 as expected"
                        UPON CONSOLE
           END-IF
           MOVE DATA-CUST-NUM      (6)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (6)       TO CM-COMPANY.
           READ TSPFILE KEY IS CM-CUST-NUM
           MOVE DATA-TELEPHONE     (7)       TO CM-TELEPHONE.
           MOVE DATA-MACHINE       (7)       TO CM-MACHINE.
           REWRITE TSPFL-RECORD
           IF  CUST-STAT NOT = "02"
           AND CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 00/02"
                                UPON CONSOLE
           ELSE
               DISPLAY "ReWrite: " CM-CUST-NUM " got "
                       "00/02 as expected"
                       UPON CONSOLE
           END-IF
           DELETE TSPFILE
           CLOSE TSPFILE.

       LOADFLAT.
           OPEN OUTPUT FLATFILE.
           PERFORM FLAT-RECORD
                        VARYING SUB FROM 1 BY 1
                          UNTIL SUB > MAX-SUB
                             OR SUB > 5.
           CLOSE FLATFILE.
           OPEN INPUT FLATFILE.
           MOVE 3 TO REC-NUM
           READ FLATFILE
           MOVE 999 TO REC-NUM
           READ FLATFILE
           CLOSE FLATFILE.

       FLAT-RECORD.

           MOVE SPACES                       TO TSP2-RECORD.
           MOVE SUB                          TO REC-NUM.
           MOVE DATA-CUST-NUM      (SUB)     TO C2-CUST-NUM.
           MOVE DATA-COMPANY       (SUB)     TO C2-COMPANY.
           MOVE DATA-NO-TERMINALS  (SUB)     TO C2-NO-TERMINALS.
           MOVE 20070319                     TO C2-PK-DATE.
           IF  ODD-RECORD
               MOVE "8417"                   TO C2-DISK
           ELSE
               MOVE "8470"                   TO C2-DISK.
           WRITE TSP2-RECORD.
])

AT_CHECK([$COMPILE -ftraceall prog.cob], [0], [], [])

# first run without runtime tracing
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[OK: Operations on empty file
Loading sample data file.
Sample data file load complete.
LIST SAMPLE FILE
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
Stop read after: 11
LIST SAMPLE FILE DESCENDING
Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
Got: BET00000 is BETA SHOE MFG. INC.       Disk=8470    .
Nxt: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=8470    .
Ky2: GIB00000 is GIBRALTER LIFE INSURANCE  Mach=UNI-80/6.
  Write: GIB00000 got 22 as expected
   Read: GAM00000 got 00 as expected 00075 terminals
ReWrite: GAM00000 got 00 as expected 00080 terminals
   Read: BET00000 got 00 as expected 00034 terminals
ReWrite: GAM00000 got 00/02 as expected
ReWrite: FOR00000 got 00/02 as expected
], [])

# not merged yet:
#export COB_TRACE_IO=Y
#export IO_TSPFILE=trace
#export IO_TSTFILE=no-trace

AT_CHECK([COB_TRACE_FILE=trace.txt \
COB_SET_TRACE=Y \
COB_TRACE_FORMAT="Line: %L %S" \
$COBCRUN_DIRECT ./prog], [0],
[OK: Operations on empty file
Loading sample data file.
Sample data file load complete.
LIST SAMPLE FILE
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
Stop read after: 11
LIST SAMPLE FILE DESCENDING
Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
Got: BET00000 is BETA SHOE MFG. INC.       Disk=8470    .
Nxt: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=8470    .
Ky2: GIB00000 is GIBRALTER LIFE INSURANCE  Mach=UNI-80/6.
  Write: GIB00000 got 22 as expected
   Read: GAM00000 got 00 as expected 00075 terminals
ReWrite: GAM00000 got 00 as expected 00080 terminals
   Read: BET00000 got 00 as expected 00034 terminals
ReWrite: GAM00000 got 00/02 as expected
ReWrite: FOR00000 got 00/02 as expected
], [])


AT_CAPTURE_FILE(./trace.txt)

# variant with file trace:
#AT_DATA([reference],
#[Source: 'prog.cob'
#Program-Id:  prog
#Line:    292     Entry: prog
#Line:    292 Paragraph: MAINFILE
#Line:    293            OPEN
#           OPEN OUTPUT TSPFILE -> 'testisam' Status: 00
#Line:    294            CLOSE
#           CLOSE TSPFILE Status: 00
#Line:    296            OPEN
#           OPEN I_O TSPFILE -> 'testisam' Status: 00
#Line:    297            MOVE
#Line:    298            READ
#           READ Sequential TSPFILE Status: 10
#Line:    299            IF
#Line:    304            MOVE
#Line:    305            START
#           START TSPFILE Status: 23
#           Key : ALL LOW-VALUES
#Line:    306            IF
#Line:    311            READ
#           READ Sequential TSPFILE Status: 46
#Line:    312            IF
#Line:    317            DISPLAY
#Line:    318            CLOSE
#           CLOSE TSPFILE Status: 00
#Line:    320            PERFORM
#Line:    335 Paragraph: LOADFILE
#Line:    336            DISPLAY
#Line:    339            OPEN
#           OPEN OUTPUT TSPFILE -> 'testisam' Status: 00
#Line:    340            IF
#Line:    346            PERFORM
#Line:    358 Paragraph: 1000-LOAD-RECORD
#Line:    360            MOVE
#Line:    361            MOVE
#Line:    362            MOVE
#Line:    363            MOVE
#Line:    364            MOVE
#Line:    365            MOVE
#Line:    366            MOVE
#Line:    367            MOVE
#Line:    368            MOVE
#Line:    369            MOVE
#Line:    370            MOVE
#Line:    372            IF
#Line:    373            MOVE
#Line:    374            MOVE
#Line:    375            MOVE
#Line:    381            WRITE
#           WRITE TSPFILE Status: 00
#        Record : 'ALP00000 ALPHA ELECTRICAL CO. LTD.123 MAIN STREET          NEW YORK             '
#                 '    N.Y.                     3131234432MR. DAVE HARRIS          UNI-90301MEG8417'
#                 '    1600 BPI00085'
#Line:    382            IF
#Line:    358 Paragraph: 1000-LOAD-RECORD
#Line:    360            MOVE
#Line:    361            MOVE
#Line:    362            MOVE
#Line:    363            MOVE
#Line:    364            MOVE
#Line:    365            MOVE
#Line:    366            MOVE
#Line:    367            MOVE
#Line:    368            MOVE
#Line:    369            MOVE
#Line:    370            MOVE
#Line:    372            IF
#Line:    377            MOVE
#Line:    378            MOVE
#Line:    379            MOVE
#Line:    381            WRITE
#           WRITE TSPFILE Status: 00
#        Record : 'BET00000 BETA SHOE MFG. INC.      1090 2ND AVE. WEST       ATLANTA              '
#                 '    GEORGIA                  4082938498MS. JANICE SILCOX        UNI-90403MEG8470'
#                 '    6250 BPI00034'
#Line:    382            IF
#Line:    358 Paragraph: 1000-LOAD-RECORD
#Line:    360            MOVE
#Line:    361            MOVE
#Line:    362            MOVE
#Line:    363            MOVE
#Line:    364            MOVE
#Line:    365            MOVE
#Line:    366            MOVE
#Line:    367            MOVE
#Line:    368            MOVE
#Line:    369            MOVE
#Line:    370            MOVE
#Line:    372            IF
#Line:    373            MOVE
#Line:    374            MOVE
#Line:    375            MOVE
#Line:    381            WRITE
#           WRITE TSPFILE Status: 02
#        Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1401 JEFFERSON BLVD.     WASHINGTON           '
#                 '    D.C.                     8372487274MR. ALLAN JONES          UNI-80/31MEG8417'
#                 '    1600 BPI00075'
#Line:    382            IF
#Line:    358 Paragraph: 1000-LOAD-RECORD
#Line:    360            MOVE
#Line:    361            MOVE
#Line:    362            MOVE
#Line:    363            MOVE
#Line:    364            MOVE
#Line:    365            MOVE
#Line:    366            MOVE
#Line:    367            MOVE
#Line:    368            MOVE
#Line:    369            MOVE
#Line:    370            MOVE
#Line:    372            IF
#Line:    377            MOVE
#Line:    378            MOVE
#Line:    379            MOVE
#Line:    381            WRITE
#           WRITE TSPFILE Status: 02
#        Record : 'DEL00000 DELTA LUGGAGE REPAIRS    1620 ARIZONA WAY         TORONTO              '
#                 '    CANADA                   4169898509MR. PETER MACKAY         UNI-80/53MEG8470'
#                 '    6250 BPI00045'
#Line:    382            IF
#Line:    358 Paragraph: 1000-LOAD-RECORD
#Line:    360            MOVE
#Line:    361            MOVE
#Line:    362            MOVE
#Line:    363            MOVE
#Line:    364            MOVE
#Line:    365            MOVE
#Line:    366            MOVE
#Line:    367            MOVE
#Line:    368            MOVE
#Line:    369            MOVE
#Line:    370            MOVE
#Line:    372            IF
#Line:    373            MOVE
#Line:    374            MOVE
#Line:    375            MOVE
#Line:    381            WRITE
#           WRITE TSPFILE Status: 02
#        Record : 'EPS00000 EPSILON EQUIPMENT SUPPLY 1184 EAST FIRST STREET   CALGARY              '
#                 '    CANADA                   5292398745MRS. DONNA BREWER        UNI-80/61MEG8417'
#                 '    1600 BPI00090'
#Line:    382            IF
#Line:    358 Paragraph: 1000-LOAD-RECORD
#Line:    360            MOVE
#Line:    361            MOVE
#Line:    362            MOVE
#Line:    363            MOVE
#Line:    364            MOVE
#Line:    365            MOVE
#Line:    366            MOVE
#Line:    367            MOVE
#Line:    368            MOVE
#Line:    369            MOVE
#Line:    370            MOVE
#Line:    372            IF
#Line:    377            MOVE
#Line:    378            MOVE
#Line:    379            MOVE
#Line:    381            WRITE
#           WRITE TSPFILE Status: 02
#        Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
#                 '    CALIFORNIA               8009329492MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
#                 '    6250 BPI00107'
#Line:    382            IF
#Line:    358 Paragraph: 1000-LOAD-RECORD
#Line:    360            MOVE
#Line:    361            MOVE
#Line:    362            MOVE
#Line:    363            MOVE
#Line:    364            MOVE
#Line:    365            MOVE
#Line:    366            MOVE
#Line:    367            MOVE
#Line:    368            MOVE
#Line:    369            MOVE
#Line:    370            MOVE
#Line:    372            IF
#Line:    373            MOVE
#Line:    374            MOVE
#Line:    375            MOVE
#Line:    381            WRITE
#           WRITE TSPFILE Status: 02
#        Record : 'GIB00000 GIBRALTER LIFE INSURANCE 650 LIBERTY CRESCENT     LOS RIOS             '
#                 '    NEW MEXICO               6456445643MR. D.A. MORRISON        UNI-80/61MEG8417'
#                 '    1600 BPI00067'
#Line:    382            IF
#Line:    358 Paragraph: 1000-LOAD-RECORD
#Line:    360            MOVE
#Line:    361            MOVE
#Line:    362            MOVE
#Line:    363            MOVE
#Line:    364            MOVE
#Line:    365            MOVE
#Line:    366            MOVE
#Line:    367            MOVE
#Line:    368            MOVE
#Line:    369            MOVE
#Line:    370            MOVE
#Line:    372            IF
#Line:    377            MOVE
#Line:    378            MOVE
#Line:    379            MOVE
#Line:    381            WRITE
#           WRITE TSPFILE Status: 02
#        Record : 'H&J00000 H & J PLUMBING SUPPLIES  77 SUNSET BLVD.          MADISON              '
#                 '    WISCONSIN                6546456333MR. BRIAN PATTERSON      UNI-80/83MEG8470'
#                 '    6250 BPI00032'
#Line:    382            IF
#Line:    358 Paragraph: 1000-LOAD-RECORD
#Line:    360            MOVE
#Line:    361            MOVE
#Line:    362            MOVE
#Line:    363            MOVE
#Line:    364            MOVE
#Line:    365            MOVE
#Line:    366            MOVE
#Line:    367            MOVE
#Line:    368            MOVE
#Line:    369            MOVE
#Line:    370            MOVE
#Line:    372            IF
#Line:    373            MOVE
#Line:    374            MOVE
#Line:    375            MOVE
#Line:    381            WRITE
#           WRITE TSPFILE Status: 02
#        Record : 'INC00000 INCREMENTAL BACKUP CORP. 10908 SANTA MONICA BLVD. WILBUR               '
#                 '    DELAWARE                 3455445444MR. DARRYL TOWNSEND      UNI-80/81MEG8417'
#                 '    1600 BPI00016'
#Line:    382            IF
#Line:    358 Paragraph: 1000-LOAD-RECORD
#Line:    360            MOVE
#Line:    361            MOVE
#Line:    362            MOVE
#Line:    363            MOVE
#Line:    364            MOVE
#Line:    365            MOVE
#Line:    366            MOVE
#Line:    367            MOVE
#Line:    368            MOVE
#Line:    369            MOVE
#Line:    370            MOVE
#Line:    372            IF
#Line:    373            MOVE
#Line:    374            MOVE
#Line:    375            MOVE
#Line:    381            WRITE
#           WRITE TSPFILE Status: 02
#        Record : 'JOH00000 JOHNSON BOATING SUPPLIES 1134 PARIS ROAD          TOPEKA               '
#                 '    KANSAS                   6456445643MS. VALERIE HARPER       UNI-80/81MEG8417'
#                 '    1600 BPI00034'
#Line:    382            IF
#Line:    358 Paragraph: 1000-LOAD-RECORD
#Line:    360            MOVE
#Line:    361            MOVE
#Line:    362            MOVE
#Line:    363            MOVE
#Line:    364            MOVE
#Line:    365            MOVE
#Line:    366            MOVE
#Line:    367            MOVE
#Line:    368            MOVE
#Line:    369            MOVE
#Line:    370            MOVE
#Line:    372            IF
#Line:    373            MOVE
#Line:    374            MOVE
#Line:    375            MOVE
#Line:    381            WRITE
#           WRITE TSPFILE Status: 02
#        Record : 'KON00000 KONFLAB PLASTIC PRODUCTS.808 NORTHWEST MAIN ST.   SEATTLE              '
#                 '    WASHINGTON               7456434355MR. FRED MILLER          UNI-80/81MEG8417'
#                 '    1600 BPI00128'
#Line:    382            IF
#Line:    358 Paragraph: 1000-LOAD-RECORD
#Line:    360            MOVE
#Line:    361            MOVE
#Line:    362            MOVE
#Line:    363            MOVE
#Line:    364            MOVE
#Line:    365            MOVE
#Line:    366            MOVE
#Line:    367            MOVE
#Line:    368            MOVE
#Line:    369            MOVE
#Line:    370            MOVE
#Line:    372            IF
#Line:    377            MOVE
#Line:    378            MOVE
#Line:    379            MOVE
#Line:    381            WRITE
#           WRITE TSPFILE Status: 02
#        Record : 'LEW00000 LEWISTON GRAPHICS LTD.   9904 QUEEN STREET        NEW JERSEY           '
#                 '    N.J.                     6554456433MR. DONALD FISCHER       UNI-80/83MEG8470'
#                 '    6250 BPI00064'
#Line:    382            IF
#Line:    358 Paragraph: 1000-LOAD-RECORD
#Line:    360            MOVE
#Line:    361            MOVE
#Line:    362            MOVE
#Line:    363            MOVE
#Line:    364            MOVE
#Line:    365            MOVE
#Line:    366            MOVE
#Line:    367            MOVE
#Line:    368            MOVE
#Line:    369            MOVE
#Line:    370            MOVE
#Line:    372            IF
#Line:    377            MOVE
#Line:    378            MOVE
#Line:    379            MOVE
#Line:    381            WRITE
#           WRITE TSPFILE Status: 02
#        Record : 'MOR00000 MORNINGSIDE CARPENTRY.   1709 DUNDAS CRESCENT W.  FORT WAYNE           '
#                 '    COLORADO                 4169898509MR. STEVEN YOURDIN       UNI-80/83MEG8470'
#                 '    6250 BPI00110'
#Line:    382            IF
#Line:    358 Paragraph: 1000-LOAD-RECORD
#Line:    360            MOVE
#Line:    361            MOVE
#Line:    362            MOVE
#Line:    363            MOVE
#Line:    364            MOVE
#Line:    365            MOVE
#Line:    366            MOVE
#Line:    367            MOVE
#Line:    368            MOVE
#Line:    369            MOVE
#Line:    370            MOVE
#Line:    372            IF
#Line:    377            MOVE
#Line:    378            MOVE
#Line:    379            MOVE
#Line:    381            WRITE
#           WRITE TSPFILE Status: 02
#        Record : 'NEW00000 NEW WAVE SURF SHOPS INC. 3240 MARIS AVENUE        COLUMBUS             '
#                 '    OHIO                     7534587453MS. Goldie Hawn          UNI-80/83MEG8470'
#                 '    6250 BPI00324'
#Line:    382            IF
#Line:    358 Paragraph: 1000-LOAD-RECORD
#Line:    360            MOVE
#Line:    361            MOVE
#Line:    362            MOVE
#Line:    363            MOVE
#Line:    364            MOVE
#Line:    365            MOVE
#Line:    366            MOVE
#Line:    367            MOVE
#Line:    368            MOVE
#Line:    369            MOVE
#Line:    370            MOVE
#Line:    372            IF
#Line:    377            MOVE
#Line:    378            MOVE
#Line:    379            MOVE
#Line:    381            WRITE
#           WRITE TSPFILE Status: 02
#        Record : 'OLD00000 OLD TYME PIZZA MFG. CO.  1705 WISCONSIN ROAD      RICHMOND             '
#                 '    VIRGINIA                 8787458374MS. ALICE WINSTON        UNI-90403MEG8470'
#                 '    6250 BPI00124'
#Line:    382            IF
#Line:    358 Paragraph: 1000-LOAD-RECORD
#Line:    360            MOVE
#Line:    361            MOVE
#Line:    362            MOVE
#Line:    363            MOVE
#Line:    364            MOVE
#Line:    365            MOVE
#Line:    366            MOVE
#Line:    367            MOVE
#Line:    368            MOVE
#Line:    369            MOVE
#Line:    370            MOVE
#Line:    372            IF
#Line:    377            MOVE
#Line:    378            MOVE
#Line:    379            MOVE
#Line:    381            WRITE
#           WRITE TSPFILE Status: 02
#        Record : 'PRE00000 PRESTIGE OFFICE FURNITURE114A MAPLE GROVE         WHITEPLAIN           '
#                 '    N.Y.                     4169898509MR. THOMAS JEFFERSON     UNI-90403MEG8470'
#                 '    6250 BPI00086'
#Line:    382            IF
#Line:    350            DISPLAY
#Line:    352            CLOSE
#           CLOSE TSPFILE Status: 00
#Line:    321            PERFORM
#Line:    387 Paragraph: LISTFILE
#Line:    388            DISPLAY
#Line:    389            OPEN
#Line:    390            MOVE
#Line:    391            MOVE
#Line:    392            START
#Line:    393            READ
#Line:    394            READ
#Line:    395            CLOSE
#Line:    397            MOVE
#Line:    398            OPEN
#           OPEN INPUT TSPFILE -> 'testisam' Status: 00
#Line:    399            IF
#Line:    404            MOVE
#Line:    405            MOVE
#Line:    406            START
#           START TSPFILE Status: 00
#           Key : 'PRE00000'
#Line:    407            READ
#           READ Sequential TSPFILE Status: 00
#        Record : 'PRE00000 PRESTIGE OFFICE FURNITURE114A MAPLE GROVE         WHITEPLAIN           '
#                 '    N.Y.                     4169898509MR. THOMAS JEFFERSON     UNI-90403MEG8470'
#                 '    6250 BPI00086'
#Line:    408            READ
#           READ Sequential TSPFILE Status: 10
#Line:    410            MOVE
#Line:    411            MOVE
#Line:    412            START
#           START TSPFILE Status: 00
#           Key : 'DEL00000'
#Line:    413            IF
#Line:    418            READ
#           READ Sequential TSPFILE Status: 00
#        Record : 'EPS00000 EPSILON EQUIPMENT SUPPLY 1184 EAST FIRST STREET   CALGARY              '
#                 '    CANADA                   5292398745MRS. DONNA BREWER        UNI-80/61MEG8417'
#                 '    1600 BPI00090'
#Line:    419            IF
#Line:    424            PERFORM
#Line:    426            DISPLAY
#Line:    429            CALL
#Line:    430            READ
#           READ Sequential TSPFILE Status: 00
#        Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
#                 '    CALIFORNIA               8009329492MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
#                 '    6250 BPI00107'
#Line:    434            ADD
#Line:    426            DISPLAY
#Line:    429            CALL
#Line:    430            READ
#           READ Sequential TSPFILE Status: 00
#        Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1401 JEFFERSON BLVD.     WASHINGTON           '
#                 '    D.C.                     8372487274MR. ALLAN JONES          UNI-80/31MEG8417'
#                 '    1600 BPI00075'
#Line:    434            ADD
#Line:    426            DISPLAY
#Line:    429            CALL
#Line:    430            READ
#           READ Sequential TSPFILE Status: 00
#        Record : 'GIB00000 GIBRALTER LIFE INSURANCE 650 LIBERTY CRESCENT     LOS RIOS             '
#                 '    NEW MEXICO               6456445643MR. D.A. MORRISON        UNI-80/61MEG8417'
#                 '    1600 BPI00067'
#Line:    434            ADD
#Line:    426            DISPLAY
#Line:    429            CALL
#Line:    430            READ
#           READ Sequential TSPFILE Status: 00
#        Record : 'H&J00000 H & J PLUMBING SUPPLIES  77 SUNSET BLVD.          MADISON              '
#                 '    WISCONSIN                6546456333MR. BRIAN PATTERSON      UNI-80/83MEG8470'
#                 '    6250 BPI00032'
#Line:    434            ADD
#Line:    426            DISPLAY
#Line:    429            CALL
#Line:    430            READ
#           READ Sequential TSPFILE Status: 00
#        Record : 'INC00000 INCREMENTAL BACKUP CORP. 10908 SANTA MONICA BLVD. WILBUR               '
#                 '    DELAWARE                 3455445444MR. DARRYL TOWNSEND      UNI-80/81MEG8417'
#                 '    1600 BPI00016'
#Line:    434            ADD
#Line:    426            DISPLAY
#Line:    429            CALL
#Line:    430            READ
#           READ Sequential TSPFILE Status: 00
#        Record : 'JOH00000 JOHNSON BOATING SUPPLIES 1134 PARIS ROAD          TOPEKA               '
#                 '    KANSAS                   6456445643MS. VALERIE HARPER       UNI-80/81MEG8417'
#                 '    1600 BPI00034'
#Line:    434            ADD
#Line:    426            DISPLAY
#Line:    429            CALL
#Line:    430            READ
#           READ Sequential TSPFILE Status: 00
#        Record : 'KON00000 KONFLAB PLASTIC PRODUCTS.808 NORTHWEST MAIN ST.   SEATTLE              '
#                 '    WASHINGTON               7456434355MR. FRED MILLER          UNI-80/81MEG8417'
#                 '    1600 BPI00128'
#Line:    434            ADD
#Line:    426            DISPLAY
#Line:    429            CALL
#Line:    430            READ
#           READ Sequential TSPFILE Status: 00
#        Record : 'LEW00000 LEWISTON GRAPHICS LTD.   9904 QUEEN STREET        NEW JERSEY           '
#                 '    N.J.                     6554456433MR. DONALD FISCHER       UNI-80/83MEG8470'
#                 '    6250 BPI00064'
#Line:    434            ADD
#Line:    426            DISPLAY
#Line:    429            CALL
#Line:    430            READ
#           READ Sequential TSPFILE Status: 00
#        Record : 'MOR00000 MORNINGSIDE CARPENTRY.   1709 DUNDAS CRESCENT W.  FORT WAYNE           '
#                 '    COLORADO                 4169898509MR. STEVEN YOURDIN       UNI-80/83MEG8470'
#                 '    6250 BPI00110'
#Line:    434            ADD
#Line:    426            DISPLAY
#Line:    429            CALL
#Line:    430            READ
#           READ Sequential TSPFILE Status: 00
#        Record : 'NEW00000 NEW WAVE SURF SHOPS INC. 3240 MARIS AVENUE        COLUMBUS             '
#                 '    OHIO                     7534587453MS. Goldie Hawn          UNI-80/83MEG8470'
#                 '    6250 BPI00324'
#Line:    434            ADD
#Line:    426            DISPLAY
#Line:    429            CALL
#Line:    430            READ
#           READ Sequential TSPFILE Status: 00
#        Record : 'OLD00000 OLD TYME PIZZA MFG. CO.  1705 WISCONSIN ROAD      RICHMOND             '
#                 '    VIRGINIA                 8787458374MS. ALICE WINSTON        UNI-90403MEG8470'
#                 '    6250 BPI00124'
#Line:    434            ADD
#Line:    436            IF
#Line:    439            DISPLAY
#Line:    442            DISPLAY
#Line:    443            MOVE
#Line:    444            START
#           START TSPFILE Status: 00
#           Key : 'OLD00000'
#Line:    445            IF
#Line:    450            READ
#           READ Sequential TSPFILE Status: 00
#        Record : 'NEW00000 NEW WAVE SURF SHOPS INC. 3240 MARIS AVENUE        COLUMBUS             '
#                 '    OHIO                     7534587453MS. Goldie Hawn          UNI-80/83MEG8470'
#                 '    6250 BPI00324'
#Line:    451            IF
#Line:    456            PERFORM
#Line:    458            DISPLAY
#Line:    461            READ
#           READ Sequential TSPFILE Status: 00
#        Record : 'MOR00000 MORNINGSIDE CARPENTRY.   1709 DUNDAS CRESCENT W.  FORT WAYNE           '
#                 '    COLORADO                 4169898509MR. STEVEN YOURDIN       UNI-80/83MEG8470'
#                 '    6250 BPI00110'
#Line:    465            ADD
#Line:    458            DISPLAY
#Line:    461            READ
#           READ Sequential TSPFILE Status: 00
#        Record : 'LEW00000 LEWISTON GRAPHICS LTD.   9904 QUEEN STREET        NEW JERSEY           '
#                 '    N.J.                     6554456433MR. DONALD FISCHER       UNI-80/83MEG8470'
#                 '    6250 BPI00064'
#Line:    465            ADD
#Line:    458            DISPLAY
#Line:    461            READ
#           READ Sequential TSPFILE Status: 00
#        Record : 'KON00000 KONFLAB PLASTIC PRODUCTS.808 NORTHWEST MAIN ST.   SEATTLE              '
#                 '    WASHINGTON               7456434355MR. FRED MILLER          UNI-80/81MEG8417'
#                 '    1600 BPI00128'
#Line:    465            ADD
#Line:    458            DISPLAY
#Line:    461            READ
#           READ Sequential TSPFILE Status: 00
#        Record : 'JOH00000 JOHNSON BOATING SUPPLIES 1134 PARIS ROAD          TOPEKA               '
#                 '    KANSAS                   6456445643MS. VALERIE HARPER       UNI-80/81MEG8417'
#                 '    1600 BPI00034'
#Line:    465            ADD
#Line:    458            DISPLAY
#Line:    461            READ
#           READ Sequential TSPFILE Status: 00
#        Record : 'INC00000 INCREMENTAL BACKUP CORP. 10908 SANTA MONICA BLVD. WILBUR               '
#                 '    DELAWARE                 3455445444MR. DARRYL TOWNSEND      UNI-80/81MEG8417'
#                 '    1600 BPI00016'
#Line:    465            ADD
#Line:    458            DISPLAY
#Line:    461            READ
#           READ Sequential TSPFILE Status: 00
#        Record : 'H&J00000 H & J PLUMBING SUPPLIES  77 SUNSET BLVD.          MADISON              '
#                 '    WISCONSIN                6546456333MR. BRIAN PATTERSON      UNI-80/83MEG8470'
#                 '    6250 BPI00032'
#Line:    465            ADD
#Line:    458            DISPLAY
#Line:    461            READ
#           READ Sequential TSPFILE Status: 00
#        Record : 'GIB00000 GIBRALTER LIFE INSURANCE 650 LIBERTY CRESCENT     LOS RIOS             '
#                 '    NEW MEXICO               6456445643MR. D.A. MORRISON        UNI-80/61MEG8417'
#                 '    1600 BPI00067'
#Line:    465            ADD
#Line:    458            DISPLAY
#Line:    461            READ
#           READ Sequential TSPFILE Status: 00
#        Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1401 JEFFERSON BLVD.     WASHINGTON           '
#                 '    D.C.                     8372487274MR. ALLAN JONES          UNI-80/31MEG8417'
#                 '    1600 BPI00075'
#Line:    465            ADD
#Line:    458            DISPLAY
#Line:    461            READ
#           READ Sequential TSPFILE Status: 00
#        Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
#                 '    CALIFORNIA               8009329492MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
#                 '    6250 BPI00107'
#Line:    465            ADD
#Line:    458            DISPLAY
#Line:    461            READ
#           READ Sequential TSPFILE Status: 00
#        Record : 'EPS00000 EPSILON EQUIPMENT SUPPLY 1184 EAST FIRST STREET   CALGARY              '
#                 '    CANADA                   5292398745MRS. DONNA BREWER        UNI-80/61MEG8417'
#                 '    1600 BPI00090'
#Line:    465            ADD
#Line:    458            DISPLAY
#Line:    461            READ
#           READ Sequential TSPFILE Status: 00
#        Record : 'DEL00000 DELTA LUGGAGE REPAIRS    1620 ARIZONA WAY         TORONTO              '
#                 '    CANADA                   4169898509MR. PETER MACKAY         UNI-80/53MEG8470'
#                 '    6250 BPI00045'
#Line:    465            ADD
#Line:    468            CLOSE
#           CLOSE TSPFILE Status: 00
#Line:    470            OPEN
#           OPEN I_O TSPFILE -> 'testisam' Status: 00
#Line:    471            MOVE
#Line:    472            MOVE
#Line:    473            MOVE
#Line:    474            READ
#           READ TSPFILE Status: 23
#           Key : 'BET0X000'
#Line:    475            IF
#Line:    479            MOVE
#Line:    480            MOVE
#Line:    481            READ
#           READ TSPFILE Status: 00
#        Record : 'BET00000 BETA SHOE MFG. INC.      1090 2ND AVE. WEST       ATLANTA              '
#                 '    GEORGIA                  4082938498MS. JANICE SILCOX        UNI-90403MEG8470'
#                 '    6250 BPI00034'
#           Key : 'BET00000'
#Line:    482            IF
#Line:    486            DISPLAY
#Line:    490            READ
#           READ Sequential TSPFILE Status: 00
#        Record : 'DEL00000 DELTA LUGGAGE REPAIRS    1620 ARIZONA WAY         TORONTO              '
#                 '    CANADA                   4169898509MR. PETER MACKAY         UNI-80/53MEG8470'
#                 '    6250 BPI00045'
#Line:    491            IF
#Line:    495            DISPLAY
#Line:    499            MOVE
#Line:    500            MOVE
#Line:    501            READ
#           READ TSPFILE Status: 00
#        Record : 'GIB00000 GIBRALTER LIFE INSURANCE 650 LIBERTY CRESCENT     LOS RIOS             '
#                 '    NEW MEXICO               6456445643MR. D.A. MORRISON        UNI-80/61MEG8417'
#                 '    1600 BPI00067'
#           Key :  6456445643
#Line:    502            IF
#Line:    506            DISPLAY
#Line:    510            WRITE
#           WRITE TSPFILE Status: 22
#        Record : 'GIB00000 GIBRALTER LIFE INSURANCE 650 LIBERTY CRESCENT     LOS RIOS             '
#                 '    NEW MEXICO               6456445643MR. D.A. MORRISON        UNI-80/61MEG8417'
#                 '    1600 BPI00067'
#Line:    511            IF
#Line:    515            DISPLAY
#Line:    518            MOVE
#Line:    519            MOVE
#Line:    520            READ
#           READ TSPFILE Status: 00
#        Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1401 JEFFERSON BLVD.     WASHINGTON           '
#                 '    D.C.                     8372487274MR. ALLAN JONES          UNI-80/31MEG8417'
#                 '    1600 BPI00075'
#           Key : 'GAM00000'
#Line:    521            DISPLAY
#Line:    525            ADD
#Line:    526            REWRITE
#           REWRITE TSPFILE Status: 00
#        Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1401 JEFFERSON BLVD.     WASHINGTON           '
#                 '    D.C.                     8372487274MR. ALLAN JONES          UNI-80/31MEG8417'
#                 '    1600 BPI00080'
#Line:    527            IF
#Line:    532            DISPLAY
#Line:    537            MOVE
#Line:    538            MOVE
#Line:    539            READ
#           READ TSPFILE Status: 00
#        Record : 'BET00000 BETA SHOE MFG. INC.      1090 2ND AVE. WEST       ATLANTA              '
#                 '    GEORGIA                  4082938498MS. JANICE SILCOX        UNI-90403MEG8470'
#                 '    6250 BPI00034'
#           Key : 'BET00000'
#Line:    540            DISPLAY
#Line:    544            MOVE
#Line:    545            MOVE
#Line:    546            REWRITE
#           REWRITE TSPFILE Status: 02
#        Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1090 2ND AVE. WEST       ATLANTA              '
#                 '    GEORGIA                  4082938498MS. JANICE SILCOX        UNI-90403MEG8470'
#                 '    6250 BPI00034'
#Line:    547            IF
#Line:    552            DISPLAY
#Line:    556            MOVE
#Line:    557            MOVE
#Line:    558            READ
#           READ TSPFILE Status: 00
#        Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
#                 '    CALIFORNIA               8009329492MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
#                 '    6250 BPI00107'
#           Key : 'FOR00000'
#Line:    559            MOVE
#Line:    560            MOVE
#Line:    561            REWRITE
#           REWRITE TSPFILE Status: 02
#        Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
#                 '    CALIFORNIA               6456445643MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
#                 '    6250 BPI00107'
#Line:    562            IF
#Line:    567            DISPLAY
#Line:    571            DELETE
#           DELETE TSPFILE Status: 00
#        Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
#                 '    CALIFORNIA               6456445643MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
#                 '    6250 BPI00107'
#Line:    572            CLOSE
#           CLOSE TSPFILE Status: 00
#Line:    333            STOP RUN
#])

# variant without file trace


AT_DATA([reference],
[Source: 'prog.cob'
Program-Id:  prog
Line:    292     Entry: prog
Line:    292 Paragraph: MAINFILE
Line:    293            OPEN
Line:    294            CLOSE
Line:    296            OPEN
Line:    297            MOVE
Line:    298            READ
Line:    299            IF
Line:    304            MOVE
Line:    305            START
Line:    306            IF
Line:    311            READ
Line:    312            IF
Line:    317            DISPLAY
Line:    318            CLOSE
Line:    320            PERFORM
Line:    335 Paragraph: LOADFILE
Line:    336            DISPLAY
Line:    339            OPEN
Line:    340            IF
Line:    346            PERFORM
Line:    348            UNTIL
Line:    358 Paragraph: 1000-LOAD-RECORD
Line:    360            MOVE
Line:    361            MOVE
Line:    362            MOVE
Line:    363            MOVE
Line:    364            MOVE
Line:    365            MOVE
Line:    366            MOVE
Line:    367            MOVE
Line:    368            MOVE
Line:    369            MOVE
Line:    370            MOVE
Line:    372            IF
Line:    373            MOVE
Line:    374            MOVE
Line:    375            MOVE
Line:    381            WRITE
Line:    382            IF
Line:    347            VARYING
Line:    348            UNTIL
Line:    358 Paragraph: 1000-LOAD-RECORD
Line:    360            MOVE
Line:    361            MOVE
Line:    362            MOVE
Line:    363            MOVE
Line:    364            MOVE
Line:    365            MOVE
Line:    366            MOVE
Line:    367            MOVE
Line:    368            MOVE
Line:    369            MOVE
Line:    370            MOVE
Line:    372            IF
Line:    377            MOVE
Line:    378            MOVE
Line:    379            MOVE
Line:    381            WRITE
Line:    382            IF
Line:    347            VARYING
Line:    348            UNTIL
Line:    358 Paragraph: 1000-LOAD-RECORD
Line:    360            MOVE
Line:    361            MOVE
Line:    362            MOVE
Line:    363            MOVE
Line:    364            MOVE
Line:    365            MOVE
Line:    366            MOVE
Line:    367            MOVE
Line:    368            MOVE
Line:    369            MOVE
Line:    370            MOVE
Line:    372            IF
Line:    373            MOVE
Line:    374            MOVE
Line:    375            MOVE
Line:    381            WRITE
Line:    382            IF
Line:    347            VARYING
Line:    348            UNTIL
Line:    358 Paragraph: 1000-LOAD-RECORD
Line:    360            MOVE
Line:    361            MOVE
Line:    362            MOVE
Line:    363            MOVE
Line:    364            MOVE
Line:    365            MOVE
Line:    366            MOVE
Line:    367            MOVE
Line:    368            MOVE
Line:    369            MOVE
Line:    370            MOVE
Line:    372            IF
Line:    377            MOVE
Line:    378            MOVE
Line:    379            MOVE
Line:    381            WRITE
Line:    382            IF
Line:    347            VARYING
Line:    348            UNTIL
Line:    358 Paragraph: 1000-LOAD-RECORD
Line:    360            MOVE
Line:    361            MOVE
Line:    362            MOVE
Line:    363            MOVE
Line:    364            MOVE
Line:    365            MOVE
Line:    366            MOVE
Line:    367            MOVE
Line:    368            MOVE
Line:    369            MOVE
Line:    370            MOVE
Line:    372            IF
Line:    373            MOVE
Line:    374            MOVE
Line:    375            MOVE
Line:    381            WRITE
Line:    382            IF
Line:    347            VARYING
Line:    348            UNTIL
Line:    358 Paragraph: 1000-LOAD-RECORD
Line:    360            MOVE
Line:    361            MOVE
Line:    362            MOVE
Line:    363            MOVE
Line:    364            MOVE
Line:    365            MOVE
Line:    366            MOVE
Line:    367            MOVE
Line:    368            MOVE
Line:    369            MOVE
Line:    370            MOVE
Line:    372            IF
Line:    377            MOVE
Line:    378            MOVE
Line:    379            MOVE
Line:    381            WRITE
Line:    382            IF
Line:    347            VARYING
Line:    348            UNTIL
Line:    358 Paragraph: 1000-LOAD-RECORD
Line:    360            MOVE
Line:    361            MOVE
Line:    362            MOVE
Line:    363            MOVE
Line:    364            MOVE
Line:    365            MOVE
Line:    366            MOVE
Line:    367            MOVE
Line:    368            MOVE
Line:    369            MOVE
Line:    370            MOVE
Line:    372            IF
Line:    373            MOVE
Line:    374            MOVE
Line:    375            MOVE
Line:    381            WRITE
Line:    382            IF
Line:    347            VARYING
Line:    348            UNTIL
Line:    358 Paragraph: 1000-LOAD-RECORD
Line:    360            MOVE
Line:    361            MOVE
Line:    362            MOVE
Line:    363            MOVE
Line:    364            MOVE
Line:    365            MOVE
Line:    366            MOVE
Line:    367            MOVE
Line:    368            MOVE
Line:    369            MOVE
Line:    370            MOVE
Line:    372            IF
Line:    377            MOVE
Line:    378            MOVE
Line:    379            MOVE
Line:    381            WRITE
Line:    382            IF
Line:    347            VARYING
Line:    348            UNTIL
Line:    358 Paragraph: 1000-LOAD-RECORD
Line:    360            MOVE
Line:    361            MOVE
Line:    362            MOVE
Line:    363            MOVE
Line:    364            MOVE
Line:    365            MOVE
Line:    366            MOVE
Line:    367            MOVE
Line:    368            MOVE
Line:    369            MOVE
Line:    370            MOVE
Line:    372            IF
Line:    373            MOVE
Line:    374            MOVE
Line:    375            MOVE
Line:    381            WRITE
Line:    382            IF
Line:    347            VARYING
Line:    348            UNTIL
Line:    358 Paragraph: 1000-LOAD-RECORD
Line:    360            MOVE
Line:    361            MOVE
Line:    362            MOVE
Line:    363            MOVE
Line:    364            MOVE
Line:    365            MOVE
Line:    366            MOVE
Line:    367            MOVE
Line:    368            MOVE
Line:    369            MOVE
Line:    370            MOVE
Line:    372            IF
Line:    373            MOVE
Line:    374            MOVE
Line:    375            MOVE
Line:    381            WRITE
Line:    382            IF
Line:    347            VARYING
Line:    348            UNTIL
Line:    358 Paragraph: 1000-LOAD-RECORD
Line:    360            MOVE
Line:    361            MOVE
Line:    362            MOVE
Line:    363            MOVE
Line:    364            MOVE
Line:    365            MOVE
Line:    366            MOVE
Line:    367            MOVE
Line:    368            MOVE
Line:    369            MOVE
Line:    370            MOVE
Line:    372            IF
Line:    373            MOVE
Line:    374            MOVE
Line:    375            MOVE
Line:    381            WRITE
Line:    382            IF
Line:    347            VARYING
Line:    348            UNTIL
Line:    358 Paragraph: 1000-LOAD-RECORD
Line:    360            MOVE
Line:    361            MOVE
Line:    362            MOVE
Line:    363            MOVE
Line:    364            MOVE
Line:    365            MOVE
Line:    366            MOVE
Line:    367            MOVE
Line:    368            MOVE
Line:    369            MOVE
Line:    370            MOVE
Line:    372            IF
Line:    377            MOVE
Line:    378            MOVE
Line:    379            MOVE
Line:    381            WRITE
Line:    382            IF
Line:    347            VARYING
Line:    348            UNTIL
Line:    358 Paragraph: 1000-LOAD-RECORD
Line:    360            MOVE
Line:    361            MOVE
Line:    362            MOVE
Line:    363            MOVE
Line:    364            MOVE
Line:    365            MOVE
Line:    366            MOVE
Line:    367            MOVE
Line:    368            MOVE
Line:    369            MOVE
Line:    370            MOVE
Line:    372            IF
Line:    377            MOVE
Line:    378            MOVE
Line:    379            MOVE
Line:    381            WRITE
Line:    382            IF
Line:    347            VARYING
Line:    348            UNTIL
Line:    358 Paragraph: 1000-LOAD-RECORD
Line:    360            MOVE
Line:    361            MOVE
Line:    362            MOVE
Line:    363            MOVE
Line:    364            MOVE
Line:    365            MOVE
Line:    366            MOVE
Line:    367            MOVE
Line:    368            MOVE
Line:    369            MOVE
Line:    370            MOVE
Line:    372            IF
Line:    377            MOVE
Line:    378            MOVE
Line:    379            MOVE
Line:    381            WRITE
Line:    382            IF
Line:    347            VARYING
Line:    348            UNTIL
Line:    358 Paragraph: 1000-LOAD-RECORD
Line:    360            MOVE
Line:    361            MOVE
Line:    362            MOVE
Line:    363            MOVE
Line:    364            MOVE
Line:    365            MOVE
Line:    366            MOVE
Line:    367            MOVE
Line:    368            MOVE
Line:    369            MOVE
Line:    370            MOVE
Line:    372            IF
Line:    377            MOVE
Line:    378            MOVE
Line:    379            MOVE
Line:    381            WRITE
Line:    382            IF
Line:    347            VARYING
Line:    348            UNTIL
Line:    358 Paragraph: 1000-LOAD-RECORD
Line:    360            MOVE
Line:    361            MOVE
Line:    362            MOVE
Line:    363            MOVE
Line:    364            MOVE
Line:    365            MOVE
Line:    366            MOVE
Line:    367            MOVE
Line:    368            MOVE
Line:    369            MOVE
Line:    370            MOVE
Line:    372            IF
Line:    377            MOVE
Line:    378            MOVE
Line:    379            MOVE
Line:    381            WRITE
Line:    382            IF
Line:    347            VARYING
Line:    348            UNTIL
Line:    350            DISPLAY
Line:    352            CLOSE
Line:    321            PERFORM
Line:    387 Paragraph: LISTFILE
Line:    388            DISPLAY
Line:    389            OPEN
Line:    390            MOVE
Line:    391            MOVE
Line:    392            START
Line:    393            READ
Line:    394            READ
Line:    395            CLOSE
Line:    397            MOVE
Line:    398            OPEN
Line:    399            IF
Line:    404            MOVE
Line:    405            MOVE
Line:    406            START
Line:    407            READ
Line:    408            READ
Line:    410            MOVE
Line:    411            MOVE
Line:    412            START
Line:    413            IF
Line:    418            READ
Line:    419            IF
Line:    424            PERFORM
Line:    424            UNTIL
Line:    426            DISPLAY
Line:    429            CALL
Line:    430            READ
Line:    434            ADD
Line:    424            UNTIL
Line:    426            DISPLAY
Line:    429            CALL
Line:    430            READ
Line:    434            ADD
Line:    424            UNTIL
Line:    426            DISPLAY
Line:    429            CALL
Line:    430            READ
Line:    434            ADD
Line:    424            UNTIL
Line:    426            DISPLAY
Line:    429            CALL
Line:    430            READ
Line:    434            ADD
Line:    424            UNTIL
Line:    426            DISPLAY
Line:    429            CALL
Line:    430            READ
Line:    434            ADD
Line:    424            UNTIL
Line:    426            DISPLAY
Line:    429            CALL
Line:    430            READ
Line:    434            ADD
Line:    424            UNTIL
Line:    426            DISPLAY
Line:    429            CALL
Line:    430            READ
Line:    434            ADD
Line:    424            UNTIL
Line:    426            DISPLAY
Line:    429            CALL
Line:    430            READ
Line:    434            ADD
Line:    424            UNTIL
Line:    426            DISPLAY
Line:    429            CALL
Line:    430            READ
Line:    434            ADD
Line:    424            UNTIL
Line:    426            DISPLAY
Line:    429            CALL
Line:    430            READ
Line:    434            ADD
Line:    424            UNTIL
Line:    426            DISPLAY
Line:    429            CALL
Line:    430            READ
Line:    434            ADD
Line:    424            UNTIL
Line:    436            IF
Line:    439            DISPLAY
Line:    442            DISPLAY
Line:    443            MOVE
Line:    444            START
Line:    445            IF
Line:    450            READ
Line:    451            IF
Line:    456            PERFORM
Line:    458            DISPLAY
Line:    461            READ
Line:    465            ADD
Line:    456            UNTIL
Line:    458            DISPLAY
Line:    461            READ
Line:    465            ADD
Line:    456            UNTIL
Line:    458            DISPLAY
Line:    461            READ
Line:    465            ADD
Line:    456            UNTIL
Line:    458            DISPLAY
Line:    461            READ
Line:    465            ADD
Line:    456            UNTIL
Line:    458            DISPLAY
Line:    461            READ
Line:    465            ADD
Line:    456            UNTIL
Line:    458            DISPLAY
Line:    461            READ
Line:    465            ADD
Line:    456            UNTIL
Line:    458            DISPLAY
Line:    461            READ
Line:    465            ADD
Line:    456            UNTIL
Line:    458            DISPLAY
Line:    461            READ
Line:    465            ADD
Line:    456            UNTIL
Line:    458            DISPLAY
Line:    461            READ
Line:    465            ADD
Line:    456            UNTIL
Line:    458            DISPLAY
Line:    461            READ
Line:    465            ADD
Line:    456            UNTIL
Line:    458            DISPLAY
Line:    461            READ
Line:    465            ADD
Line:    456            UNTIL
Line:    468            CLOSE
Line:    470            OPEN
Line:    471            MOVE
Line:    472            MOVE
Line:    473            MOVE
Line:    474            READ
Line:    475            IF
Line:    479            MOVE
Line:    480            MOVE
Line:    481            READ
Line:    482            IF
Line:    486            DISPLAY
Line:    490            READ
Line:    491            IF
Line:    495            DISPLAY
Line:    499            MOVE
Line:    500            MOVE
Line:    501            READ
Line:    502            IF
Line:    506            DISPLAY
Line:    510            WRITE
Line:    511            IF
Line:    515            DISPLAY
Line:    518            MOVE
Line:    519            MOVE
Line:    520            READ
Line:    521            DISPLAY
Line:    525            ADD
Line:    526            REWRITE
Line:    527            IF
Line:    532            DISPLAY
Line:    537            MOVE
Line:    538            MOVE
Line:    539            READ
Line:    540            DISPLAY
Line:    544            MOVE
Line:    545            MOVE
Line:    546            REWRITE
Line:    547            IF
Line:    552            DISPLAY
Line:    556            MOVE
Line:    557            MOVE
Line:    558            READ
Line:    559            MOVE
Line:    560            MOVE
Line:    561            REWRITE
Line:    562            IF
Line:    567            DISPLAY
Line:    571            DELETE
Line:    572            CLOSE
Line:    333            STOP RUN
])

AT_CHECK([diff reference trace.txt], [0], [], [])

AT_CHECK([$COMPILE -ftrace prog.cob -o prog_s], [0], [], [])

AT_CHECK([COB_TRACE_FILE=+trace_append.txt \
COB_SET_TRACE=Y \
COB_TRACE_FORMAT="%S and now ... %L" \
$COBCRUN_DIRECT ./prog_s], [0],
[OK: Operations on empty file
Loading sample data file.
Sample data file load complete.
LIST SAMPLE FILE
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
Stop read after: 11
LIST SAMPLE FILE DESCENDING
Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
Got: BET00000 is BETA SHOE MFG. INC.       Disk=8470    .
Nxt: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=8470    .
Ky2: GIB00000 is GIBRALTER LIFE INSURANCE  Mach=UNI-80/6.
  Write: GIB00000 got 22 as expected
   Read: GAM00000 got 00 as expected 00075 terminals
ReWrite: GAM00000 got 00 as expected 00080 terminals
   Read: BET00000 got 00 as expected 00034 terminals
ReWrite: GAM00000 got 00/02 as expected
ReWrite: FOR00000 got 00/02 as expected
], [])

AT_CHECK([COB_TRACE_FILE=+trace_append.txt \
COB_SET_TRACE=Y \
COB_TRACE_FORMAT="%S - %L"\
$COBCRUN_DIRECT ./prog_s], [0],
[OK: Operations on empty file
Loading sample data file.
Sample data file load complete.
LIST SAMPLE FILE
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
Stop read after: 11
LIST SAMPLE FILE DESCENDING
Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
Got: BET00000 is BETA SHOE MFG. INC.       Disk=8470    .
Nxt: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=8470    .
Ky2: GIB00000 is GIBRALTER LIFE INSURANCE  Mach=UNI-80/6.
  Write: GIB00000 got 22 as expected
   Read: GAM00000 got 00 as expected 00075 terminals
ReWrite: GAM00000 got 00 as expected 00080 terminals
   Read: BET00000 got 00 as expected 00034 terminals
ReWrite: GAM00000 got 00/02 as expected
ReWrite: FOR00000 got 00/02 as expected
], [])


AT_DATA([reference_append],
[Source: 'prog.cob'
Program-Id:  prog
    Entry: prog                            and now ...    292
Paragraph: MAINFILE                        and now ...    292
Paragraph: LOADFILE                        and now ...    335
Paragraph: 1000-LOAD-RECORD                and now ...    358
Paragraph: 1000-LOAD-RECORD                and now ...    358
Paragraph: 1000-LOAD-RECORD                and now ...    358
Paragraph: 1000-LOAD-RECORD                and now ...    358
Paragraph: 1000-LOAD-RECORD                and now ...    358
Paragraph: 1000-LOAD-RECORD                and now ...    358
Paragraph: 1000-LOAD-RECORD                and now ...    358
Paragraph: 1000-LOAD-RECORD                and now ...    358
Paragraph: 1000-LOAD-RECORD                and now ...    358
Paragraph: 1000-LOAD-RECORD                and now ...    358
Paragraph: 1000-LOAD-RECORD                and now ...    358
Paragraph: 1000-LOAD-RECORD                and now ...    358
Paragraph: 1000-LOAD-RECORD                and now ...    358
Paragraph: 1000-LOAD-RECORD                and now ...    358
Paragraph: 1000-LOAD-RECORD                and now ...    358
Paragraph: 1000-LOAD-RECORD                and now ...    358
Paragraph: LISTFILE                        and now ...    387
Source: 'prog.cob'
Program-Id:  prog
    Entry: prog                            -    292
Paragraph: MAINFILE                        -    292
Paragraph: LOADFILE                        -    335
Paragraph: 1000-LOAD-RECORD                -    358
Paragraph: 1000-LOAD-RECORD                -    358
Paragraph: 1000-LOAD-RECORD                -    358
Paragraph: 1000-LOAD-RECORD                -    358
Paragraph: 1000-LOAD-RECORD                -    358
Paragraph: 1000-LOAD-RECORD                -    358
Paragraph: 1000-LOAD-RECORD                -    358
Paragraph: 1000-LOAD-RECORD                -    358
Paragraph: 1000-LOAD-RECORD                -    358
Paragraph: 1000-LOAD-RECORD                -    358
Paragraph: 1000-LOAD-RECORD                -    358
Paragraph: 1000-LOAD-RECORD                -    358
Paragraph: 1000-LOAD-RECORD                -    358
Paragraph: 1000-LOAD-RECORD                -    358
Paragraph: 1000-LOAD-RECORD                -    358
Paragraph: 1000-LOAD-RECORD                -    358
Paragraph: LISTFILE                        -    387
])

AT_CAPTURE_FILE(./trace_append.txt)

AT_CHECK([diff reference_append trace_append.txt], [0], [], [])

AT_CLEANUP


AT_SETUP([stack and dump feature])
#AT_KEYWORDS([Dump])

AT_DATA([./cpyabrt], [
            MOVE "Quick brown fox jumped over the dog"
              TO TSTTAILX (1:40).
            MOVE CM-COMPANY TO TSTTAILX (42:20).
      *     DISPLAY ':' X ':'.
      *     DISPLAY CM-COMPANY.
      *     DISPLAY '>' CM-COMPANY '<'.
])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.

       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT FLATFILE ASSIGN EXTERNAL RELFIX
           ORGANIZATION RELATIVE
           ACCESS IS SEQUENTIAL RELATIVE KEY IS REC-NUM
           FILE STATUS IS CUST-STAT.

       DATA  DIVISION.
       FILE SECTION.
       FD  FLATFILE
           BLOCK CONTAINS 5 RECORDS.

       01  TSPFL-RECORD.
           10  CM-CUST-NUM                     PICTURE X(8).
           10  CM-COMPANY                      PICTURE X(25).
           10  CM-DISK                         PICTURE X(8).
           10  CM-NO-TERMINALS                 PICTURE 9(4).

       WORKING-STORAGE SECTION.
       77  MAX-SUB           VALUE  6          PICTURE 9(4) COMP SYNC.
       77  CUST-STAT                           PICTURE X(2).
       77  REC-NUM           VALUE  1          PICTURE 9(4).
       01  BIN                      PIC 9(9) BINARY VALUE 0.

       01  TEST-DATA.
         02  DATA-CUST-NUM-TBL.
           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
           05  FILLER PIC X(8) VALUE "GAM00000".

         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 6.
         02  DATA-COMPANY-TBL.
           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
           05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 6.
         02  DATA-ADDRESS-2-TBL.
           05  FILLER PIC X(10) VALUE "ATLANTA   ".
           05  FILLER PIC X(10) VALUE "CALGARY   ".
           05  FILLER PIC X(10) VALUE "NEW YORK  ".
           05  FILLER PIC X(10) VALUE "TORONTO   ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "WHITEPLAIN".
         02  DATA-ADDRESS   REDEFINES DATA-ADDRESS-2-TBL
                                       PIC X(10) OCCURS 6.

         02  DATA-NO-TERMINALS-TBL.
           05  FILLER PIC 9(3) COMP-3 VALUE 10.
           05  FILLER PIC 9(3) COMP-3 VALUE 13.
           05  FILLER PIC 9(3) COMP-3 VALUE 75.
           05  FILLER PIC 9(3) COMP-3 VALUE 10.
           05  FILLER PIC 9(3) COMP-3 VALUE 90.
           05  FILLER PIC 9(3) COMP-3 VALUE 254.
         02  DATA-NO-TERMINALS REDEFINES DATA-NO-TERMINALS-TBL
                                       PIC 9(3) COMP-3 OCCURS 6.
       01  WORK-AREA IS EXTERNAL.
           05  SUB                             PICTURE 9(4) COMP SYNC.
               88  ODD-RECORD                  VALUE 1 3 5.
       01  SUMS-NON-STD-OCCURS PIC S9(15)V9(03) OCCURS 8 VALUE -42.345.

       PROCEDURE DIVISION.

           PERFORM LOADFILE.

           OPEN INPUT FLATFILE.
           READ FLATFILE.

       MAIN-100.
           PERFORM CALL-SUB-1.
           PERFORM CALL-SUB-2.
           PERFORM CALL-IT-OMIT.
           STOP RUN.

       LOADFILE.
           OPEN OUTPUT FLATFILE.

           PERFORM LOAD-RECORD
                        VARYING SUB FROM 1 BY 1
                          UNTIL SUB > MAX-SUB.

           CLOSE FLATFILE.

       LOAD-RECORD.

           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE DATA-NO-TERMINALS  (SUB)     TO CM-NO-TERMINALS.
           IF  ODD-RECORD
               MOVE "8417"                   TO CM-DISK
           ELSE
               MOVE "8470"                   TO CM-DISK.
           WRITE TSPFL-RECORD.

       CALL-SUB-1 SECTION.
           CALL "sub1" USING bin, TSPFL-RECORD.

       CALL-SUB-2 SECTION.
           MOVE 4096 TO bin, SUMS-NON-STD-OCCURS (2)
           CALL "sub2" USING bin, TSPFL-RECORD.

       CALL-IT-OMIT SECTION.
           MOVE 5440 TO bin, SUMS-NON-STD-OCCURS (3)
           CALL "sub2" USING bin, TSPFL-RECORD.

           END PROGRAM prog.

       IDENTIFICATION DIVISION.
       PROGRAM-ID. sub1.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  ZRO  PIC 9(9) BINARY VALUE 0.
       01  HEXV PIC X  COMP-X.
       01  HEXC REDEFINES HEXV PIC X.

       01 TEST-BASED BASED.
          05 TEST-BASED-SUB PIC X(00000100000).

       01 TEST-ALLOCED BASED.
          05 TEST-ALLOCED-SUB1 PIC X(010).
          05 TEST-ALLOCED-SUB2 PIC 9(006).

       01  IDX PIC 9(9) BINARY VALUE 0.
       01  TSTREC.
         05  TSTDEP  PIC XXX.
         05  TSTX OCCURS 4 TIMES.
           15  TSTG-1 PIC 99.
           15  TSTX-2 PIC XX OCCURS 4 TIMES.
         05  TSTTAIL1  PIC 99.
         05  TSTCOMP3  PIC 9(5) COMP-3.
         05  TSTLONG   PIC X(100).
         05  TSTHEX    PIC X(100).
         05  TSTHEX2   PIC X(60).
         05  TSTTAILX  PIC X(80).

       LINKAGE SECTION.
       01  X  PIC 9(9) BINARY.
       01  TSPFL-RECORD.
           10  CM-CUST-NUM                     PICTURE X(8).
           10  CM-COMPANY                      PICTURE X(25).
           10  CM-DISK                         PICTURE X(8).
           10  CM-NO-TERMINALS                 PICTURE 9(4).

       PROCEDURE DIVISION USING X, TSPFL-RECORD.
       MAIN-1 SECTION.
            MOVE ALL "X" TO TSTREC.
            MOVE 1 TO TSTG-1 (1).
            MOVE 2 TO TSTG-1 (2).
            MOVE 3 TO TSTG-1 (3).
            MOVE 'A' TO TSTX-2 (1,1).
            MOVE 'B' TO TSTX-2 (2,1).
            MOVE 'C' TO TSTX-2 (3,1).
            MOVE 'xx' TO TSTX-2 (1,4).
            MOVE 'yy' TO TSTX-2 (2,4).
            MOVE 'zz' TO TSTX-2 (3,4).
            MOVE SPACES TO TSTX-2 (1,3).
            MOVE HIGH-VALUES TO TSTX (4).
            MOVE LOW-VALUES TO TSTX-2 (2,3).
            MOVE HIGH-VALUES TO TSTX-2 (3,3).
            MOVE "Quick brown fox jumped over the dog"
              TO TSTLONG, TSTLONG (50:36).
            MOVE "Quicker grey fox jumped the cougar"
              TO TSTHEX (1:35).
       MAIN-2.
            MOVE 17 TO HEXV.
            MOVE HEXC TO TSTHEX (39:1).
            MOVE HEXC TO TSTTAIL1 (2:1).
            MOVE 7 TO HEXV.
            MOVE HEXC TO TSTHEX (47:1).
            MOVE 13 TO HEXV.
            MOVE HEXC TO TSTHEX (59:1).
            MOVE 0 TO HEXV.
            MOVE HEXC TO TSTHEX2 (39:1), TSTHEX2 (10:1).
            MOVE 9 TO HEXV.
            MOVE HEXC TO TSTHEX2 (47:1).
            MOVE '\' TO TSTHEX2 (32:1).
            MOVE 13 TO HEXV.
            MOVE HEXC TO TSTHEX2 (59:1).
            MOVE 'A' TO TSTHEX2 (54:1).
            MOVE LOW-VALUES TO TSTTAILX
            ADD 1 TO X.
            DISPLAY "X is " X.
            ALLOCATE TEST-ALLOCED INITIALIZED.
            COPY cpyabrt.
            IF ADDRESS OF TEST-BASED NOT = NULL
              DISPLAY TEST-BASED-SUB
            END-IF.
            GOBACK.
       END PROGRAM sub1.
])

AT_DATA([sub2.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. sub2.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  ZRO PIC 9(9) BINARY VALUE 0.
       01  HEXV PIC X  COMP-X.
       01  HEXC REDEFINES HEXV PIC X.

       01  IDX PIC 9(9) BINARY VALUE 0.
       01  TSTREC.
         05  TSTDEP  PIC XXX.
         05  TSTX OCCURS 4 TIMES.
           15  TSTG-1 PIC 99.
           15  TSTX-2 PIC XX OCCURS 4 TIMES.
         05  TSTTAIL1  PIC 99.
         05  TSTCOMP3  PIC 9(5) COMP-3.
         05  TSTLONG   PIC X(100).
         05  TSTHEX    PIC X(100).
         05  TSTHEX2   PIC X(60).
         05  TSTTAILX  PIC X(80).

       01  BASED-RECORD BASED.
           10  B-NUM              PICTURE 9(4) VALUE 123.
           10  B-DISK             PICTURE X(8) VALUE "marvdisc".
           10  B-NO-TERMINALS     PICTURE 9(4).
       77  BASED-NEVER-SET        PIC     X    BASED.

       LINKAGE SECTION.
       01  X  PIC 9(9) BINARY.
       01  TSPFL-RECORD.
           10  CM-CUST-NUM        PICTURE X(8).
           10  CM-COMPANY         PICTURE X(25).
           10  CM-DISK            PICTURE X(8).
           10  CM-NO-TERMINALS    PICTURE 9(4).
       77  DYNAMIC-NUM            PICTURE 9(4).

       PROCEDURE DIVISION USING X, TSPFL-RECORD.

           IF ADDRESS OF BASED-RECORD = NULL
              ALLOCATE BASED-RECORD INITIALIZED
           ELSE
              SET ADDRESS OF DYNAMIC-NUM TO ADDRESS OF BASED-RECORD
              ADD 1 TO B-NUM
           END-IF

           IF X = 5440
               CALL "sub1" USING X, OMITTED.
           MOVE ALL "X" TO TSTREC.
           MOVE 1 TO TSTG-1 (1).
           MOVE 2 TO TSTG-1 (2).
           MOVE 3 TO TSTG-1 (3).
           MOVE 'A' TO TSTX-2 (1,1).
           MOVE 'B' TO TSTX-2 (2,1).
           MOVE 'C' TO TSTX-2 (3,1).
           MOVE 'xx' TO TSTX-2 (1,4).
           MOVE 'yy' TO TSTX-2 (2,4).
           MOVE 'zz' TO TSTX-2 (3,4).
           MOVE SPACES TO TSTX-2 (1,3).
           MOVE HIGH-VALUES TO TSTX (4).
           MOVE LOW-VALUES TO TSTX-2 (2,3).
           MOVE HIGH-VALUES TO TSTX-2 (3,3).
           MOVE "Quick brown fox jumped over the dog"
             TO TSTLONG, TSTLONG (50:36).
           MOVE "Quicker grey fox jumped the cougar"
             TO TSTHEX (1:35).
           MOVE 17 TO HEXV.
           MOVE HEXC TO TSTHEX (39:1).
           MOVE HEXC TO TSTTAIL1 (2:1).
           MOVE 7 TO HEXV.
           MOVE HEXC TO TSTHEX (47:1).
           MOVE 13 TO HEXV.
           MOVE HEXC TO TSTHEX (59:1).
           MOVE 0 TO HEXV.
           MOVE HEXC TO TSTHEX2 (39:1), TSTHEX2 (10:1).
           MOVE 9 TO HEXV.
           MOVE HEXC TO TSTHEX2 (47:1).
           MOVE '\' TO TSTHEX2 (32:1).
           MOVE 13 TO HEXV.
           MOVE HEXC TO TSTHEX2 (59:1).
           MOVE 'A' TO TSTHEX2 (54:1).
           MOVE LOW-VALUES TO TSTTAILX.
      *
           COPY cpyabrt.
       END PROGRAM sub2.
])

AT_CHECK([$COMPILE prog.cob sub2.cob], [0], [], [])

AT_CAPTURE_FILE(./tstdump.dump)

# also checking that a dump file without anything to dump does not do anything
AT_CHECK([COB_STACKTRACE=1 COB_DUMP_FILE=tstdump.dump \
$COBCRUN_DIRECT ./prog], [1],
[X is 000000001
X is 000005441
],
[libcob: cpyabrt:4: error: LINKAGE item 'TSPFL-RECORD' (accessed by 'CM-COMPANY') not passed by caller
libcob: cpyabrt:4: warning: implicit CLOSE of FLATFILE ('RELFIX')

 Last statement of "sub1" was at line 4 of cpyabrt
 Last statement of "sub2" was at line 48 of sub2.cob
 Last statement of "prog" was at line 118 of prog.cob
 Started by ./prog
])

AT_CHECK([$COMPILE -fdump=ALL -fno-dump prog.cob sub2.cob], [0], [], [])

# also checking that a dump file without anything to dump does not do anything
AT_CHECK([COB_STACKTRACE=1 COB_DUMP_FILE=tstdump.dump \
$COBCRUN_DIRECT ./prog], [1],
[X is 000000001
X is 000005441
],
[libcob: cpyabrt:4: error: LINKAGE item 'TSPFL-RECORD' (accessed by 'CM-COMPANY') not passed by caller
libcob: cpyabrt:4: warning: implicit CLOSE of FLATFILE ('RELFIX')

 Last statement of "sub1" was at line 4 of cpyabrt
 Last statement of "sub2" was at line 48 of sub2.cob
 Last statement of "prog" was at line 118 of prog.cob
 Started by ./prog
])

AT_CHECK([$COMPILE_MODULE -fdump=ALL prog.cob sub2.cob], [0], [], [])

AT_CHECK([COB_DUMP_FILE=tstdump.dump \
$COBCRUN prog], [1],
[X is 000000001
X is 000005441
],
[libcob: cpyabrt:4: error: LINKAGE item 'TSPFL-RECORD' (accessed by 'CM-COMPANY') not passed by caller
libcob: cpyabrt:4: warning: implicit CLOSE of FLATFILE ('RELFIX')

dump written to tstdump.dump
])

AT_CHECK([COB_DUMP_FILE=NONE \
$COBCRUN prog], [1],
[X is 000000001
X is 000005441
],
[libcob: cpyabrt:4: error: LINKAGE item 'TSPFL-RECORD' (accessed by 'CM-COMPANY') not passed by caller
libcob: cpyabrt:4: warning: implicit CLOSE of FLATFILE ('RELFIX')
])

AT_DATA([reference_tmpl], [
Module dump due to LINKAGE item 'TSPFL-RECORD' (accessed by 'CM-COMPANY') not passed by caller

 Last statement of "sub1" was at line 4 of cpyabrt
 Last statement of "sub2" was at line 48 of sub2.cob
 Last statement of "prog" was at line 118 of prog.cob
 Started by prog

Dump Program-Id sub1 from prog.cob compiled MMM DD YYYY HH:MM:SS

WORKING-STORAGE
**********************
77        RETURN-CODE                     +000000000
01        ZRO                             000000000
01        HEXV                            13
01        TEST-BASED.                    <NULL> address
01        TEST-ALLOCED.
  05      TEST-ALLOCED-SUB1              ALL SPACES
  05      TEST-ALLOCED-SUB2               000000
01        IDX                             000000000
01        TSTREC.
  05      TSTDEP                         'XXX'
  05      TSTX (1).
       15 TSTG-1 (1)                      01
       15 TSTX-2 (1,1)                   'A'
       15 TSTX-2 (1,2)                   'XX'
       15 TSTX-2 (1,3)                   ALL SPACES
       15 TSTX-2 (1,4)                   'xx'
  05      TSTX (2).
       15 TSTG-1 (2)                      02
       15 TSTX-2 (2,1)                   'B'
       15 TSTX-2 (2,2)                   'XX'
       15 TSTX-2 (2,3)                   ALL LOW-VALUES
       15 TSTX-2 (2,4)                   'yy'
  05      TSTX (3).
       15 TSTG-1 (3)                      03
       15 TSTX-2 (3,1)                   'C'
       15 TSTX-2 (3,2)                   'XX'
       15 TSTX-2 (3,3)                   ALL HIGH-VALUES
       15 TSTX-2 (3,4)                   'zz'
  05      TSTX (4).
       15 TSTG-1 (4)                     ALL HIGH-VALUES
       15 TSTX-2 (4,1)                   ALL HIGH-VALUES
       15 TSTX-2 (4,2..4) same as (1)
  05      TSTTAIL1                        X  _
                                     1 x 5811
  05      TSTCOMP3                        58585
  05      TSTLONG                        'Quick brown fox jumped over the dog              Quick br'
                                      57:'own fox jumped over the dog'
  05      TSTHEX                          Q u i c  k e r    g r e y    f o x    j u m  p e d  _
                                     1 x 51756963 6B657220 67726579 20666F78 206A756D 70656420
                                          t h e    c o u g  a r   X  X X   X  X X X X  X X   X
                                    25 x 74686520 636F7567 61722058 58581158 58585858 58580758
                                          X X X X  X X X X  X X   X  X X X X  X X X X  X X X X
                                    49 x 58585858 58585858 58580D58 58585858 58585858 58585858
                                          X X X X  X X X X  X X X X  X X X X  X X X X  X X X X
                                    73 x 58585858 58585858 58585858 58585858 58585858 58585858
                                          X X X X
                                    97 x 58585858
  05      TSTHEX2                        XXXXXXXXX\0XXXXXXXXXXXXXXXXXXXXX\\XXXXXX\0XXXXXXX\tXXXXXX
                                    54 : AXXXX\rX
  05      TSTTAILX                       'Quick brown fox jumped over the dog     '
                                  trailing LOW-VALUES

LINKAGE
**********************
01        X                               000005441
01        TSPFL-RECORD.                  <NULL> address

END OF DUMP - sub1
**********************

Dump Program-Id sub2 from sub2.cob compiled MMM DD YYYY HH:MM:SS

WORKING-STORAGE
**********************
77        RETURN-CODE                     +000000000
01        ZRO                             000000000
01        HEXV                            13
01        IDX                             000000000
01        TSTREC.
  05      TSTDEP                         'XXX'
  05      TSTX (1).
       15 TSTG-1 (1)                      01
       15 TSTX-2 (1,1)                   'A'
       15 TSTX-2 (1,2)                   'XX'
       15 TSTX-2 (1,3)                   ALL SPACES
       15 TSTX-2 (1,4)                   'xx'
  05      TSTX (2).
       15 TSTG-1 (2)                      02
       15 TSTX-2 (2,1)                   'B'
       15 TSTX-2 (2,2)                   'XX'
       15 TSTX-2 (2,3)                   ALL LOW-VALUES
       15 TSTX-2 (2,4)                   'yy'
  05      TSTX (3).
       15 TSTG-1 (3)                      03
       15 TSTX-2 (3,1)                   'C'
       15 TSTX-2 (3,2)                   'XX'
       15 TSTX-2 (3,3)                   ALL HIGH-VALUES
       15 TSTX-2 (3,4)                   'zz'
  05      TSTX (4).
       15 TSTG-1 (4)                     ALL HIGH-VALUES
       15 TSTX-2 (4,1)                   ALL HIGH-VALUES
       15 TSTX-2 (4,2..4) same as (1)
  05      TSTTAIL1                        X  _
                                     1 x 5811
  05      TSTCOMP3                        58585
  05      TSTLONG                        'Quick brown fox jumped over the dog              Quick br'
                                      57:'own fox jumped over the dog'
  05      TSTHEX                          Q u i c  k e r    g r e y    f o x    j u m  p e d  _
                                     1 x 51756963 6B657220 67726579 20666F78 206A756D 70656420
                                          t h e    c o u g  a r   X  X X   X  X X X X  X X   X
                                    25 x 74686520 636F7567 61722058 58581158 58585858 58580758
                                          X X X X  X X X X  X X   X  X X X X  X X X X  X X X X
                                    49 x 58585858 58585858 58580D58 58585858 58585858 58585858
                                          X X X X  X X X X  X X X X  X X X X  X X X X  X X X X
                                    73 x 58585858 58585858 58585858 58585858 58585858 58585858
                                          X X X X
                                    97 x 58585858
  05      TSTHEX2                        XXXXXXXXX\0XXXXXXXXXXXXXXXXXXXXX\\XXXXXX\0XXXXXXX\tXXXXXX
                                    54 : AXXXX\rX
  05      TSTTAILX                       Quick brown fox jumped over the dog     \0ALPHA ELECTRICA
                                    57 : L CO.\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0
01        BASED-RECORD.
     10   B-NUM                           0124
     10   B-DISK                         'marvdisc'
     10   B-NO-TERMINALS                  0000
77        BASED-NEVER-SET                <NULL> address

LINKAGE
**********************
01        X                               000005441
01        TSPFL-RECORD.
     10   CM-CUST-NUM                    'ALP00000'
     10   CM-COMPANY                     'ALPHA ELECTRICAL CO. LTD.'
     10   CM-DISK                        '8417'
     10   CM-NO-TERMINALS                 0010
77        DYNAMIC-NUM                     0124

END OF DUMP - sub2
**********************

Dump Program-Id prog from prog.cob compiled MMM DD YYYY HH:MM:SS

FD FLATFILE
**********************
   File is OPEN
   FILE STATUS  '00'
01        TSPFL-RECORD.
     10   CM-CUST-NUM                    'ALP00000'
     10   CM-COMPANY                     'ALPHA ELECTRICAL CO. LTD.'
     10   CM-DISK                        '8417'
     10   CM-NO-TERMINALS                 0010

WORKING-STORAGE
**********************
77        RETURN-CODE                     +000000000
77        MAX-SUB                         0006
77        CUST-STAT                      ALL ZEROES
77        REC-NUM                         0001
01        BIN                             000005441
01        TEST-DATA.
 02       DATA-CUST-NUM-TBL.
  05      FILLER                         'ALP00000'
  05      FILLER                         'BET00000'
  05      FILLER                         'DEL00000'
  05      FILLER                         'EPS00000'
  05      FILLER                         'FOR00000'
  05      FILLER                         'GAM00000'
 02       DATA-COMPANY-TBL.
  05      FILLER                         'ALPHA ELECTRICAL CO. LTD.'
  05      FILLER                         'BETA SHOE MFG. INC.'
  05      FILLER                         'DELTA LUGGAGE REPAIRS'
  05      FILLER                         'EPSILON EQUIPMENT SUPPLY'
  05      FILLER                         'FORTUNE COOKIE COMPANY'
  05      FILLER                         'GAMMA X-RAY TECHNOLOGY'
 02       DATA-ADDRESS-2-TBL.
  05      FILLER                         'ATLANTA'
  05      FILLER                         'CALGARY'
  05      FILLER                         'NEW YORK'
  05      FILLER                         'TORONTO'
  05      FILLER                         'WASHINGTON'
  05      FILLER                         'WHITEPLAIN'
 02       DATA-NO-TERMINALS-TBL.
  05      FILLER                          010
  05      FILLER                          013
  05      FILLER                          075
  05      FILLER                          010
  05      FILLER                          090
  05      FILLER                          254
01        WORK-AREA.
  05      SUB                             0007
01        SUMS-NON-STD-OCCURS (1)         -000000000000042.345
01        SUMS-NON-STD-OCCURS (2)         +000000000004096.000
01        SUMS-NON-STD-OCCURS (3)         +000000000005440.000
01        SUMS-NON-STD-OCCURS (4)         -000000000000042.345
01        SUMS-NON-STD-OCCURS (5..8) same as (4)

END OF DUMP - prog
**********************

])

# AT_DATA workaround via sed:
AT_CHECK([$SED -e 's/_$//' reference_tmpl > reference], [0], [], [])
AT_CHECK([$SED -e 's/compiled ... .. .... ..:..:../compiled MMM DD YYYY HH:MM:SS/g' \
tstdump.dump > tstdump.sed], [0], [], [])

AT_CHECK([diff reference tstdump.sed], [0], [], [])

# using both
AT_CHECK([COB_STACKTRACE=1 COB_DUMP_FILE=tstdump.dump \
$COBCRUN prog], [1],
[X is 000000001
X is 000005441
],
[libcob: cpyabrt:4: error: LINKAGE item 'TSPFL-RECORD' (accessed by 'CM-COMPANY') not passed by caller
libcob: cpyabrt:4: warning: implicit CLOSE of FLATFILE ('RELFIX')

 Last statement of "sub1" was at line 4 of cpyabrt
 Last statement of "sub2" was at line 48 of sub2.cob
 Last statement of "prog" was at line 118 of prog.cob
 Started by prog

dump written to tstdump.dump
])

AT_CHECK([$SED -e 's/compiled ... .. .... ..:..:../compiled MMM DD YYYY HH:MM:SS/g' \
tstdump.dump > tstdump.sed], [0], [], [])

AT_CHECK([diff reference tstdump.sed], [0], [], [])

AT_CHECK([$COMPILE -fdump=FD,LS prog.cob sub2.cob -o prog_fdls], [0], [], [])

AT_CHECK([COB_DUMP_FILE=tstdump_fdls.dump \
$COBCRUN_DIRECT ./prog_fdls], [1],
[X is 000000001
X is 000005441
],
[libcob: cpyabrt:4: error: LINKAGE item 'TSPFL-RECORD' (accessed by 'CM-COMPANY') not passed by caller
libcob: cpyabrt:4: warning: implicit CLOSE of FLATFILE ('RELFIX')

dump written to tstdump_fdls.dump
])


AT_CAPTURE_FILE(./tstdump_fdls.dump)

AT_DATA([reference_fdls_tmpl], [
Module dump due to LINKAGE item 'TSPFL-RECORD' (accessed by 'CM-COMPANY') not passed by caller

 Last statement of "sub1" was at line 4 of cpyabrt
 Last statement of "sub2" was at line 48 of sub2.cob
 Last statement of "prog" was at line 118 of prog.cob
 Started by ./prog_fdls

Dump Program-Id sub1 from prog.cob compiled MMM DD YYYY HH:MM:SS

LINKAGE
**********************
01        X                               000005441
01        TSPFL-RECORD.                  <NULL> address

END OF DUMP - sub1
**********************

Dump Program-Id sub2 from sub2.cob compiled MMM DD YYYY HH:MM:SS

LINKAGE
**********************
01        X                               000005441
01        TSPFL-RECORD.
     10   CM-CUST-NUM                    'ALP00000'
     10   CM-COMPANY                     'ALPHA ELECTRICAL CO. LTD.'
     10   CM-DISK                        '8417'
     10   CM-NO-TERMINALS                 0010
77        DYNAMIC-NUM                     0124

END OF DUMP - sub2
**********************

Dump Program-Id prog from prog.cob compiled MMM DD YYYY HH:MM:SS

FD FLATFILE
**********************
   File is OPEN
   FILE STATUS  '00'
01        TSPFL-RECORD.
     10   CM-CUST-NUM                    'ALP00000'
     10   CM-COMPANY                     'ALPHA ELECTRICAL CO. LTD.'
     10   CM-DISK                        '8417'
     10   CM-NO-TERMINALS                 0010

END OF DUMP - prog
**********************

])

# AT_DATA workaround via sed:
AT_CHECK([$SED -e 's/_$//' reference_fdls_tmpl > reference], [0], [], [])
AT_CHECK([$SED -e 's/compiled ... .. .... ..:..:../compiled MMM DD YYYY HH:MM:SS/g' \
tstdump_fdls.dump > tstdump.sed], [0], [], [])

AT_CHECK([diff reference tstdump.sed], [0], [], [])

AT_CHECK([$COMPILE -fdump=ALL -fno-dump=LO,WS,SC prog.cob sub2.cob -o prog_allfdls], [0], [], [])

AT_CHECK([COB_DUMP_FILE=tstdump_allfdls.dump \
$COBCRUN_DIRECT ./prog_allfdls], [1],
[X is 000000001
X is 000005441
],
[libcob: cpyabrt:4: error: LINKAGE item 'TSPFL-RECORD' (accessed by 'CM-COMPANY') not passed by caller
libcob: cpyabrt:4: warning: implicit CLOSE of FLATFILE ('RELFIX')

dump written to tstdump_allfdls.dump
])

AT_CHECK([$SED -e 's/compiled ... .. .... ..:..:../compiled MMM DD YYYY HH:MM:SS/g' \
tstdump_allfdls.dump > tstdump.sed], [0], [], [])

AT_CHECK([$SED -e 's/prog_fdls/prog_allfdls/' \
reference > reference_all], [0], [], [])

AT_CHECK([diff reference_all tstdump.sed], [0], [], [])

# CHECKME @ Ron: The result is likely wrong, please verify later
#AT_CHECK([$COMPILE -fdump=LS prog.cob sub2.cob -fsticky-linkage -o prog_ls_sticky], [0], [], [])
#
#AT_CHECK([COB_DUMP_FILE=tstdump_ls_sticky.dump \
#$COBCRUN_DIRECT ./prog_ls_sticky], [1],
#[X is 000000001
#X is 000005441
#],
#[libcob: cpyabrt:4: error: LINKAGE item 'TSPFL-RECORD' (accessed by 'CM-COMPANY') not passed by caller
#libcob: cpyabrt:4: warning: implicit CLOSE of FLATFILE ('RELFIX')
#
#dump written to tstdump_ls_sticky.dump
#])
#
#
#AT_CAPTURE_FILE(./tstdump_ls_sticky.dump)
#
#AT_DATA([reference_ls_sticky_tmpl], [
#Module dump due to LINKAGE item 'TSPFL-RECORD' (accessed by 'CM-COMPANY') not passed by caller
#
# Last statement of "sub1" was at line 4 of cpyabrt
 Last statement of "sub2" was at line 48 of sub2.cob
# Last statement of "prog" was at line 118 of prog.cob
# Started by ./prog_ls_sticky
#
#Dump Program-Id sub1 from prog.cob compiled MMM DD YYYY HH:MM:SS
#
#LINKAGE
#**********************
#01        X                               000005441
#01        TSPFL-RECORD.                  <NULL> address
#
#Dump Program-Id sub2 from sub2.cob compiled MMM DD YYYY HH:MM:SS
#
#LINKAGE
#**********************
#01        X                               000005441
#01        TSPFL-RECORD.
#     10   CM-CUST-NUM                    'ALP00000'
#     10   CM-COMPANY                     'ALPHA ELECTRICAL CO. LTD.'
#     10   CM-DISK                        '8417'
#     10   CM-NO-TERMINALS                 0010
#77        DYNAMIC-NUM                     0124
#
#Dump Program-Id prog from prog.cob compiled MMM DD YYYY HH:MM:SS
#
#])
#
## AT_DATA workaround via sed:
#AT_CHECK([$SED -e 's/_$//' reference_ls_sticky_tmpl > reference], [0], [], [])
#AT_CHECK([$SED -e 's/compiled ... .. .... ..:..:../compiled MMM DD YYYY HH:MM:SS/g' \
#tstdump_ls_sticky.dump > tstdump.sed], [0], [], [])
#
#AT_CHECK([diff reference tstdump.sed], [0], [], [])

AT_CLEANUP


AT_SETUP([dump feature with NULL address])
#AT_KEYWORDS([Dump])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID. prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  P2           USAGE POINTER.

       01 TAB-ADR-COUNT            PIC S9(4)      VALUE 8.

       01 TAB-ADR OCCURS 0 TO 1000 TIMES
            DEPENDING ON TAB-ADR-COUNT
            INDEXED BY TAB-ADR-IND.
          05 TAB-ADR-ELEMENT.
              10 TAB-ADR-PRGM         PIC X(8).
              10 TAB-ADR-ID           PIC X(2).
              10 TAB-ADR-ADR-64       PIC S9(16) COMP-5.
              10 TAB-ADR-LAST-ADR-64  PIC S9(16) COMP-5.

       01  GRP-X BASED.
           05   FILLER  PIC X(3).
           05   FLD-X   OCCURS 10 TIMES.
             10 FLD-X-Y   PIC 9999 VALUE 2020.
             10 FLD-X-M   PIC 99 VALUE 11.
             10 FLD-X-X   PIC X(128) VALUE "This is something ".
           05   FILLER  PIC X(3).

       01  GRP-1.
           05   FILLER  PIC X(3).
           05   FLD-1   OCCURS 10 TIMES.
             10 FLD-1-Y   PIC 9999 VALUE 2020.
             10 FLD-1-M   PIC 99 VALUE 11.
             10 FLD-1-X   PIC X(128) VALUE "This is something ".
           05   FILLER  PIC X(3).

       01  GRP-2.
           05   FILLER  PIC X(3).
           05   FLD-2   PIC X(42) VALUE ALL "ABCD ".
           05   FILLER  PIC X(3).
       01  GRP-2A.
           05   FILLER  PIC X(2).
           05   FLD-2A  PIC X(8) VALUE ALL "ABC".
           05   FILLER  PIC X(1200) VALUE "X".
       01  GRP-3.
           05   FILLER  PIC X(3).
           05   FLD-3   OCCURS 3 TIMES.
                15   FLD-3-2 PIC XXX VALUE "ABC".
                15   FLD-3-3 PIC 99  VALUE ZERO.
                15           OCCURS 4 VALUE ALL "D99".
                     25   FLD-3O-1 PIC X.
                     25   FLD-3O-2 PIC 99.
                15   FLD-3-4 PIC XX  VALUE ALL "X".
           05   FILLER  PIC X(3).

       77  C5    PIC 9(03)  VALUE 6.
       01  GRP-5.
           05   FILLER  PIC X(3).
           05   FLD-5.
              10   FLD-5-1 OCCURS 0 TO 9 TIMES
                        DEPENDING ON C5.
                15   FLD-5-2 PIC XXX VALUE "Mon".
                15   FLD-5-3 PIC 99  VALUE 49.
                15   FLD-5-4 PIC XX  VALUE "ey".

       LINKAGE SECTION.
       01  A-TABLE.
           03  prefix.
               05  n    PIC 9(03)  VALUE 123.
           03  table-data value all "ABCDE".
            04  rows    OCCURS 0 TO UNBOUNDED TIMES
                        DEPENDING ON n.
               05 col1  PIC X.
               05 col2  PIC X(02).

       PROCEDURE DIVISION.
           MOVE ALL "*" TO GRP-2
           INITIALIZE FLD-2 ALL TO VALUE
           DISPLAY "GRP-2:" GRP-2.
      *
           MOVE ALL "*" TO GRP-3
           INITIALIZE GRP-3 NUMERIC TO VALUE
           INITIALIZE FLD-3 (1) ALL TO VALUE
           INITIALIZE FLD-3 (2) ALL TO VALUE
           INITIALIZE FLD-3 (3) ALL TO VALUE
           INITIALIZE FLD-3O-1 (3,2), FLD-3O-2 (3,2)
           DISPLAY "GRP-3:" GRP-3.
      *
           MOVE 7       TO c5
           MOVE ALL "*" TO GRP-5
           INITIALIZE FLD-5 ALL TO VALUE
           DISPLAY "GRP-5:" GRP-5.
      *
           MOVE SPACES  TO GRP-2A
           MOVE "Peek"  TO GRP-2A (510:4)
           MOVE "Boo"   TO GRP-2A (910:3)
           MOVE X"FE99" TO GRP-2A (910:2)
           MOVE "You"   TO GRP-2A (1010:3)
           MOVE "$$"    TO FLD-5-4 (5)
           MOVE "Something else!" TO FLD-1-X (5).
      *
           SET P2 TO NULL
           SET ADDRESS OF A-TABLE TO NULL
           MOVE ALL ZEROES TO A-TABLE (1: (LENGTH OF A-TABLE)).
      *
           STOP RUN.
])

AT_CHECK([$COMPILE -fdump=ALL prog.cob], [0], [], [])

AT_CHECK([COB_DUMP_FILE=dumpall.txt \
$COBCRUN_DIRECT ./prog "param 1" param 'param 3'], [1],
[GRP-2:***ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD AB***
GRP-3:***ABC00D99D99D99D99XXABC00D99D99D99D99XXABC00D99 00D99D99XX***
GRP-5:***Mon49eyMon49eyMon49eyMon49eyMon49eyMon49eyMon49ey
],
[libcob: prog.cob:102: error: BASED/LINKAGE item 'A-TABLE' has NULL address

dump written to dumpall.txt
])

AT_CAPTURE_FILE(./dumpall.txt)

AT_DATA([reference_tmpl], [
Module dump due to BASED/LINKAGE item 'A-TABLE' has NULL address

 Last statement of "prog" was at line 102 of prog.cob
 Started by ./prog
            param 1
            param
            param 3

Dump Program-Id prog from prog.cob compiled MMM DD YYYY HH:MM:SS

WORKING-STORAGE
**********************
77        RETURN-CODE                     +000000000
01        P2                              0x0000000000000000
01        TAB-ADR-COUNT                   +0008
   INDEX  TAB-ADR-IND                     +000000001
01        TAB-ADR (1).
  05      TAB-ADR-ELEMENT (1).
     10   TAB-ADR-PRGM (1)               ALL SPACES
     10   TAB-ADR-ID (1)                 ALL SPACES
     10   TAB-ADR-ADR-64 (1)              +00000000000000000000
     10   TAB-ADR-LAST-ADR-64 (1)         +00000000000000000000
01        TAB-ADR (2..8) same as (1)
01        GRP-X.                         <NULL> address
01        GRP-1.
  05      FILLER                         ALL SPACES
  05      FLD-1 (1).
     10   FLD-1-Y (1)                     2020
     10   FLD-1-M (1)                     11
     10   FLD-1-X (1)                    'This is something'
  05      FLD-1 (2..4) same as (1)
  05      FLD-1 (5).
     10   FLD-1-Y (5)                     2020
     10   FLD-1-M (5)                     11
     10   FLD-1-X (5)                    'Something else!'
  05      FLD-1 (6).
     10   FLD-1-Y (6)                     2020
     10   FLD-1-M (6)                     11
     10   FLD-1-X (6)                    'This is something'
  05      FLD-1 (7..10) same as (6)
  05      FILLER                         ALL SPACES
01        GRP-2.
  05      FILLER                         '***'
  05      FLD-2                          'ABCD ABCD ABCD ABCD ABCD ABCD ABCD ABCD AB'
  05      FILLER                         '***'
01        GRP-2A.
  05      FILLER                         ALL SPACES
  05      FLD-2A                         ALL SPACES
  05      FILLER                                                                              _
                                     1 x 20202020 20202020 20202020 20202020 20202020 20202020
                                         --- 25 thru 492 same as above ---
                                                         P  e e k                             _
                                   493 x 20202020 20202050 65656B20 20202020 20202020 20202020
                                                                                              _
                                   517 x 20202020 20202020 20202020 20202020 20202020 20202020
                                         --- 541 thru 878 same as above ---
                                                                                             _
                                   879 x 2020 20202020 20202020 20202020 20202020 202020FE 99
                                          o                                                  _
                                   902 x 6F2020 20202020 20202020 20202020 20202020 20202020 _
                                                                                              _
                                   925 x 20202020 20202020 20202020 20202020 20202020 20202020_
                                         --- 949 thru 974 same as above ---
                                                                                             _
                                   975 x 2020 20202020 20202020 20202020 20202020 20202020 20
                                              Y  o u                                         _
                                   998 x 202059 6F752020 20202020 20202020 20202020 20202020 _
                                                                                              _
                                  1021 x 20202020 20202020 20202020 20202020 20202020 20202020
                                         --- 1045 thru 1174 same as above ---
                                                                                             _
                                  1175 x 2020 20202020 20202020 20202020 20202020 20202020 20
                                               _
                                  1198 x 202020
01        GRP-3.
  05      FILLER                         '***'
  05      FLD-3 (1).
       15 FLD-3-2 (1)                    'ABC'
       15 FLD-3-3 (1)                     00
       15 FILLER (1,1).
       25 FLD-3O-1 (1,1)                 'D'
       25 FLD-3O-2 (1,1)                  99
       15 FILLER (1,2..4) same as (1)
       15 FLD-3-4 (1)                    'XX'
  05      FLD-3 (2) same as (1)
  05      FLD-3 (3).
       15 FLD-3-2 (3)                    'ABC'
       15 FLD-3-3 (3)                     00
       15 FILLER (3,1).
       25 FLD-3O-1 (3,1)                 'D'
       25 FLD-3O-2 (3,1)                  99
       15 FILLER (3,2).
       25 FLD-3O-1 (3,2)                 ALL SPACES
       25 FLD-3O-2 (3,2)                  00
       15 FILLER (3,3).
       25 FLD-3O-1 (3,3)                 'D'
       25 FLD-3O-2 (3,3)                  99
       15 FILLER (3,4) same as (3)
       15 FLD-3-4 (3)                    'XX'
  05      FILLER                         '***'
77        C5                              007
01        GRP-5.
  05      FILLER                         '***'
  05      FLD-5.
     10   FLD-5-1 (1).
       15 FLD-5-2 (1)                    'Mon'
       15 FLD-5-3 (1)                     49
       15 FLD-5-4 (1)                    'ey'
     10   FLD-5-1 (2..4) same as (1)
     10   FLD-5-1 (5).
       15 FLD-5-2 (5)                    'Mon'
       15 FLD-5-3 (5)                     49
       15 FLD-5-4 (5)                    '$$'
     10   FLD-5-1 (6).
       15 FLD-5-2 (6)                    'Mon'
       15 FLD-5-3 (6)                     49
       15 FLD-5-4 (6)                    'ey'
     10   FLD-5-1 (7) same as (6)

LINKAGE
**********************
01        A-TABLE.                       <NULL> address

END OF DUMP - prog
**********************

])

# AT_DATA workaround via sed:
AT_CHECK([$SED -e 's/compiled ... .. .... ..:..:../compiled MMM DD YYYY HH:MM:SS/g' \
dumpall.txt > dumpall.sed], [0], [], [])

AT_CHECK([test "$COB_HAS_64_BIT_POINTER" = "yes"], [0], [], [],
# Previous test "failed" --> 32 bit
  AT_CHECK([$SED -e 's/_$//; s/0x0000000000000000/0x00000000/' reference_tmpl > reference], [0], [], [])
,
# Previous test "passed" --> 64 bit
  AT_CHECK([$SED -e 's/_$//' reference_tmpl > reference], [0], [], [])
)

AT_CHECK([diff reference dumpall.sed], [0], [], [])

AT_CLEANUP


AT_SETUP([CALL with program prototypes])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       PROCEDURE DIVISION.
           CALL "c"
           .
       END PROGRAM prog.


       IDENTIFICATION DIVISION.
       PROGRAM-ID. a AS "blah?Sdk".

       PROCEDURE DIVISION.
           DISPLAY "Hello!"
           .
       END PROGRAM a.


       IDENTIFICATION DIVISION.
       PROGRAM-ID. b.

       PROCEDURE DIVISION.
           DISPLAY "Hello again!"
           .
       END PROGRAM b.


       IDENTIFICATION DIVISION.
       PROGRAM-ID. c.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       REPOSITORY.
           PROGRAM d AS "blah?Sdk"
           PROGRAM b
           .

       PROCEDURE DIVISION.
           CALL d
           CALL b
           .
       END PROGRAM c.
])

AT_CHECK([$COMPILE -o prog prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[Hello!
Hello again!
])
AT_CLEANUP


AT_SETUP([REDEFINES values on FILLER and INITIALIZE])
AT_KEYWORDS([runmisc INITIALIZE])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  TSRDF.
           05  WS-ASK-ID-DATE                PIC X(10) VALUE ALL '*'.
           05  WS-ASK-ID-DATE-R              REDEFINES WS-ASK-ID-DATE.
               10  WS-ASK-ID-DATE-YYYY       PIC 9(4) VALUE 2017.
               10  FILLER                    PIC X VALUE '-'.
               10  WS-ASK-ID-DATE-MM         PIC 9(2).
               10  FILLER                    PIC X VALUE '-'.
               10  WS-ASK-ID-DATE-DD         PIC 9(2).
       PROCEDURE DIVISION.
           MOVE 2015 TO WS-ASK-ID-DATE-YYYY
           MOVE 08 TO WS-ASK-ID-DATE-MM
           MOVE 21 TO WS-ASK-ID-DATE-DD
           DISPLAY "The date is " WS-ASK-ID-DATE " Compiled".

           INITIALIZE WS-ASK-ID-DATE-R.
           MOVE 08 TO WS-ASK-ID-DATE-MM
           MOVE 21 TO WS-ASK-ID-DATE-DD
           DISPLAY "The date is " WS-ASK-ID-DATE " INITIALIZE".

           INITIALIZE WS-ASK-ID-DATE-R WITH FILLER.
           MOVE 08 TO WS-ASK-ID-DATE-MM
           MOVE 21 TO WS-ASK-ID-DATE-DD
           DISPLAY "The date is " WS-ASK-ID-DATE " WITH FILLER".

           INITIALIZE WS-ASK-ID-DATE-R WITH FILLER ALL TO VALUE.
           MOVE 08 TO WS-ASK-ID-DATE-MM
           MOVE 21 TO WS-ASK-ID-DATE-DD
           DISPLAY "The date is " WS-ASK-ID-DATE " ALL TO VALUE".
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [],
[prog.cob:9: warning: initial VALUE clause ignored for REDEFINES item 'WS-ASK-ID-DATE-YYYY'
prog.cob:10: warning: initial VALUE clause ignored for REDEFINES item 'FILLER'
prog.cob:12: warning: initial VALUE clause ignored for REDEFINES item 'FILLER'
])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[The date is 2015*08*21 Compiled
The date is 0000*08*21 INITIALIZE
The date is 0000 08 21 WITH FILLER
The date is 2017-08-21 ALL TO VALUE
], [])

AT_CLEANUP


AT_SETUP([PICTURE with constant-name])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  foo-bar     CONSTANT 8.
       01  x           PIC 9(foo-bar)9(foo-bar).

       PROCEDURE DIVISION.
           IF FUNCTION LENGTH (x) <> 16
               DISPLAY FUNCTION LENGTH (x)
           END-IF
           .
       END PROGRAM prog.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [],
[prog.cob:11: warning: expression '16' NOT EQUAL '16' is always FALSE
])
AT_CHECK([$COMPILE -fno-constant-folding prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CLEANUP


AT_SETUP([Quote marks in comment paragraphs])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.
       DATE-written.  hello'".
      *> Written is intentionally lowercase.
      *> extra " to fix syntax highlighting
       PROCEDURE      DIVISION.
           DISPLAY "Hello, world!"
           .
])

AT_CHECK([$COMPILE -o prog prog.cob], [0], [],
[prog.cob:4: warning: DATE-WRITTEN is obsolete in GnuCOBOL
])
AT_CHECK([$COMPILE -free -o prog prog.cob], [0], [],
[prog.cob:3: warning: DATE-WRITTEN is obsolete in GnuCOBOL
])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[Hello, world!
])
AT_CLEANUP


AT_SETUP([Numeric MOVE with/without -fbinary-truncate])
AT_KEYWORDS([runmisc size])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  x PIC 9(4) COMP.

       PROCEDURE       DIVISION.
           MOVE 30000 TO x
           PERFORM check-x-val

           COMPUTE x = 30000
           PERFORM check-x-val

           MOVE ZERO TO x
           ADD 30000 TO x
           PERFORM check-x-val

           GOBACK
           .
       check-x-val     SECTION.
           EVALUATE x
               WHEN >= 10000
                   DISPLAY "x >= 10000"

               WHEN ZERO
                   DISPLAY "x IS ZERO"

               WHEN OTHER
                   CONTINUE
           END-EVALUATE
           .
       END PROGRAM prog.
])

AT_CHECK([$COMPILE prog.cob], [0], [],
[prog.cob:10: warning: value size exceeds data size
prog.cob:10: note: value is 30000
prog.cob:7: note: 'x' defined here as PIC 9(4)
])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[x IS ZERO
x IS ZERO
x IS ZERO
])

AT_CHECK([$COMPILE -fno-binary-truncate prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[x >= 10000
x >= 10000
x >= 10000
])

AT_CLEANUP


AT_SETUP([Alphanumeric MOVE with truncation])
AT_KEYWORDS([misc fundamental size])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x-left  PIC X(03).
       01  x-right PIC X(03) JUSTIFIED RIGHT.

       PROCEDURE DIVISION.
           MOVE '1234' TO x-left, x-right
           IF x-left  not = '123'
           OR x-right not = '234'
              DISPLAY 'error with "1234":'
              END-DISPLAY
              DISPLAY x-left
              END-DISPLAY
              DISPLAY x-right
              END-DISPLAY
           END-IF
           MOVE '   3' TO x-left, x-right
           IF x-left  not = spaces
           OR x-right not = '  3'
              DISPLAY 'error with "   3":'
              END-DISPLAY
              DISPLAY x-left
              END-DISPLAY
              DISPLAY x-right
              END-DISPLAY
           END-IF
           MOVE '3   ' TO x-left, x-right
           IF x-left  not = '3'
           OR x-right not = spaces
              DISPLAY 'error with "3   ":'
              END-DISPLAY
              DISPLAY x-left
              END-DISPLAY
              DISPLAY x-right
              END-DISPLAY
           END-IF
           .
])

AT_CHECK([$COMPILE -Wno-truncate prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CLEANUP


AT_SETUP([PROGRAM-ID / CALL literal/variable with spaces])
AT_KEYWORDS([CALL])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  MYRTN  PIC X(9) VALUE " SUB  ".

       PROCEDURE DIVISION.
           CALL " SUB " USING 'X'.
           MOVE x'00' TO MYRTN (6:1).
           CALL MYRTN   USING 'Y'.
           CALL "SUB"   USING 'Z'.
           CALL "S U B" USING 'A'.
           MOVE " S U B" TO MYRTN.
           CALL MYRTN   USING 'B'.
           STOP RUN.
       END PROGRAM prog.

       IDENTIFICATION DIVISION.
       PROGRAM-ID. "SUB ".

       DATA DIVISION.
       LINKAGE SECTION.
       01  x  PIC X.

       PROCEDURE DIVISION USING x.
            DISPLAY "SUB GOT " X
            END-DISPLAY.
       END PROGRAM " SUB".

       IDENTIFICATION DIVISION.
       PROGRAM-ID. "S U B".

       DATA DIVISION.
       LINKAGE SECTION.
       01  x  PIC X.

       PROCEDURE DIVISION USING x.
            DISPLAY "S U B  GOT " X
            END-DISPLAY.
       END PROGRAM "S U B".
])

AT_CHECK([$COMPILE prog.cob], [0], [],
[prog.cob:10: warning: ' SUB ' literal includes leading spaces which are omitted
prog.cob:10: warning: ' SUB ' literal includes trailing spaces which are omitted
prog.cob:21: warning: 'SUB ' literal includes trailing spaces which are omitted
prog.cob:30: warning: ' SUB' literal includes leading spaces which are omitted
])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[SUB GOT X
SUB GOT Y
SUB GOT Z
S U B  GOT A
S U B  GOT B
],
[libcob: prog.cob:12: warning: ' SUB' literal includes leading spaces which are omitted
libcob: prog.cob:16: warning: ' S U B' literal includes leading spaces which are omitted
])

AT_CLEANUP


AT_SETUP([C-API Test (param based)])
AT_KEYWORDS([CALL api])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  BINFLD5     PIC  9(5) COMP-5  VALUE  1280.
       01  BINFLD5S    PIC S9(5) BINARY  VALUE  1024.
       01  BINFLD9     PIC  9(9) BINARY  VALUE  2560.
       01  COMP3       PIC  9(8) COMP-3  VALUE  4096.
       01  COMP3V99    PIC S9(7)V99 COMP-3  VALUE  12.50.
       01  PIC9        PIC S9(8) DISPLAY VALUE  8192.
       01  NE          PIC Z(4)9.99-.
       01  CHRX        PIC  X(9)         VALUE 'Hello'.
      *01  CHRN        PIC  N(9)         VALUE N'Hello'.
       01  GRPX.
           05  FILLER  PIC  X(9)         VALUE 'Hello'.
           05  FILLER  PIC  X(9)         VALUE 'World'.
       PROCEDURE DIVISION.
           MOVE -512.77 TO NE.
           CALL "CAPI" USING 2560 BY VALUE 16.
           CALL "CAPI" USING BINFLD5, NE.
           CALL "CAPI" USING BINFLD5S.
           CALL "CAPI" USING BINFLD9.
           MOVE  512.77 TO NE.
           CALL "CAPI" USING COMP3, NE.
           CALL "CAPI" USING PIC9 BINFLD5S CHRX GRPX.
           CALL "CAPI" USING COMP3, NE, CHRX.
           CALL "CAPI" USING BINFLD5, NE.
           MOVE "Hello!" TO CHRX.
           CALL "CAPI" USING BY VALUE BINFLD5, CHRX.
           CALL "CAPI" USING BY VALUE BINFLD5, CHRX.
           CALL "CAPI" USING LENGTH OF GRPX.
           CALL "CAPI" USING BY VALUE GRPX LENGTH OF GRPX.
           CALL "CAPI" USING "Fred Fish", COMP3.
           CALL "CAPI" USING COMP3V99.
      *    CALL "CAPI" USING CHRN.
           CALL "CAPI" .
           DISPLAY "COMP3    is now " COMP3 ";".
           DISPLAY "COMP4    is now " BINFLD5 ";".
           DISPLAY "BINFLD5S is now " BINFLD5S ";".
           DISPLAY "CHRX     is now " CHRX ";".
           DISPLAY "NE       is now " NE ";".
           STOP RUN.
])

AT_DATA([cmod.c], [[
#include <stdio.h>
#include <string.h>
#include <libcob.h>

static char *
getType (int type, int byvalue)
{
   static char wrk[24];
   switch (type) {
#if 1
   case COB_TYPE_GROUP:           return "Group";
   case COB_TYPE_NUMERIC_COMP5:
       /* fall through as the test will have different results
          on big endian systems otherwise
        return "COMP-5"; */
        COB_UNUSED (byvalue);
   case COB_TYPE_NUMERIC_BINARY:  return "BINARY";
   case COB_TYPE_NUMERIC_PACKED:  return "COMP-3";
   case COB_TYPE_NUMERIC_FLOAT:   return "COMP-1";
   case COB_TYPE_NUMERIC_DOUBLE:  return "COMP-2";
   case COB_TYPE_NUMERIC_DISPLAY: return "DISPLAY";
   case COB_TYPE_ALPHANUMERIC:    return "X";
   case COB_TYPE_NUMERIC_EDITED:  return "EDITED";
   case COB_TYPE_NATIONAL:        return "N";
#else
   case COB_TYPE_GROUP:           return "Group";
   case COB_TYPE_NUMERIC_COMP5:
        return byvalue == 2 ? "COMP-4" : "COMP-5";
   case COB_TYPE_NUMERIC_BINARY:  return "COMP-4";
   case COB_TYPE_NUMERIC_PACKED:  return "COMP-3";
   case COB_TYPE_NUMERIC_FLOAT:   return "COMP-1";
   case COB_TYPE_NUMERIC_DOUBLE:  return "COMP-2";
   case COB_TYPE_NUMERIC_DISPLAY: return "DISPLAY";
   case COB_TYPE_ALPHANUMERIC:    return "X";
   case COB_TYPE_NUMERIC_EDITED:  return "EDITED";
   case COB_TYPE_NATIONAL:        return "N";
#endif
   }
   sprintf (wrk,"Type %04X",type);
   return wrk;
}

COB_EXT_EXPORT int
CAPI (void *p1, ...)
{
   int      k,nargs,type,digits,scale,size,sign,byvalue;
   cob_s64_t   val = 0;
   char     *str;
   char     wrk[80],pic[30];	/* note: maximum _theoretical_ size */

   nargs = cob_get_num_params();
   printf ("CAPI called with %d parameters\n",nargs);
   for (k=1; k <= nargs; k++) {
      type   = cob_get_param_type (k);
      digits = cob_get_param_digits (k);
      scale  = cob_get_param_scale (k);
      size   = cob_get_param_size (k);
      sign   = cob_get_param_sign (k);
      byvalue = cob_get_param_constant(k);
      printf (" %d: %-8s ", k, getType (type, byvalue));
      if (byvalue) {
         printf ("BY VALUE     ");
      } else {
         printf ("BY REFERENCE ");
      }
      if (type == COB_TYPE_ALPHANUMERIC) {
         sprintf (pic, "X(%d)", size);
         str = cob_get_picx_param (k, NULL, 0);
         printf ("%-11s '%s'", pic, str);
         cob_free ((void*)str);
         cob_put_picx_param (k, "Bye!");
      } else if (type == COB_TYPE_NATIONAL) {
         sprintf (pic, "N(%d)", size); /* FIXME */
         printf ("exchange of national data is not supported yet");
      } else if (type == COB_TYPE_GROUP) {
         sprintf (pic, "(%d)", size);
         str = cob_get_grp_param (k, NULL, 0);
         printf ("%-11s '%.*s'", pic, size, str);
         cob_free ((void*)str);
         memset (wrk,' ',sizeof(wrk));
         memcpy (wrk,"Bye-Bye Birdie!",15);
         cob_put_grp_param (k, wrk, sizeof(wrk));
      } else if (type == COB_TYPE_NUMERIC_EDITED) {
         if (scale > 0) {
            sprintf (pic,"%s9(%d)V9(%d)",sign?"S":"",digits-scale,scale);
         } else {
            sprintf (pic,"%s9(%d)",sign?"S":"",digits-scale);
         }
         val = cob_get_s64_param (k);
         printf ("%-11s %lld ",pic,val);
         val = val + 130;
         val = -val;
         cob_put_s64_param (k, val);
         cob_get_grp_param (k, wrk, sizeof(wrk));
         printf (" to %.*s",size,wrk);
      } else {
         if(scale > 0) {
            sprintf (pic,"%s9(%d)V9(%d)",sign?"S":"",digits-scale,scale);
         } else {
            sprintf (pic,"%s9(%d)",sign?"S":"",digits-scale);
         }
         val = cob_get_s64_param (k);
         printf ("%-11s %lld", pic, val);
         cob_put_s64_param (k, val + 3);
      }
      printf (";\n");
      fflush (stdout);
   }
   if (nargs > 2) {
      cob_put_s64_param (7, val + 3);
   }
   return 0;
}
]])

AT_CHECK([$COMPILE -Wno-unfinished prog.cob cmod.c], [0], [],
[prog.cob:31: warning: BY CONTENT assumed for alphanumeric item 'CHRX'
prog.cob:32: warning: BY CONTENT assumed for alphanumeric item 'CHRX'
prog.cob:34: warning: BY CONTENT assumed for alphanumeric item 'GRPX'
])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[CAPI called with 2 parameters
 1: BINARY   BY VALUE     S9(9)       2560;
 2: DISPLAY  BY VALUE     9(2)        16;
CAPI called with 2 parameters
 1: BINARY   BY REFERENCE 9(5)        1280;
 2: EDITED   BY REFERENCE S9(5)V9(2)  -51277  to   511.47 ;
CAPI called with 1 parameters
 1: BINARY   BY REFERENCE S9(5)       1024;
CAPI called with 1 parameters
 1: BINARY   BY REFERENCE 9(9)        2560;
CAPI called with 2 parameters
 1: COMP-3   BY REFERENCE 9(8)        4096;
 2: EDITED   BY REFERENCE S9(5)V9(2)  51277  to   514.07-;
CAPI called with 4 parameters
 1: DISPLAY  BY REFERENCE S9(8)       8192;
 2: BINARY   BY REFERENCE S9(5)       1027;
 3: X        BY REFERENCE X(9)        'Hello';
 4: Group    BY REFERENCE (18)        'Hello    World    ';
CAPI called with 3 parameters
 1: COMP-3   BY REFERENCE 9(8)        4099;
 2: EDITED   BY REFERENCE S9(5)V9(2)  -51407  to   512.77 ;
 3: X        BY REFERENCE X(9)        'Bye!';
CAPI called with 2 parameters
 1: BINARY   BY REFERENCE 9(5)        1283;
 2: EDITED   BY REFERENCE S9(5)V9(2)  51277  to   514.07-;
CAPI called with 2 parameters
 1: BINARY   BY REFERENCE 9(5)        1286;
 2: X        BY VALUE     X(9)        'Hello!';
CAPI called with 2 parameters
 1: BINARY   BY REFERENCE 9(5)        1289;
 2: X        BY VALUE     X(9)        'Hello!';
CAPI called with 1 parameters
 1: BINARY   BY VALUE     S9(9)       18;
CAPI called with 2 parameters
 1: Group    BY VALUE     (18)        'Bye-Bye Birdie!   ';
 2: DISPLAY  BY VALUE     9(2)        18;
CAPI called with 2 parameters
 1: X        BY VALUE     X(9)        'Fred Fish';
 2: COMP-3   BY REFERENCE 9(8)        4102;
CAPI called with 1 parameters
 1: COMP-3   BY REFERENCE S9(7)V9(2)  1250;
CAPI called with 0 parameters
COMP3    is now 00004105;
COMP4    is now 0000001292;
BINFLD5S is now +01030;
CHRX     is now Hello!   ;
NE       is now   514.07-;
],
[libcob: prog.cob:21: warning: cob_put_s64_param: attempt to over-write constant parameter 1 with 2563
libcob: prog.cob:21: warning: cob_put_s64_param: attempt to over-write constant parameter 2 with 19
libcob: prog.cob:27: warning: cob_put_s64_param: parameter 7 is not within range of 4
libcob: prog.cob:28: warning: cob_put_s64_param: parameter 7 is not within range of 3
libcob: prog.cob:31: warning: cob_put_picx_param: attempt to over-write constant parameter 2 with 'Bye!'
libcob: prog.cob:32: warning: cob_put_picx_param: attempt to over-write constant parameter 2 with 'Bye!'
libcob: prog.cob:33: warning: cob_put_s64_param: attempt to over-write constant parameter 1 with 21
libcob: prog.cob:34: warning: cob_put_grp_param: attempt to over-write constant parameter 1
libcob: prog.cob:34: warning: cob_put_s64_param: attempt to over-write constant parameter 2 with 21
libcob: prog.cob:35: warning: cob_put_picx_param: attempt to over-write constant parameter 1 with 'Bye!'
])

AT_CLEANUP


AT_SETUP([C-API Test (field based)])
AT_KEYWORDS([CALL api])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  BINFLD5     PIC  9(5) COMP-5  VALUE  1280.
       01  BINFLD5S    PIC S9(5) BINARY  VALUE  1024.
       01  BINFLD9     PIC  9(9) BINARY  VALUE  2560.
       01  COMP3       PIC  9(8) COMP-3  VALUE  4096.
       01  COMP3V99    PIC S9(7)V99 COMP-3  VALUE  12.50.
       01  PIC9        PIC S9(8) DISPLAY VALUE  8192.
       01  NE          PIC Z(4)9.99-.
       01  CHRX        PIC  X(9)         VALUE 'Hello'.
      *01  CHRN        PIC  N(9)         VALUE N'Hello'.
       01  GRPX.
           05  FILLER  PIC  X(9)         VALUE 'Hello'.
           05  FILLER  PIC  X(9)         VALUE 'World'.
       PROCEDURE DIVISION.
           MOVE -512.77 TO NE.
           CALL "CAPI" USING 2560 BY VALUE 16.
           CALL "CAPI" USING BINFLD5, NE.
           CALL "CAPI" USING BINFLD5S.
           CALL "CAPI" USING BINFLD9.
           MOVE  512.77 TO NE.
           CALL "CAPI" USING COMP3, NE.
           CALL "CAPI" USING PIC9 BINFLD5S CHRX GRPX.
           CALL "CAPI" USING COMP3, NE, CHRX.
           CALL "CAPI" USING BINFLD5, NE.
           MOVE "Hello!" TO CHRX.
           CALL "CAPI" USING BY VALUE BINFLD5, CHRX.
           CALL "CAPI" USING BY VALUE BINFLD5, CHRX.
           CALL "CAPI" USING LENGTH OF GRPX.
           CALL "CAPI" USING BY VALUE GRPX LENGTH OF GRPX.
           CALL "CAPI" USING "Fred Fish", COMP3.
           CALL "CAPI" USING COMP3V99.
      *    CALL "CAPI" USING CHRN.
           CALL "CAPI" .
           DISPLAY "COMP3    is now " COMP3 ";".
           DISPLAY "COMP4    is now " BINFLD5 ";".
           DISPLAY "BINFLD5S is now " BINFLD5S ";".
           DISPLAY "CHRX     is now " CHRX ";".
           DISPLAY "NE       is now " NE ";".
           STOP RUN.
])

AT_DATA([cmod.c], [[
#include <stdio.h>
#include <string.h>
#include <libcob.h>

static char *
getType (int type, int byvalue)
{
   static char wrk[24];
   switch (type) {
#if 1
   case COB_TYPE_GROUP:           return "Group";
   case COB_TYPE_NUMERIC_COMP5:
       /* fall through as the test will have different results
          on big endian systems otherwise
        return "COMP-5"; */
        COB_UNUSED (byvalue);
   case COB_TYPE_NUMERIC_BINARY:  return "BINARY";
   case COB_TYPE_NUMERIC_PACKED:  return "COMP-3";
   case COB_TYPE_NUMERIC_FLOAT:   return "COMP-1";
   case COB_TYPE_NUMERIC_DOUBLE:  return "COMP-2";
   case COB_TYPE_NUMERIC_DISPLAY: return "DISPLAY";
   case COB_TYPE_ALPHANUMERIC:    return "X";
   case COB_TYPE_NUMERIC_EDITED:  return "EDITED";
   case COB_TYPE_NATIONAL:        return "N";
#else
   case COB_TYPE_GROUP:           return "Group";
   case COB_TYPE_NUMERIC_COMP5:
        return byvalue == 2 ? "COMP-4" : "COMP-5";
   case COB_TYPE_NUMERIC_BINARY:  return "COMP-4";
   case COB_TYPE_NUMERIC_PACKED:  return "COMP-3";
   case COB_TYPE_NUMERIC_FLOAT:   return "COMP-1";
   case COB_TYPE_NUMERIC_DOUBLE:  return "COMP-2";
   case COB_TYPE_NUMERIC_DISPLAY: return "DISPLAY";
   case COB_TYPE_ALPHANUMERIC:    return "X";
   case COB_TYPE_NUMERIC_EDITED:  return "EDITED";
   case COB_TYPE_NATIONAL:        return "N";
#endif
   }
   sprintf (wrk,"Type %04X",type);
   return wrk;
}

COB_EXT_EXPORT int
CAPI (void *p1, ...)
{
   int      k,nargs,type,digits,scale,size,sign,byvalue;
   cob_s64_t   val;
   char     *str;
   char     wrk[80],pic[30];	/* note: maximum _theoretical_ size */

   nargs = cob_get_num_params();
   printf ("CAPI called with %d parameters\n",nargs);
   for (k=1; k <= nargs; k++) {
      cob_field *fld = cob_get_param_field (k, "CAPI");
      type   = cob_get_field_type (fld);
      digits = cob_get_field_digits (fld);
      scale  = cob_get_field_scale (fld);
      size   = cob_get_field_size (fld);
      sign   = cob_get_field_sign (fld);
      byvalue = cob_get_field_constant (fld);
      printf (" %d: %-8s ", k, getType (type, byvalue));
      if (byvalue) {
         printf ("BY VALUE     ");
      } else {
         printf ("BY REFERENCE ");
      }
      str = (char *) cob_get_field_str_buffered (fld);
      if (type == COB_TYPE_ALPHANUMERIC) {
         sprintf (pic, "X(%d)", size);
         printf ("%-11s '%s'", pic, str);
         cob_put_field_str (fld, "Bye!");
      } else if (type == COB_TYPE_NATIONAL) {
         sprintf (pic,"N(%d)",size); /* FIXME */
         printf ("exchange of national data is not supported yet");
      } else if (type == COB_TYPE_GROUP) {
         sprintf (pic,"(%d)",size);
         printf ("%-11s '%.*s'",pic,size,str);
         cob_put_field_str (fld, "Bye-Bye Birdie!");
      } else if (type == COB_TYPE_NUMERIC_EDITED) {
         if (scale > 0) {
            sprintf (pic,"%s9(%d)V9(%d)",sign?"S":"",digits-scale,scale);
         } else {
            sprintf (pic,"%s9(%d)",sign?"S":"",digits-scale);
         }
         printf ("%-11s %s ",pic,str);
         val = cob_get_s64_param (k);
         val = val + 130;
         val = -val;
         cob_put_s64_param (k, val);
         str = (char *) cob_get_field_str (fld, wrk, 78);
         printf (" to %.*s",size,wrk);
      } else {
         if(scale > 0) {
            sprintf (pic,"%s9(%d)V9(%d)",sign?"S":"",digits-scale,scale);
         } else {
            sprintf (pic,"%s9(%d)",sign?"S":"",digits-scale);
         }
         printf ("%-11s %s", pic, str);
         val = cob_get_s64_param (k);
         sprintf (wrk, "%lld", val + 3);
         cob_put_field_str (fld, wrk);
      }
      printf (";\n");
      fflush(stdout);
   }
   return 0;
}
]])

AT_CHECK([$COMPILE -Wno-unfinished prog.cob cmod.c], [0], [],
[prog.cob:31: warning: BY CONTENT assumed for alphanumeric item 'CHRX'
prog.cob:32: warning: BY CONTENT assumed for alphanumeric item 'CHRX'
prog.cob:34: warning: BY CONTENT assumed for alphanumeric item 'GRPX'
])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[CAPI called with 2 parameters
 1: BINARY   BY VALUE     S9(9)       +000002560;
 2: DISPLAY  BY VALUE     9(2)        16;
CAPI called with 2 parameters
 1: BINARY   BY REFERENCE 9(5)        0000001280;
 2: EDITED   BY REFERENCE S9(5)V9(2)    512.77-  to   511.47 ;
CAPI called with 1 parameters
 1: BINARY   BY REFERENCE S9(5)       +01024;
CAPI called with 1 parameters
 1: BINARY   BY REFERENCE 9(9)        000002560;
CAPI called with 2 parameters
 1: COMP-3   BY REFERENCE 9(8)        00004096;
 2: EDITED   BY REFERENCE S9(5)V9(2)    512.77   to   514.07-;
CAPI called with 4 parameters
 1: DISPLAY  BY REFERENCE S9(8)       +00008192;
 2: BINARY   BY REFERENCE S9(5)       +01027;
 3: X        BY REFERENCE X(9)        'Hello    ';
 4: Group    BY REFERENCE (18)        'Hello    World    ';
CAPI called with 3 parameters
 1: COMP-3   BY REFERENCE 9(8)        00004099;
 2: EDITED   BY REFERENCE S9(5)V9(2)    514.07-  to   512.77 ;
 3: X        BY REFERENCE X(9)        'Bye!     ';
CAPI called with 2 parameters
 1: BINARY   BY REFERENCE 9(5)        0000001283;
 2: EDITED   BY REFERENCE S9(5)V9(2)    512.77   to   514.07-;
CAPI called with 2 parameters
 1: BINARY   BY REFERENCE 9(5)        0000001286;
 2: X        BY VALUE     X(9)        'Hello!   ';
CAPI called with 2 parameters
 1: BINARY   BY REFERENCE 9(5)        0000001289;
 2: X        BY VALUE     X(9)        'Hello!   ';
CAPI called with 1 parameters
 1: BINARY   BY VALUE     S9(9)       +000000018;
CAPI called with 2 parameters
 1: Group    BY VALUE     (18)        'Bye-Bye Birdie!   ';
 2: DISPLAY  BY VALUE     9(2)        18;
CAPI called with 2 parameters
 1: X        BY VALUE     X(9)        'Fred Fish';
 2: COMP-3   BY REFERENCE 9(8)        00004102;
CAPI called with 1 parameters
 1: COMP-3   BY REFERENCE S9(7)V9(2)  +0000012.50;
CAPI called with 0 parameters
COMP3    is now 00004105;
COMP4    is now 0000001292;
BINFLD5S is now +01030;
CHRX     is now Hello!   ;
NE       is now   514.07-;
],
[libcob: warning: cob_put_field_str: attempt to over-write constant field with '2563'
libcob: warning: cob_put_field_str: attempt to over-write constant field with '19'
libcob: warning: cob_put_field_str: attempt to over-write constant field with 'Bye!'
libcob: warning: cob_put_field_str: attempt to over-write constant field with 'Bye!'
libcob: warning: cob_put_field_str: attempt to over-write constant field with '21'
libcob: warning: cob_put_field_str: attempt to over-write constant field with 'Bye-Bye Birdie!'
libcob: warning: cob_put_field_str: attempt to over-write constant field with '21'
libcob: warning: cob_put_field_str: attempt to over-write constant field with 'Bye!'
])

AT_CLEANUP


AT_SETUP([OPTIONS paragraph, DEFAULT ROUNDED MODE])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.
       OPTIONS.
           DEFAULT ROUNDED NEAREST-EVEN.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  x           PIC 9.

       PROCEDURE       DIVISION.
           COMPUTE x ROUNDED = 1.5
           DISPLAY x
           COMPUTE x ROUNDED = 2.5
           DISPLAY x
           .
])

AT_CHECK([$COMPILE -o prog prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[2
2
])

AT_CLEANUP


AT_SETUP([OCCURS INDEXED ASCENDING])
AT_KEYWORDS([occurs extension])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  DBI-RECORD-NAMEST.
           05  FILLER.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-ACM            0315 '.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-MGL            0303 '.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-ZBL            0304 '.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-ZCC            0308 '.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-ZGL            0305 '.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-ZOO            0306 '.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-ZTR            0307 '.
       01  DBI-RECORD-NAMESR REDEFINES DBI-RECORD-NAMEST.
           05  DBI-RECORD-NAMES
                  OCCURS 7 TIMES
                  INDEXED BY REC-NAME-IDX
                  ASCENDING KEY IS DBI-RECORD-NAME
                  .
             10  DBI-RECORD-NAME PIC X(30).
             10  DBI-RECORD-CODE PIC 9(4).
             10  DBI-RECORD-DIR  PIC X.
       01  REC-NAME   PIC X(30).
       01  DBX-RECORD-NAMEST.
           05  FILLER.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-ACM            0315 '.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-MGL            0303 '.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-ZBL            0304 '.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-ZCC            0308 '.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-ZGL            0305 '.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-ZOO            0306 '.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-ZTR            0307 '.
       01  DBX-RECORD-NAMESR REDEFINES DBX-RECORD-NAMEST.
           05  DBX-RECORD-NAMES
                  OCCURS 7 TIMES
                  ASCENDING KEY IS DBX-RECORD-NAME
                  INDEXED BY REC-NAME-DBX
                  .
             10  DBX-RECORD-NAME PIC X(30).
             10  DBX-RECORD-CODE PIC 9(4).
             10  DBX-RECORD-DIR  PIC X.

       PROCEDURE DIVISION.
       MAIN.
           MOVE 'A-F-GEN-LEDGER-ZGL' TO REC-NAME.
           PERFORM FINDIT.
           MOVE 'JUNK' TO REC-NAME.
           PERFORM FINDIT.
           STOP RUN.

       FINDIT.
           SEARCH DBI-RECORD-NAMES
           AT END
               DISPLAY 'A ' REC-NAME ' is invalid.'
           WHEN REC-NAME = DBI-RECORD-NAME (REC-NAME-IDX)
               DISPLAY 'A ' REC-NAME ' is code '
                         DBI-RECORD-CODE (REC-NAME-IDX) '.'.

           SEARCH DBX-RECORD-NAMES
           AT END
               DISPLAY 'B ' REC-NAME ' is invalid.'
           WHEN REC-NAME = DBX-RECORD-NAME (REC-NAME-DBX)
               DISPLAY 'B ' REC-NAME ' is code '
                         DBX-RECORD-CODE (REC-NAME-DBX) '.'.
])

AT_CHECK([$COMPILE -frelax-syntax-checks prog.cob ], [0], [],
[prog.cob:26: warning: INDEXED should follow ASCENDING/DESCENDING
])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[A A-F-GEN-LEDGER-ZGL             is code 0305.
B A-F-GEN-LEDGER-ZGL             is code 0305.
A JUNK                           is invalid.
B JUNK                           is invalid.
], [])

AT_CLEANUP


AT_SETUP([ZERO unsigned and negative binary subscript])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       77  UBIN        PIC  9(8) BINARY.
       77  SBIN        PIC S9(8) BINARY.
       77  UNUP        PIC  9(8).
       77  SNUP        PIC S9(8).

       01  TSTREC.
           05  TSTX PIC X(4) OCCURS 3 TIMES.
           05  TSTY PIC X(4) OCCURS 3 TIMES.

       PROCEDURE DIVISION.
           MOVE ALL 'A' TO TSTX(1).
           MOVE ALL 'B' TO TSTX(2).
           MOVE ALL 'C' TO TSTX(3).
           MOVE ALL '1' TO TSTY(1).
           MOVE ALL '2' TO TSTY(2).
           MOVE ALL '3' TO TSTY(3).
           MOVE 0  TO UNUP.
           DISPLAY "UNUP: " UNUP " is :" TSTY(UNUP) ":" UPON CONSOLE.
           MOVE 0  TO SNUP.
           DISPLAY "SNUP: " SNUP " is :" TSTY(SNUP) ":" UPON CONSOLE.
           MOVE 0  TO SBIN.
           DISPLAY "SBIN: " SBIN " is :" TSTY(SBIN) ":" UPON CONSOLE.
           MOVE -1 TO SBIN.
           DISPLAY "SBIN: " SBIN " is :" TSTY(SBIN) ":" UPON CONSOLE.
           MOVE 'xxx'   TO TSTY(SBIN).
           DISPLAY "SBIN: " SBIN " is :" TSTY(SBIN) ":" UPON CONSOLE.
      * The following would often core dump
           MOVE 0 TO UBIN.
           DISPLAY "UBIN: " UBIN " is :" TSTY(UBIN) ":" UPON CONSOLE.
           MOVE 'xxx'   TO TSTY(UBIN).
           MOVE 1 TO UBIN.
           DISPLAY "UBIN: " UBIN " is :" TSTY(UBIN) ":" UPON CONSOLE.
           STOP RUN.
])

# Safe run with runtime checks
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [1], [],
[libcob: prog.cob:23: error: subscript of 'TSTY' out of bounds: 0
])

# Runtime checks disable, subscript may be zero or even negative
AT_CHECK([$COBC -x prog.cob -o prog_unsafe], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog_unsafe], [0],
[UNUP: 00000000 is :CCCC:
SNUP: +00000000 is :CCCC:
SBIN: +00000000 is :CCCC:
SBIN: -00000001 is :BBBB:
SBIN: -00000001 is :xxx :
UBIN: 00000000 is :CCCC:
UBIN: 00000001 is :1111:
], [])

AT_CLEANUP


AT_SETUP([Default Arithmetic (1)])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 NUM-A   PIC 9(3) VALUE 399.
       01 NUM-B   PIC 9(3) VALUE 211.
       01 NUM-C   PIC 9(3)V99 VALUE 212.34.
       01 NUMV1   PIC 9(3)V9.
       01 PICX    PIC X VALUE 'A'.
       01 RSLT    PIC 9(3).
       01 RSLTV1  PIC 9(3).9.
       01 RSLTV2  PIC 9(3).99.
      *
       PROCEDURE DIVISION.
       MAIN.
           COMPUTE RSLT = NUM-A + 1.1.
           DISPLAY 'Simple Compute  RSLT IS ' RSLT
           COMPUTE RSLT = ((NUM-A / 100) - (NUM-B / 100)) * 100
           DISPLAY 'Single Variable RSLT IS ' RSLT
           COMPUTE RSLTV2, RSLT = ((NUM-A / 100) - (NUM-B / 100)) * 100
           DISPLAY 'Compute  RSLT    IS ' RSLT
           DISPLAY 'Compute  RSLTv99 IS ' RSLTV2
           COMPUTE RSLTV1, RSLT = ((NUM-A / 100) - (NUM-B / 100)) * 100
           DISPLAY 'Compute  RSLT    IS ' RSLT
           DISPLAY 'Compute  RSLTv9  IS ' RSLTV1
           MOVE 0 TO RSLT
           ADD NUM-C TO RSLT.
           DISPLAY 'Add      RSLT    IS ' RSLT.
           MOVE 0 TO RSLT
           ADD NUM-A NUM-C 10 TO RSLT.
           DISPLAY 'Add      RSLT    IS ' RSLT.
           SUBTRACT NUM-C FROM RSLT.
           DISPLAY 'Subtract RSLT    IS ' RSLT.
           SUBTRACT NUM-A -10 FROM RSLT.
           DISPLAY 'Subtract RSLT    IS ' RSLT.
           MOVE 0 TO RSLT
           ADD NUM-A NUM-C TO RSLT GIVING RSLTV1.
           DISPLAY 'Add      RSLTv9  IS ' RSLTV1
           MULTIPLY NUM-A BY NUM-C GIVING RSLT.
           DISPLAY 'Multiply RSLT    IS ' RSLT.
           MULTIPLY RSLT BY NUM-C.
           DISPLAY 'Multiply RSLT    IS ' RSLT.
           DIVIDE NUM-A BY 10 GIVING RSLT.
           DISPLAY 'Divide   RSLT    IS ' RSLT.
           DIVIDE RSLT BY 4 GIVING RSLTV1.
           DISPLAY 'Divide   RSLTv9  IS ' RSLTV1.
           DIVIDE RSLT BY 4 GIVING RSLT.
           DISPLAY 'Divide   RSLT    IS ' RSLT.

           COMPUTE RSLTV1, RSLT = ((NUM-A / 100) - (NUM-B / 100)) * 100
           DISPLAY 'Simple   RSLT    IS ' RSLT
                           ' RSLTv9  IS ' RSLTV1.

           COMPUTE RSLTV1, RSLT = ((NUM-A / (100.55 + -0.550))
                                -  (NUM-B / (10.11 * 10 - 1.1)))
                                  * (220 / 2.2)
           DISPLAY 'Complex  RSLT    IS ' RSLT
                           ' RSLTv9  IS ' RSLTV1.

           COMPUTE RSLTV1, RSLT = ((NUM-A / (101 - 1))
                                -  (NUM-B / (10 * 10))) * (200 / 2)
           DISPLAY 'Reduced  RSLT    IS ' RSLT
                           ' RSLTv9  IS ' RSLTV1.
           MOVE NUM-A TO NUMV1.
           IF ((NUMV1 / (101 - 1))
              -  (NUM-B / (10 * 10))) * (200 / 2) EQUAL 188
              DISPLAY "Not Using ARITHMETIC-OSVS"
           ELSE
              DISPLAY "Using ARITHMETIC-OSVS"
           END-IF.
           STOP RUN.
])
AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[Simple Compute  RSLT IS 400
Single Variable RSLT IS 188
Compute  RSLT    IS 188
Compute  RSLTv99 IS 188.00
Compute  RSLT    IS 188
Compute  RSLTv9  IS 188.0
Add      RSLT    IS 212
Add      RSLT    IS 621
Subtract RSLT    IS 408
Subtract RSLT    IS 019
Add      RSLTv9  IS 611.3
Multiply RSLT    IS 723
Multiply RSLT    IS 723
Divide   RSLT    IS 039
Divide   RSLTv9  IS 009.7
Divide   RSLT    IS 009
Simple   RSLT    IS 188 RSLTv9  IS 188.0
Complex  RSLT    IS 188 RSLTv9  IS 188.0
Reduced  RSLT    IS 188 RSLTv9  IS 188.0
Not Using ARITHMETIC-OSVS
], [])

AT_CLEANUP


AT_SETUP([Default Arithmetic Test (2)])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT      DIVISION.
       DATA             DIVISION.
       WORKING-STORAGE SECTION.
       01  VAL                 PIC S9(7)V99 COMP-3 VALUE 20500.
       01  DIV1                PIC S9(7)V99 COMP-3 VALUE 0.9.
       01  DIV2                PIC S9(7)V99 COMP-3 VALUE 33.45.
       01  DIV3                PIC S9(7)V99 COMP-3 VALUE 9.
       01  MUL1                PIC S9(7)V99 COMP-3 VALUE 10.
       01  MUL2                PIC S9(7)V99 COMP-3 VALUE 5.
       01  MUL3                PIC S9(7)V99 COMP-3 VALUE 2.
       01  RES                 PIC S9(7)V99 COMP-3.
       PROCEDURE        DIVISION.
           COMPUTE RES = VAL / DIV1 / DIV2.
           DISPLAY 'RES = ' RES.
           COMPUTE RES ROUNDED = VAL / DIV1 / DIV2.
           DISPLAY 'RES ROUNDED = ' RES.
           COMPUTE RES = VAL * MUL1 / DIV3 / DIV2.
           DISPLAY 'RES MULT1 = ' RES.
           COMPUTE RES = VAL * MUL2 * MUL3 / DIV3 / DIV2.
           DISPLAY 'RES MULT2 = ' RES.
           COMPUTE RES = VAL / DIV1.
           DISPLAY 'RES 1 = ' RES.
           COMPUTE RES = RES / DIV2.
           DISPLAY 'RES F = ' RES.
           COMPUTE RES ROUNDED MODE AWAY-FROM-ZERO =
                VAL / DIV1 / DIV2.
           DISPLAY 'RES ROUNDED AWAY = ' RES.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[RES = +0000680.95
RES ROUNDED = +0000680.95
RES MULT1 = +0000680.95
RES MULT2 = +0000680.95
RES 1 = +0022777.77
RES F = +0000680.94
RES ROUNDED AWAY = +0000680.96
], [])

AT_CLEANUP


AT_SETUP([OSVS Arithmetic (1)])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 NUM-A   PIC 9(3) VALUE 399.
       01 NUM-B   PIC 9(3) VALUE 211.
       01 NUM-C   PIC 9(3)V99 VALUE 212.34.
       01 NUMV1   PIC 9(3)V9.
       01 PICX    PIC X VALUE 'A'.
       01 RSLT    PIC 9(3).
       01 RSLTV1  PIC 9(3).9.
       01 RSLTV2  PIC 9(3).99.
      *
       PROCEDURE DIVISION.
       MAIN.
           COMPUTE RSLT = NUM-A + 1.1.
           DISPLAY 'Simple Compute  RSLT IS ' RSLT
           COMPUTE RSLT = ((NUM-A / 100) - (NUM-B / 100)) * 100
           DISPLAY 'Single Variable RSLT IS ' RSLT
           COMPUTE RSLTV2, RSLT = ((NUM-A / 100) - (NUM-B / 100)) * 100
           DISPLAY 'Compute  RSLT    IS ' RSLT
           DISPLAY 'Compute  RSLTv99 IS ' RSLTV2
           COMPUTE RSLTV1, RSLT = ((NUM-A / 100) - (NUM-B / 100)) * 100
           DISPLAY 'Compute  RSLT    IS ' RSLT
           DISPLAY 'Compute  RSLTv9  IS ' RSLTV1
           MOVE 0 TO RSLT
           ADD NUM-C TO RSLT.
           DISPLAY 'Add      RSLT    IS ' RSLT.
           MOVE 0 TO RSLT
           ADD NUM-A NUM-C 10 TO RSLT.
           DISPLAY 'Add      RSLT    IS ' RSLT.
           SUBTRACT NUM-C FROM RSLT.
           DISPLAY 'Subtract RSLT    IS ' RSLT.
           SUBTRACT NUM-A -10 FROM RSLT.
           DISPLAY 'Subtract RSLT    IS ' RSLT.
           MOVE 0 TO RSLT
           ADD NUM-A NUM-C TO RSLT GIVING RSLTV1.
           DISPLAY 'Add      RSLTv9  IS ' RSLTV1
           MULTIPLY NUM-A BY NUM-C GIVING RSLT.
           DISPLAY 'Multiply RSLT    IS ' RSLT.
           MULTIPLY RSLT BY NUM-C.
           DISPLAY 'Multiply RSLT    IS ' RSLT.
           DIVIDE NUM-A BY 10 GIVING RSLT.
           DISPLAY 'Divide   RSLT    IS ' RSLT.
           DIVIDE RSLT BY 4 GIVING RSLTV1.
           DISPLAY 'Divide   RSLTv9  IS ' RSLTV1.
           DIVIDE RSLT BY 4 GIVING RSLT.
           DISPLAY 'Divide   RSLT    IS ' RSLT.

           COMPUTE RSLTV1, RSLT = ((NUM-A / 100) - (NUM-B / 100)) * 100
           DISPLAY 'Simple   RSLT    IS ' RSLT
                           ' RSLTv9  IS ' RSLTV1.

           COMPUTE RSLTV1, RSLT = ((NUM-A / (100.55 + -0.550))
                                -  (NUM-B / (10.11 * 10 - 1.1)))
                                  * (220 / 2.2)
           DISPLAY 'Complex  RSLT    IS ' RSLT
                           ' RSLTv9  IS ' RSLTV1.

           COMPUTE RSLTV1, RSLT = ((NUM-A / (101 - 1))
                                -  (NUM-B / (10 * 10))) * (200 / 2)
           DISPLAY 'Reduced  RSLT    IS ' RSLT
                           ' RSLTv9  IS ' RSLTV1.
           MOVE NUM-A TO NUMV1.
           IF ((NUMV1 / (101 - 1))
              -  (NUM-B / (10 * 10))) * (200 / 2) EQUAL 188
              DISPLAY "Not Using ARITHMETIC-OSVS"
           ELSE
              DISPLAY "Using ARITHMETIC-OSVS"
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE -farithmetic-osvs prog.cob], [0], [],
[prog.cob: in paragraph 'MAIN':
prog.cob:19: warning: precision of result may change with arithmetic-osvs
prog.cob:21: warning: precision of result may change with arithmetic-osvs
prog.cob:24: warning: precision of result may change with arithmetic-osvs
prog.cob:31: warning: precision of result may change with arithmetic-osvs
prog.cob:35: warning: precision of result may change with arithmetic-osvs
prog.cob:38: warning: precision of result may change with arithmetic-osvs
prog.cob:51: warning: precision of result may change with arithmetic-osvs
prog.cob:55: warning: precision of result may change with arithmetic-osvs
prog.cob:61: warning: precision of result may change with arithmetic-osvs
prog.cob:66: warning: precision of result may change with arithmetic-osvs
])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[Simple Compute  RSLT IS 400
Single Variable RSLT IS 100
Compute  RSLT    IS 188
Compute  RSLTv99 IS 188.00
Compute  RSLT    IS 180
Compute  RSLTv9  IS 180.0
Add      RSLT    IS 212
Add      RSLT    IS 621
Subtract RSLT    IS 408
Subtract RSLT    IS 019
Add      RSLTv9  IS 611.3
Multiply RSLT    IS 723
Multiply RSLT    IS 723
Divide   RSLT    IS 039
Divide   RSLTv9  IS 009.7
Divide   RSLT    IS 009
Simple   RSLT    IS 180 RSLTv9  IS 180.0
Complex  RSLT    IS 188 RSLTv9  IS 188.0
Reduced  RSLT    IS 180 RSLTv9  IS 180.0
Using ARITHMETIC-OSVS
], [])

AT_CLEANUP


AT_SETUP([OSVS Arithmetic Test (2)])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT      DIVISION.
       DATA             DIVISION.
       WORKING-STORAGE SECTION.
       01  VAL                 PIC S9(7)V99 COMP-3 VALUE 20500.
       01  DIV1                PIC S9(7)V99 COMP-3 VALUE 0.9.
       01  DIV2                PIC S9(7)V99 COMP-3 VALUE 33.45.
       01  DIV3                PIC S9(7)V99 COMP-3 VALUE 9.
       01  MUL1                PIC S9(7)V99 COMP-3 VALUE 10.
       01  MUL2                PIC S9(7)V99 COMP-3 VALUE 5.
       01  MUL3                PIC S9(7)V99 COMP-3 VALUE 2.
       01  RES                 PIC S9(7)V99 COMP-3.
       PROCEDURE        DIVISION.
           COMPUTE RES = VAL / DIV1 / DIV2.
           DISPLAY 'RES = ' RES.
           COMPUTE RES ROUNDED = VAL / DIV1 / DIV2.
           DISPLAY 'RES ROUNDED = ' RES.
           COMPUTE RES = VAL * MUL1 / DIV3 / DIV2.
           DISPLAY 'RES MULT1 = ' RES.
           COMPUTE RES = VAL * MUL2 * MUL3 / DIV3 / DIV2.
           DISPLAY 'RES MULT2 = ' RES.
           COMPUTE RES = VAL / DIV1.
           DISPLAY 'RES 1 = ' RES.
           COMPUTE RES = RES / DIV2.
           DISPLAY 'RES F = ' RES.
           COMPUTE RES ROUNDED MODE AWAY-FROM-ZERO =
                VAL / DIV1 / DIV2.
           DISPLAY 'RES ROUNDED AWAY = ' RES.
           STOP RUN.
])

AT_CHECK([$COMPILE -std=ibm prog.cob], [0], [],
[prog.cob:16: warning: precision of result may change with arithmetic-osvs
prog.cob:18: warning: precision of result may change with arithmetic-osvs
prog.cob:20: warning: precision of result may change with arithmetic-osvs
prog.cob:22: warning: precision of result may change with arithmetic-osvs
prog.cob:28: warning: precision of result may change with arithmetic-osvs
])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[RES = +000068094
RES ROUNDED = +000068095
RES MULT1 = +000068094
RES MULT2 = +000068095
RES 1 = +002277777
RES F = +000068094
RES ROUNDED AWAY = +000068095
], [])

AT_CLEANUP


AT_SETUP([SET CONSTANT directive])
AT_KEYWORDS([misc directives extensions])

# The SET CONSTANT directive defines a level78 variable
# for the current compilation unit

# original MF extension: $SET CONSTANT
AT_DATA([prog.cob], [
       $SET CONSTANT DOGGY "Barky"
       $SET CONSTANT PONY "Blacky"
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  THEDOG    PIC X(6) VALUE DOGGY.
       77  MYHORSE   PIC X(7) VALUE PONY.
       $SET CONSTANT PONY "White"
      *
       PROCEDURE DIVISION.
       MAIN.
           DISPLAY "Your Dog's name is " DOGGY ";".
           DISPLAY "The Dog's name is " THEDOG ";".
           DISPLAY "My Horse is " MYHORSE ";".
           DISPLAY "My little pony is " PONY ".".
           STOP RUN.
])

# OpenCOBOL/GnuCOBOL extension: >>SET CONSTANT
AT_DATA([prog2.cob], [
       >>SET CONSTANT DOGGY "Barky"
       >>SET CONSTANT PONY "Blacky"
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog2.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  THEDOG    PIC X(6) VALUE DOGGY.
       77  MYHORSE   PIC X(7) VALUE PONY.
       >>SET CONSTANT PONY "White"
      *
       PROCEDURE DIVISION.
       MAIN.
           DISPLAY "Your Dog's name is " DOGGY ";".
           DISPLAY "The Dog's name is " THEDOG ";".
           DISPLAY "My Horse is " MYHORSE ";".
           DISPLAY "My little pony is " PONY ".".
           STOP RUN.
])

# OpenCOBOL/GnuCOBOL extension: >>DEFINE CONSTANT
AT_DATA([prog3.cob], [
       >>DEFINE CONSTANT DOGGY "Barky"
       >>DEFINE CONSTANT PONY "Blacky"
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog3.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  THEDOG    PIC X(6) VALUE DOGGY.
       77  MYHORSE   PIC X(7) VALUE PONY.
       >>DEFINE CONSTANT PONY "White" OVERRIDE
      *
       PROCEDURE DIVISION.
       MAIN.
           DISPLAY "Your Dog's name is " DOGGY ";".
           DISPLAY "The Dog's name is " THEDOG ";".
           DISPLAY "My Horse is " MYHORSE ";".
           DISPLAY "My little pony is " PONY ".".
           STOP RUN.
])

AT_CHECK([$COMPILE -std=mf prog.cob], [0], [], [])

# Note: MF does not redefine a value via SET CONSTANT
# the first definitions wins (warning check: syn_misc.at)
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[Your Dog's name is Barky;
The Dog's name is Barky ;
My Horse is Blacky ;
My little pony is Blacky.
], [])

AT_CHECK([$COMPILE prog2.cob], [0], [], [])

# Note: MF does not redefine a value via SET CONSTANT
# the first definitions wins (warning check: syn_misc.at)
AT_CHECK([$COBCRUN_DIRECT ./prog2], [0],
[Your Dog's name is Barky;
The Dog's name is Barky ;
My Horse is Blacky ;
My little pony is Blacky.
], [])

AT_CHECK([$COMPILE -fdefine-constant-directive=ok prog3.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog3], [0],
[Your Dog's name is Barky;
The Dog's name is Barky ;
My Horse is Blacky ;
My little pony is White.
], [])

AT_CLEANUP


AT_SETUP([DEFINE OVERRIDE])
AT_KEYWORDS([CDF directive])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       >>SET CONSTANT DOGGY "Pluto"
       >>SET CONSTANT PONY "Piper"
       WORKING-STORAGE SECTION.
       01  THEDOG    PIC X(6) VALUE DOGGY.

       >>DEFINE DPONY  AS PARAMETER OVERRIDE
       >>IF DPONY IS NOT DEFINED
       >>DEFINE DPONY AS "No Dpony"
       >>END-IF
       01  CNSPONY     CONSTANT FROM DPONY.

       >>DEFINE ENVPONY AS PARAMETER OVERRIDE
       >>IF ENVPONY IS NOT DEFINED
       >>DEFINE ENVPONY AS "No EnvPony"
       >>END-IF
       01  HORSE       CONSTANT FROM ENVPONY.
       77  MYHORSE    PIC X(12) VALUE HORSE  .
       77  MYPONYENV  PIC X(12).
      *
       PROCEDURE DIVISION.
       MAIN.
           DISPLAY "ENVPONY" UPON ENVIRONMENT-NAME
           ACCEPT  MYPONYENV FROM ENVIRONMENT-VALUE.
           DISPLAY "ENVPONY env var set to " MYPONYENV ";".
           DISPLAY "1st Dog's name is " DOGGY ";".
           DISPLAY "2nd Dog's name is " PONY ";".
       >>IF ENVPONY IS DEFINED
           DISPLAY "ENVPONY is DEFINED as " HORSE ";".
       >>ELSE
           DISPLAY "ENVPONY was NOT DEFINED;".
       >>END-IF
           DISPLAY "DPONY set to " CNSPONY ";".
       >>IF ENVPONY = "WHITE"
       >>DEFINE CONSTANT PONY AS "White Horse" OVERRIDE
       >>ELSE
       >>DEFINE CONSTANT PONY AS "default Dirty" OVERRIDE
       >>END-IF
           DISPLAY "My pony is " PONY ";".
       >>IF DPONY IS DEFINED
           DISPLAY "DPONY is DEFINED as " CNSPONY ";".
       >>END-IF
           STOP RUN.
])

AT_CHECK([ENVPONY=WHITE $COMPILE prog.cob -fdefine-constant-directive=ok -DDPONY=Stallone], [0], [], [])

AT_CHECK([ENVPONY=WHITE ./prog], [0],
[ENVPONY env var set to WHITE       ;
1st Dog's name is Pluto;
2nd Dog's name is Piper;
ENVPONY is DEFINED as WHITE;
DPONY set to Stallone;
My pony is White Horse;
DPONY is DEFINED as Stallone;
], [])

AT_CLEANUP


AT_SETUP([DEFINE Defaults])
AT_KEYWORDS([CDF directive])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       >>SET CONSTANT DOGGY "Pluto"
       >>SET CONSTANT PONY "Piper"
       WORKING-STORAGE SECTION.
       01  THEDOG    PIC X(6) VALUE DOGGY.

       >>DEFINE DPONY  AS PARAMETER OVERRIDE
       >>IF DPONY IS NOT DEFINED
       >>DEFINE DPONY AS "No Dpony"
       >>END-IF
       01  CNSPONY     CONSTANT FROM DPONY.

       >>DEFINE ENVPONY AS PARAMETER OVERRIDE
       >>IF ENVPONY IS NOT DEFINED
       >>DEFINE ENVPONY AS "No EnvPony"
       >>END-IF
       01  HORSE       CONSTANT FROM ENVPONY.
       77  MYHORSE    PIC X(12) VALUE HORSE  .
       77  MYPONYENV  PIC X(12).
      *
       PROCEDURE DIVISION.
       MAIN.
           DISPLAY "ENVPONY" UPON ENVIRONMENT-NAME
           ACCEPT  MYPONYENV FROM ENVIRONMENT-VALUE.
           DISPLAY "ENVPONY env var set to " MYPONYENV ";".
           DISPLAY "1st Dog's name is " DOGGY ";".
           DISPLAY "2nd Dog's name is " PONY ";".
       >>IF ENVPONY IS DEFINED
           DISPLAY "ENVPONY is DEFINED as " HORSE ";".
       >>ELSE
           DISPLAY "ENVPONY was NOT DEFINED;".
       >>END-IF
           DISPLAY "DPONY set to " CNSPONY ";".
       >>IF ENVPONY = "WHITE"
       >>DEFINE CONSTANT PONY AS "White Horse" OVERRIDE
       >>ELSE
       >>DEFINE CONSTANT PONY AS "default Dirty" OVERRIDE
       >>END-IF
           DISPLAY "My pony is " PONY ";".
       >>IF DPONY IS DEFINED
           DISPLAY "DPONY is DEFINED as " CNSPONY ";".
       >>END-IF
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob -fdefine-constant-directive=ok], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[ENVPONY env var set to             ;
1st Dog's name is Pluto;
2nd Dog's name is Piper;
ENVPONY is DEFINED as No EnvPony;
DPONY set to No Dpony;
My pony is default Dirty;
DPONY is DEFINED as No Dpony;
], [])

AT_CLEANUP


AT_SETUP([78 VALUE])
AT_KEYWORDS([CONSTANT misc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       78  DOGGY     VALUE "Barky".
       01  MYREC.
          05  FLD1   PIC 9(2).
          05  FLD2   PIC X(7).
          05  FLD3   PIC X(2) OCCURS 5 TIMES.
          05  FLD4   PIC X(4).
          05  FLD5   PIC X(4).
       01  PICX      PIC XXX VALUE 'Abc'.
       78  HUN       VALUE 10 * (10 + LENGTH OF PICX) + 12.35-2+3.
       78  HUN2      VALUE HUN * (10 + LENGTH OF PICX) -4.
       01  THEDOG    PIC X(6) VALUE DOGGY.
       78  DIV1      VALUE 100 / 3.
       78  NUM2      VALUE 1 + 2 * 3.
       LINKAGE SECTION.
       01  XMYREC.
          05  XFLD1   PIC 9(2).
          05  XFLD2   PIC X(7).
             78  XPOS3    VALUE NEXT.
          05  XFLD3   PIC X(2) OCCURS 5 TIMES.
             78  XPOS4    VALUE NEXT.
          05  XFLD4   PIC X(4).
          05  XFLD5   PIC X(4).
       78  XSTRT4     VALUE START OF XFLD4.
      *
       PROCEDURE DIVISION.
       MAIN.
           DISPLAY "DIV1 is " DIV1.
           DISPLAY "HUN  is " HUN.
           DISPLAY "HUN2 is " HUN2.
           MOVE NUM2 TO FLD1
           IF FLD1 = 9
             DISPLAY "NUM2 is " NUM2 " left to right precedence."
           ELSE
             DISPLAY "NUM2 is " NUM2 " normal precedence."
           END-IF.
           DISPLAY "XFLD3 starts at " XPOS3.
           DISPLAY "XFLD4 starts at " XSTRT4.
           DISPLAY "XFLD4 starts at " XPOS4.
           DISPLAY "Your Dog's name is " DOGGY ";".
           DISPLAY "The Dog's name is " THEDOG ";".
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[DIV1 is 33
HUN  is 143
HUN2 is 1855
NUM2 is 9 left to right precedence.
XFLD3 starts at 9
XFLD4 starts at 19
XFLD4 starts at 11
Your Dog's name is Barky;
The Dog's name is Barky ;
], [])

AT_CLEANUP


AT_SETUP([01 CONSTANT])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       >>DEFINE MYDOG AS "Piper"
       >>DEFINE MYNUM1 AS 11
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  MYREC.
          05  FLD1   PIC 9(2).
          05  FLD2   PIC X(7).
          05  FLD3   PIC X(2) OCCURS 5 TIMES.
          05  FLD4   PIC X(4).
          05  FLD5   PIC X(4).
       01  PICX      PIC XXX VALUE 'Abc'.
       01  CAT       CONSTANT  'Cat '.
       01  DOG       CONSTANT  'Dog '.
       01  YARD      CONSTANT  CAT & "& " & DOG.
       78  HUN       VALUE 10 * (10 + LENGTH OF PICX) + 12.35-2+3.
       78  HUN2      VALUE HUN * (10 + LENGTH OF PICX) -4.
       78  DIV1      VALUE 100 / 3.
       78  NUM2      VALUE 1 + 2 * 3.
       01  CON3      CONSTANT (((1 + 2) * NUM2) - 4).
       01  CON4      CONSTANT AS 3.1416 + CON3.
       01  CON5      CONSTANT 1 + 2 * 3.
       01  DOGNAME   CONSTANT FROM MYDOG.
       01  NUM1      CONSTANT FROM MYNUM1.
       01  CON6      CONSTANT AS CON5 + NUM1.
       >> IF NUM2 DEFINED  *> optional passed from command line
       01  NUM2      CONSTANT FROM MYNUM2.
       >> END-IF
      *
       PROCEDURE DIVISION.
       MAIN.
           DISPLAY "CAT  is '" CAT "'".
           DISPLAY "Yard is '" YARD "'".
           DISPLAY "DIV1 is " DIV1.
           DISPLAY "HUN  is " HUN.
           DISPLAY "HUN2 is " HUN2.
           MOVE NUM2 TO FLD1
           IF FLD1 = 9
             DISPLAY "78 VALUE has simple left to right precedence."
           ELSE
             DISPLAY "78 VALUE is " NUM2 " normal precedence."
           END-IF.
           MOVE CON5 TO FLD1
           IF FLD1 = 7
             DISPLAY "01 CONSTANT has normal operator precedence."
           ELSE
             DISPLAY "01 CONSTANT is " CON5 " left to right precedence."
           END-IF.
           DISPLAY "CON3 is " CON3.
           DISPLAY "CON4 is " CON4 " vs " 3.141596
                   " & " -2.189 " & " +12.
           DISPLAY "CON6 is " CON6 "."
           DISPLAY "My Dog's name is " DOGNAME ";".
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[CAT  is 'Cat '
Yard is 'Cat & Dog '
DIV1 is 33
HUN  is 143
HUN2 is 1855
78 VALUE has simple left to right precedence.
01 CONSTANT has normal operator precedence.
CON3 is 23
CON4 is 26 vs 3.141596 & -2.189 & +12
CON6 is 18.
My Dog's name is Piper;
], [])

AT_CLEANUP


AT_SETUP([DISPLAY UPON])
AT_KEYWORDS([CHAINING PRINTER PIPE CONSOLE SYSERR SYSPCH SYSPUNCH
COB_DISPLAY_PRINT_PIPE COB_DISPLAY_PRINT_FILE COB_DISPLAY_PUNCH_FILE])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           PRINTER IS PRINTER.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77 note PIC X(05).
       PROCEDURE DIVISION CHAINING note.
       DISPLAY "This is sent to CONSOLE " note UPON CONSOLE.
       DISPLAY "This is sent to SYSERR  " note UPON SYSERR.
       DISPLAY "This is sent to PRINTER " note UPON PRINTER.
       DISPLAY "This is also sent to CONSOLE " note UPON CONSOLE.
       DISPLAY "This is also sent to SYSERR  " note UPON SYSERR.
       DISPLAY "This is also sent to PRINTER " note UPON PRINTER.
       DISPLAY "This is sent to SYSPUNCH " note UPON SYSPUNCH
            ON EXCEPTION DISPLAY 'NO ...'        UPON SYSERR.
       DISPLAY "This is also sent to SYSPUNCH " note UPON SYSPCH
            ON EXCEPTION DISPLAY ' ... SYSPUNCH' UPON SYSERR.
       STOP RUN RETURNING 0.
])

AT_CHECK([$COMPILE -std=ibm prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog PLAIN], [0],
[This is sent to CONSOLE PLAIN
This is sent to PRINTER PLAIN
This is also sent to CONSOLE PLAIN
This is also sent to PRINTER PLAIN
],
[This is sent to SYSERR  PLAIN
This is also sent to SYSERR  PLAIN
libcob: prog.cob:18: warning: COB_DISPLAY_PUNCH_FILE is invalid, output to SYSPUNCH skipped
NO ...
 ... SYSPUNCH
])

AT_CHECK([COB_DISPLAY_PRINT_PIPE='cat >>prt.log' \
COB_DISPLAY_PUNCH_FILE='punch.out' \
$COBCRUN_DIRECT ./prog PIPE.], [0],
[This is sent to CONSOLE PIPE.
This is also sent to CONSOLE PIPE.
],
[This is sent to SYSERR  PIPE.
This is also sent to SYSERR  PIPE.
])

AT_CHECK([COB_DISPLAY_PRINT_FILE='prt.log' \
COB_DISPLAY_PUNCH_FILE='punch.out' \
$COBCRUN_DIRECT ./prog PRINT], [0],
[This is sent to CONSOLE PRINT
This is also sent to CONSOLE PRINT
],
[This is sent to SYSERR  PRINT
This is also sent to SYSERR  PRINT
])

AT_CAPTURE_FILE(./prt.log)

AT_DATA([reference],
[This is sent to PRINTER PIPE.
This is also sent to PRINTER PIPE.
This is sent to PRINTER PRINT
This is also sent to PRINTER PRINT
])

AT_CHECK([diff reference prt.log], [0], [], [],

# Previous test "failed" --> check if EOL of PIPE is the issue

AT_CHECK([$SED -e 's/PIPE.\r/PIPE./g' prt.log > prt2.log], [0], [], [])
AT_CHECK([diff reference prt2.log], [0], [], [])
)

AT_CAPTURE_FILE(./punch.out)

AT_DATA([reference],
[This is sent to SYSPUNCH PRINT
This is also sent to SYSPUNCH PRINT
])

AT_CHECK([diff reference punch.out], [0], [], [])

AT_CLEANUP


AT_SETUP([FLOAT-DECIMAL w/o SIZE ERROR])
AT_KEYWORDS([Numeric runmisc
FLOAT-DECIMAL-16 FLOAT-DECIMAL-34
DISPLAY COMPUTE])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  FD16                        USAGE FLOAT-DECIMAL-16.
       01  SV16                        USAGE FLOAT-DECIMAL-16.
       01  FD34                        USAGE FLOAT-DECIMAL-34.
       01  SV34                        USAGE FLOAT-DECIMAL-34.

       PROCEDURE DIVISION.
       CND-000.
           DISPLAY "--- FLOAT-DECIMAL-34 ---"
           COMPUTE FD34 = (((1.0E7 / 2.1E0) / 3.1E0) - 5.0E-1) * 6.0E0
           DISPLAY "A: " FD34

           COMPUTE FD34 = (((1.0E7 / 2.9E0) / 3.9E0) - 5.0E-1) * 6.0E0
           DISPLAY "B: " FD34
           MOVE ZERO TO FD34.
           COMPUTE FD34 = 1.0E3 / 2.1E0
                   ON SIZE ERROR DISPLAY "Z: " FD34 " SIZE ERROR"
               NOT ON SIZE ERROR DISPLAY "Z: " FD34 " IS OK"
           END-COMPUTE.

           DISPLAY "    ..."
           DISPLAY "--- FLOAT-DECIMAL-16 ---"
           COMPUTE FD16 = (((1.0E7 / 2.1E0) / 3.1E0) - 5.0E-1) * 6.0E0
           DISPLAY "A: " FD16

           COMPUTE FD16 = (((1.0E7 / 2.9E0) / 3.9E0) - 5.0E-1) * 6.0E0
           DISPLAY "B: " FD16
           MOVE ZERO TO FD16.
           COMPUTE FD16 = 1.0E3 / 2.1E0
                   ON SIZE ERROR DISPLAY "Z: " FD16 " SIZE ERROR"
               NOT ON SIZE ERROR DISPLAY "Z: " FD16 " IS OK"
           END-COMPUTE.

           DISPLAY "    ..."
           DISPLAY "--- 99 + 1 / 3 ---"
           MOVE -1 TO FD16, FD34.
           COMPUTE FD34 = 99 + 1 / 3
                   ON SIZE ERROR DISPLAY "FD34: " FD34 " SIZE ERROR"
               NOT ON SIZE ERROR DISPLAY "FD34: " FD34 " IS OK"
           END-COMPUTE.
           COMPUTE FD16 = 99 + 1 / 3
                   ON SIZE ERROR DISPLAY "FD16: " FD16 " SIZE ERROR"
               NOT ON SIZE ERROR DISPLAY "FD16: " FD16 " IS OK"
           END-COMPUTE.

           DISPLAY "    ..."
           DISPLAY "--- 99 ---"
           MOVE -1 TO FD16, FD34.
           COMPUTE FD34 = 99
                   ON SIZE ERROR DISPLAY "FD34: " FD34 " SIZE ERROR"
               NOT ON SIZE ERROR DISPLAY "FD34: " FD34 " IS OK"
           END-COMPUTE.
           COMPUTE FD16 = 99
                   ON SIZE ERROR DISPLAY "FD16: " FD16 " SIZE ERROR"
               NOT ON SIZE ERROR DISPLAY "FD16: " FD16 " IS OK"
           END-COMPUTE.

       CND-100-OK.
           DISPLAY "    ..."
           DISPLAY "--- Test overflow ---"
           MOVE 9900000000000 TO FD16, FD34.
           PERFORM 390 TIMES
             MOVE FD16 TO SV16
             COMPUTE FD16 = FD16 * 10
                    ON SIZE ERROR GO TO CND-100-ERR
             END-COMPUTE
             IF FD16 < 9.0
               DISPLAY "FD16: " FD16 " IS Wrong"
               GO TO CND-100-ERR
             END-IF
           END-PERFORM.
           DISPLAY "FD16: " FD16 " IS OK".
           GO TO CND-200-OK.
       CND-100-ERR.
           DISPLAY "FD16: after " SV16 " SIZE ERROR".

       CND-200-OK.
           MOVE 9900000000000 TO FD16, FD34.
           PERFORM 6500 TIMES
             MOVE FD34 TO SV34
             COMPUTE FD34 = FD34 * 10
                    ON SIZE ERROR GO TO CND-200-ERR
             END-COMPUTE
             IF FD34 < 9.0
               GO TO CND-200-ERR
             END-IF
           END-PERFORM.
           DISPLAY "FD34: " FD34 " IS OK".
           GO TO CND-380-OK.
       CND-200-ERR.
           DISPLAY "FD34: after " SV34 " SIZE ERROR".

       CND-380-OK.
           DISPLAY "    ..."
           DISPLAY "--- Test underflow ---"
           MOVE 0.000000099 TO FD16, FD34.
           PERFORM 400 TIMES
             MOVE FD16 TO SV16
             COMPUTE FD16 = FD16 / 10
                    ON SIZE ERROR GO TO CND-300-ERR
             END-COMPUTE
             IF FD16 = 0.0
               GO TO CND-300-ERR
             END-IF
           END-PERFORM.
           DISPLAY "FD16: " FD16 " IS OK".
           GO TO CND-400-OK.
       CND-300-ERR.
           DISPLAY "FD16: after " SV16 " SIZE ERROR".

       CND-400-OK.
           MOVE 0.000000099 TO FD16, FD34.
           PERFORM 6600 TIMES
             MOVE FD34 TO SV34
             COMPUTE FD34 = FD34 / 10.0
                    ON SIZE ERROR GO TO CND-400-ERR
             END-COMPUTE
             IF FD34 = 0.0
               GO TO CND-400-ERR
             END-IF
           END-PERFORM.
           DISPLAY "FD34: " FD34 " IS OK".
           GO TO CND-999.
       CND-400-ERR.
           DISPLAY "FD34: after " SV34 " SIZE ERROR".

       CND-999.
           STOP RUN.
           END PROGRAM prog.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[--- FLOAT-DECIMAL-34 ---
A: 9216586.861751152073732718894009216
B: 5305036.78779840848806366047745358
Z: 476.1904761904761904761904761904761 IS OK
    ...
--- FLOAT-DECIMAL-16 ---
A: 9216586.861751152
B: 5305036.787798408
Z: 476.1904761904761 IS OK
    ...
--- 99 + 1 / 3 ---
FD34: 99.33333333333333333333333333333333 IS OK
FD16: 99.33333333333333 IS OK
    ...
--- 99 ---
FD34: 99 IS OK
FD16: 99 IS OK
    ...
--- Test overflow ---
FD16: after 99E369 SIZE ERROR
FD34: after 99E6111 SIZE ERROR
    ...
--- Test underflow ---
FD16: after 99E-398 SIZE ERROR
FD34: after 99E-6176 SIZE ERROR
], [])

AT_CLEANUP


AT_SETUP([FLOAT-SHORT / FLOAT-LONG w/o SIZE ERROR])
AT_KEYWORDS([Numeric runmisc
COMP-1 COMP-2
DISPLAY COMPUTE])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  CMP1                        COMP-1.
       01  SV1                         COMP-1.
       01  CMP2                        COMP-2.
       01  SV2                         COMP-2.

       PROCEDURE DIVISION.
       CND-000.

           DISPLAY "--- COMP-1 ---"
           COMPUTE CMP1 = (((1.0E7 / 2.1E0) / 3.1E0) - 5.0E-1) * 6.0E0
           DISPLAY "A: " CMP1
           COMPUTE CMP1 = (((1.0E7 / 2.9E0) / 3.9E0) - 5.0E-1) * 6.0E0
           DISPLAY "B: " CMP1
           MOVE ZERO TO CMP1.
           COMPUTE CMP1 = 1.0E3 / 2.1E0
                   ON SIZE ERROR DISPLAY "Z: " CMP1 " SIZE ERROR"
               NOT ON SIZE ERROR DISPLAY "Z: " CMP1 " IS OK"
           END-COMPUTE.

           DISPLAY "    ..."
           DISPLAY "--- COMP-2 ---"
           COMPUTE CMP2 = (((1.0E7 / 2.1E0) / 3.1E0) - 5.0E-1) * 6.0E0
      *>   because of possible rounding of intermediates and different
      *>   precision depending on math library / version: plain DISPLAY
           IF CMP2 >= 9216586.86175114 AND <= 9216586.86175116
             DISPLAY "A ~ 9216586.86175115"
           ELSE
             DISPLAY "A: " CMP2
           END-IF
           COMPUTE CMP2 = (((1.0E7 / 2.9E0) / 3.9E0) - 5.0E-1) * 6.0E0
           IF CMP2 >= 5305036.7877983 AND <= 5305036.7877985
             DISPLAY "B ~ 5305036.787798408"
           ELSE
             DISPLAY "B: " CMP2
           END-IF
           MOVE ZERO TO CMP2.
           COMPUTE CMP2 = 1.0E3 / 2.1E0
                   ON SIZE ERROR DISPLAY "Z: " CMP2 " SIZE ERROR"
               NOT ON SIZE ERROR
      *>        see note above
                IF CMP2 >= 476.1904761904760 AND <= 476.1904761904763
                  DISPLAY "Z ~ 476.1904761904761 IS OK"
                ELSE
                  DISPLAY "Z: " CMP2 " IS OK"
                END-IF
           END-COMPUTE.

           DISPLAY "    ..."
           DISPLAY "--- 99 + 1 / 3 ---"
           MOVE -1 TO CMP1, CMP2.
           COMPUTE CMP1 = 99 + 1 / 3
                   ON SIZE ERROR DISPLAY "CMP1: " CMP1 " SIZE ERROR"
               NOT ON SIZE ERROR DISPLAY "CMP1: " CMP1 " IS OK"
           END-COMPUTE.
           COMPUTE CMP2 = 99 + 1 / 3
                   ON SIZE ERROR DISPLAY "CMP2: " CMP2 " SIZE ERROR"
               NOT ON SIZE ERROR DISPLAY "CMP2: " CMP2 " IS OK"
           END-COMPUTE.

           DISPLAY "    ..."
           DISPLAY "--- 99 ---"
           MOVE -1 TO CMP1, CMP2.
           COMPUTE CMP1 = 99
                   ON SIZE ERROR DISPLAY "CMP1: " CMP1 " SIZE ERROR"
               NOT ON SIZE ERROR DISPLAY "CMP1: " CMP1 " IS OK"
           END-COMPUTE.
           COMPUTE CMP2 = 99
                   ON SIZE ERROR DISPLAY "CMP2: " CMP2 " SIZE ERROR"
               NOT ON SIZE ERROR DISPLAY "CMP2: " CMP2 " IS OK"
           END-COMPUTE.

       CND-100-OK.
           DISPLAY "    ..."
           DISPLAY "--- Test overflow ---"

           MOVE 990000 TO CMP1.
           PERFORM 6500 TIMES
             MOVE CMP1 TO SV1
             COMPUTE CMP1 = CMP1 * 10
                    ON SIZE ERROR GO TO CND-350-ERR
             END-COMPUTE
             IF CMP1 < 9.0
               GO TO CND-350-ERR
             END-IF
           END-PERFORM.
           DISPLAY "CMP1: " CMP1 " IS OK".
           GO TO CND-350-OK.
       CND-350-ERR.
           DISPLAY "CMP1: after " SV1 " SIZE ERROR".

       CND-350-OK.
           MOVE 9900000000 TO CMP2.
           PERFORM 6500 TIMES
             MOVE CMP2 TO SV2
             COMPUTE CMP2 = CMP2 * 10
                    ON SIZE ERROR GO TO CND-380-ERR
             END-COMPUTE
             IF CMP2 < 9.0
               GO TO CND-380-ERR
             END-IF
           END-PERFORM.
           DISPLAY "CMP2: " CMP2 " IS OK".
           GO TO CND-500-OK.
       CND-380-ERR.
      *>   because of possible rounding of intermediates and different
      *>   precision depending on math library / version: plain DISPLAY
           IF SV2 >= 9.899999999999E+307 AND
                  <= 9.900000000001E+307
             DISPLAY "CMP2: after ~ 9.899999999999781E+307 SIZE ERROR"
           ELSE
             DISPLAY "CMP2: after " SV2 " SIZE ERROR"
           END-IF
           .

       CND-500-OK.
           MOVE 0.000000099 TO CMP1.
           PERFORM 350 TIMES
             MOVE CMP1 TO SV1
             COMPUTE CMP1 = CMP1 / 10.0
                    ON SIZE ERROR GO TO CND-500-ERR
             END-COMPUTE
             IF CMP1 = 0.0
               GO TO CND-500-ERR
             END-IF
           END-PERFORM.
           DISPLAY "CMP1: " CMP1 " IS OK".
           GO TO CND-600-OK.
       CND-500-ERR.
           DISPLAY "CMP1: after " SV1 " SIZE ERROR".

       CND-600-OK.
           MOVE 0.000000099 TO CMP2.
           PERFORM 350 TIMES
             MOVE CMP2 TO SV2
             COMPUTE CMP2 = CMP2 / 10.0
                    ON SIZE ERROR GO TO CND-600-ERR
             END-COMPUTE
             IF CMP2 = 0.0
               GO TO CND-600-ERR
             END-IF
           END-PERFORM.
           DISPLAY "CMP2: " CMP2 " IS OK".
           GO TO CND-600-XIT.
       CND-600-ERR.
           IF SV2 >= 9.8813129168249E-324 AND <= 9.881312916825E-324
             DISPLAY "CMP2: after ~ 9.881312916824931E-324 SIZE ERROR"
           ELSE
             DISPLAY "CMP2: after " SV2 " SIZE ERROR"
           END-IF
           .
       CND-600-XIT.

       CND-999.
           STOP RUN.
       END PROGRAM prog.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[--- COMP-1 ---
A: 9216587
B: 5305037
Z: 476.19049 IS OK
    ...
--- COMP-2 ---
A ~ 9216586.86175115
B ~ 5305036.787798408
Z ~ 476.1904761904761 IS OK
    ...
--- 99 + 1 / 3 ---
CMP1: 99.333336 IS OK
CMP2: 99.33333333333333 IS OK
    ...
--- 99 ---
CMP1: 99 IS OK
CMP2: 99 IS OK
    ...
--- Test overflow ---
CMP1: after 9.8999983E+37 SIZE ERROR
CMP2: after ~ 9.899999999999781E+307 SIZE ERROR
CMP1: after 1.4012985E-45 SIZE ERROR
CMP2: after ~ 9.881312916824931E-324 SIZE ERROR
], [])

AT_CLEANUP


AT_SETUP([FLOAT-SHORT with SIZE ERROR])
AT_KEYWORDS([COMP-1])

AT_DATA([prog.cob], [
       identification division.
       program-id. prog.

       data division.
       working-storage section.
      *------------------------
       77 counter             pic s9(4) binary value zero.
      * FLOAT-SHORT (if binary-comp-1 is not active)
       77 floatValue          COMP-1  value 2.
       77 lastFloatValue      COMP-1.

      ******************************************************************
       procedure division.
       main section.
           perform varying counter from 1 by 1 until
                           counter > 130
      *>      display 'counter: ' counter ', value: ' floatValue
              compute floatValue = floatValue * 2
                   ON SIZE ERROR
                      display 'SIZE ERROR, last value = ' floatValue
                      exit perform
               not ON SIZE ERROR
                      if floatValue > lastFloatValue
                         move floatValue to lastFloatValue
                      else
                         display 'math ERROR, last value > current: '
                                 lastFloatValue ' > ' floatValue
                         exit perform
                      end-if
              end-compute
           end-perform
           if counter not = 127
              display 'counter is ' counter
           end-if

           goback.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([./prog], [0],
[SIZE ERROR, last value = 1.7014118E+38
], [])

AT_CLEANUP


AT_SETUP([FLOAT-LONG with SIZE ERROR])
AT_KEYWORDS([COMP-2])

AT_DATA([prog.cob], [
       identification division.
       program-id. prog.

       data division.
       working-storage section.
      *------------------------
       77 counter             pic s9(4) binary value zero.
      * FLOAT-LONG
       77 doubleValue         COMP-2 value 2.
       77 lastDoubleValue     COMP-2.

      ******************************************************************
       procedure division.
       main section.
           perform varying counter from 1 by 1 until
                           counter > 1060
      *>      display 'counter: ' counter ', value: ' doubleValue
              compute doubleValue = doubleValue * 2
                   ON SIZE ERROR
                      display 'SIZE ERROR raised'
                              with no advancing upon syserr
                      end-display
                      display 'SIZE ERROR, last value = ' doubleValue
                              upon sysout
                      end-display
                      exit perform
               not ON SIZE ERROR
                      if doubleValue > lastdoubleValue
                         move doubleValue to lastdoubleValue
                      else
                         display 'math ERROR, last value > current: '
                                 lastdoubleValue ' > ' doubleValue
                                 upon syserr
                         end-display
                         exit perform
                      end-if
              end-compute
           end-perform
           if not (counter >= 1023 and <=1025)
              display ' '                   upon syserr
              display 'counter is ' counter upon syserr
           end-if

           goback.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
# note: the actual value is not checked as this depends on intermediate rounding
AT_CHECK([./prog], [0], ignore, [SIZE ERROR raised])

AT_CLEANUP


AT_SETUP([EC-SIZE-ZERO-DIVIDE])
AT_KEYWORDS([misc fundamental exceptions
DIVIDE COMPUTE EXCEPTION-STATUS])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x PIC 9 VALUE 0.
       01  y PIC 9 VALUE 0.

       PROCEDURE DIVISION.
           DIVIDE x BY y GIVING y
           IF FUNCTION TRIM(FUNCTION EXCEPTION-STATUS)
           NOT = 'EC-SIZE-ZERO-DIVIDE'
              DISPLAY 'Wrong/missing exception: '
                      FUNCTION EXCEPTION-STATUS
              END-DISPLAY
           END-IF
           SET LAST EXCEPTION TO OFF
           IF FUNCTION EXCEPTION-STATUS NOT = SPACES
              DISPLAY 'Exception is not empty after reset: '
                      FUNCTION EXCEPTION-STATUS
              END-DISPLAY
           END-IF
           MOVE 0 TO y
           COMPUTE y = x - 1 / y + 6.5
           IF FUNCTION TRIM(FUNCTION EXCEPTION-STATUS)
           NOT = 'EC-SIZE-ZERO-DIVIDE'
              DISPLAY 'Wrong/missing exception: '
                      FUNCTION EXCEPTION-STATUS
              END-DISPLAY
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CLEANUP


AT_SETUP([EC-SIZE-OVERFLOW])
AT_KEYWORDS([misc fundamental exceptions])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x PIC 9 VALUE 1.
       01  y PIC 9.

       PROCEDURE DIVISION.
      *    raise exception checked in previous test
      *    as it may interfere with the expected exception
           DIVIDE x BY y GIVING y
           DIVIDE x BY 0.1 GIVING y
           IF FUNCTION TRIM(FUNCTION EXCEPTION-STATUS)
           NOT = 'EC-SIZE-OVERFLOW'
              DISPLAY 'Wrong/missing exception: '
                      FUNCTION EXCEPTION-STATUS
              END-DISPLAY
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CLEANUP


AT_SETUP([Constant Expressions])
AT_KEYWORDS([runmisc condition expression])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  VAR       PIC X(200).
       01  OTHERVAR  PIC X(115).
       78  VAR-LEN   VALUE 115.

       PROCEDURE DIVISION.
       MAIN-10.
           MOVE "Peek a boo" TO VAR.
           EVALUATE TRUE
               ALSO FALSE
               ALSO TRUE
            WHEN    TRUE
               ALSO VAR-LEN > 16 AND VAR-LEN < 200
               ALSO TRUE
                  MOVE OTHERVAR (1 : VAR-LEN - 9)
                    TO VAR (16 - VAR-LEN : VAR-LEN - 9)
                  DISPLAY "A: Should NOT be executed"
            WHEN  TRUE
               ALSO VAR-LEN < 16
               ALSO TRUE
                  MOVE OTHERVAR TO VAR
                  DISPLAY "A: OK VAR-LEN > 16 AND VAR-LEN < 200"
            WHEN  TRUE
               ALSO VAR = SPACES
               ALSO TRUE
                  MOVE OTHERVAR TO VAR
                  DISPLAY "A: OK VAR IS SPACES"
           END-EVALUATE.

           MOVE "Peek a boo" TO VAR.
           EVALUATE 3 EQUALS 7
           WHEN  VAR = SPACES
               DISPLAY "B: OK VAR IS NOT SPACES"
           WHEN  VAR NOT = SPACES
               DISPLAY "B: FALSE VAR IS SPACES"
           END-EVALUATE.

           MOVE SPACES       TO VAR.
           EVALUATE FALSE
           WHEN  VAR = SPACES
               DISPLAY "C: FALSE VAR IS SPACES"
           WHEN  VAR NOT = SPACES
               DISPLAY "C: OK VAR IS SPACES"
           END-EVALUATE.

           MOVE "Peek a boo" TO VAR.
           EVALUATE TRUE
           WHEN  VAR = SPACES
               DISPLAY "D: BAD VAR IS SPACES"
           WHEN  VAR NOT = SPACES
               DISPLAY "D: OK VAR IS NOT SPACES"
           END-EVALUATE.

           MOVE SPACES       TO VAR.
           EVALUATE VAR-LEN ALSO VAR
           WHEN  < 32 ALSO SPACES
               DISPLAY "E: OK VAR IS SPACES"
           WHEN  > 16 ALSO NOT SPACES
               DISPLAY "E: BAD VAR IS NOT SPACES"
           WHEN OTHER
               DISPLAY "E: OK OTHER option taken"
           END-EVALUATE.

           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob -w], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[A: OK VAR-LEN > 16 AND VAR-LEN < 200
B: OK VAR IS NOT SPACES
C: OK VAR IS SPACES
D: OK VAR IS NOT SPACES
E: OK OTHER option taken
], [])

AT_CLEANUP


AT_SETUP([ENTRY FOR GO TO / GO TO ENTRY])
AT_KEYWORDS([runmisc condition expression])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 JUMP-ENTRY    PIC 9  VALUE 6.
          88 EXT-MODUS  VALUES 3, 4.
       LINKAGE SECTION.
       PROCEDURE DIVISION.
           GO TO ENTRY 'STMT05'.
       MAIN.
           GO TO ENTRY 'STMT01'
                       'STMT02'
                       'STMT03'
                       'STMT04'
                       'STMT05'
           DEPENDING ON JUMP-ENTRY
           DISPLAY 'NOT JUMPED'
           GOBACK.
       ENTRY FOR GO TO 'STMT01'
           DISPLAY 'STMT01'
       ENTRY FOR GO TO 'STMT02'
           PERFORM 3 TIMES
       ENTRY FOR GO TO 'STMT03'
              DISPLAY 'STMT03'
       ENTRY FOR GO TO 'STMT04'  DISPLAY 'STMT04'
              IF EXT-MODUS EXIT PERFORM END-IF
           END-PERFORM
       ENTRY FOR GO TO 'STMT05'
           DISPLAY 'STMT05'
           SUBTRACT 1 FROM JUMP-ENTRY
           GO TO MAIN.

])

# TODO: move to syntax checks, together with all expected error messages
AT_CHECK([$COMPILE -std=mf-strict prog.cob], [1], [],
[prog.cob:10: error: ENTRY FOR GO TO does not conform to Micro Focus COBOL
prog.cob: in paragraph 'MAIN':
prog.cob:18: error: ENTRY FOR GO TO does not conform to Micro Focus COBOL
prog.cob:20: error: ENTRY FOR GO TO does not conform to Micro Focus COBOL
prog.cob:22: error: ENTRY FOR GO TO does not conform to Micro Focus COBOL
prog.cob:24: error: ENTRY FOR GO TO does not conform to Micro Focus COBOL
prog.cob:26: error: ENTRY FOR GO TO does not conform to Micro Focus COBOL
prog.cob:29: error: ENTRY FOR GO TO does not conform to Micro Focus COBOL
])

AT_CHECK([$COMPILE prog.cob], [0], [],
[prog.cob:10: warning: ENTRY FOR GO TO used
prog.cob: in paragraph 'MAIN':
prog.cob:18: warning: ENTRY FOR GO TO used
prog.cob:20: warning: ENTRY FOR GO TO used
prog.cob:22: warning: ENTRY FOR GO TO used
prog.cob:24: warning: ENTRY FOR GO TO used
prog.cob:26: warning: ENTRY FOR GO TO used
prog.cob:29: warning: ENTRY FOR GO TO used
])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[STMT05
STMT05
STMT04
STMT05
STMT03
STMT04
STMT05
STMT03
STMT04
STMT03
STMT04
STMT03
STMT04
STMT05
STMT01
STMT03
STMT04
STMT03
STMT04
STMT03
STMT04
STMT05
NOT JUMPED
], [])

AT_CLEANUP


AT_SETUP([runtime checks within conditions])
AT_KEYWORDS([runmisc condition expression])

# this serves as a sample what was broken in the initial
# 3.1 release

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.

       01 mytab.
          03  VAR                   PIC  9(02) value 1.
          03  VAR2                  PIC  9(02) value 2.
          03                        OCCURS 2.
           05 T15-PRGM              PIC  X(08).
           05 T16-PRGM              PIC  X(08).
          03                        OCCURS 2.
           05 T15-NRGM              PIC  9(04).
           05 T16-NRGM              USAGE BINARY-INT.

       PROCEDURE DIVISION.
      *
           MOVE 'TESTME' TO T16-PRGM (VAR) (VAR2:)
           MOVE T16-PRGM (VAR) (1:VAR2) TO T15-PRGM (VAR)
           IF  T16-PRGM(VAR)
             = T15-PRGM(VAR2)
              DISPLAY 'WRONG RESULT OCCURS'.

           IF  MYTAB(VAR:VAR2)
             = MYTAB(VAR2:VAR)
              DISPLAY 'WRONG RESULT REFMOD'.

            INITIALIZE mytab

            GOBACK.
])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
# note: we mostly are interessted in a good codegen here...


AT_DATA([prog2.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog2.

       DATA DIVISION.
       WORKING-STORAGE SECTION.

       01 mytab.
          03  VAR                   PIC  9(02) value 1.
          03  VAR2                  PIC  9(02) value 3.
          03                        OCCURS 2.
           05 T15-PRGM              PIC  X(08).
           05 T16-PRGM              PIC  X(08).
          03                        OCCURS 2.
           05 T15-NRGM              PIC  9(04).
           05 T16-NRGM              USAGE BINARY-INT.
          05 buffer                 PIC X(500).

       PROCEDURE DIVISION.
      *
           IF  T16-PRGM(VAR)
             = T15-PRGM(VAR2)
              DISPLAY 'WRONG RESULT OCCURS'.

            GOBACK.
])
AT_CHECK([$COBC -x prog2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [0], [], [])
AT_CHECK([$COBC -x --debug -o prog2b prog2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog2b], [1], [],
[libcob: prog2.cob:21: error: subscript of 'T15-PRGM' out of bounds: 3
note: maximum subscript for 'T15-PRGM': 2
])
AT_DATA([prog3.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog3.

       DATA DIVISION.
       WORKING-STORAGE SECTION.

       01 mytab.
          03  VAR                   PIC  9(02) value 1.
          03  VAR2                  PIC  9(02) value 99.
          03                        OCCURS 2.
           05 T15-PRGM              PIC  X(08).
           05 T16-PRGM              PIC  X(08).
          03                        OCCURS 2.
           05 T15-NRGM              PIC  9(04).
           05 T16-NRGM              USAGE BINARY-INT.

       PROCEDURE DIVISION.

           IF  MYTAB(VAR:VAR2)
      *>     = MYTAB(VAR2:VAR)   that _should_ work but on x86_64
      *>                         the second line is evaluated first
             = MYTAB(VAR:VAR )
              DISPLAY 'WRONG RESULT REFMOD'.

            GOBACK.
])
AT_CHECK([$COBC -x prog3.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CHECK([$COBC -x --debug -o prog3b prog3.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog3b], [1], [],
[libcob: prog3.cob:20: error: length of 'mytab' out of bounds: 99, maximum: 52
])

AT_CLEANUP


AT_SETUP([libcob version check])
AT_KEYWORDS([runmisc])

# using a C program here, normally this would be called from old or newer modules
AT_DATA([prog.c], [[
#include <stdio.h>
#include <libcob.h>

#define COUNT_OF(x) (sizeof(x)/sizeof(x[0]))

struct verify_t {
  char *prog, *packver_prog;
  int patchlev_prog;
} verify[] = {
#include "testdata.h"
};

int
main(int argc, char *argv[])
{
  struct verify_t *p;
  for( p=verify; p < verify + COUNT_OF(verify); p++ ) {
    cob_check_version(p->prog, p->packver_prog, p->patchlev_prog);
  }
  return 0;
}
]])

# good cases
AT_DATA([testdata.h], [[
#define TST_STRINGIFY(s)			#s
#define TST_XSTRINGIFY(s)		TST_STRINGIFY (s)
  { "test22", "2.2",    0 },
/*  { "TestMatch1",
		TST_XSTRINGIFY (__LIBCOB_VERSION) "."
		TST_XSTRINGIFY (__LIBCOB_VERSION_MINOR) "."
		TST_XSTRINGIFY (__LIBCOB_VERSION_PATCHLEVEL),
    0}, */
  { "TestMatch2",
		TST_XSTRINGIFY (__LIBCOB_VERSION) "."
		TST_XSTRINGIFY (__LIBCOB_VERSION_MINOR) "."
      "0",
    0},
  { "TestMatch3",
		TST_XSTRINGIFY (__LIBCOB_VERSION) "."
		TST_XSTRINGIFY (__LIBCOB_VERSION_MINOR),
    0 }
]])

AT_CHECK([$COMPILE prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_DATA([testdata.h], [[
  { "TooSmall1", "1.1",    0 }
]])
AT_CHECK([$COMPILE -o small1 prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./small1 2>small1.log], [1], [], [])
AT_CHECK([$GREP -v "libcob has" small1.log], [0],
[libcob: error: version mismatch
note: TooSmall1 has version 1.1.0
], [])

AT_DATA([testdata.h], [[
  { "TooSmall2", "2.0",    0 }
]])
AT_CHECK([$COMPILE -o small2 prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./small2 2>small2.log], [1], [], [])
AT_CHECK([$GREP -v "libcob has" small2.log], [0],
[libcob: error: version mismatch
note: TooSmall2 has version 2.0.0
], [])

AT_DATA([testdata.h], [[
  { "TooHigh1", "3.3",    0 },
]])
AT_CHECK([$COMPILE -o high1 prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./high1 2>high1.log], [1], [], [])
AT_CHECK([$GREP -v "libcob has" high1.log], [0],
[libcob: error: version mismatch
note: TooHigh1 has version 3.3.0
], [])

AT_DATA([testdata.h], [[
  { "TooHigh2", "4.0",  0 }
]])
AT_CHECK([$COMPILE -o high2 prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./high2 2>high2.log], [1], [], [])
AT_CHECK([$GREP -v "libcob has" high2.log], [0],
[libcob: error: version mismatch
note: TooHigh2 has version 4.0.0
], [])

AT_DATA([testdata.h], [[
  { "TooHigh3", "4.0.1",  2 }
]])
AT_CHECK([$COMPILE -o high3 prog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./high3 2>high3.log], [1], [], [])
AT_CHECK([$GREP -v "libcob has" high3.log], [0],
[libcob: error: version mismatch
note: TooHigh3 has version 4.0.1.2
], [])

AT_CLEANUP


AT_SETUP([assorted math])
AT_KEYWORDS([runmisc expression])

# this is a test containing differnt small reproducers from
# bug reports

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 n pic 99 value 89.
       01 variable usage signed-int value 0.
          88 a-one value 1.
          88 a-two value 2.
       LINKAGE SECTION.
       PROCEDURE DIVISION.
      *> bug #702, "pow"-call in generated program
           display n(n**0+ 1:).
      *> bug #631 arithmetic handling (optimize code)
           if not a-one and not a-two
              display 'succeeded'
           else
              display 'failed'
           end-if.
           GOBACK.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[9
succeeded
], [])

AT_CLEANUP
