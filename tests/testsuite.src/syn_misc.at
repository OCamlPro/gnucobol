## Copyright (C) 2007-2012, 2014-2023 Free Software Foundation, Inc.
## Written by Keisuke Nishida, Roger While, Simon Sobisch, Edward Hart,
## Ron Norman
##
## This file is part of GnuCOBOL.
##
## The GnuCOBOL compiler is free software: you can redistribute it
## and/or modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation, either version 3 of the
## License, or (at your option) any later version.
##
## GnuCOBOL is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with GnuCOBOL.  If not, see <https://www.gnu.org/licenses/>.

### GnuCOBOL Test Suite


AT_SETUP([ambiguous AND/OR])
AT_KEYWORDS([misc expression])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 ONE   PIC 9 VALUE 1.
       01 TWO   PIC 9 VALUE 2.
       01 THREE PIC 9 VALUE 3.
       PROCEDURE        DIVISION.
           IF THREE = ONE AND TWO OR THREE
               DISPLAY "OK"
               END-DISPLAY
           END-IF.
           IF 3 = 1 OR 2 AND 3
               DISPLAY "NO"
               END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -Wno-constant-numlit-expression prog.cob], [0], [],
[prog.cob:10: warning: suggest parentheses around AND within OR
prog.cob:14: warning: suggest parentheses around OR within AND
])

AT_CLEANUP


AT_SETUP([warn constant expressions])
AT_KEYWORDS([misc expression])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           IF 3 = 1
           AND 2 OR 3
              DISPLAY "OK"
              END-DISPLAY
           END-IF.
           IF 3 = 1 OR
              2 AND 3
              DISPLAY "NO"
              END-DISPLAY
           END-IF
           IF "a" = "b"
              DISPLAY "NO"
              END-DISPLAY
           END-IF.
           IF "c" = "c    "
              DISPLAY "NO"
              END-DISPLAY
           END-IF.
           STOP RUN.
])

# FIXME positions broken
# Note: also checks that -Wconstant-expression works as "group" warning
AT_CHECK([$COMPILE_ONLY -fdiagnostics-show-option -w -Wconstant-expression prog.cob], [0], [],
[[prog.cob:5: warning: expression '3' EQUALS '1' is always FALSE [-Wconstant-numlit-expression]
prog.cob:6: warning: expression '3' EQUALS '2' is always FALSE [-Wconstant-numlit-expression]
prog.cob:6: warning: expression '3' EQUALS '3' is always TRUE [-Wconstant-numlit-expression]
prog.cob:10: warning: expression '3' EQUALS '1' is always FALSE [-Wconstant-numlit-expression]
prog.cob:11: warning: expression '3' EQUALS '2' is always FALSE [-Wconstant-numlit-expression]
prog.cob:11: warning: expression '3' EQUALS '3' is always TRUE [-Wconstant-numlit-expression]
prog.cob:15: warning: expression 'a' EQUALS 'b' is always FALSE [-Wconstant-expression]
prog.cob:19: warning: expression 'c' EQUALS 'c    ' is always TRUE [-Wconstant-expression]
]])
AT_CHECK([$COMPILE_ONLY -fdiagnostics-show-option -Wno-parentheses prog.cob], [0], [],
[[prog.cob:5: warning: expression '3' EQUALS '1' is always FALSE [-Wconstant-numlit-expression]
prog.cob:6: warning: expression '3' EQUALS '2' is always FALSE [-Wconstant-numlit-expression]
prog.cob:6: warning: expression '3' EQUALS '3' is always TRUE [-Wconstant-numlit-expression]
prog.cob:10: warning: expression '3' EQUALS '1' is always FALSE [-Wconstant-numlit-expression]
prog.cob:11: warning: expression '3' EQUALS '2' is always FALSE [-Wconstant-numlit-expression]
prog.cob:11: warning: expression '3' EQUALS '3' is always TRUE [-Wconstant-numlit-expression]
prog.cob:15: warning: expression 'a' EQUALS 'b' is always FALSE [-Wconstant-expression]
prog.cob:19: warning: expression 'c' EQUALS 'c    ' is always TRUE [-Wconstant-expression]
]])
AT_CHECK([$COMPILE_ONLY -fdiagnostics-show-option -w -Wconstant-numlit-expression prog.cob], [0], [],
[[prog.cob:5: warning: expression '3' EQUALS '1' is always FALSE [-Wconstant-numlit-expression]
prog.cob:6: warning: expression '3' EQUALS '2' is always FALSE [-Wconstant-numlit-expression]
prog.cob:6: warning: expression '3' EQUALS '3' is always TRUE [-Wconstant-numlit-expression]
prog.cob:10: warning: expression '3' EQUALS '1' is always FALSE [-Wconstant-numlit-expression]
prog.cob:11: warning: expression '3' EQUALS '2' is always FALSE [-Wconstant-numlit-expression]
prog.cob:11: warning: expression '3' EQUALS '3' is always TRUE [-Wconstant-numlit-expression]
]])
AT_CHECK([$COMPILE_ONLY -fdiagnostics-show-option -Wno-parentheses -Wno-constant-numlit-expression prog.cob], [0], [],
[[prog.cob:15: warning: expression 'a' EQUALS 'b' is always FALSE [-Wconstant-expression]
prog.cob:19: warning: expression 'c' EQUALS 'c    ' is always TRUE [-Wconstant-expression]
]])

AT_CLEANUP


AT_SETUP([warn literal size])
AT_KEYWORDS([misc numeric constant expression])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 WS-LINE-NUMBER         PIC 9(3) VALUE ZERO.
       01 WS-NUMBER              PIC 9(3)V99 VALUE ZERO.
       01 WS-TEXT                PIC X(5) VALUE 'CAT'.
       01 PIC-9-SIGNED           PIC S9(2) VALUE 5.
       01 PIC-9-SIGNED-DECIMAL   PIC S9(2)V99 VALUE 5.
       01 PIC-9-NOT-SIGNED       PIC 9(3) VALUE 5.
       01 PIC-9-NOT-DECIMAL      PIC 9(3) VALUE 5.
       01 XX                     PIC 9(2) VALUE 2.
       01 PIC-9-DECIMAL          PIC 9(3)V9 VALUE 5.
       01 COMPUTE-1              PIC 999V9999 VALUE 654.1873.
       01 GROUP-ITEM-X6.
          05 FILLER              PIC X(6) VALUE 'CAT'.
       78 CONST1                 VALUE 'CAT     '.
       01 CONST2                 CONSTANT AS 00000001234.
       01 IF-D16                 PIC PP99 VALUE .0012.
       PROCEDURE DIVISION.
       MAIN.
           IF GROUP-ITEM-X6 = '1234567'   CONTINUE.
           IF PIC-9-NOT-DECIMAL = 1.1     CONTINUE.
           IF PIC-9-NOT-DECIMAL = 1.0
               CONTINUE.
           IF PIC-9-DECIMAL = 1.01
               CONTINUE.
           IF PIC-9-DECIMAL = 1.100
               CONTINUE.
           IF PIC-9-SIGNED NOT = 11.0
               CONTINUE.
           IF PIC-9-NOT-SIGNED < 0
               CONTINUE.
           IF PIC-9-NOT-SIGNED < ZERO
               CONTINUE.
           IF PIC-9-NOT-SIGNED < (25 - 50)
               CONTINUE.
           IF PIC-9-DECIMAL = (2.24 / 2)
               CONTINUE.
           IF PIC-9-NOT-DECIMAL = "123"
               CONTINUE.
           IF PIC-9-NOT-DECIMAL = "1B0"       *> field is numeric
               CONTINUE.
           IF PIC-9-NOT-DECIMAL (1:3) = "1B0" *> refmod is always alphanumeric
               CONTINUE.
           IF PIC-9-NOT-DECIMAL (1:3) NOT = "Hot Doggy"
               CONTINUE.
           IF PIC-9-NOT-DECIMAL (1:XX) NOT = "Hi"
               CONTINUE.
           IF WS-LINE-NUMBER > '123'
              CONTINUE.
           IF WS-TEXT > 'DOGGY'
              CONTINUE.
           IF WS-NUMBER > 123.999
              CONTINUE.
           IF WS-LINE-NUMBER > 2345
              CONTINUE.
           IF WS-LINE-NUMBER <= 1234
              CONTINUE.
           IF WS-LINE-NUMBER > '1234'
              CONTINUE.
           IF 5432 < WS-LINE-NUMBER
              CONTINUE.
           IF 7855 >= WS-LINE-NUMBER
              CONTINUE.
           IF 1234 < WS-LINE-NUMBER
              CONTINUE.
           IF 5432 >= WS-LINE-NUMBER
              CONTINUE.
           IF WS-TEXT > 'DOGGY++'
              CONTINUE.
           IF WS-TEXT > 3141596
              CONTINUE.
           IF WS-TEXT > 3.141596
              CONTINUE.
           IF WS-TEXT = 3.141596
              CONTINUE.
           IF 'DOG+CAT' NOT = WS-TEXT
              CONTINUE.
           IF WS-TEXT = 'CAT+DOG'
              CONTINUE.
           EVALUATE TRUE
              WHEN 'DOG+CAT' = WS-TEXT
                 CONTINUE
              WHEN CONST1 = 'CAT+DOG'
                 CONTINUE
              WHEN CONST1 = 'CAT'
                 CONTINUE
              WHEN CONST2 = 1234
                 CONTINUE
           END-EVALUATE
           IF WS-LINE-NUMBER > 0000234
              CONTINUE.
           IF WS-TEXT = 'CAT         '
              CONTINUE.
           IF ( COMPUTE-1 < 654.20038) AND
              ( COMPUTE-1 > 654.17422) THEN
              CONTINUE.
           IF ( COMPUTE-1 < 5654.20) CONTINUE.
           IF ( COMPUTE-1 > 5654.20) CONTINUE.
           IF   COMPUTE-1 < 05654.20 CONTINUE.
           IF   COMPUTE-1 > 05654.20 CONTINUE.
           IF ( 5654.20 > COMPUTE-1) CONTINUE.
           IF ( 5654.20 < COMPUTE-1) CONTINUE.
           IF  05654.20 > COMPUTE-1  CONTINUE.
           IF  05654.20 < COMPUTE-1  CONTINUE.
           IF IF-D16 POSITIVE
              CONTINUE.
           IF IF-D16 NOT POSITIVE
              CONTINUE.
           IF IF-D16 NEGATIVE
              CONTINUE.
           IF IF-D16 NOT NEGATIVE
              CONTINUE.
           IF PIC-9-NOT-SIGNED > (25 - 50)
               CONTINUE.
           IF PIC-9-NOT-SIGNED >= -1  CONTINUE.
           IF PIC-9-NOT-SIGNED >= -.1 CONTINUE.
           IF PIC-9-NOT-SIGNED > 0.0  CONTINUE.
           IF PIC-9-NOT-SIGNED >  .0  CONTINUE.
           IF PIC-9-NOT-SIGNED > ZERO
               CONTINUE.
           IF PIC-9-NOT-SIGNED >= 0.0 CONTINUE.
           IF PIC-9-NOT-SIGNED >=  .0 CONTINUE.
           IF PIC-9-NOT-SIGNED >= ZERO
               CONTINUE.
           IF GROUP-ITEM-X6 (1:6) = '123456'
               CONTINUE.
      * Both have correct error check verified in syn_refmod.at
      *    IF GROUP-ITEM-X6 (2:6) = '123456'
      *        CONTINUE.
      *    IF GROUP-ITEM-X6 (WS-LINE-NUMBER:7) = '123456'
      *        CONTINUE.
           IF GROUP-ITEM-X6 (1:5) = '123456'
               CONTINUE.
           IF GROUP-ITEM-X6 (3:) = '12345'
               CONTINUE.
           IF GROUP-ITEM-X6 (3:WS-LINE-NUMBER) = '12345'
               CONTINUE.
           IF GROUP-ITEM-X6 (WS-LINE-NUMBER:3) = '12345'
               CONTINUE.
           IF GROUP-ITEM-X6 (WS-LINE-NUMBER:WS-LINE-NUMBER) = '12345'
               CONTINUE.
           IF GROUP-ITEM-X6 (WS-LINE-NUMBER:) = '12345'
               CONTINUE.
           IF PIC-9-NOT-DECIMAL    >     9     CONTINUE.
           IF PIC-9-NOT-DECIMAL    >   009     CONTINUE.
           IF PIC-9-NOT-DECIMAL    >   900     CONTINUE.
           IF PIC-9-NOT-DECIMAL    >   909     CONTINUE.
           IF PIC-9-NOT-DECIMAL    >   999     CONTINUE.
           IF PIC-9-NOT-DECIMAL    >  0000999  CONTINUE.
           IF PIC-9-DECIMAL        >   999     CONTINUE.
           IF PIC-9-DECIMAL        >   990.9   CONTINUE.
           IF PIC-9-DECIMAL        >   999.9   CONTINUE.
           IF PIC-9-DECIMAL        >  0999.90  CONTINUE.
           IF PIC-9-DECIMAL        > -0999.90  CONTINUE.
           IF PIC-9-SIGNED-DECIMAL >    99.99  CONTINUE.
           IF PIC-9-SIGNED-DECIMAL >=   99.99  CONTINUE.
           IF PIC-9-SIGNED-DECIMAL <   -99.99  CONTINUE.
           IF PIC-9-SIGNED-DECIMAL <= -099.990 CONTINUE.
           IF PIC-9-SIGNED-DECIMAL <= -099.991 CONTINUE.
           IF 99                   > XX CONTINUE.
           IF XX               NOT < 99 CONTINUE.
           IF NOT XX               < 99 CONTINUE.

           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [],
[prog.cob: in paragraph 'MAIN':
prog.cob:23: warning: literal '1234567' is longer than 'GROUP-ITEM-X6'
prog.cob:23: warning: expression is always FALSE
prog.cob:24: warning: literal '1.1' has more decimals than 'PIC-9-NOT-DECIMAL'
prog.cob:24: warning: expression is always FALSE
prog.cob:27: warning: literal '1.01' has more decimals than 'PIC-9-DECIMAL'
prog.cob:27: warning: expression is always FALSE
prog.cob:33: warning: unsigned 'PIC-9-NOT-SIGNED' may not be LESS THAN ZERO
prog.cob:35: warning: unsigned 'PIC-9-NOT-SIGNED' may not be LESS THAN ZERO
prog.cob:38: warning: unsigned 'PIC-9-NOT-SIGNED' may not be LESS THAN -25
prog.cob:40: warning: literal '1.12' has more decimals than 'PIC-9-DECIMAL'
prog.cob:40: warning: expression is always FALSE
prog.cob:43: warning: literal '1B0' is alphanumeric but 'PIC-9-NOT-DECIMAL' is numeric
prog.cob:47: warning: literal 'Hot Doggy' is longer than 'PIC-9-NOT-DECIMAL'
prog.cob:47: warning: expression is always TRUE
prog.cob:55: warning: literal '123.999' has more decimals than 'WS-NUMBER'
prog.cob:57: warning: literal '2345' has more digits than 'WS-LINE-NUMBER'
prog.cob:57: warning: expression is always FALSE
prog.cob:59: warning: literal '1234' has more digits than 'WS-LINE-NUMBER'
prog.cob:59: warning: expression is always TRUE
prog.cob:61: warning: literal '1234' has more digits than 'WS-LINE-NUMBER'
prog.cob:61: warning: expression is always FALSE
prog.cob:63: warning: literal '5432' has more digits than 'WS-LINE-NUMBER'
prog.cob:63: warning: expression is always FALSE
prog.cob:65: warning: literal '7855' has more digits than 'WS-LINE-NUMBER'
prog.cob:65: warning: expression is always TRUE
prog.cob:67: warning: literal '1234' has more digits than 'WS-LINE-NUMBER'
prog.cob:67: warning: expression is always FALSE
prog.cob:69: warning: literal '5432' has more digits than 'WS-LINE-NUMBER'
prog.cob:69: warning: expression is always TRUE
prog.cob:71: warning: literal 'DOGGY++' is longer than 'WS-TEXT'
prog.cob:73: warning: literal '3141596' is longer than 'WS-TEXT'
prog.cob:75: warning: literal '3.141596' is longer than 'WS-TEXT'
prog.cob:77: warning: literal '3.141596' is longer than 'WS-TEXT'
prog.cob:77: warning: expression is always FALSE
prog.cob:79: warning: literal 'DOG+CAT' is longer than 'WS-TEXT'
prog.cob:79: warning: expression is always TRUE
prog.cob:81: warning: literal 'CAT+DOG' is longer than 'WS-TEXT'
prog.cob:81: warning: expression is always FALSE
prog.cob:84: warning: literal 'DOG+CAT' is longer than 'WS-TEXT'
prog.cob:84: warning: expression is always FALSE
prog.cob:86: warning: expression 'CAT     ' EQUALS 'CAT+DOG' is always FALSE
prog.cob:88: warning: expression 'CAT     ' EQUALS 'CAT' is always TRUE
prog.cob:90: warning: expression '00000001234' EQUALS '1234' is always TRUE
prog.cob:97: warning: literal '654.20038' has more decimals than 'COMPUTE-1'
prog.cob:98: warning: literal '654.17422' has more decimals than 'COMPUTE-1'
prog.cob:100: warning: literal '5654.20' has more digits than 'COMPUTE-1'
prog.cob:100: warning: expression is always TRUE
prog.cob:101: warning: literal '5654.20' has more digits than 'COMPUTE-1'
prog.cob:101: warning: expression is always FALSE
prog.cob:102: warning: literal '5654.20' has more digits than 'COMPUTE-1'
prog.cob:102: warning: expression is always TRUE
prog.cob:103: warning: literal '5654.20' has more digits than 'COMPUTE-1'
prog.cob:103: warning: expression is always FALSE
prog.cob:104: warning: literal '5654.20' has more digits than 'COMPUTE-1'
prog.cob:104: warning: expression is always TRUE
prog.cob:105: warning: literal '5654.20' has more digits than 'COMPUTE-1'
prog.cob:105: warning: expression is always FALSE
prog.cob:106: warning: literal '5654.20' has more digits than 'COMPUTE-1'
prog.cob:106: warning: expression is always TRUE
prog.cob:107: warning: literal '5654.20' has more digits than 'COMPUTE-1'
prog.cob:107: warning: expression is always FALSE
prog.cob:112: warning: unsigned 'IF-D16' may not be LESS THAN ZERO
prog.cob:114: warning: unsigned 'IF-D16' may not be LESS THAN ZERO
prog.cob:117: warning: unsigned 'PIC-9-NOT-SIGNED' may always be GREATER THAN -25
prog.cob:118: warning: unsigned 'PIC-9-NOT-SIGNED' may always be GREATER OR EQUAL -1
prog.cob:119: warning: literal '-.1' has more decimals than 'PIC-9-NOT-SIGNED'
prog.cob:119: warning: unsigned 'PIC-9-NOT-SIGNED' may always be GREATER OR EQUAL -.1
prog.cob:124: warning: unsigned 'PIC-9-NOT-SIGNED' may always be GREATER OR EQUAL ZERO
prog.cob:125: warning: unsigned 'PIC-9-NOT-SIGNED' may always be GREATER OR EQUAL ZERO
prog.cob:126: warning: unsigned 'PIC-9-NOT-SIGNED' may always be GREATER OR EQUAL ZERO
prog.cob:135: warning: literal '123456' is longer than reference-modification of 'GROUP-ITEM-X6'
prog.cob:135: warning: expression is always FALSE
prog.cob:137: warning: literal '12345' is longer than reference-modification of 'GROUP-ITEM-X6'
prog.cob:137: warning: expression is always FALSE
prog.cob:139: warning: literal '12345' is longer than reference-modification of 'GROUP-ITEM-X6'
prog.cob:139: warning: expression is always FALSE
prog.cob:141: warning: literal '12345' is longer than reference-modification of 'GROUP-ITEM-X6'
prog.cob:141: warning: expression is always FALSE
prog.cob:151: warning: 'PIC-9-NOT-DECIMAL' may not be GREATER THAN 999
prog.cob:152: warning: 'PIC-9-NOT-DECIMAL' may not be GREATER THAN 999
prog.cob:155: warning: 'PIC-9-DECIMAL' may not be GREATER THAN 999.9
prog.cob:156: warning: 'PIC-9-DECIMAL' may not be GREATER THAN 999.9
prog.cob:157: warning: unsigned 'PIC-9-DECIMAL' may always be GREATER THAN -999.90
prog.cob:158: warning: 'PIC-9-SIGNED-DECIMAL' may not be GREATER THAN 99.99
prog.cob:159: warning: 'PIC-9-SIGNED-DECIMAL' may not be GREATER THAN 99.99
prog.cob:160: warning: 'PIC-9-SIGNED-DECIMAL' may not be LESS THAN -99.99
prog.cob:161: warning: 'PIC-9-SIGNED-DECIMAL' may not be LESS THAN -99.99
prog.cob:162: warning: literal '-99.991' has more decimals than 'PIC-9-SIGNED-DECIMAL'
])

AT_CLEANUP


AT_SETUP([warn literal size in constant expr. (level 88)])
AT_KEYWORDS([misc numeric constant expression])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.

       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x PIC 9.
        88 never-true value 99.
       01  y PIC 9.
        88 never-truen value -9.
       01  xx pic x.
        88 some-not values 'a', 'b', 'cd'.
        88 some-not-s values '00', 'a', 'b', 'cd'.

       PROCEDURE DIVISION.
           if never-true
            continue
           end-if
           if never-truen
            continue
           end-if
           if some-not-s
            set some-not   to true
            set some-not-s to true
           end-if
           set never-true  to true
           goback.
])

AT_CHECK([$COMPILE_ONLY -fdiagnostics-show-option prog.cob], [0], [],
[prog.cob:8: warning: literal '99' has more digits than 'x' [[-Wconstant-expression]]
prog.cob:8: warning: expression is always FALSE [[-Wconstant-expression]]
prog.cob:13: warning: literal '00' is longer than 'xx' [[-Wconstant-expression]]
prog.cob:13: warning: expression is always FALSE [[-Wconstant-expression]]
prog.cob:13: warning: literal 'cd' is longer than 'xx' [[-Wconstant-expression]]
prog.cob:13: warning: expression is always FALSE [[-Wconstant-expression]]
prog.cob:24: warning: value size exceeds data size [[-Wtruncate]]
prog.cob:24: note: value size is 2 [[-Wtruncate]]
prog.cob:11: note: 'xx' defined here as PIC X [[-Wtruncate]]
prog.cob:26: warning: value size exceeds data size [[-Wtruncate]]
prog.cob:26: note: value is 99 [[-Wtruncate]]
prog.cob:7: note: 'x' defined here as PIC 9 [[-Wtruncate]]
])

AT_CLEANUP


AT_SETUP([Invalid conditional expression (1)])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  CON          CONSTANT 10.
       01  V            PIC 9.
       78  C78          VALUE 'A'.
       PROCEDURE        DIVISION.
           IF FUNCTION TRIM (' ')
              CONTINUE
              CONTINUE
           END-IF.
           IF CON
              CONTINUE
              CONTINUE
           END-IF.
           IF V
              CONTINUE
              CONTINUE
           END-IF.
           IF C78
              CONTINUE
              CONTINUE
           END-IF.
           IF '2'
              CONTINUE
              CONTINUE
           END-IF.
           IF C78 OR V
               CONTINUE
               CONTINUE
           END-IF.
           EVALUATE TRUE
              WHEN FUNCTION TRIM (' ')
                 CONTINUE
                 CONTINUE
              WHEN CON
                 CONTINUE
                 CONTINUE
              WHEN V
                 CONTINUE
                 CONTINUE
              WHEN C78
                 CONTINUE
                 CONTINUE
              WHEN '2'
                 CONTINUE
              WHEN OTHER
                 CONTINUE
           END-EVALUATE.
           PERFORM VARYING V
                   FROM 1 BY 1
                   UNTIL FUNCTION TRIM (' ')
              CONTINUE
              CONTINUE
           END-PERFORM.
           PERFORM VARYING V
                   FROM 1 BY 1
                   UNTIL V
              CONTINUE
              CONTINUE
           END-PERFORM.
           PERFORM VARYING V
                   FROM 1 BY 1
                   UNTIL C78
              CONTINUE
              CONTINUE
           END-PERFORM.
           PERFORM VARYING V
                   FROM 1 BY 1
                   UNTIL '2'
              CONTINUE
              CONTINUE
           END-PERFORM.
           IF NOTDEFINED = 1 OR 2
              CONTINUE
           END-IF.

           IF (V = 1) AND V
              CONTINUE
           END-IF

           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:10: error: invalid expression
prog.cob:14: error: invalid expression
prog.cob:18: error: invalid expression
prog.cob:22: error: invalid expression
prog.cob:26: error: invalid expression
prog.cob:30: error: invalid conditional expression
prog.cob:35: error: invalid expression
prog.cob:38: error: invalid expression
prog.cob:41: error: invalid expression
prog.cob:44: error: invalid expression
prog.cob:47: error: invalid expression
prog.cob:54: error: invalid expression
prog.cob:60: error: invalid expression
prog.cob:66: error: invalid expression
prog.cob:72: error: invalid expression
prog.cob:76: error: 'NOTDEFINED' is not defined
prog.cob:80: error: invalid expression
])

AT_CLEANUP


AT_SETUP([Invalid conditional expression (2)])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01 WRKN  PIC S999 VALUE 123.
        01 WRKX  PIC X(8) VALUE 'House'.
        PROCEDURE DIVISION.
        MAIN.
            EVALUATE WRKN
              GREATER ZERO
              < 0
              > 0
            WHEN TRUE
              DISPLAY "WHAT IS IT?"
            END-EVALUATE.
            IF WRKN = 123 EQUAL 456
              DISPLAY "Strange brew! " WRKN
            END-IF.
            IF WRKN NOT EQUAL 123 NOT = 456
              DISPLAY "Strange brew! " WRKN
            END-IF.
            IF WRKN = 123 OR 456
              DISPLAY "Home brew! " WRKN
            END-IF.
            IF WRKX = "Red" OR "White"
              DISPLAY "Home wine! " WRKX
            END-IF.
            IF WRKX <= "Red" = "White"
              DISPLAY "Home wine! " WRKX
            END-IF.
            IF WRKX = "Red" NOT "White"
              DISPLAY "Home wine! " WRKX
            END-IF.
            IF WRKN = (123 - 12) OR
                   >= (456 + 16)
              DISPLAY "And another brew! " WRKN
            END-IF.
            STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob: in paragraph 'MAIN':
prog.cob:10: error: GREATER THAN operator may be misplaced
prog.cob:17: error: EQUALS operator may be misplaced
prog.cob:20: error: NOT EQUAL operator may be misplaced
prog.cob:29: error: LESS OR EQUAL operator may be misplaced
prog.cob:32: error: invalid expression
])

AT_CLEANUP


AT_SETUP([Invalid conditional expression (3)])
AT_KEYWORDS([expression condition])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
      ******************************************************************
       WORKING-STORAGE SECTION.
      *
       01 FLD1 PIC 9 VALUE 1.
       01 FLD2 PIC 9 VALUE 2.
       01 FLDX PIC 9 VALUE 5.
       01 FLDY PIC 9 VALUE 6.

       PROCEDURE DIVISION.
           IF 1 AND 2 > 1 THEN
                DISPLAY 'Test 1 is WRONG'
           ELSE
                DISPLAY 'Test 1 is OK'.

           IF FLD1 AND FLDX > FLD2 THEN
                DISPLAY 'Test 2 is OK'
           ELSE
                DISPLAY 'Test 2 is Wrong'.

           IF FLD1 OR FLDX > FLD2 THEN
                DISPLAY 'Test 2 is OK'
           ELSE
                DISPLAY 'Test 2 is Wrong'.

           IF FLD1 > 2 AND FLDX > FLD2 THEN
                DISPLAY 'Test 2 is OK'
           ELSE
                DISPLAY 'Test 2 is Wrong'.

           IF FLD2 IS NUMERIC AND FLD1 THEN
                DISPLAY 'Test 2 is OK'
           ELSE
                DISPLAY 'Test 2 is Wrong'.

           IF FLDX > FLD2 AND FLD1 AND 8 THEN
                DISPLAY 'Test 3 is OK ' FLDX ' > ' FLD2 ' & ' FLD1
           ELSE
                DISPLAY 'Test 3 is Wrong'.

           IF FLDX > FLD2 OR FLD1 OR 8 THEN
                DISPLAY 'Test 3 is OK'
           ELSE
                DISPLAY 'Test 3 is Wrong'.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:15: error: invalid conditional expression
prog.cob:20: error: invalid conditional expression
prog.cob:25: error: invalid conditional expression
prog.cob:35: error: invalid expression
])

AT_CLEANUP


AT_SETUP([Valid conditional expression])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  var         PIC 999.

       PROCEDURE       DIVISION.
           IF  var = 83  AND >  1 + 1
              CONTINUE
           END-IF
           IF  var = 83  AND >  2
              CONTINUE
           END-IF
           IF  var = 83  AND > (1 + 1)
              CONTINUE
           END-IF
           IF (var NOT = 1) OR (var NOT = 2)
               CONTINUE
           END-IF
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY -fno-constant-folding prog.cob], [0], [], [])

AT_CLEANUP


AT_SETUP([missing headers])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       SOURCE-COMPUTER. GNU-LINUX.
       SPECIAL-NAMES.
            SYMBOLIC NL IS 101
                     NL2   102
            NUMERIC SIGN TRAILING SEPARATE
            DECIMAL-POINT IS COMMA
            .

            SELECT PRINT-FILE ASSIGN "EXTRXW"
            ORGANIZATION LINE SEQUENTIAL
            .
       DATA DIVISION.
       FD  PRINT-FILE EXTERNAL.
       01  PRINT-REC          PIC X(64).

           DISPLAY "X"
           END-DISPLAY
           ACCEPT OMITTED
           END-ACCEPT
           GOBACK
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:2: error: PROGRAM-ID header missing
prog.cob:2: error: ENVIRONMENT DIVISION header missing
prog.cob:2: error: CONFIGURATION SECTION header missing
prog.cob:10: error: INPUT-OUTPUT SECTION header missing
prog.cob:10: error: FILE-CONTROL header missing
prog.cob:14: error: FILE SECTION header missing
prog.cob:17: error: PROCEDURE DIVISION header missing
])

AT_CHECK([$COMPILE_ONLY -frelax-syntax-checks prog.cob], [0], [],
[prog.cob:2: warning: PROGRAM-ID header missing
prog.cob:2: note: PROGRAM-ID header assumed
prog.cob:2: warning: ENVIRONMENT DIVISION header missing
prog.cob:2: note: ENVIRONMENT DIVISION header assumed
prog.cob:2: warning: CONFIGURATION SECTION header missing
prog.cob:2: note: CONFIGURATION SECTION header assumed
prog.cob:10: warning: INPUT-OUTPUT SECTION header missing
prog.cob:10: note: INPUT-OUTPUT SECTION header assumed
prog.cob:10: warning: FILE-CONTROL header missing
prog.cob:10: note: FILE-CONTROL header assumed
prog.cob:14: warning: FILE SECTION header missing
prog.cob:14: note: FILE SECTION header assumed
prog.cob:17: warning: PROCEDURE DIVISION header missing
prog.cob:17: note: PROCEDURE DIVISION header assumed
])

AT_CLEANUP


AT_SETUP([one line program])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [           DISPLAY "minimal".
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:1: error: PROGRAM-ID header missing
prog.cob:1: error: PROCEDURE DIVISION header missing
])

AT_CHECK([$COMPILE_ONLY -frelax-syntax-checks prog.cob], [0], [],
[prog.cob:1: warning: PROGRAM-ID header missing
prog.cob:1: note: PROGRAM-ID header assumed
prog.cob:1: warning: PROCEDURE DIVISION header missing
prog.cob:1: note: PROCEDURE DIVISION header assumed
])

AT_CLEANUP


AT_SETUP([empty program])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x PIC 999 VALUE 124.
       END PROGRAM prog.
])

# Note: we need to test for generating a valid C source (with normal/no flags)
#       here, not only for COBOL compilation
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBC prog.cob], [0], [], [])

AT_DATA([prog2.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog2.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x PIC 999 VALUE 124.
])

AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([$COBC prog2.cob], [0], [], [])

AT_DATA([prog3.cob], [])

AT_CHECK([$COMPILE_ONLY prog3.cob], [1], [],
[prog3.cob:1: error: PROGRAM-ID header missing
])

AT_CHECK([$COMPILE -frelax-syntax-checks prog3.cob], [0], [],
[prog3.cob:1: warning: PROGRAM-ID header missing
prog3.cob:1: note: PROGRAM-ID header assumed
])
AT_CHECK([$COBC -frelax-syntax-checks prog3.cob], [0], [],
[prog3.cob:1: warning: PROGRAM-ID header missing [[-Wothers]]
prog3.cob:1: note: PROGRAM-ID header assumed [[-Wothers]]
])

AT_CLEANUP


AT_SETUP([INITIALIZE constant])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  CON          CONSTANT 10.
       01  V            PIC 9.
       78  C78          VALUE 'A'.
       PROCEDURE DIVISION.
           INITIALIZE CON.
           INITIALIZE V.
           INITIALIZE V, 9.
           INITIALIZE C78, V.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:10: error: invalid INITIALIZE statement
prog.cob:12: error: invalid INITIALIZE statement
prog.cob:13: error: invalid INITIALIZE statement
])

AT_CLEANUP


AT_SETUP([CLASS duplicate values])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
            SYMBOLIC NL IS 101
                     NL2   102
            CLASS    CHECK-VALID    'a' THRU 'z'
                                    'A' THRU 'Z'
                                    'cdef'
            .
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(8).
       PROCEDURE        DIVISION.
           IF X         IS CHECK-VALID
              DISPLAY "OK"
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [],
[prog.cob:9: warning: duplicate character values in class 'CHECK-VALID'
])

AT_CLEANUP


AT_SETUP([INSPECT invalid size])
AT_KEYWORDS([misc refmod]) 

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
       ALPHABET ALPHA IS ASCII.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01.
         02 X-POS       PIC 9 VALUE 3.
         02 X           PIC X(8) OCCURS 2.
       PROCEDURE        DIVISION.
           INSPECT X(1) REPLACING ALL SPACES BY "AA".
           INSPECT X(1) REPLACING ALL "ABC"  BY "AA".
           INSPECT X(1) REPLACING ALL "DEF"  BY SPACES.
           INSPECT X(1) CONVERTING SPACES TO "AA".
           INSPECT X(1) CONVERTING "ABC"  TO "AA".
           INSPECT X(1) (X-POS:2) CONVERTING "DEF"  TO SPACES.
           INSPECT X(1) CONVERTING "GHI"  TO ALPHA.
      *>   the following is allowed, see NC221A and ref-mod definition
           INSPECT X(1) CONVERTING "DEF"  TO X(2) (X-POS:3).
           INSPECT X(1) CONVERTING "DEF"  TO X(2) (X-POS:4).
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:14: error: REPLACING operands differ in size
prog.cob:15: error: REPLACING operands differ in size
prog.cob:17: error: CONVERTING operands differ in size
prog.cob:18: error: CONVERTING operands differ in size
prog.cob:20: error: CONVERTING operands differ in size
prog.cob:23: error: CONVERTING operands differ in size
])

AT_CLEANUP


AT_SETUP([INSPECT invalid target])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(8).
       PROCEDURE        DIVISION.
           INSPECT FUNCTION TRIM(X) REPLACING ALL "ABC" BY "DEF".
           INSPECT FUNCTION TRIM(X) CONVERTING "ABC" TO "AAA".
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:8: error: invalid target for REPLACING
prog.cob:9: error: invalid target for CONVERTING
])

AT_CLEANUP


AT_SETUP([INSPECT missing keyword])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(8).
       PROCEDURE        DIVISION.
           INSPECT X REPLACING "AB" BY "CD".
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:8: error: INSPECT missing ALL/FIRST/LEADING/TRAILING
])

AT_CLEANUP


AT_SETUP([INSPECT repeated keywords])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x PIC 9(5).

       PROCEDURE DIVISION.
           *> Ok
           INSPECT "abcde" TALLYING x FOR CHARACTERS CHARACTERS
       
           *> Not ok
           INSPECT "abcde" TALLYING x FOR ALL LEADING
               TRAILING ALL ALL ALL TRAILING
           INSPECT "abcde" TALLYING x FOR x FOR LEADING "a"
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:14: error: missing value between ALL/LEADING/TRAILING words
prog.cob:15: error: missing value between ALL/LEADING/TRAILING words
prog.cob:15: error: missing value between ALL/LEADING/TRAILING words
prog.cob:15: error: missing value between ALL/LEADING/TRAILING words
prog.cob:15: error: missing value between ALL/LEADING/TRAILING words
prog.cob:15: error: missing value between ALL/LEADING/TRAILING words
prog.cob:16: error: TALLYING clause is incomplete
prog.cob:16: error: missing CHARACTERS/ALL/LEADING/TRAILING phrase after FOR phrase
])

AT_CLEANUP


AT_SETUP([INSPECT incomplete clause])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x PIC 9(5).

       PROCEDURE DIVISION.
           INSPECT "abcde" TALLYING x FOR
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:11: error: TALLYING clause is incomplete
])
AT_CLEANUP


AT_SETUP([INSPECT multiple BEFORE/AFTER clauses])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x PIC X(10).

       PROCEDURE DIVISION.
           INSPECT x REPLACING CHARACTERS BY "x"
               BEFORE "A" BEFORE "b" AFTER "c"
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:11: error: syntax error, unexpected BEFORE
])
AT_CLEANUP


AT_SETUP([EXAMINE invalid literals])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x  PIC X(10).
       01  y  PIC X.
       01  yy PIC XX.

       PROCEDURE DIVISION.
           EXAMINE x TALLYING ALL "AA" REPLACING BY "CC"
           EXAMINE x TALLYING UNTIL FIRST SPACE
           EXAMINE x TALLYING UNTIL FIRST y
           EXAMINE x TALLYING LEADING yy
           EXAMINE y TALLYING ALL x (1).
           EXAMINE y TALLYING ALL x (3:2).
           EXAMINE x TALLYING UNTIL FIRST ALL
])

AT_CHECK([$COMPILE_ONLY -freserved=EXAMINE prog.cob], [1], [],
[prog.cob:12: error: single-character literal or data item expected
prog.cob:12: error: single-character literal or data item expected
prog.cob:15: error: single-character literal or data item expected
prog.cob:16: error: single-character literal or data item expected
prog.cob:16: error: syntax error, unexpected [(]
prog.cob:17: error: single-character literal or data item expected
prog.cob:17: error: syntax error, unexpected [(]
prog.cob:18: error: syntax error, unexpected ALL
])
AT_CLEANUP


AT_SETUP([maximum data size])
AT_KEYWORDS([misc max])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 SINGLE-ITEM   PIC X(9999999999).
       01 GROUP-ITEM1.
          05 FILLER     PIC X(9999999999).
       01 GROUP-ITEM2.
          05 FILLER     PIC X(199999999).
          05 FILLER     PIC X(199999999).
       >> IF P64 SET
          05 FILLER     PIC X(1999999999).
       >> END-IF
       PROCEDURE        DIVISION.
           STOP RUN.

])

AT_CHECK([test "$COB_HAS_64_BIT_POINTER" = "yes"], [0], [], [],

# Previous test "failed" --> 32 bit
[AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:6: error: 'SINGLE-ITEM' cannot be larger than 268435456 bytes
prog.cob:8: error: 'FILLER 1' cannot be larger than 268435456 bytes
prog.cob:7: error: 'GROUP-ITEM1' cannot be larger than 268435456 bytes
prog.cob:9: error: 'GROUP-ITEM2' cannot be larger than 268435456 bytes
])]

,

# Previous test "passed" --> 64 bit
[AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:6: error: 'SINGLE-ITEM' cannot be larger than 2147483646 bytes
prog.cob:8: error: 'FILLER 1' cannot be larger than 2147483646 bytes
prog.cob:7: error: 'GROUP-ITEM1' cannot be larger than 2147483646 bytes
prog.cob:9: error: 'GROUP-ITEM2' cannot be larger than 2147483646 bytes
])]

)


AT_CLEANUP


AT_SETUP([unreachable statement])
AT_KEYWORDS([misc extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT f ASSIGN TO 'f' LINE SEQUENTIAL.
       DATA DIVISION.
       FILE SECTION.
       FD  f.
       01  f-rec PIC X.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
       DECLARATIVES.
       f-error SECTION.
           USE AFTER ERROR ON f.
           GOBACK
           .
       END DECLARATIVES.

           DISPLAY "VALID"
           END-DISPLAY.

       P01.
           GO TO P02.
           DISPLAY "INVALID"
           END-DISPLAY.
       P02.
           GO TO P03
           CONTINUE.  *> explicit no unreachable warning
       P03.
           GO TO P04
           CONTINUE AFTER 2 SECONDS.  *> that's one again
       P04.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -Wunreachable prog.cob], [0], [],
[prog.cob: in paragraph 'P01':
prog.cob:26: warning: unreachable statement 'DISPLAY'
prog.cob: in paragraph 'P03':
prog.cob:33: warning: unreachable statement 'CONTINUE AFTER'
])

AT_CLEANUP


AT_SETUP([CRT STATUS])
AT_KEYWORDS([SPECIAL-NAMES misc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           CRT STATUS IS MY-CRT-STATUS.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X.
       PROCEDURE        DIVISION.
           ACCEPT X END-ACCEPT.
           STOP RUN.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           CRT STATUS IS MY-CRT-STATUS.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X.
       77 MY-CRT-STATUS PIC 9(04).
       PROCEDURE        DIVISION.
           ACCEPT X END-ACCEPT.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:7: error: 'MY-CRT-STATUS' is not defined
])
AT_CHECK([$COMPILE_ONLY prog2.cob], [0], [], [])

AT_CLEANUP


AT_SETUP([SPECIAL-NAMES clause])
AT_KEYWORDS([misc extensions CURSOR CRT STATUS])

# FIXME: actually this is the only place for some CRT STATUS checks...

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
           CRT STATUS IS MY-CRT-STATUS.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  CURSOR-POSITION IS SPECIAL-NAMES CURSOR.
           03  CURSOR-ROW         PIC 999.
           03  CURSOR-COL         PIC 999.
       77  MY-CRT-STATUS PIC 9(04).
       77  CRT-STATUS IS SPECIAL-NAMES CRT STATUS PIC 9(5).
       PROCEDURE        DIVISION.
           ACCEPT OMITTED END-ACCEPT.
           STOP RUN.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  CRT-STATUS IS SPECIAL-NAMES CRT STATUS PIC X(5).
       PROCEDURE        DIVISION.
           ACCEPT OMITTED END-ACCEPT.
           STOP RUN.
])

AT_DATA([prog3.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  CURSOR-POSITION IS SPECIAL-NAMES CURSOR.
           03  CURSOR-ROW   PIC 999.
           03  CURSOR-COL   PIC 999.
       77  CRT-STATUS       PIC X(4) IS SPECIAL-NAMES CRT STATUS.
       PROCEDURE        DIVISION.
           ACCEPT OMITTED END-ACCEPT.
           STOP RUN.
])

AT_DATA([prog4.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  CURSOR-POSITION IS SPECIAL-NAMES CURSOR.
           03  CURSOR-ROW   PIC 999.
           03  CURSOR-COL   PIC 999.
       77  CRT-STATUS       PIC 9(5) IS SPECIAL-NAMES CRT STATUS.
       PROCEDURE        DIVISION.
           ACCEPT OMITTED END-ACCEPT.
           STOP RUN.
])

AT_DATA([prog5.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  CRT-STATUS   PIC 9(3) IS SPECIAL-NAMES CRT STATUS.
       PROCEDURE        DIVISION.
           ACCEPT OMITTED END-ACCEPT.
           STOP RUN.
])

AT_DATA([prog6.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  CRT-STATUS   PIC X(3) IS SPECIAL-NAMES CRT STATUS.
       PROCEDURE        DIVISION.
           ACCEPT OMITTED END-ACCEPT.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:14: error: duplicate CRT STATUS clause
])
AT_CHECK([$COMPILE_ONLY prog2.cob], [1], [],
[prog2.cob:6: error: 'CRT-STATUS' CRT STATUS must be 3 or 4 characters long
])
AT_CHECK([$COMPILE_ONLY prog3.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY prog4.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY prog5.cob], [1], [],
[prog5.cob:6: error: 'CRT-STATUS' numeric CRT STATUS must have at least 4 digits
])
AT_CHECK([$COMPILE_ONLY prog6.cob], [0], [], [])

AT_CLEANUP


AT_SETUP([CURRENCY SIGN])
AT_KEYWORDS([SPECIAL-NAMES misc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           CURRENCY SIGN IS '*'.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           CURRENCY 'DOLLAR'.
])

AT_DATA([prog3.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog3.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           CURRENCY 'DOLLAR'
           WITH PICTURE SYMBOL '$'.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77 SOME-CASH     PIC 9(04).99$.
       PROCEDURE        DIVISION.
           MOVE 123.4 TO SOME-CASH
           DISPLAY SOME-CASH END-DISPLAY.
           STOP RUN.
])

AT_DATA([prog4.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog4.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           CURRENCY '   '
           PICTURE SYMBOL '*'.
])

AT_DATA([prog5.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog5.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           CURRENCY ' T '
           PICTURE SYMBOL ' '.
])

AT_DATA([prog6.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog6.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           CURRENCY '+-'
           PICTURE SYMBOL 'TT'.
])

AT_DATA([prog7.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog7.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           CURRENCY SIGN IS 'T'.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77 SOME-CASH     PIC 9(04).99T.
       PROCEDURE        DIVISION.
           MOVE 123.4 TO SOME-CASH
           DISPLAY SOME-CASH END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:7: error: invalid character '*' in currency symbol
])
AT_CHECK([$COMPILE_ONLY prog2.cob], [1], [],
[prog2.cob:7: error: currency symbol must be one character long
])
AT_CHECK([$COMPILE_ONLY prog3.cob], [0], [],
[prog3.cob:7: warning: separate currency symbol and currency string is not implemented
])
AT_CHECK([$COMPILE_ONLY prog4.cob], [1], [],
[prog4.cob:7: warning: separate currency symbol and currency string is not implemented
prog4.cob:7: error: invalid CURRENCY SIGN '   '
prog4.cob:8: error: invalid character '*' in currency symbol
])
AT_CHECK([$COMPILE_ONLY prog5.cob], [1], [],
[prog5.cob:7: warning: separate currency symbol and currency string is not implemented
prog5.cob:8: error: invalid character ' ' in currency symbol
])
AT_CHECK([$COMPILE_ONLY prog6.cob], [1], [],
[prog6.cob:7: warning: separate currency symbol and currency string is not implemented
prog6.cob:7: error: invalid CURRENCY SIGN '+-'
prog6.cob:8: error: currency symbol must be one character long
])
AT_CHECK([$COMPILE_ONLY prog7.cob], [0], [], [])

AT_CLEANUP


AT_SETUP([SWITCHES])
AT_KEYWORDS([runmisc extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           SW1
             ON  IS SWIT1-ON
             OFF IS SWIT1-OFF
           .
           SWITCH B IS SWITCH-B
             ON  IS SWIT2-ON
             OFF IS SWIT2-OFF
           .
           SWITCH-25
             ON  IS SWIT25-ON
             OFF IS SWIT25-OFF
           .
           SWITCH-25
             ON  IS SWIT25-IS-ON
             OFF IS SWIT25-IS-OFF
           .
           SWITCH 25
             ON  IS SWIT25-SP-ON
             OFF IS SWIT25-SP-OFF
           .
           SWITCH Y
             ON  IS SWIT25-Y-ON
             OFF IS SWIT25-Y-OFF
           .
           SWITCH Z
             ON  IS SWIT26-ON
             ON  IS SWIT26-OFF
           .
           SWITCH-32
             ON  IS SWIT32-ON
           .
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  SWITCH       PIC 99 VALUE 12.
       PROCEDURE        DIVISION.
           ADD SWITCH 1 GIVING SWITCH
           END-ADD.
           IF SWITCH NOT = 13
              DISPLAY "SWITCH (variable) WRONG: "
                      SWITCH
              END-DISPLAY
           END-IF.
           IF SWIT1-ON
              DISPLAY "ON"
              END-DISPLAY
           ELSE
              DISPLAY "OFF"
              END-DISPLAY
           END-IF.
           IF SWIT2-ON
              DISPLAY " ON"
              END-DISPLAY
           ELSE
              DISPLAY " OFF"
              END-DISPLAY
           END-IF.
           SET SWITCH-B TO OFF
           IF SWIT2-ON
              CONTINUE
           END-IF.
           IF SWIT25-ON
              CONTINUE
           END-IF.
           IF SWIT26-ON
              CONTINUE
           END-IF.
           IF SWIT32-ON
              CONTINUE
           END-IF.
           IF SWIT32-OFF
              CONTINUE
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:7: error: invalid system-name 'SW1'
prog.cob:8: error: ON/OFF usage requires a SWITCH name
prog.cob:9: error: ON/OFF usage requires a SWITCH name
prog.cob:11: error: invalid system-name 'SWITCH B'
prog.cob:12: error: ON/OFF usage requires a SWITCH name
prog.cob:13: error: ON/OFF usage requires a SWITCH name
prog.cob:23: error: invalid system-name 'SWITCH 25'
prog.cob:24: error: ON/OFF usage requires a SWITCH name
prog.cob:25: error: ON/OFF usage requires a SWITCH name
prog.cob:27: error: invalid system-name 'SWITCH Y'
prog.cob:28: error: ON/OFF usage requires a SWITCH name
prog.cob:29: error: ON/OFF usage requires a SWITCH name
prog.cob:31: error: invalid system-name 'SWITCH Z'
prog.cob:32: error: ON/OFF usage requires a SWITCH name
prog.cob:33: error: ON/OFF usage requires a SWITCH name
prog.cob:49: error: 'SWIT1-ON' is not defined
prog.cob:56: error: 'SWIT2-ON' is not defined
prog.cob:63: error: 'SWITCH-B' is not defined
prog.cob:63: error: syntax error, unexpected OFF
prog.cob:70: error: 'SWIT26-ON' is not defined
prog.cob:76: error: 'SWIT32-OFF' is not defined
])
# FIXME: There should be an additional
#prog.cob:19: error: duplicate definition of 'SWITCH-25'
#prog.cob:15: note: 'SWITCH-25' previously defined here
#
AT_CHECK([$COMPILE_ONLY -std=acu-strict -fsystem-name=SW1 -fno-relax-syntax-checks prog.cob], [1], [],
[prog.cob:33: error: duplicate ON clause
prog.cob:76: error: 'SWIT32-OFF' is not defined
])
# FIXME: There should be an additional
#prog.cob:19: error: duplicate definition of 'SWITCH-25'
#prog.cob:15: note: 'SWITCH-25' previously defined here
#prog.cob:23: error: duplicate definition of 'SWITCH 25'
#prog.cob:15: note: 'SWITCH-25' previously defined here
#prog.cob:27: error: duplicate definition of 'SWITCH Y'
#prog.cob:15: note: 'SWITCH-25' previously defined here

AT_CLEANUP


AT_SETUP([unexpected mnemonic-name location])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.
       ENVIRONMENT    DIVISION.
       CONFIGURATION  SECTION.
       SPECIAL-NAMES.
           stdin IS my-stdin
           .
       PROCEDURE      DIVISION.
           CALL "something" USING stdout
           CALL "something" USING stdin
           CALL "something" USING my-stdin
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:10: error: invalid mnemonic identifier
prog.cob:11: error: invalid mnemonic identifier
prog.cob:12: error: invalid mnemonic identifier
])

AT_CLEANUP


AT_SETUP([wrong device for mnemonic-name])
AT_KEYWORDS([misc ACCEPT DISPLAY SPECIAL-NAMES])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.
       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       77 var          PIC x.
       PROCEDURE       DIVISION.
           ACCEPT  var FROM SYSOUT
           DISPLAY var UPON SYSIN
           ACCEPT  var FROM SYSIN
           DISPLAY var UPON SYSOUT
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:8: error: 'SYSOUT' is not an input device
prog.cob:9: error: 'SYSIN' is not an output device
])

AT_CLEANUP


AT_SETUP([missing mnemonic-name declaration])
AT_KEYWORDS([misc ACCEPT SPECIAL-NAMES])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.
       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       77 var          PIC x.
       PROCEDURE       DIVISION.
           ACCEPT var FROM mnemonic-name
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:8: error: unknown device 'mnemonic-name'; not defined in SPECIAL-NAMES
])

AT_CLEANUP


AT_SETUP([unknown device in dialect])
AT_KEYWORDS([misc ACCEPT DISPLAY SPECIAL-NAMES])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.
       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       77 var          PIC x.
       PROCEDURE       DIVISION.
           ACCEPT var  FROM COMMAND-LINE
           DISPLAY var UPON COMMAND-LINE
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])

# Checkme: Error currently doesn't occur for UPON_COMMAND_LINE as this is already tokenized
# in scanner.l. We just ignore this for now and maybe fix it later.
#AT_CHECK([$COMPILE_ONLY -fnot-reserved=COMMAND-LINE prog.cob], [1], [],
#[prog.cob:8: error: unknown device 'COMMAND-LINE'; it may exist in another dialect
#prog.cob:9: error: unknown device 'COMMAND-LINE'; it may exist in another dialect
#])
AT_CHECK([$COMPILE_ONLY -fnot-reserved=COMMAND-LINE prog.cob], [1], [],
[prog.cob:8: error: unknown device 'COMMAND-LINE'; it may exist in another dialect
])

AT_CLEANUP


AT_SETUP([ACCEPT WITH ( NO ) UPDATE / DEFAULT])
AT_KEYWORDS([misc extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X.
       PROCEDURE        DIVISION.
           ACCEPT X                 END-ACCEPT.
           ACCEPT X WITH    UPDATE  END-ACCEPT.
           ACCEPT X WITH    DEFAULT END-ACCEPT.
           ACCEPT X WITH NO UPDATE  END-ACCEPT.
           ACCEPT X WITH NO DEFAULT END-ACCEPT.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -faccept-update prog.cob], [0], [], [])

AT_CLEANUP


AT_SETUP([ACCEPT WITH AUTO / TAB])
AT_KEYWORDS([AUTO-SKIP AUTOTERMINATE misc extensions screen])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X.
       PROCEDURE        DIVISION.
           ACCEPT X                       END-ACCEPT.
           ACCEPT X WITH    AUTO          END-ACCEPT.
           ACCEPT X WITH    AUTO-SKIP     END-ACCEPT.
           ACCEPT X WITH    AUTOTERMINATE END-ACCEPT.
           ACCEPT X WITH    TAB           END-ACCEPT.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -faccept-auto prog.cob], [0], [], [])

AT_CLEANUP


AT_SETUP([ACCEPT WITH LOWER / UPPER])
AT_KEYWORDS([misc extensions screen])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(05).
       PROCEDURE        DIVISION.
           ACCEPT X WITH LOWER     END-ACCEPT.
           ACCEPT X WITH UPPER     END-ACCEPT.
           ACCEPT X      LOWER
           ACCEPT X      UPPER
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])

AT_CLEANUP


AT_SETUP([ACCEPT WITH SIZE])
AT_KEYWORDS([PROTECTED SIZE misc extensions screen])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(05).
       01 Y             PIC 9(04) BINARY VALUE 4.
       PROCEDURE        DIVISION.
           ACCEPT X WITH           SIZE    0 END-ACCEPT.
           ACCEPT X WITH           SIZE IS 1 END-ACCEPT.
           ACCEPT X WITH PROTECTED SIZE    2 END-ACCEPT.
           ACCEPT X WITH PROTECTED SIZE IS 3 END-ACCEPT.
           ACCEPT X                SIZE    Y END-ACCEPT.
           ACCEPT X                SIZE    0
           ACCEPT X                SIZE IS 1
           ACCEPT X      PROTECTED SIZE    2
           ACCEPT X      PROTECTED SIZE IS 3
           ACCEPT X                SIZE    Y
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])

AT_CLEANUP


AT_SETUP([DISPLAY WITH SIZE])
AT_KEYWORDS([SIZE misc extensions screen])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(05).
       01 Y             PIC 9(04) BINARY VALUE 7.
       PROCEDURE        DIVISION.
           DISPLAY X AT 0101 WITH SIZE    5 END-DISPLAY.
           DISPLAY X AT 0101 WITH SIZE IS 6 END-DISPLAY.
           DISPLAY X AT 0101 WITH SIZE IS Y END-DISPLAY.
           DISPLAY X AT 0101      SIZE    5 END-DISPLAY.
           DISPLAY X AT 0101      SIZE IS 6 END-DISPLAY.
           DISPLAY X AT 0101      SIZE IS Y END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])

AT_CLEANUP


AT_SETUP([source text after program-text area])
AT_KEYWORDS([misc fixed])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.                                       COMMENT
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -Wextra prog.cob], [0], [],
[prog.cob:8: warning: source text after program-text area (column 72)
])

AT_CLEANUP


AT_SETUP([line overflow in fixed-form / free-form])
AT_KEYWORDS([misc])

# We're testing trailing tabs and whitespace (should not lead to warning)
# along with comments after boundaries (col 72 / col 512)

# remark: some editors remove trailing spaces, the  workaround: add "_" and
# remove it later via sed; AT_DATA would not do that when using double [[  ]]

AT_DATA([prog_tmpl.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.                                           																																																																																																																																		_
       DATA             DIVISION.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  _
his is a real comment
       PROCEDURE        DIVISION.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  This is commentary only
           CONTINUE.                                              *> comment after column 72
      *    This is a very long comment that exceeds column 72 but doesn't exceed 512 bytes, therefore not leading to a line overflow. As it is a comment line there is no "Source text after column 72" warning
           CONTINUE.                                                    CONTINUE.
           CONTINUE.                                                                        _
           STOP RUN.
])

# AT_DATA workaround via sed:
AT_CHECK([$SED -e 's/_$//' prog_tmpl.cob > prog.cob], [0], [], [])

AT_CHECK([$COBC -fsyntax-only -fixed -Wextra prog.cob], [0], [],
[prog.cob:7: warning: source text exceeds 512 bytes, will be truncated [[-Wothers]]
prog.cob:8: warning: source text exceeds 512 bytes, will be truncated [[-Wothers]]
prog.cob:11: warning: source text after program-text area (column 72) [[-Wdangling-text]]
])

AT_CHECK([$COBC -fsyntax-only -free -Wextra prog.cob], [1], [],
[prog.cob:7: warning: source text exceeds 512 bytes, will be truncated [[-Wothers]]
prog.cob:8: warning: source text exceeds 512 bytes, will be truncated [[-Wothers]]
prog.cob:8: error: syntax error, unexpected IS, expecting SECTION or .
prog.cob:8: note: unknown statement 'This'
])

AT_CHECK([$COBC -fsyntax-only -F -Wextra prog.cob], [1], [],
[prog.cob:7: warning: source text exceeds 512 bytes, will be truncated [[-Wothers]]
prog.cob:8: warning: source text exceeds 512 bytes, will be truncated [[-Wothers]]
prog.cob:8: error: syntax error, unexpected IS, expecting SECTION or .
prog.cob:8: note: unknown statement 'This'
])

# Check dialect option `format` (fixed for default) does not erase flags like `-F`, `--free`:
AT_CHECK([$COBC -fsyntax-only -F -std=default -Wextra prog.cob], [1], [],
[prog.cob:7: warning: source text exceeds 512 bytes, will be truncated [[-Wothers]]
prog.cob:8: warning: source text exceeds 512 bytes, will be truncated [[-Wothers]]
prog.cob:8: error: syntax error, unexpected IS, expecting SECTION or .
prog.cob:8: note: unknown statement 'This'
])

AT_CLEANUP


AT_SETUP([missing newline in fixed-form / free-form])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       PROCEDURE        DIVISION.
           CONTINUE
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [],
[prog.cob:8: warning: optional period used
])

# fixing the initial setup but now producing a missing newline:
printf "           CONTINUE." >> prog.cob

AT_CHECK([$COBC -fsyntax-only -Wextra -fixed prog.cob], [0], [],
[prog.cob:8: warning: line not terminated by a newline [[-Wmissing-newline]]
])
AT_CHECK([$COBC -fsyntax-only -Wextra -free prog.cob], [0], [],
[prog.cob:8: warning: line not terminated by a newline [[-Wmissing-newline]]
])
# should not happen if the data only consists of space characters
printf "\n              \t " >> prog.cob

AT_CHECK([$COMPILE_ONLY -Wextra prog.cob], [0], [], [])
AT_CLEANUP



AT_SETUP([continuation Indicator - too many lines])
AT_KEYWORDS([misc fixed literals listing])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    ' ' END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:538: error: buffer overrun - too many continuation lines
])

# extra test with listing as this is an edge case there
AT_CAPTURE_FILE([prog.lst])
AT_CHECK([$COMPILE_ONLY -t prog.lst prog.cob], [1], [],
[prog.cob:538: error: buffer overrun - too many continuation lines
])

AT_CLEANUP


AT_SETUP([continuation of COBOL words])
AT_KEYWORDS([misc fixed literals])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           GO
      -    BACK.
])

AT_CHECK([$COMPILE_ONLY -std=cobol2014 prog.cob], [0], [],
[prog.cob:6: warning: continuation of COBOL words is archaic in COBOL 2014
])
AT_CHECK([$COMPILE_ONLY prog.cob], [0], [],
[prog.cob:6: warning: continuation of COBOL words used
])

AT_CLEANUP


AT_SETUP([literal too long])
AT_KEYWORDS([misc literals literal-length continuation listing])


AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    ' '.
           STOP RUN.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY '    '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           ' ' END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:9: error: invalid literal: '                                   ...'
prog.cob:9: error: literal length exceeds 8191 characters
])

AT_CHECK([$COMPILE_ONLY -fliteral-length=160 prog.cob], [1], [],
[prog.cob:9: error: invalid literal: '                                   ...'
prog.cob:9: error: literal length exceeds 160 characters
])

AT_CHECK([$COMPILE_ONLY -free prog2.cob], [1], [],
[prog2.cob:9: error: invalid literal: '                                   ...'
prog2.cob:9: error: literal length 8299 exceeds 8191 characters
])

# extra test with listing as this is an edge case there
AT_CAPTURE_FILE([prog.lst])
AT_CHECK([$COMPILE_ONLY -t prog.lst prog.cob], [1], [],
[prog.cob:9: error: invalid literal: '                                   ...'
prog.cob:9: error: literal length exceeds 8191 characters
])

AT_CAPTURE_FILE([prog2.lst])
AT_CHECK([$COMPILE_ONLY -free -t prog2.lst prog2.cob], [1], [],
[prog2.cob:9: error: invalid literal: '                                   ...'
prog2.cob:9: error: literal length 8299 exceeds 8191 characters
])

AT_CLEANUP


AT_SETUP([line and floating comments])
AT_KEYWORDS([misc extensions indicator])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
      *    DISPLAY 'COMMENT'      END-DISPLAY
      /    DISPLAY 'COMMENTSLASH' END-DISPLAY
*          DISPLAY 'MFCOMMENT'    END-DISPLAY
 *         DISPLAY 'NOMFCOMMENT'  END-DISPLAY
        *> DISPLAY 'FLOATING'     END-DISPLAY
 *>        DISPLAY 'NOFLOATING'   END-DISPLAY
           STOP RUN.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
      *    DISPLAY 'COMMENT'       END-DISPLAY
      /    DISPLAY 'COMMENTSLASH'  END-DISPLAY
      $    DISPLAY 'COMMENTDOLLAR' END-DISPLAY
*          DISPLAY 'MFCOMMENT'     END-DISPLAY
 *         DISPLAY 'NOMFCOMMENT'   END-DISPLAY
        *> DISPLAY 'FLOATING'      END-DISPLAY
        |  DISPLAY 'ACUFLOATING'   END-DISPLAY
 |         DISPLAY 'NOACUFLOATING' END-DISPLAY
 *>        DISPLAY 'NOFLOATING'    END-DISPLAY
           STOP RUN.
])

AT_DATA([prog3.cob], [
IDENTIFICATION   DIVISION.
PROGRAM-ID.      prog3.
ENVIRONMENT DIVISION.
CONFIGURATION SECTION.
DATA             DIVISION.
WORKING-STORAGE  SECTION.
PROCEDURE        DIVISION.
      * DISPLAY 'NOCOMMENT'        END-DISPLAY
      / DISPLAY 'NOCOMMENTSLASH'   END-DISPLAY
$       DISPLAY 'ACUCOMMENTDOLLAR' END-DISPLAY
*       DISPLAY 'NOMFCOMMENT'      END-DISPLAY
 |      DISPLAY 'ACUFLOATING'      END-DISPLAY
 *>     DISPLAY 'FLOATING'         END-DISPLAY
      x DISPLAY 'WRONGINDICATOR'   END-DISPLAY
        STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[MFCOMMENT
NOMFCOMMENT
NOFLOATING
], [])

AT_CHECK([$COMPILE_ONLY prog2.cob], [1], [],
[prog2.cob:11: error: invalid indicator '$' at column 7
prog2.cob:15: error: invalid symbol '|' - skipping word
])

# note: for checking the result we actually either need to run the program
#       or change it to string concatenation and raise a constant compile
#       time warning we do (historically) the first (for now)
#
AT_CHECK([$COMPILE -fmfcomment prog.cob], [0], [],
[])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[NOMFCOMMENT
NOFLOATING
], [])

AT_CHECK([$COMPILE_ONLY -fmfcomment prog2.cob], [1], [],
[prog2.cob:11: error: invalid indicator '$' at column 7
prog2.cob:15: error: invalid symbol '|' - skipping word
])

# COMPILE needed, see note above
AT_CHECK([$COMPILE -facucomment prog.cob -o prog1], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog1], [0],
[MFCOMMENT
NOMFCOMMENT
NOFLOATING
], [])

# COMPILE needed, see note above
AT_CHECK([$COMPILE -facucomment prog2.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog2], [0],
[MFCOMMENT
NOMFCOMMENT
NOACUFLOATING
NOFLOATING
], [])


AT_CHECK([$COMPILE_ONLY -free prog3.cob], [1], [],
[prog3.cob:11: warning: ignoring invalid directive: '$       DISPLAY'
prog3.cob:9: error: syntax error, unexpected *
prog3.cob:10: error: syntax error, unexpected /
prog3.cob:12: error: syntax error, unexpected *
prog3.cob:13: error: invalid symbol '|' - skipping word
prog3.cob:15: error: syntax error, unexpected Identifier
])
AT_CHECK([$COMPILE_ONLY -free -fmfcomment prog3.cob], [1], [],
[prog3.cob:11: warning: ignoring invalid directive: '$       DISPLAY'
prog3.cob:9: error: syntax error, unexpected *
prog3.cob:10: error: syntax error, unexpected /
prog3.cob:12: error: syntax error, unexpected *
prog3.cob:13: error: invalid symbol '|' - skipping word
prog3.cob:15: error: syntax error, unexpected Identifier
])
AT_CHECK([$COMPILE_ONLY -free -facucomment prog3.cob], [1], [],
[prog3.cob:11: warning: ignoring invalid directive: '$       DISPLAY'
prog3.cob:9: error: syntax error, unexpected *
prog3.cob:10: error: syntax error, unexpected /
prog3.cob:12: error: syntax error, unexpected *
prog3.cob:15: error: syntax error, unexpected Identifier
])
AT_CHECK([$COMPILE_ONLY -fformat=terminal -facucomment prog3.cob], [1], [],
[prog3.cob:9: error: syntax error, unexpected *
prog3.cob:10: error: syntax error, unexpected /
prog3.cob:15: error: syntax error, unexpected Identifier
])
# Check that invalid indicator and doesn't abort preprocessing
# and that errors in preprocessing doesn't abort compilation
AT_CHECK([$COMPILE_ONLY -fixed prog3.cob], [1], [],
[prog3.cob:2: error: invalid indicator 'F' at column 7
prog3.cob:3: error: invalid indicator 'M' at column 7
prog3.cob:4: error: invalid indicator 'N' at column 7
prog3.cob:5: error: invalid indicator 'U' at column 7
prog3.cob:7: error: invalid indicator 'G' at column 7
prog3.cob:8: error: invalid indicator 'U' at column 7
prog3.cob:15: error: invalid indicator 'x' at column 7
prog3.cob:6: error: PROGRAM-ID header missing
prog3.cob:6: error: PROCEDURE DIVISION header missing
prog3.cob:6: error: syntax error, unexpected DIVISION
])

AT_CLEANUP


AT_SETUP([word length])
AT_KEYWORDS([misc word-length])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  FILLER        PIC 9(01) VALUE 0.
           88 SOME-SPECIAL-VAL-WITH-LENGTH30    VALUE 0.
           88 SOME-SPECIAL-VAL-WITH-LENGTH-31   VALUE 1.
           88 SOME-SPECIAL-VAL-WITH-LENGTH-32C  VALUE 1.
           88 SOME-SPECIAL-VAL-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES      VALUE 3.
           88 SOME-SPECIAL-VAL-WITH-LENGTH-90-CHARS-WHO-NEEDS-THAT-LONG-NAMES-I-CANNOT-THINK-OF-SOMEONE VALUE 4.
       PROCEDURE        DIVISION.
       SOME-SPECIAL-PAR-WITH-LENGTH30.
           SET  SOME-SPECIAL-VAL-WITH-LENGTH30   TO TRUE.
       SOME-SPECIAL-PAR-WITH-LENGTH-31.
           SET  SOME-SPECIAL-VAL-WITH-LENGTH-31  TO TRUE.
       SOME-SPECIAL-PAR-WITH-LENGTH-32C.
           SET  SOME-SPECIAL-VAL-WITH-LENGTH-32C TO TRUE.
       SOME-SPECIAL-PAR-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES.
           SET  SOME-SPECIAL-VAL-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES TO TRUE.
       SOME-SPECIAL-PAR-WITH-LENGTH-90-CHARS-WHO-NEEDS-THAT-LONG-NAMES-I-CANNOT-THINK-OF-SOMEONE.
           SET  SOME-SPECIAL-VAL-WITH-LENGTH-90-CHARS-WHO-NEEDS-THAT-LONG-NAMES-I-CANNOT-THINK-OF-SOMEONE TO TRUE.
           STOP RUN.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  FILLER        PIC 9(01) VALUE 0.
           88 SOME-SPECIAL-VAL-WITH-LENGTH30    VALUE 0.
           88 SOME-SPECIAL-VAL-WITH-LENGTH-31   VALUE 1.
           88 SOME-SPECIAL-VAL-WITH-LENGTH-32C  VALUE 1.
           88 SOME-SPECIAL-VAL-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES      VALUE 3.
       PROCEDURE        DIVISION.
       SOME-SPECIAL-PAR-WITH-LENGTH30.
           SET  SOME-SPECIAL-VAL-WITH-LENGTH30   TO TRUE.
       SOME-SPECIAL-PAR-WITH-LENGTH-31.
           SET  SOME-SPECIAL-VAL-WITH-LENGTH-31  TO TRUE.
       SOME-SPECIAL-PAR-WITH-LENGTH-32C.
           SET  SOME-SPECIAL-VAL-WITH-LENGTH-32C TO TRUE.
       SOME-SPECIAL-PAR-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES.
           SET  SOME-SPECIAL-VAL-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES TO TRUE.
           STOP RUN.
])

AT_DATA([prog3.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog3.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77 COUNTER       PIC 9 VALUE 0.
       PROCEDURE        DIVISION.

       00000000000000000000000000000000000000000000000000000000000
       SECTION.
       000000000000000000000000000000000000000000000000000000000000.
           ADD 1 TO COUNTER END-ADD
           EVALUATE COUNTER
           WHEN 1
           PERFORM
           00000000000000000000000000000000000000000000000000000000000
           WHEN 2
           PERFORM
           000000000000000000000000000000000000000000000000000000000000
           WHEN 3
           MOVE 0 TO COUNTER
           END-EVALUATE.

       100000000000000000000000000000000000000000000000000000000001
       SECTION.
       20000000000000000000000000000000000000000000000000000000002.
           ADD 1 TO COUNTER END-ADD
           EVALUATE COUNTER
           WHEN 1
           PERFORM
           100000000000000000000000000000000000000000000000000000000001
           WHEN 2
           PERFORM
           20000000000000000000000000000000000000000000000000000000002
           WHEN 3
           MOVE 0 TO COUNTER
           END-EVALUATE.

           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -free -fword-length=31 prog.cob], [1], [],
[prog.cob:11: error: word length exceeds 31 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-32C'
prog.cob:12: error: word length exceeds 31 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES'
prog.cob:13: error: word length exceeds maximum of 63 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-90-CHARS-WHO-NEEDS-THAT-LONG-NAMES-I-CANNOT-THINK-OF-SOMEONE'
prog.cob: in paragraph 'SOME-SPECIAL-PAR-WITH-LENGTH-31':
prog.cob:19: error: word length exceeds 31 characters: 'SOME-SPECIAL-PAR-WITH-LENGTH-32C'
prog.cob: in paragraph 'SOME-SPECIAL-PAR-WITH-LENGTH-32C':
prog.cob:20: error: word length exceeds 31 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-32C'
prog.cob:21: error: word length exceeds 31 characters: 'SOME-SPECIAL-PAR-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES'
prog.cob: in paragraph 'SOME-SPECIAL-PAR-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES':
prog.cob:22: error: word length exceeds 31 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES'
prog.cob:23: error: word length exceeds maximum of 63 characters: 'SOME-SPECIAL-PAR-WITH-LENGTH-90-CHARS-WHO-NEEDS-THAT-LONG-NAMES-I-CANNOT-THINK-OF-SOMEONE'
prog.cob: in paragraph 'SOME-SPECIAL-PAR-WITH-LENGTH-90-CHARS-WHO-NEEDS-THAT-LONG-NAMES-I-CANNOT-THINK-OF-SOMEONE':
prog.cob:24: error: word length exceeds maximum of 63 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-90-CHARS-WHO-NEEDS-THAT-LONG-NAMES-I-CANNOT-THINK-OF-SOMEONE'
])

AT_CHECK([$COMPILE_ONLY -free -fword-length=45 prog.cob], [1], [],
[prog.cob:12: error: word length exceeds 45 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES'
prog.cob:13: error: word length exceeds maximum of 63 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-90-CHARS-WHO-NEEDS-THAT-LONG-NAMES-I-CANNOT-THINK-OF-SOMEONE'
prog.cob: in paragraph 'SOME-SPECIAL-PAR-WITH-LENGTH-32C':
prog.cob:21: error: word length exceeds 45 characters: 'SOME-SPECIAL-PAR-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES'
prog.cob: in paragraph 'SOME-SPECIAL-PAR-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES':
prog.cob:22: error: word length exceeds 45 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES'
prog.cob:23: error: word length exceeds maximum of 63 characters: 'SOME-SPECIAL-PAR-WITH-LENGTH-90-CHARS-WHO-NEEDS-THAT-LONG-NAMES-I-CANNOT-THINK-OF-SOMEONE'
prog.cob: in paragraph 'SOME-SPECIAL-PAR-WITH-LENGTH-90-CHARS-WHO-NEEDS-THAT-LONG-NAMES-I-CANNOT-THINK-OF-SOMEONE':
prog.cob:24: error: word length exceeds maximum of 63 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-90-CHARS-WHO-NEEDS-THAT-LONG-NAMES-I-CANNOT-THINK-OF-SOMEONE'
])

AT_CHECK([$COMPILE_ONLY -free -fword-length=60 prog.cob], [1], [],
[prog.cob:13: error: word length exceeds maximum of 63 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-90-CHARS-WHO-NEEDS-THAT-LONG-NAMES-I-CANNOT-THINK-OF-SOMEONE'
prog.cob: in paragraph 'SOME-SPECIAL-PAR-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES':
prog.cob:23: error: word length exceeds maximum of 63 characters: 'SOME-SPECIAL-PAR-WITH-LENGTH-90-CHARS-WHO-NEEDS-THAT-LONG-NAMES-I-CANNOT-THINK-OF-SOMEONE'
prog.cob: in paragraph 'SOME-SPECIAL-PAR-WITH-LENGTH-90-CHARS-WHO-NEEDS-THAT-LONG-NAMES-I-CANNOT-THINK-OF-SOMEONE':
prog.cob:24: error: word length exceeds maximum of 63 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-90-CHARS-WHO-NEEDS-THAT-LONG-NAMES-I-CANNOT-THINK-OF-SOMEONE'
])

AT_CHECK([$COMPILE_ONLY -free -fword-length=45 -frelax-syntax-checks prog2.cob], [0], [],
[prog2.cob:12: warning: word length exceeds 45 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES'
prog2.cob: in paragraph 'SOME-SPECIAL-PAR-WITH-LENGTH-32C':
prog2.cob:20: warning: word length exceeds 45 characters: 'SOME-SPECIAL-PAR-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES'
prog2.cob: in paragraph 'SOME-SPECIAL-PAR-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES':
prog2.cob:21: warning: word length exceeds 45 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES'
])

AT_CHECK([$COMPILE_ONLY -free -fword-length=60 prog2.cob], [0], [], [])

AT_CHECK([$COMPILE_ONLY -free -fword-length=31 -frelax-syntax-checks prog2.cob], [0], [],
[prog2.cob:11: warning: word length exceeds 31 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-32C'
prog2.cob:12: warning: word length exceeds 31 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES'
prog2.cob: in paragraph 'SOME-SPECIAL-PAR-WITH-LENGTH-31':
prog2.cob:18: warning: word length exceeds 31 characters: 'SOME-SPECIAL-PAR-WITH-LENGTH-32C'
prog2.cob: in paragraph 'SOME-SPECIAL-PAR-WITH-LENGTH-32C':
prog2.cob:19: warning: word length exceeds 31 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-32C'
prog2.cob:20: warning: word length exceeds 31 characters: 'SOME-SPECIAL-PAR-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES'
prog2.cob: in paragraph 'SOME-SPECIAL-PAR-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES':
prog2.cob:21: warning: word length exceeds 31 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES'
])

AT_CHECK([$COMPILE_ONLY -fword-length=59 prog3.cob], [1], [],
[prog3.cob: in section '00000000000000000000000000000000000000000000000000000000000':
prog3.cob:11: error: word length exceeds 59 characters: '000000000000000000000000000000000000000000000000000000000000'
prog3.cob: in paragraph '000000000000000000000000000000000000000000000000000000000000':
prog3.cob:25: error: word length exceeds 59 characters: '100000000000000000000000000000000000000000000000000000000001'
])

AT_CLEANUP


AT_SETUP([Segmentation Module])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       PROCEDURE        DIVISION.

       DECLARATIVES.

       DEC-1 SECTION 49.
           CONTINUE.

       DEC-2 SECTION 50.
           CONTINUE.

       END DECLARATIVES.

       SEC-1 SECTION 00.
           CONTINUE.

       SEC-2 SECTION 01.
           CONTINUE.

       SEC-3 SECTION -00.
           CONTINUE.

       SEC-4 SECTION 100.
           CONTINUE.

       SEC-5 SECTION 49.
           CONTINUE.

       SEC-6 SECTION 50.
           PERFORM SEC-1.

       SEC-7 SECTION 99.
           PERFORM SEC-1.

           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob: in section 'DEC-1':
prog.cob:9: warning: section segments ignored
prog.cob: in section 'DEC-2':
prog.cob:12: warning: section segments ignored
prog.cob: in section 'SEC-1':
prog.cob:17: warning: section segments ignored
prog.cob: in section 'SEC-2':
prog.cob:20: warning: section segments ignored
prog.cob: in section 'SEC-3':
prog.cob:23: error: unsigned integer value expected
prog.cob:23: warning: section segments ignored
prog.cob: in section 'SEC-4':
prog.cob:26: warning: section segments ignored
prog.cob: in section 'SEC-5':
prog.cob:29: warning: section segments ignored
prog.cob: in section 'SEC-6':
prog.cob:32: warning: section segments ignored
prog.cob: in section 'SEC-7':
prog.cob:35: warning: section segments ignored
])
AT_CHECK([$COMPILE_ONLY -std=cobol85 prog.cob], [1], [],
[prog.cob: in section 'DEC-1':
prog.cob:9: warning: section segments is obsolete in COBOL 85
prog.cob:9: warning: SECTION segment within DECLARATIVES is not implemented
prog.cob: in section 'DEC-2':
prog.cob:12: warning: section segments is obsolete in COBOL 85
prog.cob:12: error: SECTION segment-number in DECLARATIVES must be less than 50
prog.cob:12: warning: SECTION segment within DECLARATIVES is not implemented
prog.cob: in section 'SEC-1':
prog.cob:17: warning: section segments is obsolete in COBOL 85
prog.cob: in section 'SEC-2':
prog.cob:20: warning: section segments is obsolete in COBOL 85
prog.cob: in section 'SEC-3':
prog.cob:23: error: unsigned integer value expected
prog.cob:23: warning: section segments is obsolete in COBOL 85
prog.cob: in section 'SEC-4':
prog.cob:26: warning: section segments is obsolete in COBOL 85
prog.cob:26: error: SECTION segment-number must be less than or equal to 99
prog.cob: in section 'SEC-5':
prog.cob:29: warning: section segments is obsolete in COBOL 85
prog.cob: in section 'SEC-6':
prog.cob:32: warning: section segments is obsolete in COBOL 85
prog.cob: in section 'SEC-7':
prog.cob:35: warning: section segments is obsolete in COBOL 85
])
AT_CLEANUP


AT_SETUP([ACCEPT FROM ESCAPE KEY])
AT_KEYWORDS([misc])

# TODO: add function test to run_manual_screen.at

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77 KEYNUM        PIC 9(04).
       PROCEDURE        DIVISION.

           ACCEPT KEYNUM FROM ESCAPE KEY
           DISPLAY "Key pressed: " KEYNUM
           ACCEPT KEYNUM FROM ESCAPE
           DISPLAY "Key pressed: " KEYNUM
           ACCEPT OMITTED

           STOP RUN.
])
AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])
AT_CLEANUP


AT_SETUP([Numeric literals])
AT_KEYWORDS([misc numeric-literal-length])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77 COUNTER       PIC 9 VALUE 0.
       PROCEDURE        DIVISION.

      *> No literals at all
       00000000000000000000000000000000000000000000000000000000000
       SECTION.
       000000000000000000000000000000000000000000000000000000000000.
           ADD 1 TO COUNTER END-ADD
           EVALUATE COUNTER
           WHEN 1
           PERFORM
           00000000000000000000000000000000000000000000000000000000000
           WHEN 2
           PERFORM
           000000000000000000000000000000000000000000000000000000000000
           WHEN 3
           MOVE 0 TO COUNTER
           END-EVALUATE.

       100000000000000000000000000000000000000000000000000000000001
       SECTION.
       20000000000000000000000000000000000000000000000000000000002.
           ADD 1 TO COUNTER END-ADD
           EVALUATE COUNTER
           WHEN 1
           PERFORM
           100000000000000000000000000000000000000000000000000000000001
           WHEN 2
           PERFORM
           20000000000000000000000000000000000000000000000000000000002
           WHEN 3
           MOVE 0 TO COUNTER
           END-EVALUATE.

           STOP RUN.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
       PROCEDURE        DIVISION.

           *> Valid literals, depending on numeric literal size
           DISPLAY 1.0076, +100000.03, +1.0, -0078,
               +.1234567890123456789012345678901234
               .123456789012345678901234567890123450
           END-DISPLAY

           *> Invalid literals
           DISPLAY 1.03.0     END-DISPLAY
           DISPLAY --123      END-DISPLAY
           DISPLAY -123-      END-DISPLAY
           DISPLAY -123-456   END-DISPLAY
           DISPLAY -123-4.56  END-DISPLAY
           DISPLAY -12.3-456  END-DISPLAY
           DISPLAY -12.3-4.56 END-DISPLAY
           DISPLAY 1000003+   END-DISPLAY
           DISPLAY 1.000003+  END-DISPLAY
           DISPLAY .3+        END-DISPLAY
           DISPLAY 3.+        END-DISPLAY

           STOP RUN.
])

AT_DATA([prog3.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog3.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES. DECIMAL-POINT IS COMMA.
       PROCEDURE        DIVISION.

           *> Valid literals, depending on numeric literal size
           DISPLAY 1,0076, +100000,03, +1,0, -0078,
               +,1234567890123456789012345678901234
               ,123456789012345678901234567890123450
           END-DISPLAY

           *> Invalid literals
           DISPLAY 1,03,0     END-DISPLAY
           DISPLAY --123      END-DISPLAY
           DISPLAY -123-      END-DISPLAY
           DISPLAY -123-456   END-DISPLAY
           DISPLAY -123-4,56  END-DISPLAY
           DISPLAY -12,3-456  END-DISPLAY
           DISPLAY -12,3-4,56 END-DISPLAY
           DISPLAY 1000003+   END-DISPLAY
           DISPLAY 1,000003+  END-DISPLAY
           DISPLAY ,3+        END-DISPLAY
           DISPLAY 3,+        END-DISPLAY

           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -fliteral-length=1 -fnumeric-literal-length=1 -fword-length=60 prog.cob], [0], [], [])

# result with extended scanner for wrong numeric literals:
#AT_CHECK([$COMPILE_ONLY prog2.cob], [1], [],
#[prog2.cob:16: error: invalid numeric literal: '1.03.0'
#prog2.cob:16: error: literal with more than one decimal point
#prog2.cob:17: error: invalid numeric literal: '--123'
#prog2.cob:17: error: literal with more than one sign character
#prog2.cob:18: error: invalid numeric literal: '-123-'
#prog2.cob:18: error: literal with more than one sign character
#prog2.cob:19: error: invalid numeric literal: '-123-456'
#prog2.cob:19: error: literal with more than one sign character
#prog2.cob:20: error: invalid numeric literal: '-123-4.56'
#prog2.cob:20: error: literal with more than one sign character
#prog2.cob:21: error: invalid numeric literal: '-12.3-456'
#prog2.cob:21: error: literal with more than one sign character
#prog2.cob:22: error: invalid numeric literal: '-12.3-4.56'
#prog2.cob:22: error: literal with more than one sign character
#prog2.cob:22: error: literal with more than one decimal point
#prog2.cob:23: error: invalid numeric literal: '1000003+'
#prog2.cob:23: error: sign must appear as leftmost character
#prog2.cob:24: error: invalid numeric literal: '1.000003+'
#prog2.cob:24: error: sign must appear as leftmost character
#prog2.cob:25: error: invalid numeric literal: '.3+'
#prog2.cob:25: error: sign must appear as leftmost character
#prog2.cob:26: error: invalid numeric literal: '3.+'
#prog2.cob:26: error: sign must appear as leftmost character
#])
#AT_CHECK([$COMPILE_ONLY prog3.cob], [1], [],
#[prog3.cob:16: error: invalid numeric literal: '1,03,0'
#prog3.cob:16: error: literal with more than one decimal point
#prog3.cob:17: error: invalid numeric literal: '--123'
#prog3.cob:17: error: literal with more than one sign character
#prog3.cob:18: error: invalid numeric literal: '-123-'
#prog3.cob:18: error: literal with more than one sign character
#prog3.cob:19: error: invalid numeric literal: '-123-456'
#prog3.cob:19: error: literal with more than one sign character
#prog3.cob:20: error: invalid numeric literal: '-123-4,56'
#prog3.cob:20: error: literal with more than one sign character
#prog3.cob:21: error: invalid numeric literal: '-12,3-456'
#prog3.cob:21: error: literal with more than one sign character
#prog3.cob:22: error: invalid numeric literal: '-12,3-4,56'
#prog3.cob:22: error: literal with more than one sign character
#prog3.cob:22: error: literal with more than one decimal point
#prog3.cob:23: error: invalid numeric literal: '1000003+'
#prog3.cob:23: error: sign must appear as leftmost character
#prog3.cob:24: error: invalid numeric literal: '1,000003+'
#prog3.cob:24: error: sign must appear as leftmost character
#prog3.cob:25: error: invalid numeric literal: ',3+'
#prog3.cob:25: error: sign must appear as leftmost character
#prog3.cob:26: error: invalid numeric literal: '3,+'
#prog3.cob:26: error: sign must appear as leftmost character
#])

AT_CHECK([$COMPILE_ONLY prog2.cob], [1], [],
[prog2.cob:17: error: syntax error, unexpected -, expecting [(]
prog2.cob:18: error: syntax error, unexpected -
prog2.cob:23: error: syntax error, unexpected +
prog2.cob:24: error: syntax error, unexpected +
prog2.cob:25: error: syntax error, unexpected +
prog2.cob:26: error: syntax error, unexpected +
])
AT_CHECK([$COMPILE_ONLY prog3.cob], [1], [],
[prog3.cob:17: error: syntax error, unexpected -, expecting [(]
prog3.cob:18: error: syntax error, unexpected -
prog3.cob:23: error: syntax error, unexpected +
prog3.cob:24: error: syntax error, unexpected +
prog3.cob:25: error: syntax error, unexpected +
prog3.cob:26: error: syntax error, unexpected +
])

AT_CLEANUP


AT_SETUP([floating-point literals])
# Refer to Section 8.3.1.2.2.2 of COBOL 2014.
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           *> Valid literals
           DISPLAY 1.0E6144, +1.0E+3, +1.0E-6143, 123.E1,
               +.123456789012345678901234567890123456E+0000
           END-DISPLAY

           *> invalid literals
           DISPLAY 1.0D3 END-DISPLAY
           DISPLAY 1E3 END-DISPLAY
           DISPLAY '1.0E3'BLAH END-DISPLAY
           DISPLAY 1.0E3.0 END-DISPLAY
           DISPLAY -0.0E-0 END-DISPLAY
           DISPLAY 1.0E00003 END-DISPLAY
           DISPLAY .123456789012345678901234567890123456789E0
           END-DISPLAY
           DISPLAY 0.0E3 END-DISPLAY

           *> Implementor-defined invalid literals
           DISPLAY 1.0E6145 END-DISPLAY
           DISPLAY 1.0E-6144 END-DISPLAY

           STOP RUN.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
            DECIMAL-POINT IS COMMA.
       PROCEDURE        DIVISION.
           *> Valid literals
           DISPLAY 1,0E6144; +1,0E+3; +1,0E-6143; 123,E1;
               +,123456789012345678901234567890123456E+0000
           END-DISPLAY

           *> invalid literals
           DISPLAY 1,0D3 END-DISPLAY
           DISPLAY 1E3 END-DISPLAY
           DISPLAY 1,0E3BLAH END-DISPLAY
           DISPLAY 1,0E3,0 END-DISPLAY
           DISPLAY -0,0E-0 END-DISPLAY
           DISPLAY 1,0E00003 END-DISPLAY
           DISPLAY ,123456789012345678901234567890123456789E0
           END-DISPLAY
           DISPLAY 0,0E3 END-DISPLAY

           *> Implementor-defined invalid literals
           DISPLAY 1,0E6145 END-DISPLAY
           DISPLAY 1,0E-6144 END-DISPLAY

           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:11: error: 'D3' is not defined
prog.cob:12: error: '1E3' is not defined
prog.cob:13: error: 'BLAH' is not defined
prog.cob:14: error: invalid floating-point literal: '1.0E3.0'
prog.cob:14: error: exponent has decimal point
prog.cob:15: error: invalid floating-point literal: '-0.0E-0'
prog.cob:15: error: significand of 0 must be positive
prog.cob:15: error: exponent of 0 must be positive
prog.cob:16: error: invalid floating-point literal: '1.0E00003'
prog.cob:16: error: exponent has more than 4 digits
prog.cob:17: error: invalid floating-point literal: '.123456789012345678901234567890123 ...'
prog.cob:17: error: significand has more than 36 digits
prog.cob:19: error: invalid floating-point literal: '0.0E3'
prog.cob:19: error: exponent of 0 must be 0
prog.cob:22: error: invalid floating-point literal: '1.0E6145'
prog.cob:22: error: exponent not between -6143 and 6144
prog.cob:23: error: invalid floating-point literal: '1.0E-6144'
prog.cob:23: error: exponent not between -6143 and 6144
])

AT_CHECK([$COMPILE_ONLY prog2.cob], [1], [],
[prog2.cob:15: error: 'D3' is not defined
prog2.cob:16: error: '1E3' is not defined
prog2.cob:17: error: 'BLAH' is not defined
prog2.cob:18: error: invalid floating-point literal: '1,0E3,0'
prog2.cob:18: error: exponent has decimal point
prog2.cob:19: error: invalid floating-point literal: '-0,0E-0'
prog2.cob:19: error: significand of 0 must be positive
prog2.cob:19: error: exponent of 0 must be positive
prog2.cob:20: error: invalid floating-point literal: '1,0E00003'
prog2.cob:20: error: exponent has more than 4 digits
prog2.cob:21: error: invalid floating-point literal: ',123456789012345678901234567890123 ...'
prog2.cob:21: error: significand has more than 36 digits
prog2.cob:23: error: invalid floating-point literal: '0,0E3'
prog2.cob:23: error: exponent of 0 must be 0
prog2.cob:26: error: invalid floating-point literal: '1,0E6145'
prog2.cob:26: error: exponent not between -6143 and 6144
prog2.cob:27: error: invalid floating-point literal: '1,0E-6144'
prog2.cob:27: error: exponent not between -6143 and 6144
])

AT_CLEANUP


AT_SETUP([X literals])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.
       PROCEDURE      DIVISION.
           *> Valid form
           DISPLAY X"0123456789ABCDEF"

           *> invalid form
           DISPLAY X"GH"
                   X"1"
           END-DISPLAY.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:9: error: invalid X literal: 'GH'
prog.cob:9: error: literal contains invalid character 'G'
prog.cob:9: error: literal contains invalid character 'H'
prog.cob:10: error: invalid X literal: '1'
prog.cob:10: error: literal does not have an even number of digits
])

AT_CLEANUP


AT_SETUP([national literals])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.
       PROCEDURE      DIVISION.
           DISPLAY N"UTF-16 string".
           DISPLAY N'0123456789ABCDEF'.
           DISPLAY N"0123456789ABCDEF"-
                   N"0123456789ABCDEF".
           DISPLAY NC"0123456789ABCDEF"-
                   NC'0123456789ABCDEF'.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [],
[prog.cob:5: warning: handling of national literal is unfinished; implementation is likely to be changed
prog.cob:6: warning: handling of national literal is unfinished; implementation is likely to be changed
prog.cob:7: warning: handling of national literal is unfinished; implementation is likely to be changed
prog.cob:8: warning: handling of national literal is unfinished; implementation is likely to be changed
prog.cob:9: warning: national-character literal used
prog.cob:9: warning: handling of national literal is unfinished; implementation is likely to be changed
prog.cob:10: warning: national-character literal used
prog.cob:10: warning: handling of national literal is unfinished; implementation is likely to be changed
])

AT_CHECK([$COMPILE_ONLY -std=cobol85 prog.cob], [1], [],
[prog.cob:5: error: national literal does not conform to COBOL 85
prog.cob:6: error: national literal does not conform to COBOL 85
prog.cob:7: error: national literal does not conform to COBOL 85
prog.cob:8: error: national literal does not conform to COBOL 85
prog.cob:9: error: national-character literal does not conform to COBOL 85
prog.cob:10: error: national-character literal does not conform to COBOL 85
])

AT_CLEANUP


AT_SETUP([NX literals])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.
       PROCEDURE      DIVISION.
           *> Valid form
           DISPLAY NX"265E"
           DISPLAY NX"0123456789ABCDEF"

           *> invalid form
           DISPLAY NX"GH"
                   NX"1".
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:6: warning: handling of national literal is unfinished; implementation is likely to be changed
prog.cob:7: warning: handling of national literal is unfinished; implementation is likely to be changed
prog.cob:10: warning: handling of national literal is unfinished; implementation is likely to be changed
prog.cob:10: error: invalid NX literal: 'GH'
prog.cob:10: error: literal contains invalid character 'G'
prog.cob:10: error: literal contains invalid character 'H'
prog.cob:11: warning: handling of national literal is unfinished; implementation is likely to be changed
prog.cob:11: error: invalid NX literal: '1'
prog.cob:11: error: literal does not have an even number of digits
])

AT_CHECK([$COMPILE_ONLY -std=cobol85 prog.cob], [1], [],
[prog.cob:6: error: hexadecimal-national literal does not conform to COBOL 85
prog.cob:7: error: hexadecimal-national literal does not conform to COBOL 85
prog.cob:10: error: hexadecimal-national literal does not conform to COBOL 85
prog.cob:11: error: hexadecimal-national literal does not conform to COBOL 85
])

AT_CLEANUP


AT_SETUP([binary literals])
AT_KEYWORDS([misc extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           DISPLAY B"101010"
           DISPLAY B"111111111111111111111111111111111111111111111111111
      -             "1111111111111" *> " Syntax highlighting hack

           DISPLAY B"23"
           DISPLAY B"111111111111111111111111111111111111111111111111111
      -             "111111111111111111111111111111111111111111111111111
      -             "11111111111111111111111111111111111111111111111111"
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -std=mf prog.cob], [1], [],
[prog.cob:9: error: invalid B literal: '23'
prog.cob:9: error: literal contains invalid character '2'
prog.cob:9: error: literal contains invalid character '3'
prog.cob:10: error: invalid B literal: '1111111111111111111111111111111111 ...'
prog.cob:10: error: literal length 152 exceeds 64 characters
])

AT_CHECK([$COMPILE_ONLY -std=cobol85 prog.cob], [1], [],
[prog.cob:5: error: numeric boolean literal does not conform to COBOL 85
prog.cob:6: error: numeric boolean literal does not conform to COBOL 85
prog.cob:9: error: numeric boolean literal does not conform to COBOL 85
prog.cob:10: error: numeric boolean literal does not conform to COBOL 85
])

AT_CLEANUP


AT_SETUP([binary-hexadecimal literals])
AT_KEYWORDS([misc extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           DISPLAY BX"AB05CD0F"
           DISPLAY        BX"0123456789ABCDEF0123456789ABCDEF0123456789A
      -              "BCDEF" *> " Syntax highlighting hack

           DISPLAY BX"A"
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:6: error: invalid BX literal: '0123456789ABCDEF0123456789ABCDEF01 ...'
prog.cob:6: error: literal length 192 exceeds 64 characters
])

AT_CHECK([$COMPILE_ONLY -std=cobol85 prog.cob], [1], [],
[prog.cob:5: error: hexadecimal-boolean literal does not conform to COBOL 85
prog.cob:6: error: hexadecimal-boolean literal does not conform to COBOL 85
prog.cob:9: error: hexadecimal-boolean literal does not conform to COBOL 85
])

AT_CLEANUP


AT_SETUP([HP COBOL octal literals])
AT_KEYWORDS([misc extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           *> Valid forms
           DISPLAY %17 %37777777777 %456

           *> invalid forms
           DISPLAY %11111111111111111111111
           DISPLAY %89

           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -Wno-unfinished -fhp-octal-literals=ok prog.cob], [1], [],
[prog.cob:9: error: invalid % literal: '11111111111111111111111'
prog.cob:9: error: literal length 23 exceeds 22 characters
prog.cob:10: error: invalid % literal: '89'
prog.cob:10: error: literal contains invalid character '8'
prog.cob:10: error: literal contains invalid character '9'
])

AT_CHECK([$COMPILE_ONLY -std=cobol2014 prog.cob], [1], [],
[prog.cob:6: error: HP COBOL octal literal does not conform to COBOL 2014
prog.cob:6: error: HP COBOL octal literal does not conform to COBOL 2014
prog.cob:6: error: HP COBOL octal literal does not conform to COBOL 2014
prog.cob:9: error: HP COBOL octal literal does not conform to COBOL 2014
prog.cob:10: error: HP COBOL octal literal does not conform to COBOL 2014
])

AT_CLEANUP


AT_SETUP([ACUCOBOL literals])
AT_KEYWORDS([misc acu extensions binary octal hexadecimal])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           *> Valid forms
           DISPLAY B#10 O#12345670123 X#12345678 H#90aBcDeF
           END-DISPLAY

           *> invalid forms
       >>SOURCE FREE
           DISPLAY B#11111111111111111111111111111111111111111111111111111111111111111
               O#11111111111111111111111 X#11111111111111111 H#22222222222222222
       >>SOURCE FIXED
           DISPLAY B#23 O#89 X#GG H#HH

           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -std=acu prog.cob], [1], [],
[prog.cob:11: error: invalid B# literal: '1111111111111111111111111111111111 ...'
prog.cob:11: error: literal length 65 exceeds 64 characters
prog.cob:12: error: invalid O# literal: '11111111111111111111111'
prog.cob:12: error: literal length 23 exceeds 22 characters
prog.cob:12: error: invalid hexadecimal literal: '11111111111111111'
prog.cob:12: error: literal length 17 exceeds 16 characters
prog.cob:12: error: invalid hexadecimal literal: '22222222222222222'
prog.cob:12: error: literal length 17 exceeds 16 characters
prog.cob:14: error: invalid B# literal: '23'
prog.cob:14: error: literal contains invalid character '2'
prog.cob:14: error: literal contains invalid character '3'
prog.cob:14: error: invalid O# literal: '89'
prog.cob:14: error: literal contains invalid character '8'
prog.cob:14: error: literal contains invalid character '9'
prog.cob:14: error: invalid X# literal: 'GG'
prog.cob:14: error: literal contains invalid character 'G'
prog.cob:14: error: literal contains invalid character 'G'
prog.cob:14: error: invalid H# literal: 'HH'
prog.cob:14: error: literal contains invalid character 'H'
prog.cob:14: error: literal contains invalid character 'H'
])

AT_CHECK([$COMPILE_ONLY -std=cobol2014 prog.cob], [1], [],
[prog.cob:6: error: ACUCOBOL numeric literal does not conform to COBOL 2014
prog.cob:6: error: ACUCOBOL numeric literal does not conform to COBOL 2014
prog.cob:6: error: ACUCOBOL numeric literal does not conform to COBOL 2014
prog.cob:6: error: ACUCOBOL numeric literal does not conform to COBOL 2014
prog.cob:11: error: ACUCOBOL numeric literal does not conform to COBOL 2014
prog.cob:12: error: ACUCOBOL numeric literal does not conform to COBOL 2014
prog.cob:12: error: ACUCOBOL numeric literal does not conform to COBOL 2014
prog.cob:12: error: ACUCOBOL numeric literal does not conform to COBOL 2014
prog.cob:14: error: ACUCOBOL numeric literal does not conform to COBOL 2014
prog.cob:14: error: ACUCOBOL numeric literal does not conform to COBOL 2014
prog.cob:14: error: ACUCOBOL numeric literal does not conform to COBOL 2014
prog.cob:14: error: ACUCOBOL numeric literal does not conform to COBOL 2014
])

AT_CLEANUP


AT_SETUP([ACUCOBOL 32bit literal size])
# ACUCOBOL literal max - the result is system dependent on size of unsigned long int
AT_SKIP_IF([true])

AT_KEYWORDS([extensions literals])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.

       >>SOURCE FREE
           DISPLAY B#1111111111111111111111111111111111111111111111111111111111111111
               O#1111111111111111111111 X#1111111111111111

           STOP RUN.
])

#AT_CHECK([$COMPILE_ONLY -std=acu prog.cob], [0], [], [])
# TODO check the result according to COB_32_BIT_LONG --> 1 should result in the following
AT_CHECK([$COMPILE_ONLY -std=acu prog.cob], [1], [],
[prog.cob:7: error: invalid B# literal: '11111111111111111111111111111111111...'
prog.cob:7: error: literal exceeds limit 4294967295
prog.cob:8: error: invalid O# literal: '1111111111111111111111'
prog.cob:8: error: literal exceeds limit 4294967295
prog.cob:8: error: invalid X# literal: '1111111111111111'
prog.cob:8: error: literal exceeds limit 4294967295
])
AT_CLEANUP


AT_SETUP([ACUCOBOL USAGE FLOAT / DOUBLE])
AT_KEYWORDS([misc acu extensions reserved])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE SECTION.
       77  myfloat       usage float
                         value is 3.97E+24.
       77  mydouble      usage double
                         value is 3.97E+44.
       PROCEDURE DIVISION.
       MAIN.
      *
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -std=acu-strict prog.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])

AT_CHECK([$COMPILE_ONLY -std=mf-strict prog.cob], [1], [],
[prog.cob:6: error: 'float' is not defined, but is a reserved word in another dialect
prog.cob:8: error: 'double' is not defined, but is a reserved word in another dialect
])

AT_CLEANUP


AT_SETUP([ACUCOBOL USAGE HANDLE])
AT_KEYWORDS([misc acu extensions reserved CALL DESTROY])

# TODO: need a better test here
# TODO: maybe add a compiler support configuration to provide better messages

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE SECTION.
       78  listdir-open                value 1.
       78  listdir-next                value 2.
       78  listdir-close               value 3.
       77  pattern           pic x(5) value "*.cob".
       77  directory         pic x(5) value ".".
       77  filename          pic x(256).
       77  mydir             usage handle.

       77  mythread          usage handle of thread.
       77  unused-thread           handle    thread.

       77  mywindow          usage handle of window.

       77  nor-a-handle      usage handle bananas.
       77  neither-a-handle  usage handle of apes.
       77  control-handle    usage handle of label.

       PROCEDURE DIVISION.
       MAIN.
      * Call LISTDIR-OPEN to get a directory handle.
           call "C$LIST-DIRECTORY"
              using listdir-open, directory, pattern.
           move return-code to mydir.
      * Call LISTDIR-NEXT to get the names of the files.
      * Repeat this operation until a filename containing only
      * spaces is returned.  The filenames are not necessarily
      * returned in any particular order.  Filenames may be
      * sorted on some machines and not on others.
           perform thread with test after until filename = spaces
             handle in mywindow
              call "C$LIST-DIRECTORY"
                 using listdir-next, mydir, filename
           end-perform.
           stop thread mywindow
      * Call LISTDIR-CLOSE to close the directory and deallocate
      * memory. Omitting this call will result in memory leaks.
           call "C$LIST-DIRECTORY" using listdir-close, mydir.
      *
           CALL IN THREAD 'NOTHERE'
                HANDLE IN mywindow
                USING  'STUFF'
              NOT ON EXCEPTION  DISPLAY 'called in THREAD'
           END-CALL
      *
      *    Just to check that the handles are still recognized and usable:
           destroy neither-a-handle, control-handle
      *
      *    check for invalid use
           add  neither-a-handle to control-handle
           compute mywindow = 0
           string mydir delimited by size into filename
      *
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -std=acu-strict prog.cob], [1], [],
[prog.cob:19: error: unknown HANDLE type: bananas
prog.cob:20: error: unknown HANDLE type: apes
prog.cob:21: warning: HANDLE OF control-type is not implemented
prog.cob: in paragraph 'MAIN':
prog.cob:34: warning: THREAD is not implemented
prog.cob:36: warning: THREAD is not implemented
prog.cob:35: error: HANDLE must be either a generic or a THREAD HANDLE
prog.cob:39: error: HANDLE must be either a generic or a THREAD HANDLE
prog.cob:39: warning: STOP THREAD is replaced by STOP RUN
prog.cob:44: warning: THREAD is not implemented
prog.cob:46: warning: THREAD is not implemented
prog.cob:45: error: HANDLE must be either a generic or a THREAD HANDLE
prog.cob:51: warning: GRAPHICAL CONTROL is not implemented
prog.cob:54: error: HANDLE item not allowed here: 'neither-a-handle'
prog.cob:55: error: HANDLE item not allowed here: 'mywindow'
prog.cob:56: error: HANDLE item not allowed here: 'mydir'
])

AT_CHECK([$COMPILE_ONLY -std=rm-strict prog.cob], [1], [],
[prog.cob:12: error: 'handle' is not defined, but is a reserved word in another dialect
prog.cob:14: error: 'handle' is not defined, but is a reserved word in another dialect
prog.cob:15: error: syntax error, unexpected Identifier
prog.cob:17: error: 'handle' is not defined, but is a reserved word in another dialect
prog.cob:19: error: 'handle' is not defined, but is a reserved word in another dialect
prog.cob:20: error: 'handle' is not defined, but is a reserved word in another dialect
prog.cob:21: error: 'handle' is not defined, but is a reserved word in another dialect
prog.cob:15: error: PICTURE clause required for 'unused-thread'
prog.cob: in paragraph 'MAIN':
prog.cob:35: error: 'handle IN mywindow' is not defined
prog.cob:34: error: invalid expression
prog.cob:38: error: syntax error, unexpected END-PERFORM
prog.cob:39: error: 'thread' is not defined, but is a reserved word in another dialect
prog.cob:39: error: syntax error, unexpected Identifier
prog.cob:44: error: syntax error, unexpected Identifier, expecting THREAD
prog.cob:48: error: syntax error, unexpected END-CALL
prog.cob:51: error: syntax error, unexpected Identifier
])

AT_CLEANUP


AT_SETUP([ACUCOBOL WINDOW statements])
AT_KEYWORDS([misc acu extensions screen])

# TODO: need a better tests when we implement this,
#       likely split into multiple ones

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE SECTION.
       77  myhandle      usage handle.
       77  mythread      usage handle of thread.
       77  WINDOW-HANDLE usage handle of window.
       PROCEDURE DIVISION.
       MAIN.
           DISPLAY WINDOW, LINE 1, COLUMN 29, SIZE 51, LINES 12,
               ERASE SCREEN BOXED SHADOW, POP-UP AREA IS WINDOW-HANDLE
           END-DISPLAY
           DISPLAY "THIS IS TEXT IN A WINDOW"
           DISPLAY FLOATING WINDOW UPON WINDOW-HANDLE,
               LINE 5, COLUMN 10, SIZE 20, LINES 2,
               ERASE SCREEN, POP-UP AREA IS myhandle
           END-DISPLAY
           DISPLAY "Some text for the floating window"
           ACCEPT OMITTED
           CLOSE WINDOW myhandle
           DISPLAY FLOATING WINDOW,
               LINE 5, COLUMN 10, SIZE 20, LINES 2,
               ERASE SCREEN, POP-UP AREA mythread
           END-DISPLAY
           ACCEPT OMITTED
           DESTROY WINDOW-HANDLE
           DISPLAY WINDOW AT 1020 SIZE 36 LINES 15 BOXED
              FOREGROUND-COLOR IS 7
              BACKGROUND-COLOR IS 0
              TOP CENTERED TITLE IS 'SOME TITLE'
              pop-up area = WINDOW-HANDLE.
           DISPLAY SUBWINDOW UPON WINDOW-HANDLE SHADOW
              AT 0505 SIZE 25 LINES 10
              BOTTOM LEFT TITLE = 'buttom left'
              BACKGROUND-COLOR IS 10
              FOREGROUND-COLOR IS 5.
           DISPLAY WINDOW UPON WINDOW-HANDLE SHADOW
              AT 0808 SIZE 18 LINES 5
              RIGHT TITLE 'top right'
              BACKGROUND-COLOR 1
              FOREGROUND-COLOR 14.
           ACCEPT OMITTED
           DESTROY WINDOW-HANDLE
      *
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -std=acu-strict prog.cob], [1], [],
[prog.cob: in paragraph 'MAIN':
prog.cob:11: warning: GRAPHICAL WINDOW is not implemented
prog.cob:15: warning: GRAPHICAL WINDOW is not implemented
prog.cob:21: warning: GRAPHICAL WINDOW is not implemented
prog.cob:22: warning: GRAPHICAL WINDOW is not implemented
prog.cob:24: error: HANDLE must be either a generic or a WINDOW HANDLE or X(10)
prog.cob:27: warning: GRAPHICAL CONTROL is not implemented
prog.cob:28: warning: GRAPHICAL WINDOW is not implemented
prog.cob:33: warning: GRAPHICAL WINDOW is not implemented
prog.cob:38: warning: GRAPHICAL WINDOW is not implemented
prog.cob:44: warning: GRAPHICAL CONTROL is not implemented
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob: in paragraph 'MAIN':
prog.cob:11: warning: GRAPHICAL WINDOW is not implemented
prog.cob:15: warning: GRAPHICAL WINDOW is not implemented
prog.cob:21: warning: GRAPHICAL WINDOW is not implemented
prog.cob:22: warning: GRAPHICAL WINDOW is not implemented
prog.cob:24: error: HANDLE must be either a generic or a WINDOW HANDLE or X(10)
prog.cob:27: warning: GRAPHICAL CONTROL is not implemented
prog.cob:28: warning: GRAPHICAL WINDOW is not implemented
prog.cob:33: warning: GRAPHICAL WINDOW is not implemented
prog.cob:38: warning: GRAPHICAL WINDOW is not implemented
prog.cob:44: warning: GRAPHICAL CONTROL is not implemented
])

AT_CLEANUP


AT_SETUP([ACUCOBOL GRAPHICAL controls])
AT_KEYWORDS([misc acu extensions screen MODIFY INQUIRE])

# TODO: need a better tests when we implement this,
#       likely split into multiple ones

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE SECTION.
       77  window-handle USAGE HANDLE OF WINDOW.
       77  lb-row        PIC X(10).
       77  lb-color      PIC 9(05) VALUE 8192.
       77  lb-num-lines  PIC 9(02) VALUE 20.
       77  lb-num-rows   PIC 9(02) VALUE 11.
       77  window-lines  PIC 9(02) VALUE 22.
       77  window-rows   PIC 9(02) VALUE 13.
       77  selection-idx PIC S9(02).
       SCREEN SECTION.
       01 lb-screen.
           03 lb-frm LIST-BOX 3-D
      *             FIXME: the following should be possible in any order
                    UNSORTED
                    EXCEPTION-VALUE = 13
                    COLOR lb-color
                    CLINE 1 CCOL 1
                    LINES = lb-num-lines
                    SIZE  IS lb-num-rows
      *             VALUE lb-row  raises error as no identifer according
      *                           to cobol2002, but here it is fine
                    .
       PROCEDURE DIVISION.
       MAIN.
           MODIFY lb-frm ITEM-TO-ADD = 'Row 1'
           MODIFY lb-frm ITEM-TO-ADD = 'Row 2'
           MODIFY lb-frm ITEM-TO-ADD = 'Row 3'
           MODIFY lb-frm ITEM-TO-ADD = 'Row 4'
           MODIFY lb-frm ITEM-TO-ADD = 'Row 5'
           MODIFY lb-frm ITEM-TO-ADD = 'Row 6'
           MODIFY lb-frm ITEM-TO-ADD = 'Row 7'
           DISPLAY FLOATING WINDOW
               LINE 5 COL 5
               LINES window-lines
               SIZE  window-rows
               BOXED
               COLOR lb-color
               HANDLE IS window-handle
           END-DISPLAY
           DISPLAY lb-screen
           ACCEPT  lb-screen
           IF lb-row = SPACES
              INQUIRE lb-frm SELECTION-INDEX IN selection-idx
              IF selection-idx > ZERO
                 MODIFY  lb-frm QUERY-INDEX = selection-idx
                 INQUIRE lb-frm ITEM-VALUE IN lb-row
              END-IF
           END-IF
           CLOSE WINDOW window-handle
           DISPLAY "chosen row value was '" lb-row "'"
           ACCEPT OMITTED
      *
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -std=acu-strict prog.cob], [0], [],
[prog.cob:16: warning: GRAPHICAL CONTROL is not implemented
prog.cob:21: warning: COLOR clause is not implemented
prog.cob:23: warning: LINES clause is not implemented
prog.cob:26: warning: screen positions from data-item is not implemented
prog.cob: in paragraph 'MAIN':
prog.cob:36: warning: GRAPHICAL WINDOW is not implemented
prog.cob:42: warning: COLOR is not implemented
prog.cob:53: warning: GRAPHICAL WINDOW is not implemented
])

AT_CLEANUP


AT_SETUP([DISPLAY MESSAGE BOX])
AT_KEYWORDS([misc acu extensions screen])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE SECTION.
       77  my-text             pic x(10) value "TEXT".
       78  MB-OK               VALUE 1.
       78  MB-YES-NO           VALUE 2.
       78  MB-OK-CANCEL        VALUE 3.
       78  MB-YES-NO-CANCEL    VALUE 4.
       78  MB-YES              VALUE 1.
       78  MB-NO               VALUE 2.
       78  MB-CANCEL           VALUE 3.
       78  MB-DEFAULT-ICON     VALUE 1.
       78  MB-WARNING-ICON     VALUE 2.
       78  MB-ERROR-ICON       VALUE 3.
       PROCEDURE DIVISION.
           DISPLAY MESSAGE "Important"
                   TITLE "Very important"
                   TYPE = MB-OK
                   ICON IS MB-WARNING-ICON
           DISPLAY MESSAGE "This is" space "my" space my-text
           DISPLAY MESSAGE BOX "More messages?"
                   TYPE  MB-YES-NO
                   TITLE = "box title"
                   DEFAULT IS MB-YES
                   RETURNING RETURN-CODE
      *
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -std=acu-strict prog.cob], [0], [],
[prog.cob:18: warning: handling of DISPLAY MESSAGE is unfinished; implementation is likely to be changed
prog.cob:22: warning: handling of DISPLAY MESSAGE is unfinished; implementation is likely to be changed
prog.cob:23: warning: handling of DISPLAY MESSAGE is unfinished; implementation is likely to be changed
])

AT_CLEANUP


AT_SETUP([DISPLAY OMITTED])
AT_KEYWORDS([misc extensions screen])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE DIVISION.
           DISPLAY OMITTED WITH BELL
           DISPLAY OMITTED LINE 10 COL 15 ERASE EOL
      *
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [],
[prog.cob:5: warning: handling of DISPLAY OMITTED is unfinished; implementation is likely to be changed
prog.cob:6: warning: handling of DISPLAY OMITTED is unfinished; implementation is likely to be changed
])

AT_CLEANUP


AT_SETUP([CGI: EXTERNAL-FORM])
AT_KEYWORDS([misc acu extensions accept display])

# TODO: need a better tests when we implement this,
#       likely split into multiple ones

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE SECTION.
       01  GNUCOBOL-URL IS EXTERNAL-FORM
                IDENTIFIED BY "http://www.gnu.org/software/gnucobol/".
       01  WEB-PAGE-1 EXTERNAL-FORM,
                IDENTIFIED "cgipage1".
       01  SIMPLE-FORM IS EXTERNAL-FORM.
           03  SIMPLE-FORM-VAR1  PIC X(10).
           03  SIMPLE-FORM-VAR2  PIC 9(5).
       01  MY-FORM EXTERNAL-FORM.
           03  CGI-VAR1 PIC X(20) IDENTIFIED "Name".
           03  CGI-VAR2 PIC X(50) IDENTIFIED BY CGI-VAR1.

       PROCEDURE DIVISION.
       MAIN.
      *>   CGI display of static content (full URL)
           DISPLAY GNUCOBOL-URL
      *>   CGI display of static content (current URL + "cgipage1" + ".html")
           DISPLAY WEB-PAGE-1
      *>   CGI display of output form
           DISPLAY MY-FORM
      *>   CGI display of input  form (docs say: used for debugging purposes)
           DISPLAY SIMPLE-FORM
      *>   CGI accept
           ACCEPT SIMPLE-FORM
      *>   normal accept
           ACCEPT SIMPLE-FORM-VAR1
      *>   CGI accept with first var (with cgi identifier Name)
      *>   setting the cgi identifier of the second
           ACCEPT MY-FORM
      *
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -std=acu-strict prog.cob], [0], [],
[prog.cob:6: warning: EXTERNAL-FORM is not implemented
prog.cob:8: warning: EXTERNAL-FORM is not implemented
prog.cob:10: warning: EXTERNAL-FORM is not implemented
prog.cob:13: warning: EXTERNAL-FORM is not implemented
prog.cob:14: warning: EXTERNAL-FORM (IDENTIFIED BY) is not implemented
prog.cob:15: warning: EXTERNAL-FORM (IDENTIFIED BY) is not implemented
])

AT_CLEANUP


AT_SETUP([adding/removing reserved words])
AT_KEYWORDS([misc extensions configuration])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  hello       PIC X.
       01  foo         PIC X.
       01  bars        PIC X.
       01  file        PIC X.
       01  background-color PIC X.

       PROCEDURE       DIVISION.
           CONTINUE
           .
])

AT_CHECK([$COMPILE_ONLY -freserved=hello,foo,bars,background-color -fnot-reserved=file prog.cob], [1], [],
[prog.cob:7: error: 'hello' is a reserved word, but isn't supported
prog.cob:8: error: 'foo' is a reserved word, but isn't supported
prog.cob:9: error: 'bars' is a reserved word, but isn't supported
prog.cob:11: error: syntax error, unexpected BACKGROUND-COLOR
])
AT_CHECK([$COMPILE_ONLY -fnot-reserved=file prog.cob], [0], [])
AT_CLEANUP


AT_SETUP([adding aliases])
AT_KEYWORDS([misc extensions configuration reserved])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.  prog.

       PROCEDURE DIVISION.
           FOO "Hello, world!"
           .
])

# FIXME: user defined words need to store a reference to the name originally defining the word
#        otherwise we can't help the user to know where the error came from
#        (command line is only a special case, but even then it may be wrapped and not visible
#        to the user)
#AT_CHECK([$COMPILE_ONLY -freserved=FOO=DISPLAY* -freserved=BARS:FOO prog.cob], [1], [],
#[configuration warning: -freserved=FOO=DISPLAY*: ignored asterisk at end of alias target
#configuration error:
#-freserved=BARS:FOO: alias target 'FOO' is not a default reserved word
#])

AT_CHECK([$COMPILE_ONLY -freserved=FOO=DISPLAY* -freserved=BARS:FOO prog.cob], [1], [],
[configuration warning: -freserved=FOO=DISPLAY*: ignored asterisk at end of alias target
configuration error:
alias target 'FOO' is not a default reserved word
])

AT_CHECK([$COMPILE_ONLY -freserved=FOO=DISPLAY prog.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY -freserved=FOO:DISPLAY prog.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY -freserved=" FOO = DISPLAY  " prog.cob], [0], [], [])
AT_CLEANUP


AT_SETUP([overriding default words])
AT_KEYWORDS([misc extensions configuration reserved])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.  prog.

       PROCEDURE DIVISION.
           COMP-1 "Hello, world!"
           DISPLAY "Hello, world!".
])

AT_CHECK([$COMPILE_ONLY -freserved=COMP-1=DISPLAY prog.cob], [0], [], [])

AT_DATA([prog2.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.  prog2.

       PROCEDURE DIVISION.
           COMP-1 "Hello, world!".
           DISPLAY "Hello, world!".
])

AT_CHECK([$COMPILE_ONLY -fnot-reserved=DISPLAY -freserved=COMP-1=DISPLAY prog2.cob], [1], [],
[prog2.cob:7: error: syntax error, unexpected Literal, expecting SECTION or .
prog2.cob:7: note: unknown statement 'DISPLAY'; it may exist in another dialect
])

AT_CLEANUP


AT_SETUP([complete specified word list])
AT_KEYWORDS([misc extensions configuration reserved])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.  prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  SQLCA.
           03  SQLCABC         USAGE BINARY-LONG VALUE 136.
])

AT_CHECK([$COMPILE_ONLY -std=ibm-strict prog.cob], [1], [],
[prog.cob:7: error: 'BINARY-LONG' is not defined, but is a reserved word in another dialect
])
AT_CHECK([$COMPILE_ONLY -std=ibm-strict -freserved=BINARY-LONG prog.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY -std=ibm prog.cob], [0], [], [])
AT_CLEANUP


AT_SETUP([ANY LENGTH item as formal parameter])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.

       DATA           DIVISION.
       LINKAGE        SECTION.
       01  str        ANY LENGTH PIC X.

       PROCEDURE DIVISION USING str.
           GOBACK
           .
])

AT_DATA([prog2.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog2.

       DATA           DIVISION.
       LINKAGE        SECTION.
       01  str        ANY LENGTH PIC X.

       PROCEDURE DIVISION.
           GOBACK
           .
])
AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY prog2.cob], [1], [],
[prog2.cob:7: error: 'str' ANY LENGTH item must be a formal parameter
])
AT_CLEANUP


AT_SETUP([ANY LENGTH item as BY VALUE formal parameter])
AT_KEYWORDS([misc BY VALUE])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.

       DATA           DIVISION.
       LINKAGE        SECTION.
       01  str        ANY LENGTH PIC X.

       PROCEDURE DIVISION USING VALUE str.
           GOBACK
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:9: warning: handling of parameters passed BY VALUE is unfinished; implementation is likely to be changed
prog.cob:9: error: ANY LENGTH items may only be BY REFERENCE formal parameters
])
AT_CLEANUP


AT_SETUP([swapped SOURCE- and OBJECT-COMPUTER])
AT_KEYWORDS([misc extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.

       ENVIRONMENT    DIVISION.
       CONFIGURATION  SECTION.
       OBJECT-COMPUTER. a.
       SOURCE-COMPUTER. b.
])

# MF extension, supported by GnuCOBOL
AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])
# note: testing with lax configuration, otherwise there would be an error
AT_CHECK([$COMPILE_ONLY -std=acu prog.cob], [0], [],
[prog.cob:8: warning: SOURCE-COMPUTER incorrectly after OBJECT-COMPUTER used
])
AT_CLEANUP


AT_SETUP([CONF. SECTION paragraphs in wrong order])
AT_KEYWORDS([misc extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.

       ENVIRONMENT    DIVISION.
       CONFIGURATION  SECTION.
       REPOSITORY.
       SOURCE-COMPUTER. b.
       OBJECT-COMPUTER. a.
       SPECIAL-NAMES.

       END PROGRAM prog.

       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog2.

       ENVIRONMENT    DIVISION.
       CONFIGURATION  SECTION.
       SOURCE-COMPUTER. b.
       OBJECT-COMPUTER. a.
       REPOSITORY.
       SPECIAL-NAMES.

       END PROGRAM prog2.

       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog3.

       ENVIRONMENT    DIVISION.
       CONFIGURATION  SECTION.
       REPOSITORY.
       SOURCE-COMPUTER. b.
       OBJECT-COMPUTER. a.

       END PROGRAM prog3.

       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog4.

       ENVIRONMENT    DIVISION.
       CONFIGURATION  SECTION.
       REPOSITORY.
       SPECIAL-NAMES.
       SOURCE-COMPUTER. b.
       OBJECT-COMPUTER. a.

       END PROGRAM prog4.
])

# MF extension, supported by GnuCOBOL
AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])
# note: testing with lax configuration, otherwise there would be an error
AT_CHECK([$COMPILE_ONLY -std=acu prog.cob], [0], [],
[prog.cob:8: warning: SOURCE-COMPUTER incorrectly after REPOSITORY used
prog.cob:22: warning: SPECIAL-NAMES incorrectly after REPOSITORY used
prog.cob:32: warning: SOURCE-COMPUTER incorrectly after REPOSITORY used
prog.cob:43: warning: SPECIAL-NAMES incorrectly after REPOSITORY used
prog.cob:44: warning: SOURCE-COMPUTER incorrectly after SPECIAL-NAMES used
])
AT_CHECK([$COMPILE_ONLY -std=cobol2014 prog.cob], [1], [],
[prog.cob:8: error: SOURCE-COMPUTER incorrectly after REPOSITORY used
prog.cob:22: error: SPECIAL-NAMES incorrectly after REPOSITORY used
prog.cob:32: error: SOURCE-COMPUTER incorrectly after REPOSITORY used
prog.cob:43: error: SPECIAL-NAMES incorrectly after REPOSITORY used
prog.cob:44: error: SOURCE-COMPUTER incorrectly after SPECIAL-NAMES used
])
AT_CLEANUP


AT_SETUP([NOT ON EXCEPTION with STATIC CALL convention])
AT_KEYWORDS([misc CALL-CONVENTION])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.
       PROCEDURE      DIVISION.
           CALL STATIC "stuff"
              ON EXCEPTION
                 CONTINUE
           END-CALL
           GOBACK.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog2.
       PROCEDURE      DIVISION.
           CALL "stuff"
              ON EXCEPTION
                 CONTINUE
           END-CALL
           GOBACK.
])

AT_DATA([prog3.cob], [
       >> CALL-CONVENTION STATIC
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog3.
       PROCEDURE      DIVISION.
           CALL "stuff"
              ON EXCEPTION
                 CONTINUE
           END-CALL
           GOBACK.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [],
[prog.cob:5: warning: ON EXCEPTION ignored because of STATIC CALL
])
AT_CHECK([$COMPILE_ONLY prog2.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY -static prog2.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY prog3.cob], [0], [],
[prog3.cob:6: warning: STATIC CALL convention ignored because of ON EXCEPTION
])
AT_CLEANUP


AT_SETUP([NOT ON EXCEPTION phrases before ON EXCEPTION])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.

       ENVIRONMENT    DIVISION.
       INPUT-OUTPUT   SECTION.
       FILE-CONTROL.
           SELECT f ASSIGN "f.txt"
               ORGANIZATION LINE SEQUENTIAL.

       DATA           DIVISION.
       FILE           SECTION.
       FD  f LINAGE 10.
       01  f-rec PIC X.

       PROCEDURE      DIVISION.
           WRITE f-rec FROM "x"
               NOT END-OF-PAGE
                   CONTINUE
               END-OF-PAGE
                   CONTINUE
           END-WRITE
           WRITE f-rec FROM "x"
               END-OF-PAGE
                   CONTINUE
               NOT END-OF-PAGE
                   CONTINUE
           END-WRITE
           WRITE f-rec FROM "x"
               NOT END-OF-PAGE
                   CONTINUE
           END-WRITE
           WRITE f-rec FROM "x"
               END-OF-PAGE
                   CONTINUE
           END-WRITE

           DISPLAY "blah"
               ON EXCEPTION
                   CALL "err"
                       NOT ON EXCEPTION
                           CONTINUE
                       ON EXCEPTION
                           CONTINUE.
           DISPLAY "blah"
               NOT ON EXCEPTION
                   CALL "err"
                       ON EXCEPTION
                           CONTINUE
                       NOT ON EXCEPTION
                           CONTINUE.
])

AT_CHECK([$COMPILE_ONLY -std=cobol85 prog.cob], [1], [],
[prog.cob:22: error: NOT AT END-OF-PAGE before AT END-OF-PAGE does not conform to COBOL 85
prog.cob:44: error: NOT EXCEPTION before EXCEPTION does not conform to COBOL 85
])
AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])
AT_CLEANUP


AT_SETUP([wrong dialect hints])
AT_KEYWORDS([misc configuration reserved])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x PIC X.

       PROCEDURE DIVISION.
           DISPLAY x CONVERSION.
           TRANSFORM x
           .
])

AT_CHECK([$COMPILE_ONLY -std=cobol85 prog.cob], [1], [],
[prog.cob:10: error: 'CONVERSION' is not defined, but is a reserved word in another dialect
prog.cob:11: error: syntax error, unexpected Identifier, expecting SECTION or .
prog.cob:11: note: unknown statement 'TRANSFORM'; it may exist in another dialect
])
AT_CLEANUP


AT_SETUP([redundant periods])
AT_KEYWORDS([misc redundant-periods])

AT_DATA([a.cpy], [
       01  var PIC X
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       REPLACE ==a== BY ==b==.. *> blah blah
       .

       COPY a..

       78  var VALUE "hello".
      * blah blah
          .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [],
[prog.cob:6: warning: ignoring redundant .
prog.cob:12: warning: ignoring redundant .
])
AT_CLEANUP


AT_SETUP([missing periods])
AT_KEYWORDS([misc cobol85 area-a missing-periods])

# Check whether the first line is correcly handled:
AT_DATA([prog.cob], [       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 DONE COMP-1 VALUE ZERO.

       PROCEDURE DIVISION.
       MAIN SECTION.
           PERFORM SEC-1.
           IF NOT DONE = 1
              DISPLAY "SEC-1 NOT EXECUTED"
           END-IF
           STOP RUN
       SEC-1 SECTION.
           MOVE 1 TO DONE
           GOBACK.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob: in section 'MAIN':
prog.cob:15: error: 'SEC-1' is not defined
prog.cob:15: error: syntax error, unexpected SECTION
])
AT_CHECK([$COMPILE_ONLY -fformat=cobol85 -fmissing-period=error prog.cob], [1], [],
[prog.cob: in section 'MAIN':
prog.cob:15: error: optional period used
])
AT_CHECK([$COMPILE -fformat=cobol85 prog.cob], [0], [],
[prog.cob: in section 'MAIN':
prog.cob:15: warning: optional period used
])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([missing periods with COPYs])
AT_KEYWORDS([misc cobol85 area-a missing-periods copy])

AT_DATA([ok.inc], [
       01 FLG PIC XX VALUE "KO".
])

AT_DATA([sec-1.inc], [
       SEC-1 SECTION.
           MOVE "OK" TO FLG
])

AT_DATA([sec-2.inc], [
       SEC-2 SECTION.
           IF FLG NOT EQUAL "OK"
              DISPLAY "DEC-1 NOT EXECUTED"
           END-IF.
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       COPY "ok.inc".

       PROCEDURE DIVISION.
       MAIN SECTION.
           PERFORM SEC-1.
           PERFORM SEC-2.
      * Directive purposefully in Area A
        REPLACE ==RUNNN== BY ==RUN==.
           STOP RUNNN
           COPY "sec-1.inc".
      * Also purposefully in Area A
        COPY "sec-2.inc".
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[sec-1.inc: in section 'MAIN':
sec-1.inc:2: error: 'SEC-1' is not defined
sec-1.inc:2: error: syntax error, unexpected SECTION
sec-2.inc:2: error: 'SEC-2' is not defined
sec-2.inc:2: error: syntax error, unexpected SECTION
])
AT_CHECK([$COMPILE -fformat=cobol85 prog.cob], [0], [],
[sec-1.inc: in section 'MAIN':
sec-1.inc:2: warning: optional period used
sec-2.inc: in section 'SEC-1':
sec-2.inc:2: warning: optional period used
])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_DATA([prog_err.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       COPY "ok.inc".

       PROCEDURE DIVISION.
       MAIN SECTION.
           PERFORM SEC-1.
           PERFORM SEC-2.
      * Directive purposefully in Area A
        REPLACE ==RUNNN== BY ==RUN==.
           PERFORM SEC-3.
           STOP RUN
           COPY "sec-1.inc".
       COPY "sec-2.inc".
       SEC-3 SECTION.
           DISPLAY KO NO ADVANCING.
])

AT_CHECK([$COMPILE_ONLY -fformat=cobol85 prog_err.cob], [1], [],
[sec-1.inc: in section 'MAIN':
sec-1.inc:2: warning: optional period used
sec-2.inc: in section 'SEC-1':
sec-2.inc:2: warning: optional period used
prog_err.cob: in section 'SEC-3':
prog_err.cob:20: error: 'KO' is not defined
])

AT_CLEANUP


AT_SETUP([statement in Area A])
AT_KEYWORDS([misc cobol85 areacheck])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 FLAG          PIC 9 VALUE ZERO.
       PROCEDURE        DIVISION.
       MAIN
       .
         PERFORM SEC-1
         IF NOT FLAG = 1
              DISPLAY "SEC-1 NOT EXECUTED"
         END-IF
         STOP RUN
         .
       SEC-1 SECTION.
         MOVE 1 TO FLAG
         .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [])
AT_CHECK([$COMPILE_ONLY -std=cobol85 prog.cob], [1], [],
[prog.cob:9: error: separator period in Area A
prog.cob: in paragraph 'MAIN':
prog.cob:10: error: start of statement in Area A
prog.cob:11: error: start of statement in Area A
prog.cob:14: error: start of statement in Area A
prog.cob:15: error: separator period in Area A
prog.cob: in section 'SEC-1':
prog.cob:17: error: start of statement in Area A
prog.cob:18: error: separator period in Area A
])

AT_CHECK([$COMPILE_ONLY -std=cobol85 -fno-areacheck prog.cob], [0], [])
AT_CHECK([$COMPILE_ONLY -std=cobol85 -fformat=fixed prog.cob], [0], [])

AT_CLEANUP


AT_SETUP([pseudotext replacement with text in area A])
AT_KEYWORDS([misc cobol85 gcos copy missing-periods])

# Check whether the first line is correcly handled:
AT_DATA([ok.inc], [       01  REPLACE-ME
       01  KO  PIC XX VALUE "KO".
       PROCEDURE DIVISION.
       MAIN SECTION.
           PERFORM SEC-1
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
           COPY "ok.inc" REPLACING == 01 REPLACE-ME == BY ==
       01  OK PIC XX VALUE "OK". ==
           .

           PERFORM SEC-2
           STOP RUN
           CONTINUE
       SEC-1 SECTION.
           IF OK NOT EQUAL "OK" DISPLAY OK
       SEC-2 SECTION.
           IF OK NOT EQUAL "OK" DISPLAY OK.
])

AT_CHECK([$COMPILE -std=cobol85 -fmissing-period=warning prog.cob], [0], [],
[prog.cob: in section 'MAIN':
prog.cob:14: warning: optional period used
prog.cob: in section 'SEC-1':
prog.cob:16: warning: optional period used
])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_DATA([prog_err.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
           COPY "ok.inc" REPLACING == 01 REPLACE-ME == BY ==
       01  OK PIC XX VALUE "OK". ==
           .

           PERFORM SEC-2.
           STOP RUN
       SEC-1 SECTION.
           IF OK NOT EQUAL "OK" DISPLAY OK
       SEC-2 SECTION.
           DISPLAY NOT-FOUND.
])
AT_CHECK([$COMPILE -std=gcos prog_err.cob], [1], [],
[prog_err.cob: in section 'MAIN':
prog_err.cob:13: warning: optional period used
prog_err.cob: in section 'SEC-1':
prog_err.cob:15: warning: optional period used
prog_err.cob: in section 'SEC-2':
prog_err.cob:16: error: 'NOT-FOUND' is not defined
])

AT_CLEANUP


AT_SETUP([IF-ELSE statement list with invalid syntax])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  a-variable PIC 9.

       PROCEDURE DIVISION.
           IF a-variable = 1
               ACCEPT a-variable, not-a-variable
                   ON EXCEPTION
                       CONTINUE
               END-ACCEPT
           ELSE
               CONTINUE
           END-IF
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:11: error: syntax error, unexpected Identifier
prog.cob:14: error: syntax error, unexpected END-ACCEPT
prog.cob:15: error: syntax error, unexpected ELSE
prog.cob:17: error: syntax error, unexpected END-IF
])

AT_CLEANUP


AT_SETUP([EVALUATE statement with invalid syntax])
AT_KEYWORDS([misc expression])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  a-variable PIC 9.

       PROCEDURE DIVISION.
           EVALUATE a-variable

              ALSO true

              WHEN 1

              ALSO a-variable
                 CONTINUE

              WHEN 1 OR 2
                 CONTINUE

           END-EVALUATE
           .
           EVALUATE a-variable

              ALSO true

              WHEN 3
                 CONTINUE

              WHEN 5
                 CONTINUE

           END-EVALUATE
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:19: error: invalid conditional expression
prog.cob:16: error: invalid expression
prog.cob:28: error: wrong number of WHEN parameters
prog.cob:31: error: wrong number of WHEN parameters
])

AT_CLEANUP


AT_SETUP([COBOL-WORDS directive])
AT_KEYWORDS([misc reserved words])

# note: currently not checked - should all be seen before first IDENTIFICATION DIVISION

AT_DATA([prog.cob], [
           *> Valid
           >>COBOL-WORDS RESERVE "CAT"
           *> Valid (GC-extension)
           >>COBOL-WORDS RESERVE  "doggy" "catty" "mouse"
           *> Valid
           >>COBOL-WORDS EQUATE "VALUE" WITH "VA"
           *> Invalid - Bread is not reserved.
           >>COBOL-WORDS EQUATE "BREAD" WITH "BARA"
           *> Invalid - ID is already reserved
           >>COBOL-WORDS EQUATE "IDENTIFICATION" WITH "ID"

           *> Valid, BREAD is not reserved.
           >>COBOL-WORDS SUBSTITUTE "program" BY "bread"
           *> Valid (GC-extension)
           >>COBOL-WORDS SUBSTITUTE "DIVISION" BY "DIV", "JUST" BY "JS"
           *> Invalid - Bread is not reserved.
           >>COBOL-WORDS SUBSTITUTE "BREAD" BY "BARA"
           *> Invalid - ID is already reserved
           >>COBOL-WORDS SUBSTITUTE "IDENTIFICATION" BY "ID"
           *> Invalid - needs BY, not WITH
           *> FIXME: error-recovery is bad, see below
           *> >>COBOL-WORDS SUBSTITUTE "INITIALIZE" WITH "INIT"

           *> Valid
           >>COBOL-WORDS UNDEFINE "BREAD"
           *> Valid (GC-extension)
           >>COBOL-WORDS UNDEFINE "DOGGY" "CATTY"
           *> Invalid in Standard COBOL, must be a defined word
           >>COBOL-WORDS UNDEFINE "BREAD"
           
           *> FIXME: error-recovery is bad, see below
           *>>COBOL-WORDS REMOVE "BREAD"

       IDENTIFICATION DIV.
       PROGRAM-ID. prog.

       DATA DIV.
       WORKING-STORAGE SECTION.
       *> Check EQUATE and SUBSTITUTE work correctly
       01  just PIC XX VA "1" JS.
       *> Check RESERVE
       01  cat PIC 9 VA 1.
       *> Check UNDEFINE
       01  dog PIC 9 VA 1.
])

# TODO: add checks for valid reserved word names
# CHECKME: do we follow the rule "The same COBOL word shall not be contained
# in a literal in more than one COBOL-WORDS directive within a single compilation group."
# or specify "this restriction is removed"

# FIXME: error-recovery is really bad, the lines above lead to only directives
# being part of prog.i, ending with the first broken one
# prog.cob:23: error: syntax error, unexpected BY, expecting WITH
# prog.cob:26: error: syntax error, unexpected Literal, expecting EQUATE or UNDEFINE or SUBSTITUTE or RESERVE

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:9: error: 'BREAD' is not a default reserved word, so cannot be aliased
prog.cob:11: error: 'ID' is already reserved
prog.cob:18: error: 'BREAD' is not a default reserved word, so cannot be aliased
prog.cob:20: error: 'ID' is already reserved
prog.cob:30: error: 'BREAD' is not a reserved word, so cannot be removed
prog.cob:43: error: 'cat' is a reserved word, but isn't supported
])

AT_CLEANUP


AT_SETUP([MF reserved word directives])
AT_KEYWORDS([misc extensions ADDRSV ADDSYN MAKESYN OVERRIDE REMOVE])

# note: currently not checked - should all be seen before first IDENTIFICATION DIVISION

AT_DATA([prog.cob], [
           *> Valid
           $SET ADDRSV"DOG""CAT"
           $SET ADD-RSV  "doggy" "catty"
           *> Valid
           $SET ADD-SYN "VALUE" = "VA"
           *> Invalid - Bread is not reserved.
           $SET ADDSYN "BREAD" = "BARA"
           *> Invalid - ID is already reserved
           $SET ADDSYN "IDENTIFICATION" = "ID"

           *> Valid
           $SET MAKESYN(PROGRAM) = (FUNCTION)
           *> Invalid - BREAD is not reserved.
           $SET MAKESYN "BREAD" = "PROGRAM"
           $SET MAKE-SYN "program" = "bread"

           *> Valid
           $SET OVERRIDE "DIVISION" = "DIV" "JUST" = "JS"
           *> Invalid - Bread is not reserved
           $SET OVERRIDE "BREAD" = "BARA"
           *>Invalid - ID is already reserved; note: MF documents this rule but
           *>  does not check it and applies the line; we do it better on purpose :-)
           $SET OVERRIDE "IDENTIFICATION" = "ID"

           *> Valid - note: MF rules does allow reserving not reserved words
           $SET REMOVE "BREAD" (BARA)REMOVE(DOG)

       IDENTIFICATION DIV.
       PROGRAM-ID. prog.

       DATA DIV.
       WORKING-STORAGE SECTION.
       *> Check ADDSYN and OVERRIDE work correctly
       01  just PIC XX VA "1" JS.
       *> Check ADDRSV
       01  cat PIC 9 VA 1.
       *> Check REMOVE
       01  dog PIC 9 VA 1.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:8: error: 'BREAD' is not a default reserved word, so cannot be aliased
prog.cob:10: error: 'ID' is already reserved
prog.cob:10: note: you may want MAKESYN instead
prog.cob:15: error: 'BREAD' is not a default reserved word, so cannot be aliased
prog.cob:16: error: 'BREAD' is not a reserved word
prog.cob:16: note: you may want ADDSYN or OVERRIDE instead
prog.cob:21: error: 'BREAD' is not a default reserved word, so cannot be aliased
prog.cob:24: error: 'ID' is already reserved
prog.cob:24: note: you may want MAKESYN instead
prog.cob:37: error: 'cat' is a reserved word, but isn't supported
])

AT_CLEANUP


AT_SETUP([TURN directive])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       *> Valid
       >> TURN ec-i-o f CHECKING ON
       *> Invalid
       >> TURN dd CHECKING ON
       >> TURN ec-all f CHECKING ON
       >> TURN EC-I-O-invalid-KEY not-exist CHECKING OFF
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
           SELECT F ASSIGN "f.txt", SEQUENTIAL.
       DATA             DIVISION.
       FILE             SECTION.
       FD  f.
       01  f-rec        PIC X.
       PROCEDURE        DIVISION.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:6: error: invalid exception-name: DD
prog.cob:7: error: invalid exception-name: F
prog.cob:8: error: file 'not-exist' does not exist
])

AT_CLEANUP


AT_SETUP([STRING / UNSTRING with invalid syntax])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77  a   PIC X.
       77  b   PIC X.
       77  c   PIC XXX.

       PROCEDURE DIVISION.
           STRING   DELIMITED BY SPACE INTO
           END-STRING
           STRING a DELIMITED BY SPACE c
           END-STRING
           STRING a DELIMITED BY SPACE INTO
           END-STRING
           STRING
                  DELIMITED BY SPACE
                  INTO c
           END-STRING
           STRING a DELIMITED BY SPACE

                  DELIMITED BY SIZE
                  INTO c
           END-STRING
           STRING a DELIMITED BY SPACE
                  b DELIMITED BY SIZE
                  INTO c
           END-STRING
      *
           UNSTRING   DELIMITED BY SPACE INTO a
           END-UNSTRING
           UNSTRING c DELIMITED BY SPACE a
           END-UNSTRING
           UNSTRING c DELIMITED BY SPACE INTO
           END-UNSTRING
           UNSTRING   DELIMITED BY SPACE INTO a
           END-UNSTRING
           UNSTRING c DELIMITED BY SPACE INTO a
           END-UNSTRING
           UNSTRING c DELIMITED BY SPACE
                      DELIMITED BY SIZE  INTO a
           END-UNSTRING
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:12: error: syntax error, unexpected DELIMITED
prog.cob:15: error: syntax error, unexpected END-STRING, expecting INTO
prog.cob:17: error: syntax error, unexpected END-STRING, expecting Identifier
prog.cob:19: error: syntax error, unexpected DELIMITED
prog.cob:24: error: syntax error, unexpected DELIMITED, expecting INTO
prog.cob:32: error: syntax error, unexpected DELIMITED
prog.cob:34: error: syntax error, unexpected Identifier, expecting INTO
prog.cob:37: error: syntax error, unexpected END-UNSTRING, expecting Identifier
prog.cob:38: error: syntax error, unexpected DELIMITED
prog.cob:43: error: syntax error, unexpected DELIMITED, expecting INTO
])
AT_CLEANUP


AT_SETUP([STRING / UNSTRING POINTER clause])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  valid-ptr     PIC 99.
       01  valid-ptr-2   BINARY-LONG.
       01  valid-ptr-3   PIC 99 COMP-3.

       01  invalid-ptr   PIC 9.
       01  invalid-ptr-2 PIC 99V99.
       01  invalid-ptr-3 FLOAT-LONG.
       01  invalid-ptr-4 PIC 99PP.
       01  invalid-ptr-5 PIC VPP99.
       01  invalid-ptr-6 PIC X(30).
       01  invalid-ptr-7.
           03  n         PIC 99.
           03  n2        PIC 99.


       01  x             PIC X(9).
       01  y             PIC X(9).

       PROCEDURE       DIVISION.
           STRING "hello" INTO x POINTER valid-ptr
           STRING "hello" INTO x POINTER valid-ptr-2
           STRING "hello" INTO x POINTER valid-ptr-3

           STRING "hello" INTO x POINTER invalid-ptr
           STRING "hello" INTO x POINTER invalid-ptr-2
           STRING "hello" INTO x POINTER invalid-ptr-3
           STRING "hello" INTO x POINTER invalid-ptr-4
           STRING "hello" INTO x POINTER invalid-ptr-5
           STRING "hello" INTO x POINTER invalid-ptr-6
           STRING "hello" INTO x POINTER invalid-ptr-7

           UNSTRING y INTO x POINTER valid-ptr
           UNSTRING y INTO x POINTER valid-ptr-2
           UNSTRING y INTO x POINTER valid-ptr-3

           UNSTRING y INTO x POINTER invalid-ptr
           UNSTRING y INTO x POINTER invalid-ptr-2
           UNSTRING y INTO x POINTER invalid-ptr-3
           UNSTRING y INTO x POINTER invalid-ptr-4
           UNSTRING y INTO x POINTER invalid-ptr-5
           UNSTRING y INTO x POINTER invalid-ptr-6
           UNSTRING y INTO x POINTER invalid-ptr-7
           .
])

# Note: the following checks (per COBOL standard) added with [r3678] are 4.x only:
# prog.cob:30: error: 'invalid-ptr' is too small to contain the number 10 (one plus the size of 'x')
# prog.cob:42: error: 'invalid-ptr' is too small to contain the number 10 (one plus the size of 'y')

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:31: error: POINTER item 'invalid-ptr-2' must be an integer
prog.cob:32: error: POINTER item 'invalid-ptr-3' must be an integer
prog.cob:33: error: POINTER item 'invalid-ptr-4' may not have PICTURE with P in it
prog.cob:34: error: POINTER item 'invalid-ptr-5' must be an integer
prog.cob:35: error: POINTER item 'invalid-ptr-6' must be an integer
prog.cob:36: error: 'invalid-ptr-7' is not an elementary item
prog.cob:43: error: POINTER item 'invalid-ptr-2' must be an integer
prog.cob:44: error: POINTER item 'invalid-ptr-3' must be an integer
prog.cob:45: error: POINTER item 'invalid-ptr-4' may not have PICTURE with P in it
prog.cob:46: error: POINTER item 'invalid-ptr-5' must be an integer
prog.cob:47: error: POINTER item 'invalid-ptr-6' must be an integer
prog.cob:48: error: 'invalid-ptr-7' is not an elementary item
])
AT_CLEANUP


AT_SETUP([STRING with non-DISPLAY])
AT_KEYWORDS([Initialize])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  I-X        PIC  9(9) COMP-X VALUE 6.
       01  I-B        PIC  9(9) BINARY VALUE 6.
       01  I-P        PIC  9(9) COMP-3 VALUE 6.
       01  I-D        PIC  9(9) VALUE 6.
       01  I-F        COMP-1 VALUE 6.
       01  TSTWRK   PIC X(48).

       PROCEDURE DIVISION.
       MAIN-10.
           STRING " ID:" I-D 
               DELIMITED BY SIZE INTO TSTWRK.
           STRING " IX:" I-X " IB:" I-B 
                  " ID:" I-D 
                  " IP:" I-P " IF:" I-F 
               DELIMITED BY SIZE INTO TSTWRK.
           STOP RUN.
])

AT_CHECK([$COMPILE -x -std=mf -debug -Wall prog.cob ], [1], [],
[prog.cob: in paragraph 'MAIN-10':
prog.cob:19: error: STRING item 'I-X' must be USAGE DISPLAY or NATIONAL
prog.cob:19: error: STRING item 'I-B' must be USAGE DISPLAY or NATIONAL
prog.cob:21: error: STRING item 'I-P' must be USAGE DISPLAY or NATIONAL
prog.cob:21: error: STRING item 'I-F' must be USAGE DISPLAY or NATIONAL
])

AT_CLEANUP


AT_SETUP([UNSTRING COUNT clause])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  valid-1       PIC 9.
       01  valid-2       BINARY-LONG.
       01  valid-3       PIC 99 COMP-3.

       01  invalid-1     PIC 99V99.
       01  invalid-2     FLOAT-LONG.
       01  invalid-3     PIC 99PP.
       01  invalid-4     PIC VPP99.
       01  invalid-5     PIC X(30).
           88  invalid-6 VALUE "abc".

       01  x             PIC X(9).
       01  y             PIC X(9).

       PROCEDURE       DIVISION.
           UNSTRING x INTO y COUNT valid-1
           UNSTRING x INTO y COUNT valid-2
           UNSTRING x INTO y COUNT valid-3

           UNSTRING x INTO y COUNT invalid-1
           UNSTRING x INTO y COUNT invalid-2
           UNSTRING x INTO y COUNT invalid-3
           UNSTRING x INTO y COUNT invalid-4
           UNSTRING x INTO y COUNT invalid-5
           UNSTRING x INTO y COUNT invalid-6
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:26: error: COUNT item 'invalid-1' must be an integer
prog.cob:27: error: COUNT item 'invalid-2' must be an integer
prog.cob:28: error: COUNT item 'invalid-3' may not have PICTURE with P in it
prog.cob:29: error: COUNT item 'invalid-4' must be an integer
prog.cob:30: error: COUNT item 'invalid-5' must be an integer
prog.cob:31: error: condition-name not allowed here: 'invalid-6'
])
AT_CLEANUP


AT_SETUP([use of program-prototype-names])
AT_KEYWORDS([misc prototype prototypes])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       ENVIRONMENT     DIVISION.
       CONFIGURATION   SECTION.
       REPOSITORY.
           PROGRAM test-prog
           .
       PROCEDURE       DIVISION.
           CALL test-prog
           CANCEL test-prog
           .
])

AT_CHECK([$COMPILE_ONLY -fprogram-prototypes=warning prog.cob], [0], [],
[prog.cob:9: warning: PROGRAM phrase used
prog.cob:8: warning: no definition/prototype seen for PROGRAM 'test-prog'
prog.cob:11: warning: CALL/CANCEL with program-prototype-name used
prog.cob:12: warning: CALL/CANCEL with program-prototype-name used
])
AT_CLEANUP


AT_SETUP([checking prototypes and definitions match])
AT_KEYWORDS([misc prototype])

AT_XFAIL_IF([true])
# patch #32 was not fully included and the current implementation
# needs updating

AT_DATA([prog.cob], [
       *> Prototype and definition have different signatures.
       IDENTIFICATION DIVISION.
       FUNCTION-ID. invalid-1 PROTOTYPE.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER. x.
       SPECIAL-NAMES.
           DECIMAL-POINT COMMA
           CURRENCY SIGN "F"
           .
       DATA DIVISION.
       LINKAGE SECTION.
       01  x.
           03  x1 PIC X(15).
           03  x2 PIC X(15) JUST.
       01  y PIC +9(30) BLANK ZERO.

       PROCEDURE DIVISION USING x returning y.
       END FUNCTION invalid-1.

       *> Prototype and definition have different signatures.
       IDENTIFICATION DIVISION.
       PROGRAM-ID. invalid-2 PROTOTYPE.
       DATA DIVISION.
       LINKAGE SECTION.
       01  x PIC X.
       PROCEDURE DIVISION USING x.
       END PROGRAM invalid-2.

       *> Prototype and definition have matching signatures.
       IDENTIFICATION DIVISION.
       FUNCTION-ID. valid-1 PROTOTYPE.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT COMMA
           .
       DATA DIVISION.
       LINKAGE SECTION.
       01  ret PIC 999V99.

       PROCEDURE DIVISION RETURNING ret.
       END FUNCTION valid-1.


       IDENTIFICATION DIVISION.
       PROGRAM-ID. blahblah AS "invalid-1".

       DATA DIVISION.
       LINKAGE SECTION.
       01  a.
           03  a-1 PIC X(15) JUST.
           03  a-2 PIC X(15).
       01  b PIC S9(10) SIGN LEADING.

       PROCEDURE DIVISION USING a RETURNING b.
           DISPLAY "yes"
           .
       END PROGRAM blahblah.


       IDENTIFICATION DIVISION.
       PROGRAM-ID. invalid-2.

       DATA DIVISION.
       LINKAGE SECTION.
       01  ret PIC X.

       PROCEDURE DIVISION RETURNING ret.
           MOVE "x" TO ret
           .
       END PROGRAM invalid-2.

       IDENTIFICATION DIVISION.
       FUNCTION-ID. valid-1.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT COMMA
           .
       DATA DIVISION.
       LINKAGE SECTION.
       01  ret PIC 999V99.

       PROCEDURE DIVISION RETURNING ret.
           MOVE 1,5 TO ret
           .
       END FUNCTION valid-1.

       *> Prototypes must be at start of compilation group.
       IDENTIFICATION DIVISION.
       PROGRAM-ID. invalid-3.

       DATA DIVISION.
       LINKAGE SECTION.
       01  x PIC X(10).

       PROCEDURE DIVISION USING x.
       END PROGRAM invalid-3.

       IDENTIFICATION DIVISION.
       PROGRAM-ID. invalid-3 IS PROTOTYPE.

       DATA DIVISION.
       LINKAGE SECTION.
       01  x PIC X(10).

       PROCEDURE DIVISION USING x.
       END PROGRAM invalid-3.
])

AT_CHECK([$COMPILE_ONLY -Wno-unfinished -Wno-pending prog.cob], [1], [],
[prog.cob:60: warning: prototype and definition of 'invalid-1' do not match
prog.cob:60: note: definition is a program but the prototype is a function
prog.cob:60: note: DECIMAL-POINT IS COMMA clauses differ
prog.cob:60: note: CURRENCY clauses differ
prog.cob:60: note: parameters #1 ('a-1' in the definition and 'x1' in the prototype) differ
prog.cob:60: note: returning items ('b' in the definition and 'y' in the prototype) differ
prog.cob:73: warning: prototype and definition of 'invalid-2' do not match
prog.cob:73: note: number of parameters differ
prog.cob:73: note: definition has a RETURNING item but protoype does not
prog.cob:106: error: prototypes must be come before any program/function definitions
])
AT_CLEANUP


AT_SETUP([invalid INSPECT/TRANSFORM operands])
AT_KEYWORDS([misc INSPECT TRANSFORM])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT f ASSIGN "A".

       DATA            DIVISION.
       FILE            SECTION.
       FD  f.
       01  f-rec PIC X.

       WORKING-STORAGE SECTION.
       01  not-display PIC 9(5) COMP.
       01  not-a-num   PIC X(5).

       PROCEDURE       DIVISION.
           INSPECT f TALLYING not-a-num FOR ALL 3
               REPLACING FIRST "abcde" BY not-display
           TRANSFORM f FROM 3 TO 2
           TRANSFORM function udf(f-rec) FROM SPACE TO ZERO
           TRANSFORM "yada" FROM SPACE TO ZERO
           INSPECT function trim(f-rec)
               TALLYING not-display FOR ALL SPACES *> valid with func
               REPLACING FIRST ZERO BY SPACE       *> not valid
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:20: error: 'f' is not a field
prog.cob:20: error: 'not-a-num' is not numeric
prog.cob:20: error: 3 is not an alphanumeric literal
prog.cob:20: error: invalid target for TALLYING
prog.cob:21: error: 'not-display' is not USAGE DISPLAY
prog.cob:20: error: REPLACING operands differ in size
prog.cob:20: error: invalid target for REPLACING
prog.cob:22: error: 'f' is not a field
prog.cob:22: error: 3 is not an alphanumeric literal
prog.cob:22: error: 2 is not an alphanumeric literal
prog.cob:22: error: invalid target for TRANSFORM
prog.cob:23: error: syntax error, unexpected intrinsic function name, expecting Identifier
prog.cob:24: error: syntax error, unexpected Literal, expecting Identifier
prog.cob:25: error: invalid target for REPLACING
])
AT_CLEANUP


AT_SETUP([SIGN clause checks])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  valid-1     SIGN TRAILING.
           03  x       PIC S999.
           03  y       PIC S999.
       01  valid-2     PIC S99.

       01  invalid-1   PIC 99 SIGN LEADING.
       01  invalid-2   PIC S99 SIGN TRAILING, USAGE BINARY.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:12: error: elementary items with SIGN clause must have S in PICTURE
prog.cob:13: error: elementary items with SIGN clause must be USAGE DISPLAY or NATIONAL
])
AT_CLEANUP


AT_SETUP([conflicting entry conventions])
AT_KEYWORDS([misc ENTRY-CONVENTION CALL-CONVENTION LINKAGE])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.
       OPTIONS.
           ENTRY-CONVENTION COBOL.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           CALL-CONVENTION 0 IS EXTERN.

       PROCEDURE     DIVISION EXTERN.
           CONTINUE
           .
])
AT_CHECK([$COMPILE_ONLY prog.cob], [0], [],
[prog.cob:11: warning: overriding convention specified in ENTRY-CONVENTION
])

AT_DATA([prog2.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog2.
       OPTIONS.
           ENTRY-CONVENTION COBOL.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.

       PROCEDURE     DIVISION WITH C LINKAGE.
           CONTINUE
           .
])
AT_CHECK([$COMPILE_ONLY prog2.cob], [0], [],
[prog2.cob:9: warning: overriding convention specified in ENTRY-CONVENTION
])

AT_DATA([prog3.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog3.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           CALL-CONVENTION 0 IS EXTERN.

       PROCEDURE     DIVISION
           EXTERN
           WITH C LINKAGE.
           CONTINUE
       ENTRY 'ANOTHERSTATEMENT'.
           CONTINUE
       ENTRY EXTERN 'ANOTHERSTATEMENT2'.
           CONTINUE
       ENTRY 'ANOTHERSTATEMENT3' WITH C LINKAGE.
           CONTINUE
       ENTRY
           EXTERN
           'ANOTHERSTATEMENT4'
           WITH C LINKAGE.
           CONTINUE
           .
])
AT_CHECK([$COMPILE_ONLY prog3.cob], [1], [],
[prog3.cob:11: error: CALL-CONVENTION and WITH LINKAGE are mutually exclusive
prog3.cob:22: error: CALL-CONVENTION and WITH LINKAGE are mutually exclusive
])
AT_CLEANUP


AT_SETUP([conflicting call conventions])
AT_KEYWORDS([misc CALL-CONVENTION LINKAGE])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.
       PROCEDURE     DIVISION.
           CALL EXTERN 'callee'.
           CALL 'callee' WITH C LINKAGE.
           CALL
              EXTERN
              'callee'
              WITH C LINKAGE
              .
           GOBACK.
])
AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:10: error: CALL-CONVENTION and WITH LINKAGE are mutually exclusive
])
# GOBACK does not belong to COBOL85 reserved words; the last line is
# therefore an empty paragraph that does not start in Area A
AT_CHECK([$COMPILE_ONLY -std=cobol85 -freserved=EXTERN,C prog.cob], [1], [],
[prog.cob:5: error: CALL-/ENTRY-CONVENTION does not conform to COBOL 85
prog.cob:6: error: WITH ... LINKAGE does not conform to COBOL 85
prog.cob:8: error: CALL-/ENTRY-CONVENTION does not conform to COBOL 85
prog.cob:10: error: WITH ... LINKAGE does not conform to COBOL 85
prog.cob:10: error: CALL-CONVENTION and WITH LINKAGE are mutually exclusive
prog.cob:12: error: 'GOBACK' should start in Area A
])
AT_CLEANUP


AT_SETUP([dangling LINKAGE items])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.
       DATA DIVISION.
       LINKAGE SECTION.
      * constants may occur anywhere but don't belong to LINKAGE
       78 NSIZE VALUE 1.
      *
      * two variables in USING
       77 A PIC X.
       01 B.
          03 B1 PIC X.
          03 B2 PIC 9(NSIZE).
      * variable not referenced anywhere - no warning
       77 C PIC X.
      * variable referenced by its REDEFINE
       01 D PIC XX.
       01 filler redefines D.
          03 D1 PIC X.
          03 D2 PIC 9(NSIZE).
      * variable referenced by its second REDEFINE
       01 E PIC XX.
       01 filler redefines E.
          03 Ea1 PIC X.
          03 Ea2 PIC 9(NSIZE).
       01 filler redefines E.
          03 Eb1 PIC X.
          03 Eb2 PIC 9(NSIZE).
      * variable referenced by its child
       01 F.
          03 F1 PIC X.
          03 F2 PIC 9(NSIZE).
      * variable referenced by level 88 (a validation entry)
       01 G.
          03 filler  PIC X.
             88 g-val-a value 'a'.
             88 g-val-b value 'b'.
       PROCEDURE       DIVISION USING A B.

           IF D2 OMITTED OR Eb2 OMITTED or F2 OMITTED
             set g-val-b to true
           END-IF
           .
])
AT_CHECK([$COMPILE_ONLY -Wlinkage prog.cob], [0], [],
[prog.cob:17: warning: LINKAGE item 'D' is not a PROCEDURE USING parameter
prog.cob:22: warning: LINKAGE item 'E' is not a PROCEDURE USING parameter
prog.cob:30: warning: LINKAGE item 'F' is not a PROCEDURE USING parameter
prog.cob:34: warning: LINKAGE item 'G' is not a PROCEDURE USING parameter
])
AT_CLEANUP


AT_SETUP([duplicate PROCEDURE DIVISION/ENTRY USING items])
AT_KEYWORDS([misc DIVISION ENTRY REFERENCE])
# see bug #635

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.
       DATA DIVISION.
       LINKAGE SECTION.
       01  p                    PIC 9.
       01  o                    PIC X(5).
       PROCEDURE DIVISION USING p p o.
       ENTRY "sub" USING o p o.
])
AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:8: error: duplicate USING BY REFERENCE item 'p'
prog.cob:9: error: duplicate USING BY REFERENCE item 'o'
])
AT_CLEANUP


AT_SETUP([duplicate CALL USING BY REFERENCE items])
AT_KEYWORDS([misc])
# see bug #635

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  p                    PIC 99.
       01  o                    PIC X(5).
       PROCEDURE DIVISION.
          CALL "prog2"  USING p p o 
                              p.
          CALL "prog3"  USING BY REFERENCE p
                              BY CONTENT   p o
                              BY REFERENCE p o(2:).
])
AT_CHECK([$COMPILE_ONLY prog.cob], [0], [],
[prog.cob:9: warning: duplicate USING BY REFERENCE item 'p'
prog.cob:10: warning: duplicate USING BY REFERENCE item 'p'
prog.cob:13: warning: duplicate USING BY REFERENCE item 'p'
])
AT_CLEANUP


AT_SETUP([ADD / SUBTRACT TABLE])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  tab1.
           03  tab1-entry    OCCURS 5 PIC S999.
       01  tab2.
           03  tab2-entry    OCCURS 7 PIC S99.
           03  tab2b-entry   OCCURS 7.
               05  x         PIC S99.
       01  tab3.
           03  sub-tab-3  OCCURS 2.
               05 tab3-entry OCCURS 5 PIC S999.

       PROCEDURE       DIVISION.
           ADD      TABLE tab1-entry TO   tab2-entry.
           SUBTRACT TABLE tab2-entry FROM tab1-entry.
           ADD      TABLE tab1-entry TO   tab3-entry (1).
           SUBTRACT TABLE tab2-entry FROM tab3-entry (2).
           ADD      TABLE tab1-entry TO   x.
           SUBTRACT TABLE x          FROM tab1-entry.
           ADD      TABLE tab1-entry TO   tab2b-entry.
           GOBACK.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:18: warning: ADD TABLE is not implemented
prog.cob:19: warning: SUBTRACT TABLE is not implemented
prog.cob:20: warning: ADD TABLE is not implemented
prog.cob:21: warning: SUBTRACT TABLE is not implemented
prog.cob:22: warning: ADD TABLE is not implemented
prog.cob:23: warning: SUBTRACT TABLE is not implemented
prog.cob:24: warning: ADD TABLE is not implemented
prog.cob:24: error: 'tab2b-entry' is not numeric
])
AT_CLEANUP


AT_SETUP([USE FOR DEBUGGING invalid ref-mod / subscripts])
AT_KEYWORDS([misc])

# COBOL85 3.2.3 Syntax Rules 10+12 - "no subscripts. not reference-modified"
AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       ENVIRONMENT     DIVISION.
       CONFIGURATION   SECTION.
       SOURCE-COMPUTER.
            whatever   WITH DEBUGGING MODE.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  i           PIC 9.
       01  FILLER.
           03 x OCCURS 2 PIC 9.

       PROCEDURE DIVISION.
       DECLARATIVES.
       test-DEBUG SECTION.
           USE FOR DEBUGGING ON ALL OF I (1:1).
           DISPLAY DEBUG-LINE.
       test-DEBUGo SECTION.
           USE FOR DEBUGGING ON ALL OF X (1).
           DISPLAY DEBUG-LINE.
       END DECLARATIVES.

       MAIN SECTION.
           MOVE 1 TO i, x(2)
           STOP RUN.
])


AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob: in section 'test-DEBUG':
prog.cob:19: error: DEBUGGING target may not be reference modified
prog.cob: in section 'test-DEBUGo':
prog.cob:22: error: DEBUGGING target may not be subscripted
])

AT_CLEANUP


AT_SETUP([USE FOR DEBUGGING duplicate targets])
AT_KEYWORDS([misc])

# TODO: add cd-names and file-names here

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       ENVIRONMENT     DIVISION.
       CONFIGURATION   SECTION.
       SOURCE-COMPUTER.
            whatever   WITH DEBUGGING MODE.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  i           PIC 9.
       01  j           PIC 9.

       PROCEDURE DIVISION.
       DECLARATIVES.
       test-DEBUG SECTION.
           USE FOR DEBUGGING ON MAIN MAIN.
           DISPLAY DEBUG-LINE.
       test-DEBUG2 SECTION.
           USE FOR DEBUGGING ON ALL I
                                ALL REFERENCES OF J
                                ALL PROCEDURES.
           DISPLAY DEBUG-LINE.
       test-DEBUG3 SECTION.
           USE FOR DEBUGGING ON ALL PROCEDURES
                                J
                                ALL OF I.
           DISPLAY DEBUG-LINE.
       END DECLARATIVES.

       MAIN SECTION.
           MOVE 1 TO i
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob: in section 'test-DEBUG3':
prog.cob:26: error: duplicate USE DEBUGGING ON ALL PROCEDURES
prog.cob:27: error: duplicate DEBUGGING target: 'j'
prog.cob:28: error: duplicate DEBUGGING target: 'i'
prog.cob: in section 'test-DEBUG':
prog.cob:18: error: DEBUGGING target already specified with ALL PROCEDURES: 'MAIN'
prog.cob:18: error: duplicate DEBUGGING target: 'MAIN'
])
AT_CLEANUP


AT_SETUP([USE FOR DEBUGGING implicit statements])
AT_KEYWORDS([misc])

# see bug #693, WHEN created an implicit statement before

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    TESTING.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT TSTFIL1 ASSIGN TO "TSTFIL1"
               ORGANIZATION LINE SEQUENTIAL.
           SELECT TSTFIL2 ASSIGN TO "TSTFIL2"
               ORGANIZATION LINE SEQUENTIAL.

       DATA DIVISION.
       FILE SECTION.
       FD TSTFIL1.
       01 TSTREC1              PIC X(256).
       FD TSTFIL2.
       01 TSTREC2              PIC X(256).
       WORKING-STORAGE SECTION.
       01 OODB-RESULT                   PIC X(07).

       PROCEDURE DIVISION.
       DECLARATIVES.
       MY-TEST SECTION.
           USE FOR DEBUGGING ON ALL REFERENCES OF OODB-RESULT.
       I-O-TEST-OODB-RESULT.
           EVALUATE OODB-RESULT
           WHEN SPACES
               DISPLAY "LINE 1"
           WHEN OTHER
               DISPLAY "LINE 2" END-DISPLAY
           END-EVALUATE.
           CLOSE TSTFIL1, TSTFIL2.
       END DECLARATIVES.

       MAIN SECTION.
       000-BEGIN.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])
AT_CLEANUP


AT_SETUP([USE FOR DEBUGGING syntax-checks (1)])
AT_KEYWORDS([misc DEBUG-ITEM DEBUG-NAME DEBUG-LINE DEBUG-CONTENTS
DEBUG-SUB-1 DEBUG-SUB-2 DEBUG-SUB-3])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       ENVIRONMENT     DIVISION.
       CONFIGURATION   SECTION.
       SOURCE-COMPUTER.
            whatever   WITH DEBUGGING MODE.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  i           PIC 9.

       PROCEDURE DIVISION.
       DECLARATIVES.
       test-DEBUG SECTION.
           USE FOR DEBUGGING ON ALL REFERENCES OF I
                                MAIN.
           DISPLAY DEBUG-ITEM.
           DISPLAY DEBUG-NAME " AT " DEBUG-LINE " WITH " DEBUG-CONTENTS.
           DISPLAY DEBUG-SUB-1 DEBUG-SUB-2 DEBUG-SUB-3.
       END DECLARATIVES.

       MAIN SECTION.
           MOVE 1 TO i
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY -std=cobol85 prog.cob], [0], [],
[prog.cob: in section 'test-DEBUG':
prog.cob:18: warning: USE FOR DEBUGGING is obsolete in COBOL 85
])
AT_CHECK([$COMPILE_ONLY -std=acu-strict prog.cob], [1], [],
[prog.cob: in section 'test-DEBUG':
prog.cob:17: error: 'REFERENCES IN i' is not defined
prog.cob:18: error: USE FOR DEBUGGING does not conform to ACUCOBOL-GT
])
AT_CHECK([$COMPILE_ONLY -std=acu-strict -fuse-for-debugging=ok -freserved=REFERENCES prog.cob], [0], [], [])

# verify that DEBUG-ITEM and friends can only be used when DEBUGGING is actually active
AT_DATA([prog2.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog2.

       ENVIRONMENT     DIVISION.
       CONFIGURATION   SECTION.

       PROCEDURE DIVISION.
       MAIN.
           DISPLAY DEBUG-ITEM.
           DISPLAY DEBUG-NAME " AT " DEBUG-LINE " WITH " DEBUG-CONTENTS.
           DISPLAY DEBUG-SUB-1 DEBUG-SUB-2 DEBUG-SUB-3.
           STOP RUN.
])
AT_CHECK([$COMPILE_ONLY prog2.cob], [1], [],
[prog2.cob: in paragraph 'MAIN':
prog2.cob:10: error: 'DEBUG-ITEM' is not defined
prog2.cob:11: error: 'DEBUG-NAME' is not defined
prog2.cob:11: error: 'DEBUG-LINE' is not defined
prog2.cob:11: error: 'DEBUG-CONTENTS' is not defined
prog2.cob:12: error: 'DEBUG-SUB-1' is not defined
prog2.cob:12: error: 'DEBUG-SUB-2' is not defined
prog2.cob:12: error: 'DEBUG-SUB-3' is not defined
])
# HACK to cater for the reserved words hack...
#AT_CHECK([$COMPILE_ONLY -std=cobol85 prog2.cob], [1], [],
AT_CHECK([$COMPILE_ONLY -std=cobol85 prog2.cob \
-freserved="debug-item,debug-name,debug-line,debug-contents" \
-freserved="debug-sub-1,debug-sub-2,debug-sub-3" \
], [1], [],
[prog2.cob: in paragraph 'MAIN':
prog2.cob:10: error: 'DEBUG-ITEM' is not defined
prog2.cob:11: error: 'DEBUG-NAME' is a reserved word, but isn't supported
prog2.cob:11: error: 'DEBUG-NAME' cannot be used here
prog2.cob:11: error: 'DEBUG-LINE' is a reserved word, but isn't supported
prog2.cob:11: error: 'DEBUG-LINE' cannot be used here
prog2.cob:11: error: 'DEBUG-CONTENTS' is a reserved word, but isn't supported
prog2.cob:11: error: 'DEBUG-CONTENTS' cannot be used here
prog2.cob:12: error: 'DEBUG-SUB-1' is a reserved word, but isn't supported
prog2.cob:12: error: 'DEBUG-SUB-2' is a reserved word, but isn't supported
prog2.cob:12: error: 'DEBUG-SUB-1' cannot be used here
prog2.cob:12: error: 'DEBUG-SUB-3' is a reserved word, but isn't supported
prog2.cob:12: error: 'DEBUG-SUB-2' cannot be used here
prog2.cob:12: error: 'DEBUG-SUB-3' cannot be used here
])
AT_CLEANUP


AT_SETUP([USE FOR DEBUGGING syntax-checks (2)])
AT_KEYWORDS([misc DEBUG-ITEM DEBUG-LINE])

# TODO: still need tests/checks (3.2.3 Syntax Rules 9+11):
# 09 Identifier must not reference any data item defined in the Report
# Section except sum counters.
# 11 References to the special register DEBUG-ITEM are restricted to
# references from within a debugging section.

AT_XFAIL_IF([true])
# we currently fail to detect references into DECLARATIVES and
# references to debugging-procedures other than PERFORM --> both in prog2

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       ENVIRONMENT     DIVISION.
       CONFIGURATION   SECTION.
       SOURCE-COMPUTER.
            whatever   WITH DEBUGGING MODE.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  i           PIC 9.
       01  j           PIC 9.

       PROCEDURE DIVISION.
       DECLARATIVES.
       test-DEBUG SECTION.
           USE FOR DEBUGGING ON ALL REFERENCES OF I
                                TEST-debug
                                MAIN.
           DISPLAY DEBUG-LINE.
           PERFORM MAIN. PERFORM TEST-DEBUG2. GO TO TEST-DEBUG2.
       test-DEBUG2 SECTION.
           USE FOR DEBUGGING ON ALL OF I
                                TEST-debug.
           DISPLAY DEBUG-LINE.
       END DECLARATIVES.

       MAIN SECTION.
           MOVE 1 TO i, j
           PERFORM TesT-DebuG
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob: in section 'test-DEBUG':
prog.cob:22: warning: 'MAIN' is not in DECLARATIVES
prog.cob:22: error: 'TEST-DEBUG2' may only be referenced with PERFORM
prog.cob:19: error: DEBUGGING target invalid: 'test-DEBUG'
prog.cob: in section 'TEST-DEBUG2':
prog.cob:24: error: duplicate DEBUGGING target: 'i'
prog.cob:25: error: DEBUGGING target invalid: 'test-DEBUG'
prog.cob: in section 'MAIN':
prog.cob:31: warning: 'test-DEBUG' is in DECLARATIVES
])
AT_CHECK([$COMPILE_ONLY -std=cobol85 prog.cob], [1], [],
[prog.cob: in section 'test-DEBUG':
prog.cob:20: warning: USE FOR DEBUGGING is obsolete in COBOL 85
prog.cob:22: error: 'MAIN' is not in DECLARATIVES
prog.cob:22: error: 'TEST-DEBUG2' may only be referenced with PERFORM
prog.cob:19: error: DEBUGGING target invalid: 'test-DEBUG'
prog.cob: in section 'TEST-DEBUG2':
prog.cob:24: error: duplicate DEBUGGING target: 'i'
prog.cob:25: error: DEBUGGING target invalid: 'test-DEBUG'
prog.cob: in section 'MAIN':
prog.cob:31: error: 'test-DEBUG' is in DECLARATIVES
])
AT_CLEANUP


AT_SETUP([Empty PERFORM with DEBUGGING MODE])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       ENVIRONMENT     DIVISION.
       CONFIGURATION   SECTION.
       SOURCE-COMPUTER.
            whatever   WITH DEBUGGING MODE.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  i           PIC 9.

       PROCEDURE DIVISION.
           PERFORM VARYING i FROM 1 BY 1
                   UNTIL i = 5
           END-PERFORM
           .
])

AT_CHECK([$COMPILE_ONLY -fmissing-statement=ok prog.cob], [0], [], [])
AT_CLEANUP


# TODO: add more here
AT_SETUP([whitespace handling])
AT_KEYWORDS([misc])

AT_DATA([prog1.cob], [
       IDENTIFICATION
           DIVISION
           .
           author.
           tester.
       PROGRAM-ID
           .
           prog1
           .
           REMARKS;. Should work.,,

       ENVIRONMENT
           DIVISION
           .
       CONFIGURATION
           SECTION
           .
       SOURCE-COMPUTER
           .
             whatever
           WITH
           DEBUGGING
           MODE
           .

      DDATA
      D   DIVISION
      D   .
       WORKING-STORAGE
          SECTION
          .
       01
           i
           PIC
           9
           .

       PROCEDURE
           DIVISION
           .
       >> SOURCE FORMAT IS FREE
IF
i
GREATER
THAN
OR
EQUAL

TO

5

THEN

GOBACK.
           STOP
           RUN
           .
])

AT_DATA([prog2.cob], [
       ID,;DIVISION;,.,;
           author,.;tester.
       PROGRAM-ID,;.;,prog2;,.;,
           REMARKS;. Should work.,,
       ENVIRONMENT,;DIVISION;,.,;
       CONFIGURATION;;,,SECTION;;,,.
       SOURCE-COMPUTER;;.,,whatever;;DEBUGGING,,MODE;,.

      DDATA;DIVISION,.
      DWORKING-STORAGE,SECTION;.
       01;i,PIC;9;.

       PROCEDURE;DIVISION,.;
           IF;,i;,GREATER,;THAN;,OR,;EQUAL ,;TO;;5;
           ,,,THEN;;;GOBACK.
           STOP,RUN;.,
])

AT_CHECK([$COMPILE_ONLY -Wno-obsolete prog1.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY -Wno-obsolete prog2.cob], [0], [], [])
AT_CLEANUP


AT_SETUP([STOP identifier])
AT_KEYWORDS([misc extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  x           PIC 9(5) VALUE 1.
       01  y           CONSTANT "ab".

       PROCEDURE       DIVISION.
           STOP x
           STOP y
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [],
[prog.cob:12: warning: STOP identifier is obsolete in GnuCOBOL
prog.cob:12: warning: STOP literal is obsolete in GnuCOBOL
])
AT_CHECK([$COMPILE_ONLY -fstop-identifier=ok -fstop-literal=ok prog.cob], [0], [], [])
AT_CLEANUP


AT_SETUP([01 CONSTANT])
AT_KEYWORDS([mirc reserved])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  NUM2      CONSTANT 3.
       01  CON3      CONSTANT ((1 + 2) * NUM2 - 4.
       01  CON4      CONSTANT (1 + 2) * NUM2 - 4).
       01  CON5      CONSTANT (1 + 2) // NUM2.
       01  CON6      CONSTANT (1 + 2 + 3 + (4)) / (NUM2).
      *
       PROCEDURE DIVISION.
       MAIN.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:7: error: missing right parenthesis
prog.cob:8: error: missing left parenthesis
prog.cob:9: error: '/' operator misplaced
])

AT_CHECK([$COMPILE_ONLY -std=mf-strict prog.cob], [1], [],
[prog.cob:6: error: syntax error, unexpected Identifier
prog.cob:7: error: syntax error, unexpected Identifier
prog.cob:8: error: syntax error, unexpected Identifier
prog.cob:9: error: syntax error, unexpected Identifier
prog.cob:10: error: syntax error, unexpected Identifier
])

AT_CHECK([$COMPILE_ONLY -std=mf-strict -freserved=CONSTANT prog.cob], [1], [],
[prog.cob:6: error: 01 CONSTANT does not conform to Micro Focus COBOL
prog.cob:7: error: 01 CONSTANT does not conform to Micro Focus COBOL
prog.cob:7: error: syntax error, unexpected Identifier
])

AT_CHECK([$COMPILE_ONLY -std=mf prog.cob], [1], [],
[prog.cob:7: error: missing right parenthesis
prog.cob:8: error: missing left parenthesis
prog.cob:9: error: '/' operator misplaced
])

AT_CLEANUP


AT_SETUP([78 VALUE])
AT_KEYWORDS([CONSTANT])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       78  NUM2      VALUE   3.
       78  NEG1      VALUE   -1.
       78  CON3      VALUE   ((1 + 2) * NUM2 - 4.
       78  CON4      VALUE   (1 + 2) * NUM2 - 4).
       78  CON5      VALUE   (1 + 2) // NUM2.
       78  CON6      VALUE   (1 + 2 + 3 + (4)) / (NUM2).
      *
       PROCEDURE DIVISION.
       MAIN.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:8: error: missing right parenthesis
prog.cob:9: error: missing left parenthesis
prog.cob:10: error: '/' operator misplaced
])

AT_CHECK([$COMPILE_ONLY -std=ibm-strict prog.cob ], [1], [],
[prog.cob:6: error: 78 VALUE does not conform to IBM COBOL
prog.cob:7: error: 78 VALUE does not conform to IBM COBOL
prog.cob:8: error: 78 VALUE does not conform to IBM COBOL
prog.cob:8: error: missing right parenthesis
prog.cob:9: error: 78 VALUE does not conform to IBM COBOL
prog.cob:9: error: missing left parenthesis
prog.cob:10: error: 78 VALUE does not conform to IBM COBOL
prog.cob:10: error: '/' operator misplaced
prog.cob:11: error: 78 VALUE does not conform to IBM COBOL
])

AT_CHECK([$COMPILE_ONLY -std=ibm prog.cob], [1], [],
[prog.cob:8: error: missing right parenthesis
prog.cob:9: error: missing left parenthesis
prog.cob:10: error: '/' operator misplaced
])

AT_CLEANUP


AT_SETUP([level 78 NEXT / START OF])
AT_KEYWORDS([extensions constant length])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       78  POS0      VALUE NEXT.
       01  MYREC.
          05  FLD1   PIC 9(2).
          05  FLD2   PIC X(7).
             78  POS3    VALUE NEXT.
          05  FLD3   PIC X(2) OCCURS 5 TIMES.
             78  POS4    VALUE NEXT.
          05  FLD4   PIC X(4).
             78  POS-NEXT   VALUE NEXT.
       77  MYREC2 PIC X.
       01  MYREC3 EXTERNAL.
          05  FLD5   PIC X(4).
             78  POS5    VALUE NEXT.
          05  FLD6   PIC X(4).
       01  PICX      PIC XXX VALUE 'Abc'.
       78  HUN       VALUE 10 * (10 + LENGTH OF PICX) + 12.35-2+3.
       78  HUN2      VALUE HUN * (10 + LENGTH
                                       OF PICX) -4.
       78  DIV1      VALUE 100 / 3.
       78  STRT4     VALUE START OF FLD4.
       LINKAGE SECTION.
       01  XMYREC.
          05  XFLD1   PIC 9(2).
          05  XFLD2   PIC X(7).
             78  XPOS3    VALUE NEXT.
          05  XFLD3   PIC X(2) OCCURS 5 TIMES.
             78  XPOS4    VALUE NEXT.
          05  XFLD4   PIC X(4).
          05  XFLD5   PIC X(4).
       78  XSTRT4     VALUE START OF XFLD4.
      *
       PROCEDURE DIVISION.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:6: error: VALUE of 'POS0': NEXT target is invalid
prog.cob:6: error: no previous data-item found
prog.cob:10: error: VALUE of 'POS3': NEXT target is invalid
prog.cob:10: error: target must be in FILE SECTION or LINKAGE SECTION or have the EXTERNAL clause
prog.cob:12: error: VALUE of 'POS4': NEXT target is invalid
prog.cob:12: error: target must be in FILE SECTION or LINKAGE SECTION or have the EXTERNAL clause
prog.cob:14: error: VALUE of 'POS-NEXT': NEXT target is invalid
prog.cob:14: error: target must be in FILE SECTION or LINKAGE SECTION or have the EXTERNAL clause
prog.cob:25: error: VALUE of 'STRT4': START OF target 'FLD4' is invalid
prog.cob:25: error: target must be in FILE SECTION or LINKAGE SECTION or have the EXTERNAL clause
])

AT_CLEANUP


AT_SETUP([SYMBOLIC CONSTANT])
AT_KEYWORDS([misc SPECIAL-NAMES])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
       SYMBOLIC CONSTANT
         con-1  IS 1
         25156c   "25156c".
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  NUM2      PIC 9.
       01  SHORT-X   PIC X(5).
      *
       PROCEDURE DIVISION.
       MAIN.
           MOVE CON-1  TO NUM2.
           MOVE 25156C TO SHORT-X
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [],
[prog.cob: in paragraph 'MAIN':
prog.cob:18: warning: value size exceeds data size
prog.cob:18: note: value size is 6
prog.cob:13: note: 'SHORT-X' defined here as PIC X(5)
])

AT_CHECK([$COMPILE_ONLY -std=mf-strict prog.cob], [1], [],
[prog.cob:9: error: invalid SYMBOLIC clause
prog.cob:9: error: integer value expected
prog.cob: in paragraph 'MAIN':
prog.cob:17: error: 'con-1' is not defined
])

AT_CHECK([$COMPILE_ONLY -std=cobol2014 prog.cob], [1], [],
[prog.cob:9: error: SYMBOLIC CONSTANT does not conform to COBOL 2014
prog.cob: in paragraph 'MAIN':
prog.cob:18: warning: value size exceeds data size
prog.cob:18: note: value size is 6
prog.cob:13: note: 'SHORT-X' defined here as PIC X(5)
])

AT_CLEANUP


AT_SETUP([Constant Expressions (1)])
AT_KEYWORDS([condition expression refmod IF EVALUATE])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  var       PIC X(200).
       01  othervar  PIC X(115).
       01  A         PIC 9 VALUE 1.
       01  B         PIC 9 VALUE 2.
       01  C         PIC 9 VALUE 3.
       78  var-len   value 115.

       PROCEDURE DIVISION.

           IF var-len < 16
               move othervar (1:var-len - 8)
                 to var (17 - var-len:var-len - 8)
           ELSE
               move othervar to var
           END-IF

           IF (2 = 3)
               move othervar to var
           ELSE
              IF 1 = 1
                 move var to othervar
              ELSE
                 move othervar (1:var-len - 8)
                   to var (17 - var-len:var-len - 8)
                 IF 1 = 1
                    move var to othervar
                 END-IF
              END-IF
              move A to B
              IF 1 = 1
                IF 2 = 1
                 move othervar (1:var-len - 8)
                   to var (17 - var-len:var-len - 8)
           .

           PERFORM WITH TEST BEFORE UNTIL 1 = 3
               move othervar to var
           END-PERFORM

           PERFORM WITH TEST BEFORE UNTIL 1 = 1
               move othervar (1:var-len - 8)
                 to var (17 - var-len:var-len - 8)
           END-PERFORM

           PERFORM WITH TEST AFTER UNTIL 1 = 3
               move othervar to var
           END-PERFORM

           PERFORM WITH TEST AFTER UNTIL 1 = 1
               move othervar to var
           END-PERFORM

           EVALUATE TRUE
           WHEN  var-len < 16
               move othervar (1:var-len - 8)
                 to var (17 - var-len:var-len - 8)
           WHEN  var-len > 16
               move othervar to var
           WHEN  A = B
               move var      to othervar
           WHEN OTHER
               CONTINUE
           END-EVALUATE

           EVALUATE FALSE
           WHEN  var-len < 16
               move othervar (1:var-len - 9)
                 to var (16 - var-len:var-len - 9)
           WHEN  var-len > 16
               move othervar to var
           WHEN  A = B
               move var      to othervar
           WHEN OTHER
               CONTINUE
           END-EVALUATE.

           IF 15 = var-len
               move othervar to var.

           IF var-len = 15
               move var      to othervar.

           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -fdiagnostics-show-option prog.cob], [1], [],
[[prog.cob:15: warning: expression '115' LESS THAN '16' is always FALSE [-Wconstant-numlit-expression]
prog.cob:17: warning: offset of 'var' out of bounds: -98 [-Wignored-error]
prog.cob:22: warning: expression '2' EQUALS '3' is always FALSE [-Wconstant-numlit-expression]
prog.cob:25: warning: expression '1' EQUALS '1' is always TRUE [-Wconstant-numlit-expression]
prog.cob:29: warning: offset of 'var' out of bounds: -98 [-Wignored-error]
prog.cob:30: warning: expression '1' EQUALS '1' is always TRUE [-Wconstant-numlit-expression]
prog.cob:35: warning: expression '1' EQUALS '1' is always TRUE [-Wconstant-numlit-expression]
prog.cob:36: warning: expression '2' EQUALS '1' is always FALSE [-Wconstant-numlit-expression]
prog.cob:38: warning: offset of 'var' out of bounds: -98 [-Wignored-error]
prog.cob:41: warning: expression '1' EQUALS '3' is always FALSE [-Wconstant-numlit-expression]
prog.cob:41: warning: PERFORM FOREVER since UNTIL is always FALSE [-Wadditional]
prog.cob:45: warning: expression '1' EQUALS '1' is always TRUE [-Wconstant-numlit-expression]
prog.cob:45: warning: PERFORM NEVER since UNTIL is always TRUE [-Wadditional]
prog.cob:47: warning: offset of 'var' out of bounds: -98 [-Wignored-error]
prog.cob:50: warning: expression '1' EQUALS '3' is always FALSE [-Wconstant-numlit-expression]
prog.cob:50: warning: PERFORM FOREVER since UNTIL is always FALSE [-Wadditional]
prog.cob:54: warning: expression '1' EQUALS '1' is always TRUE [-Wconstant-numlit-expression]
prog.cob:54: warning: PERFORM ONCE since UNTIL is always TRUE [-Wadditional]
prog.cob:59: warning: expression '115' LESS THAN '16' is always FALSE [-Wconstant-numlit-expression]
prog.cob:61: warning: offset of 'var' out of bounds: -98 [-Wignored-error]
prog.cob:62: warning: expression '115' GREATER THAN '16' is always TRUE [-Wconstant-numlit-expression]
prog.cob:71: warning: expression '115' LESS THAN '16' is always FALSE [-Wconstant-numlit-expression]
prog.cob:73: error: offset of 'var' out of bounds: -99
prog.cob:74: warning: expression '115' GREATER THAN '16' is always TRUE [-Wconstant-numlit-expression]
prog.cob:82: warning: expression '15' EQUALS '115' is always FALSE [-Wconstant-numlit-expression]
prog.cob:85: warning: expression '115' EQUALS '15' is always FALSE [-Wconstant-numlit-expression]
]])

AT_CLEANUP


AT_SETUP([Constant Expressions (2)])
AT_KEYWORDS([condition expression unreachable 78])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       78  const1    value 115.
       01  const2    CONSTANT 200.
       78  const3    value const2.
       78  const4    value const2 + const1.
       77  othervar  PIC X(const1).
       01  var       PIC X(const2).

       PROCEDURE DIVISION.

           IF const1 = const2
           OR const2 = const1
           OR const3 = const4
           OR const4 = const3
              DISPLAY 'no way' END-DISPLAY
           END-IF

           EVALUATE const1
           WHEN  15
           WHEN 115
               display '1'
           WHEN  < 16
               move othervar (1:8)
                 to var (17:8)
           WHEN  > 16
               display othervar
      *> actually WHEN OTHER is also FALSE in this case (115 = 16),
      *> but this is too complex to check
           WHEN OTHER
               display othervar
           END-EVALUATE

           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob ], [0], [],
[prog.cob:15: warning: expression '115' EQUALS '200' is always FALSE
prog.cob:16: warning: expression '200' EQUALS '115' is always FALSE
prog.cob:17: warning: expression '200' EQUALS '315' is always FALSE
prog.cob:18: warning: expression '315' EQUALS '200' is always FALSE
prog.cob:26: warning: expression '115' LESS THAN '16' is always FALSE
prog.cob:29: warning: expression '115' GREATER THAN '16' is always TRUE
prog.cob:23: warning: expression '115' EQUALS '15' is always FALSE
prog.cob:24: warning: expression '115' EQUALS '115' is always TRUE
])

AT_CLEANUP


AT_SETUP([Constant Expressions (3)])
AT_KEYWORDS([condition expression refmod undefined])

# verify that we do ignore undefined errors where possible
AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  var       PIC X(200).
       78  var-len   value 115.

       PROCEDURE DIVISION.

           IF var-len < 16
               move spaces
                 to var (17 - var-len:var-len - 8)
           END-IF

           IF var-len < 16
              move notdefined to var
           END-IF

           IF var-len < 16
              perform notdefined
           END-IF

           IF var-len < 16
              if notdefined continue.

           STOP RUN.
])

# note: the last error message comes from program validation
#       and therefore cannot be raised earlier
AT_CHECK([$COMPILE_ONLY -fdiagnostics-show-option prog.cob], [0], [],
[[prog.cob:11: warning: expression '115' LESS THAN '16' is always FALSE [-Wconstant-numlit-expression]
prog.cob:13: warning: offset of 'var' out of bounds: -98 [-Wignored-error]
prog.cob:16: warning: expression '115' LESS THAN '16' is always FALSE [-Wconstant-numlit-expression]
prog.cob:17: warning: 'notdefined' is not defined [-Wignored-error]
prog.cob:20: warning: expression '115' LESS THAN '16' is always FALSE [-Wconstant-numlit-expression]
prog.cob:24: warning: expression '115' LESS THAN '16' is always FALSE [-Wconstant-numlit-expression]
]])

# verify that we do only skip an undefined error when it actually was reported
AT_DATA([prog2.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  var       PIC X(200).
       78  var-len   value 115.

       PROCEDURE DIVISION.
       
           IF var-len < 16
              move notdefined to var *> won't be seen with -Wno-ignore-error
           END-IF

       >> IF SKIP-FIRST-ERROR NOT DEFINED
      *> always reported here (if active) as that's the first error
           move notdefined to var    
       >> END-IF

           IF var-len < 16
              move notdefined to var      *> never here, because of the warning/error above
           END-IF
           
           move var        to notdefined   *> only here if not the skip was active

           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -fdiagnostics-show-option -Wno-constant-expression prog2.cob], [1], [],
[[prog2.cob:12: warning: 'notdefined' is not defined [-Wignored-error]
prog2.cob:17: error: 'notdefined' is not defined
]])
AT_CHECK([$COMPILE_ONLY -fdiagnostics-show-option -Wno-constant-expression -Wno-ignored-error prog2.cob], [1], [],
[[prog2.cob:17: error: 'notdefined' is not defined
]])
AT_CHECK([$COMPILE_ONLY -fdiagnostics-show-option -Wno-constant-expression -DSKIP-FIRST-ERROR prog2.cob], [1], [],
[[prog2.cob:12: warning: 'notdefined' is not defined [-Wignored-error]
prog2.cob:24: error: 'notdefined' is not defined
]])
AT_CHECK([$COMPILE_ONLY -fdiagnostics-show-option -Wno-constant-expression -Werror=ignored-error prog2.cob], [1], [],
[[prog2.cob:12: error: 'notdefined' is not defined [-Werror=ignored-error]
]])

AT_CLEANUP


AT_SETUP([Constant Expressions (4)])
AT_KEYWORDS([condition expression refmod])

# verify that we do not ignore parsing errors as
# these are likely to raise issues in codegen

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  var       PIC X(200).
       78  var-len   value 115.

       PROCEDURE DIVISION.

           IF var-len < 16
               move spaces
                 to var (17 - var-len:var-len - 8)
               IF IF.

           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -fdiagnostics-show-option prog.cob], [1], [],
[[prog.cob:11: warning: expression '115' LESS THAN '16' is always FALSE [-Wconstant-numlit-expression]
prog.cob:13: warning: offset of 'var' out of bounds: -98 [-Wignored-error]
prog.cob:14: error: syntax error, unexpected IF
]])

AT_CLEANUP


AT_SETUP([Constant Expressions (5)])
AT_KEYWORDS([condition expression unreachable])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  VAR       PIC X(200).
       01  OTHERVAR  PIC X(115).
       78  VAR-LEN   VALUE 115.

       PROCEDURE DIVISION.
       MAIN-10.
           MOVE "Peek a boo" TO VAR.
           EVALUATE TRUE
               ALSO FALSE
               ALSO TRUE
            WHEN    TRUE
               ALSO VAR-LEN > 16 AND VAR-LEN < 200
               ALSO TRUE
                  MOVE OTHERVAR (1 : VAR-LEN - 9)
                    TO VAR (16 - VAR-LEN : VAR-LEN - 9)
                  DISPLAY "A: Should NOT be executed"
            WHEN  TRUE
               ALSO VAR-LEN < 16
               ALSO TRUE
                  MOVE OTHERVAR TO VAR
                  DISPLAY "A: OK VAR-LEN > 16 AND VAR-LEN < 200"
            WHEN  TRUE
               ALSO VAR = SPACES
               ALSO TRUE
                  MOVE OTHERVAR TO VAR
                  DISPLAY "A: OK VAR IS SPACES"
           END-EVALUATE.

           MOVE "Peek a boo" TO VAR.
           EVALUATE 3 EQUALS 7
           WHEN  VAR = SPACES
               DISPLAY "B: OK VAR IS NOT SPACES"
           WHEN  VAR NOT = SPACES
               DISPLAY "B: FALSE VAR IS SPACES"
           END-EVALUATE.

           MOVE SPACES       TO VAR.
           EVALUATE FALSE
           WHEN  VAR = SPACES
               DISPLAY "C: FALSE VAR IS SPACES"
           WHEN  VAR NOT = SPACES
               DISPLAY "C: OK VAR IS SPACES"
           END-EVALUATE.

           MOVE "Peek a boo" TO VAR.
           EVALUATE TRUE
           WHEN  VAR = SPACES
               DISPLAY "D: BAD VAR IS SPACES"
           WHEN  VAR NOT = SPACES
               DISPLAY "D: OK VAR IS NOT SPACES"
           END-EVALUATE.

           MOVE SPACES       TO VAR.
           EVALUATE VAR-LEN ALSO VAR
           WHEN  < 32 ALSO SPACES
               DISPLAY "E: OK VAR IS SPACES"
           WHEN  > 16 ALSO NOT SPACES
               DISPLAY "E: BAD VAR IS NOT SPACES"
           WHEN OTHER
               DISPLAY "E: OK OTHER option taken"
           END-EVALUATE.

           STOP RUN.
])

# Note: ideally this should not result in a difference compared to the next one

AT_CHECK([$COMPILE_ONLY -fdiagnostics-show-option -C -fno-remove-unreachable prog.cob], [1], [],
[[prog.cob: in paragraph 'MAIN-10':
prog.cob:17: warning: expression '115' GREATER THAN '16' is always TRUE [-Wconstant-numlit-expression]
prog.cob:17: warning: expression '115' LESS THAN '200' is always TRUE [-Wconstant-numlit-expression]
prog.cob:20: error: offset of 'VAR' out of bounds: -99
prog.cob:23: warning: expression '115' LESS THAN '16' is always FALSE [-Wconstant-numlit-expression]
prog.cob:35: warning: expression '3' EQUALS '7' is always FALSE [-Wconstant-numlit-expression]
prog.cob:60: warning: expression '115' LESS THAN '32' is always FALSE [-Wconstant-numlit-expression]
prog.cob:62: warning: expression '115' GREATER THAN '16' is always TRUE [-Wconstant-numlit-expression]
]])

AT_CHECK([$COMPILE_ONLY -fdiagnostics-show-option -C prog.cob], [0], [],
[[prog.cob: in paragraph 'MAIN-10':
prog.cob:17: warning: expression '115' GREATER THAN '16' is always TRUE [-Wconstant-numlit-expression]
prog.cob:17: warning: expression '115' LESS THAN '200' is always TRUE [-Wconstant-numlit-expression]
prog.cob:20: warning: offset of 'VAR' out of bounds: -99 [-Wignored-error]
prog.cob:23: warning: expression '115' LESS THAN '16' is always FALSE [-Wconstant-numlit-expression]
prog.cob:35: warning: expression '3' EQUALS '7' is always FALSE [-Wconstant-numlit-expression]
prog.cob:60: warning: expression '115' LESS THAN '32' is always FALSE [-Wconstant-numlit-expression]
prog.cob:62: warning: expression '115' GREATER THAN '16' is always TRUE [-Wconstant-numlit-expression]
]])

AT_CLEANUP


AT_SETUP([Missing imperative statements])
AT_KEYWORDS([condition expression IF EVALUATE WHEN PERFORM])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  var       PIC X(200).
       01  othervar  PIC X(115).
       01  A         PIC 9 VALUE 1.
       01  B         PIC 9 VALUE 2.
       01  C         PIC 9 VALUE 3.
       78  var-len   value 115.

       PROCEDURE DIVISION.

           IF var-len < 16
           ELSE
               move othervar to var
           END-IF

           IF var-len > 16
           ELSE
               move othervar to var
           END-IF

           IF (2 = 3)
           ELSE
              IF 1 = 1
              ELSE
                 IF 1 = 1
                    move var to othervar
                 END-IF
              END-IF
           .

           EVALUATE TRUE
           WHEN  A = B
               move var      to othervar
           WHEN OTHER
           END-EVALUATE

           PERFORM WITH TEST BEFORE UNTIL 1 <> 3
           END-PERFORM

           EVALUATE FALSE
           WHEN  A = B
           WHEN  B = A
           END-EVALUATE.

           EVALUATE TRUE
           WHEN  A = B
               move var      to othervar
           WHEN OTHER
           .

           EVALUATE TRUE
           WHEN  A = B
           WHEN  B = A
           .

           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -w -fmissing-statement=error prog.cob], [1], [],
[prog.cob:18: error: IF without imperative statement used
prog.cob:23: error: IF without imperative statement used
prog.cob:32: error: IF without imperative statement used
prog.cob:33: error: IF without imperative statement used
prog.cob:39: error: WHEN OTHER without imperative statement used
prog.cob:42: error: inline PERFORM without imperative statement used
prog.cob:47: error: WHEN without imperative statement used
prog.cob:53: error: WHEN OTHER without imperative statement used
prog.cob:58: error: WHEN without imperative statement used
])

AT_CHECK([$COMPILE_ONLY -fno-constant-folding -fmissing-statement=warning prog.cob], [0], [],
[prog.cob:18: warning: IF without imperative statement used
prog.cob:23: warning: IF without imperative statement used
prog.cob:32: warning: IF without imperative statement used
prog.cob:33: warning: IF without imperative statement used
prog.cob:39: warning: WHEN OTHER without imperative statement used
prog.cob:42: warning: inline PERFORM without imperative statement used
prog.cob:47: warning: WHEN without imperative statement used
prog.cob:53: warning: WHEN OTHER without imperative statement used
prog.cob:58: warning: WHEN without imperative statement used
])

AT_CLEANUP


AT_SETUP([Fall-Through to WHEN OTHER])
AT_KEYWORDS([condition expression EVALUATE WHEN])

# we currently don't do the necessary parsing steps for
# this test to pass - and likely need a different option
# than frelax-syntax-checks..

AT_XFAIL_IF([true])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  A         PIC 9 VALUE 1.
       01  B         PIC 9 VALUE 2.

       PROCEDURE DIVISION.

           EVALUATE TRUE
           WHEN A = B
           WHEN OTHER
               DISPLAY 'other' END-DISPLAY
           END-EVALUATE

           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:12: error: fall-through to WHEN OTHER is not allowed
])

AT_CHECK([$COMPILE_ONLY -frelax-syntax-checks prog.cob], [1], [],
[prog.cob:12: warning: fall-through to WHEN OTHER
])

AT_CLEANUP

AT_SETUP([CONSTANT LENGTH / BYTE-LENGTH])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       identification division.
       program-id. prog.
       environment division.
       data division.
       working-storage section.
       01  item-01.
           05  item-05-a       pointer.
           05  item-05-b       pic x(01).
       01 myk-01 constant global as length of item-01.
       01 myk-02 constant is global as length item-05-a.
       01 myk-03 constant global as length of pointer. *> extension
       01 myk-04 constant global as byte-length of item-01.
       01 myk-05 constant is global as byte-length item-05-a.
       01 myk-06 constant global as byte-length of pointer. *> extension
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])
AT_CLEANUP


AT_SETUP([ANY LENGTH/NUMERIC with incorrect PIC])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.

       DATA           DIVISION.
       LINKAGE        SECTION.
       *> Valid
       01  valid-1    PIC X ANY LENGTH.
       01  valid-2    PIC N ANY LENGTH.
       01  valid-3    PIC 9 ANY NUMERIC.

       *> Invalid
       01  invalid-1  PIC A ANY LENGTH.
       01  invalid-2  PIC Z ANY LENGTH.
       01  invalid-3  PIC 9 ANY LENGTH.
       01  invalid-4  PIC X ANY NUMERIC.
       01  invalid-5  PIC XX ANY LENGTH.
       01  invalid-6  PIC NN ANY LENGTH.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:9: warning: handling of USAGE NATIONAL is unfinished; implementation is likely to be changed
prog.cob:18: warning: handling of USAGE NATIONAL is unfinished; implementation is likely to be changed
prog.cob:13: error: 'invalid-1' ANY LENGTH must be PIC X, PIC U, PIC N or PIC 1
prog.cob:14: error: 'invalid-2' ANY LENGTH must be PIC X, PIC U, PIC N or PIC 1
prog.cob:15: error: 'invalid-3' ANY LENGTH must be PIC X, PIC U, PIC N or PIC 1
prog.cob:16: error: 'invalid-4' ANY NUMERIC must be PIC 9
prog.cob:17: error: 'invalid-5' ANY LENGTH has invalid definition
prog.cob:18: error: 'invalid-6' ANY LENGTH has invalid definition
prog.cob:8: error: 'valid-1' ANY LENGTH item must be a formal parameter
prog.cob:9: error: 'valid-2' ANY LENGTH item must be a formal parameter
prog.cob:10: error: 'valid-3' ANY LENGTH item must be a formal parameter
prog.cob:13: error: 'invalid-1' ANY LENGTH item must be a formal parameter
prog.cob:14: error: 'invalid-2' ANY LENGTH item must be a formal parameter
prog.cob:15: error: 'invalid-3' ANY LENGTH item must be a formal parameter
prog.cob:16: error: 'invalid-4' ANY LENGTH item must be a formal parameter
prog.cob:17: error: 'invalid-5' ANY LENGTH item must be a formal parameter
prog.cob:18: error: 'invalid-6' ANY LENGTH item must be a formal parameter
])

AT_CLEANUP


AT_SETUP([VOLATILE clause])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 DATA-COLLECTION.
          03 DATA-ITEMS-A VOLATILE.
             05 DATA-A1 PIC S9(9) BINARY.
             05 DATA-A2 PIC S9(9) BINARY.
          03 VOLATILE.
             05 DATA-FILLER PIC S9(9) BINARY.
          03 DATA-ITEMS-B.
             05 DATA-B1 PIC S9(9).
             05 DATA-B2 PIC S9(9) VOLATILE.
          03 DATA-ITEMS-C.
             05 DATA-C1 PIC S9(9).
             05 DATA-C2 PIC S9(9).
       01 STEP    PIC 9(8)  BINARY VALUE 0 EXTERNAL VOLATILE.
      *01 WRONGY    PIC X.
      *   88 TESTVAL-A VALUE 'A' VOLATILE.
      *   88 TESTVAL-B VOLATILE VALUE 'B'.
       LINKAGE SECTION.
       01  XMYREC.
          05  XFLD1   PIC 9(2) VOLATILE.
      *SCREEN SECTION.
      *01  WRONG-SCREEN.
      *   05  WRONG-FIELD   PIC X VOLATILE.
      *
       PROCEDURE DIVISION.
           MOVE DATA-ITEMS-B TO DATA-ITEMS-C.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -Wno-unfinished prog.cob], [0], [],
[prog.cob:18: warning: initial VALUE clause ignored for EXTERNAL item 'STEP'
])
AT_CHECK([$COMPILE_ONLY -std=ibm-strict -w prog.cob], [0], [], [])

AT_CLEANUP


AT_SETUP([SET SOURCEFORMAT syntax checks])
AT_KEYWORDS([misc extensions directives])

AT_DATA([prog.cob], [
       *> Valid
       $set sourceformat(free)
       $  SET SOURCEFORMAT"FIXED"
       *> Invalid
       $SET SOURCEFORMAT"hi!"
       $SET SOURCEFORMAT()
       $SET sourceformat'mis-matched"
])

# FIXME: something is broken with the '"#OPTION here,
#        that should be generated as #OPTION 'mis-matched"
#        and in a second step not be generated at all

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:6: error: invalid SOURCEFORMAT directive option 'hi!'
prog.cob:7: error: invalid SOURCEFORMAT directive option ''
prog.cob:8: error: syntax error, unexpected Variable, expecting Literal
prog.cob:8: error: invalid SOURCEFORMAT directive option
prog.cob:8: error: invalid literal: '"#OPTION mis-matched ...'
prog.cob:8: error: missing terminating ' character
prog.cob:8: error: PROGRAM-ID header missing
prog.cob:8: error: PROCEDURE DIVISION header missing
prog.cob:8: error: syntax error, unexpected Literal
])
AT_CLEANUP


# normal register extension,
# active for lax and standard configurations
AT_SETUP([WHEN-COMPILED register in dialect])
AT_KEYWORDS([misc extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       PROCEDURE DIVISION.
           DISPLAY WHEN-COMPILED
           .
])

AT_CHECK([$COMPILE_ONLY -std=cobol2014 prog.cob], [1], [],
[prog.cob:6: error: 'WHEN-COMPILED' is not defined
])
AT_CHECK([$COMPILE_ONLY -std=ibm prog.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY -std=mvs prog.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY -std=rm prog.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY -fregister=WHEN-COMPILED prog.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY -freserved=WHEN-COMPILED -fregister=WHEN-COMPILED prog.cob], [0], [], [])
AT_CLEANUP



# rare/conflicting register extension,
# active only if explicit requested
AT_SETUP([LIN / COL register])
AT_KEYWORDS([misc extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       PROCEDURE DIVISION.
           MOVE 1 TO LIN, COL
           .
])

# "strict" configuration:
AT_CHECK([$COMPILE_ONLY -std=cobol2014 prog.cob], [1], [],
[prog.cob:6: error: 'LIN' is not defined
prog.cob:6: error: syntax error, unexpected COL
])
# "lax" configuration:
AT_CHECK([$COMPILE_ONLY -std=acu prog.cob], [1], [],
[prog.cob:6: error: 'LIN' is not defined
prog.cob:6: error: syntax error, unexpected COL
])
# standard configuration:
AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:6: error: 'LIN' is not defined
prog.cob:6: error: syntax error, unexpected COL
])
# explicit enabled
AT_CHECK([$COMPILE_ONLY -fregister=LIN,COL prog.cob], [0], [], [])
AT_CLEANUP


AT_SETUP([tokens consisting of multiple words])
# note: we actually do not check for all possible cases, but two are better than none...
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  test-var   pic xx.
           88  endOfFile value '10'.
       01  todo       pic xx.

       PROCEDURE DIVISION.
           if not endOfFile
              display 'all fine'
           end-if
           if test-var greater or equal todo
              display 'still fine'
           end-if
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])
AT_CLEANUP


AT_SETUP([zero-length literals])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  x           PIC X.
       01  nat         PIC N.
       01  n           PIC 9.

       PROCEDURE       DIVISION.
           MOVE X''  TO x
           MOVE H''  TO n
           MOVE Z''  TO x
           MOVE L''  TO x
           MOVE N""  TO nat
           MOVE NX'' TO nat
           MOVE B""  TO n
           MOVE BX"" TO n
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:8: warning: handling of USAGE NATIONAL is unfinished; implementation is likely to be changed
prog.cob:12: warning: hexadecimal literal has zero length; X'00' will be assumed
prog.cob:13: error: H literals must contain at least one character
prog.cob:14: error: invalid Z literal: ''
prog.cob:14: error: Z literals must contain at least one character
prog.cob:15: error: invalid L literal: ''
prog.cob:15: error: L literals must contain at least one character
prog.cob:16: warning: national literal has zero length; a SPACE will be assumed
prog.cob:16: warning: handling of national literal is unfinished; implementation is likely to be changed
prog.cob:17: warning: hexadecimal literal has zero length; X'00' will be assumed
prog.cob:18: warning: Boolean literal has zero length; B'0' will be assumed
prog.cob:19: warning: hexadecimal literal has zero length; X'00' will be assumed
])
AT_CHECK([$COMPILE_ONLY -fzero-length-literals=error prog.cob], [1], [],
[prog.cob:8: warning: handling of USAGE NATIONAL is unfinished; implementation is likely to be changed
prog.cob:12: error: zero-length literal used
prog.cob:12: warning: hexadecimal literal has zero length; X'00' will be assumed
prog.cob:13: error: H literals must contain at least one character
prog.cob:14: error: invalid Z literal: ''
prog.cob:14: error: Z literals must contain at least one character
prog.cob:15: error: invalid L literal: ''
prog.cob:15: error: L literals must contain at least one character
prog.cob:16: error: zero-length literal used
prog.cob:16: warning: national literal has zero length; a SPACE will be assumed
prog.cob:16: warning: handling of national literal is unfinished; implementation is likely to be changed
prog.cob:17: error: zero-length literal used
prog.cob:17: warning: hexadecimal literal has zero length; X'00' will be assumed
prog.cob:18: error: zero-length literal used
prog.cob:18: warning: Boolean literal has zero length; B'0' will be assumed
prog.cob:19: error: zero-length literal used
prog.cob:19: warning: hexadecimal literal has zero length; X'00' will be assumed
])
AT_CLEANUP


AT_SETUP([@OPTIONS parsing])
AT_KEYWORDS([misc OPTIONS fujitsu])

# GnuCOBOL currently only skips these, see FR 305

AT_DATA([valid.cob], [
000100 @OPTIONS NOMAIN,APOST
000200 @OPTIONS APOST
000300 IDENTIFICATION  DIVISION.
000400 PROGRAM-ID. VALID.
])

AT_CHECK([$COMPILE_ONLY valid.cob], [0], [],
[valid.cob:2: warning: ignoring unknown directive: '@OPTIONS NOMAIN,APOST'
valid.cob:3: warning: ignoring unknown directive: '@OPTIONS APOST'
])

#AT_DATA([invalid.cob], [
#       @OPTIONS ALPHAL(WORD)
#       @OPTIONS INITVALUE(100)
#       @OPTIONS INITVALUE(F)
#       @OPTIONS INITVALUE(AG)
#       @OPTIONS BINARY(WORD,MLBON) INITVALUE(00) NOTRUNC
#       @OPTIONS INITVALUE(00)
#       @OPTIONS NOTRUNC
#       @OPTIONS APOST,MAIN
#       @OPTIONS THREAD(SINGLE)
#       IDENTIFICATION DIVISION.
#       PROGRAM-ID. INVALID.
#])

#AT_CHECK([$COMPILE_ONLY valid.cob], [0], [], [])
#AT_CHECK([$COMPILE_ONLY invalid.cob], [1], [],
#[invalid.cob:2: warning: unknown @OPTIONS directive 'ALPHAL'
#invalid.cob:3: error: invalid @OPTIONS INITVALUE value '100'
#invalid.cob:4: error: invalid @OPTIONS INITVALUE value 'F'
#invalid.cob:5: error: invalid @OPTIONS INITVALUE value 'AG'
#invalid.cob:6: warning: skipping line after first space
#invalid.cob:7: error: @OPTIONS MAIN conflicts with command line option '-m'
#])

AT_CLEANUP


AT_SETUP([PROCESS / CBL parsing])
AT_KEYWORDS([misc ibm])

# GnuCOBOL currently only skips these, see FR 305

#AT_DATA([valid.cob], [
#Process codepage(1047)
#CBL CODEPAGE(1047)
#Process
#  Process codepage(1208)
#  CBL CODEPAGE(1208)
#000100 Process codepage(1047)
#000200 CBL CODEPAGE(1047)
#000300 CBL
#000400 IDENTIFICATION  DIVISION.
#000500 PROGRAM-ID. VALID.
#])
#
#AT_CHECK([$COMPILE_ONLY valid.cob], [0], [],
#[valid.cob:2: warning: ignoring unknown directive: 'Process codepage(1047)'
#valid.cob:3: warning: ignoring unknown directive: 'CBL CODEPAGE(1047)'
#valid.cob:5: warning: ignoring unknown directive: 'Process codepage(1208)'
#valid.cob:6: warning: ignoring unknown directive: 'CBL CODEPAGE(1208)'
#valid.cob:7: warning: ignoring unknown directive: 'Process codepage(1047)'
#valid.cob:8: warning: ignoring unknown directive: 'CBL CODEPAGE(1047)'
#])

# FIXME: the part above does not work

#AT_DATA([valid.cob], [
#Process codepage(1047)
#   Process
#    CBL
#000100 Process codepage(1208)
#000200 CBL CODEPAGE(1208)
#000300 CBL
#000400 IDENTIFICATION  DIVISION.
#000500 PROGRAM-ID. VALID.
#])

#AT_CHECK([$COMPILE_ONLY valid.cob], [0], [],
#[valid.cob:2: warning: ignoring unknown directive: 'Process codepage(1047)'
#valid.cob:5: warning: ignoring unknown directive: 'Process codepage(1208)'
#valid.cob:6: warning: ignoring unknown directive: 'CBL CODEPAGE(1208)'
#])

# simple one, to consider later how to make the necessary changes for
# process/cbl before col 7

AT_DATA([valid.cob], [
000100 Process codepage(1047)
000200 CBL CODEPAGE(1208)
000300 CBL
000400 IDENTIFICATION  DIVISION.
000500 PROGRAM-ID. VALID.
])

AT_CHECK([$COMPILE_ONLY valid.cob], [0], [],
[valid.cob:2: warning: ignoring unknown directive: 'Process codepage(1047)'
valid.cob:3: warning: ignoring unknown directive: 'CBL CODEPAGE(1208)'
])

AT_CLEANUP


AT_SETUP([*CONTROL / *CBL parsing])
AT_KEYWORDS([misc ibm])

#AT_DATA([valid.cob], [
#      *CONTROL LIST
#        *CONTROL SOURCE
#      *CBL MAP LIST
#000100 *CBL NOMAP NOSOURCE NOLIST
#000200 IDENTIFICATION  DIVISION.
#000300 PROGRAM-ID. VALID.
#])

#AT_CHECK([$COMPILE_ONLY valid.cob], [0], [],
#[valid.cob:2: warning: LIST is not applicable, consider -g / -s
#valid.cob:4: warning: LIST is not applicable, consider -g / -s
#])

# for now only simple one -> ignored

AT_DATA([valid.cob], [
      *CONTROL LIST
        *CONTROL SOURCE
      *CBL MAP LIST
000100 *CBL NOMAP NOSOURCE NOLIST
000200 IDENTIFICATION  DIVISION.
000300 PROGRAM-ID. VALID.
])

AT_CHECK([$COMPILE_ONLY valid.cob], [0], [], [])

AT_CLEANUP


AT_SETUP([system routines with wrong number of parameters])
AT_KEYWORDS([misc CALL 91 C$TOUPPER CBL_GC_FORK])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 VAR1  PIC 9.
       01 VAR2  PIC 9.
       01 VAR3  PIC 9.
       01 VAR4  PIC 9.
       PROCEDURE DIVISION.
        CALL X"91" USING VAR1 VAR2 VAR3 VAR4.
        CALL X"91" USING VAR1.
        CALL "C$TOUPPER" USING VAR1 VAR2 VAR3.
        CALL "CBL_GC_FORK" USING VAR1.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:11: warning: wrong number of CALL parameters for 'X"91"', 4 given, 3 expected
prog.cob:12: error: wrong number of CALL parameters for 'X"91"', 1 given, 3 expected
prog.cob:13: warning: wrong number of CALL parameters for 'C$TOUPPER', 3 given, 2 expected
prog.cob:14: warning: wrong number of CALL parameters for 'CBL_GC_FORK', 1 given, 0 expected
])

AT_CLEANUP


AT_SETUP([invalid use of condition-name])
AT_KEYWORDS([misc MOVE STRING UNSTRING COMPUTE])
# see Bug #543 "level 88 item not checked in all places for STRING"
# and FR #339
# Note: we actually check much more here, for example special data types
#       like HANDLE, see "ACUCOBOL USAGE HANDLE";
#       condition-name is also checked in syn_file.at "WRITE / REWRITE FROM clause"

AT_DATA([prog.cob], [
       identification   division.
       program-id.      prog.
       data             division.
       working-storage  section.
       77 p        usage pointer.
       01 val      pic x(10).
          88 val-i1 value 'some'.
          88 val-i2 value 'val'.
       77 val2     pic x(50).
       77 target   pic x(50).
       01 vnum     pic 9.
          88 vnum-1 value  1.
          88 vnum-2 values 2 thru 5.
          88 vnum-9 value  9.
       01 filler.
          02 tentry pic x occurs 0 to 6 depending on vnum-1.
       procedure        division.
           string   val-i1 delimited by size  into target
           string   val2   delimited by val-i2 into target
           string   val2   delimited by size   into val-i1
                           with pointer val-i2
           unstring val-i1                     into target
           unstring val2   delimited by val-i1 into target
           unstring val2                       into val-i1
                           with pointer val-i2
           move val-i1
             to val-i2, tentry (vnum-9)
           compute vnum-1 = vnum
           compute vnum    = vnum-1 /
                             vnum-2
           go to val-i1
           set p to val-i1
           set p to address of val-i2.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:17: error: condition-name not allowed here: 'vnum-1'
prog.cob:19: error: condition-name not allowed here: 'val-i1'
prog.cob:20: error: condition-name not allowed here: 'val-i2'
prog.cob:21: error: condition-name not allowed here: 'val-i1'
prog.cob:23: error: condition-name not allowed here: 'val-i1'
prog.cob:24: error: condition-name not allowed here: 'val-i1'
prog.cob:25: error: condition-name not allowed here: 'val-i1'
prog.cob:28: error: condition-name not allowed here: 'vnum-9'
prog.cob:27: error: condition-name not allowed here: 'val-i1'
prog.cob:29: error: condition-name not allowed here: 'vnum-1'
prog.cob:30: error: condition-name not allowed here: 'vnum-1'
prog.cob:31: error: condition-name not allowed here: 'vnum-2'
prog.cob:33: error: condition-name not allowed here: 'val-i1'
prog.cob:34: error: condition-name not allowed here: 'val-i2'
prog.cob:32: error: 'val-i1 (MAIN SECTION:)' is not a procedure name
])
AT_CLEANUP


AT_SETUP([XML GENERATE syntax checks])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  str.
           03  str-1 PIC XX.
           03  str-2 PIC X.
       66  renames-item RENAMES str-1 THRU str-2.
       01  bool-area.
           03  bool-item PIC 1(30) USAGE BIT.
           03  zoned-decimal PIC 99V99 PACKED-DECIMAL.
       01  just-item PIC X(30) JUST.
       01  table-area.
           03  table-entry PIC X(30) OCCURS 2 TIMES.
       01  long-str PIC X(200).

       01  float-item FLOAT-SHORT.
       01  pic-p-item PIC 99P(3).

       01  rec.
           03  child-1 PIC X(30).
           03  child-1a REDEFINES child-1 PIC 9(30).
           03  child-2 PIC X(30).
           03  child-3.
               05  child-3-1 PIC X OCCURS 5 TIMES.

       01  all-filler-rec.
           03  FILLER PIC XXXX.
           03  FILLER PIC 9999.

       01  invalid-sub-elt-rec.
           03  non-unique-name PIC X.
           03  valid-sub-rec.
               05  non-unique-name PIC X.
           03  bit-item PIC 1 USAGE BIT.
           03  ptr-item USAGE POINTER.

       01  with-attrs-does-nothing.
           03  FILLER PIC X.
           03  table-elt PIC X OCCURS 2 TIMES.
           03  with-attrs-group.
               05  with-attrs-group-child PIC X.
           03  with-attrs-child PIC X.

       PROCEDURE DIVISION.
           *> Receiving area is not alphanumeric or national.
           XML GENERATE bool-item FROM str
           *> Receiving area is JUSTIFIED RIGHT.
           XML GENERATE just-item FROM str
           *> Receiving area is subscripted or ref-mod'd.
           XML GENERATE table-entry (1) FROM str
           XML GENERATE long-str (1:100) FROM str

           *> Input record cannot be function identifier.
           XML GENERATE long-str FROM FUNCTION CHAR(4)
           *> Input record cannot be ref-mod'd.
           XML GENERATE long-str FROM str (2:1)
           *>  "       "   is not RENAMES (children may be RENAMES).
           XML GENERATE long-str FROM renames-item
           *> Non-ignored items of the input record must:
           *>  * alphabetic, alphanumeric, national, numeric or index.
           *>  * there must be at least one item.
           *>  * each non-FILLER name must be unique within the input record.
           XML GENERATE long-str FROM invalid-sub-elt-rec *> XXXXXXXXX ptr element is invalid
           XML GENERATE long-str FROM all-filler-rec

           *> COUNT IN field must be an integer.
           XML GENERATE long-str FROM str COUNT float-item
           *> COUNT IN field must not have P in PIC.
           XML GENERATE long-str FROM str COUNT pic-p-item

           *> ENCODING codepage must be unsigned integer.
           *> If receiving area is national, codepage must be 1200.
           *> "        "       "   alphanumeric, codepage must be 1208 or EBCDIC
           *>   page supported with XML.

           *> WITH ATTRIBUTES, generated immediate children must be
           *>  * elementary
           *>  * be non-FILLER
           *>  * not be OCCURS
           *>  * not be subject of a TYPE phrase.
           XML GENERATE long-str FROM with-attrs-does-nothing
               WITH ATTRIBUTES
               TYPE OF with-attrs-child IS ELEMENT

           *> NAMESPACE must be a valid URI.
           XML GENERATE long-str FROM str NAMESPACE "<>"
           *> NAMESPACE and -PREFIX must be alphanumeric or national.
           XML GENERATE long-str FROM str
              NAMESPACE bool-item NAMESPACE-PREFIX bool-item
           *>   "        "     "    may not be figurative constants.
           XML GENERATE long-str FROM str
               NAMESPACE SPACES NAMESPACE-PREFIX QUOTES
           *> NAMESPACE-PREFIX must be a valid XML name.
           XML GENERATE long-str FROM str
               NAMESPACE "http://www.w3.org/xml" NAMESPACE-PREFIX X"00"

           *> NAME items must reference input record or its children.
           XML GENERATE long-str FROM rec
               NAME OF child-1 IS "c1", long-str IS "c2", rec IS "r"
           *> NAME items cannot be reference modified or subscripted.
           XML GENERATE long-str FROM rec
               NAME OF child-1 (1:2) IS "c1"
           *> NAME items may not be ignored by the statement.
           XML GENERATE long-str FROM rec
               NAME OF child-1a IS "c1a"
           *> NAME literals must be valid XML names.
           XML GENERATE long-str FROM rec
               NAME OF child-1 IS X"00"

           *> TYPE items must be elementary and children of input record.
           XML GENERATE long-str FROM rec
               TYPE OF child-3 IS ELEMENT, long-str IS CONTENT,
                   rec IS CONTENT
           *> TYPE items cannot be ref-mod'd or subscripted.
           XML GENERATE long-str FROM rec
               TYPE OF child-1 (1:3) IS ATTRIBUTE,
                   child-3-1 (1) IS CONTENT
           *> TYPE items may not be ignored by the statement
           XML GENERATE long-str FROM rec
               TYPE OF child-1a IS ELEMENT
           *> TYPE ATTRIBUTE items must satisfy the conditions for WITH
           *>  ATTRIBUTES. (Covered by the above.)

           *> SUPPRESS WHEN items must be:
           *>  * elementary
           *>  * not ignored
           *>  * child of input record.
           XML GENERATE long-str FROM rec
               SUPPRESS child-3 WHEN SPACES, child-1a WHEN SPACES,
                   rec WHEN SPACES
          *> All SUPPRESS items must not be functions
           XML GENERATE long-str FROM rec
               SUPPRESS FUNCTION CHAR(5) WHEN SPACE
           *> All SUPPRESS items must not be ref-mod'd or subscripted.
           XML GENERATE long-str FROM rec
               SUPPRESS child-1 (1:3) WHEN ZERO,
                   child-3-1 (1) WHEN SPACES
           *> If non-WHEN SUPPRESS items may be groups. (No error message here.)
           XML GENERATE long-str FROM rec SUPPRESS child-3
           *> If SUPPRESS WHEN ZEROES, item is not DISPLAY-1.
           *> If SUPPRESS WHEN SPACES, item must be USAGE DISPLAY, DISPLAY-1 or
           *>   NATIONAL
           XML GENERATE long-str FROM bool-area
               SUPPRESS bool-item WHEN SPACES
           *> If SUPPRESS WHEN LOW-/HIGH-VALUES, item must be USAGE DISPLAY or
           *>   NATIONAL. If item is a zoned/national decimal item, it must be
           *>   an integer.
           XML GENERATE long-str FROM bool-area
               SUPPRESS bool-item WHEN LOW-VALUES,
                   zoned-decimal WHEN HIGH-VALUE
           *> (For generic WHEN phrases, invalid items above are ignored.)
           GOBACK.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:12: warning: USAGE BIT is not implemented
prog.cob:37: warning: USAGE BIT is not implemented
prog.cob:49: error: JSON/XML GENERATE receiving item must be alphanumeric or national
prog.cob:51: error: JSON/XML GENERATE receiving item may not have JUSTIFIED clause
prog.cob:53: error: JSON/XML GENERATE receiving item may not be subscripted
prog.cob:54: error: JSON/XML GENERATE receiving item may not be reference modified
prog.cob:57: error: syntax error, unexpected intrinsic function name, expecting Identifier
prog.cob:59: error: JSON/XML GENERATE input record may not be reference modified
prog.cob:61: error: JSON/XML GENERATE input record may not have RENAMES clause
prog.cob:66: error: JSON/XML GENERATE input record has subrecords with non-unique names
prog.cob:67: error: all the children of 'all-filler-rec' are ignored in JSON/XML GENERATE
prog.cob:70: error: COUNT IN item 'float-item' must be an integer
prog.cob:72: error: COUNT IN item 'pic-p-item' may not have PICTURE with P in it
prog.cob:89: warning: OCCURS items in JSON/XML GENERATE is not implemented
prog.cob:89: warning: WITH ATTRIBUTES specified, but no attributes can be generated
prog.cob:89: error: NAMESPACE must be a valid URI
prog.cob:92: error: NAMESPACE must be alphanumeric or national
prog.cob:92: error: NAMESPACE-PREFIX must be alphanumeric or national
prog.cob:97: error: NAMESPACE may not be a figurative constant
prog.cob:97: error: NAMESPACE-PREFIX may not be a figurative constant
prog.cob:98: error: NAMESPACE-PREFIX must be a valid XML name
prog.cob:104: warning: OCCURS items in JSON/XML GENERATE is not implemented
prog.cob:102: error: NAME OF item must be the input record or a child of it
prog.cob:107: warning: OCCURS items in JSON/XML GENERATE is not implemented
prog.cob:105: error: NAME OF item may not be reference modified
prog.cob:110: warning: OCCURS items in JSON/XML GENERATE is not implemented
prog.cob:108: error: NAME OF item may not be an ignored item in JSON/XML GENERATE
prog.cob:114: warning: OCCURS items in JSON/XML GENERATE is not implemented
prog.cob:111: error: NAME OF literal must be a valid XML identifier
prog.cob:118: warning: OCCURS items in JSON/XML GENERATE is not implemented
prog.cob:115: error: TYPE OF item must be elementary
prog.cob:115: error: TYPE OF item must be a child of the input record
prog.cob:116: error: TYPE OF item must be elementary
prog.cob:116: error: TYPE OF item must be a child of the input record
prog.cob:122: warning: OCCURS items in JSON/XML GENERATE is not implemented
prog.cob:119: error: TYPE OF item may not be reference modified
prog.cob:120: error: TYPE OF item may not be subscripted
prog.cob:131: warning: OCCURS items in JSON/XML GENERATE is not implemented
prog.cob:123: error: TYPE OF item may not be an ignored item in JSON/XML GENERATE
prog.cob:135: warning: OCCURS items in JSON/XML GENERATE is not implemented
prog.cob:133: error: SUPPRESS item with WHEN clause must be elementary
prog.cob:133: error: SUPPRESS item must be a child of the input record
prog.cob:132: error: SUPPRESS item may not be an ignored item in JSON/XML GENERATE
prog.cob:132: error: SUPPRESS item with WHEN clause must be elementary
prog.cob:136: error: syntax error, unexpected intrinsic function name, expecting EVERY or WHEN or Identifier
prog.cob:142: warning: OCCURS items in JSON/XML GENERATE is not implemented
prog.cob:140: error: SUPPRESS item may not be subscripted
prog.cob:139: error: SUPPRESS item may not be reference modified
prog.cob:146: warning: OCCURS items in JSON/XML GENERATE is not implemented
prog.cob:147: error: SUPPRESS WHEN SPACE item must be USAGE DISPLAY or NATIONAL
prog.cob:153: error: SUPPRESS WHEN HIGH-VALUE item must be USAGE DISPLAY or NATIONAL
prog.cob:153: error: SUPPRESS WHEN HIGH-VALUE item must be an integer
prog.cob:152: error: SUPPRESS WHEN LOW-VALUE item must be USAGE DISPLAY or NATIONAL
])
AT_CLEANUP


AT_SETUP([BASED clause, ALLOCATE / FREE statements])
AT_KEYWORDS([BASED])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  str.
           03  str-1  PIC XX BASED.
       01  str-2 BASED.
           03  str-2a PIC X SYNC.
           03  str-2b PIC 9.
       01  one        PIC XX BASED.
       77  seven      PIC 9 BASED.
       77  var        PIC 9.
       77  ptr        USAGE POINTER.
       SCREEN-STORAGE SECTION.
       01  scrn      BASED.
           03  scrn-field pic x.

       PROCEDURE DIVISION.
           ALLOCATE one
           ALLOCATE seven INITIALIZED
           ALLOCATE seven CHARACTERS
           ALLOCATE seven CHARACTERS RETURNING ptr
           ALLOCATE 1 + 2 * 3 CHARACTERS RETURNING ptr
           ALLOCATE 1 + one * 3 CHARACTERS RETURNING ptr
           ALLOCATE one   CHARACTERS RETURNING ptr
           ALLOCATE seven CHARACTERS INITIALIZED RETURNING ptr
           ALLOCATE var
           ALLOCATE 9 CHARACTERS INITIALIZED TO 9 RETURNING ptr.
           FREE var
           FREE ADDRESS OF var
           FREE one
           FREE ADDRESS OF seven
           MOVE ADDRESS OF seven TO ptr
           FREE ptr
           GOBACK.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:8: error: BASED only allowed at 01/77 level
prog.cob:16: error: PROCEDURE DIVISION header missing
prog.cob:16: error: syntax error, unexpected Identifier
prog.cob:17: error: syntax error, unexpected Identifier, expecting SECTION or .
prog.cob:17: note: unknown statement '01'
prog.cob:18: error: syntax error, unexpected Identifier, expecting SECTION or .
prog.cob:18: note: unknown statement '03'
prog.cob:20: error: syntax error, unexpected PROCEDURE
prog.cob:23: error: ALLOCATE CHARACTERS requires RETURNING clause
prog.cob:26: error: 'one' is not numeric
prog.cob:27: error: amount must be specified as a numeric expression
prog.cob:29: error: target of ALLOCATE must have BASED clause
prog.cob:30: error: INITIALIZED TO item is not alphanumeric
prog.cob:31: error: target 1 of FREE is not a BASED data item
prog.cob:32: error: target 1 of FREE is not a BASED data item
])

AT_CHECK([$COMPILE_ONLY -frelax-syntax-checks prog.cob], [1], [],
[prog.cob:8: error: BASED only allowed at 01/77 level
prog.cob:16: warning: PROCEDURE DIVISION header missing
prog.cob:16: note: PROCEDURE DIVISION header assumed
prog.cob:16: error: syntax error, unexpected Identifier
prog.cob:17: error: syntax error, unexpected Identifier, expecting SECTION or .
prog.cob:17: note: unknown statement '01'
prog.cob:18: error: syntax error, unexpected Identifier, expecting SECTION or .
prog.cob:18: note: unknown statement '03'
prog.cob:20: error: syntax error, unexpected PROCEDURE
prog.cob:23: error: ALLOCATE CHARACTERS requires RETURNING clause
prog.cob:26: error: 'one' is not numeric
prog.cob:27: error: amount must be specified as a numeric expression
prog.cob:29: error: cannot change address of 'var', which is not BASED or a LINKAGE item
prog.cob:30: error: INITIALIZED TO item is not alphanumeric
prog.cob:31: error: target 1 of FREE is not a BASED data item
prog.cob:32: error: target 1 of FREE is not a BASED data item
])
AT_CLEANUP


AT_SETUP([CONTINUE statement])
AT_KEYWORDS([BASED])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  one        PIC X.
       77  seven      PIC 9 BASED.
       77  var        PIC 9.
       77  ptr        USAGE POINTER.
       PROCEDURE DIVISION.
           CONTINUE
           PERFORM VARYING var FROM 1 BY 1 UNTIL var = 4
              CONTINUE
           END-PERFORM
           CONTINUE AFTER 42 SECONDS      *> COBOL 202x
           CONTINUE AFTER 4 + 2 SECONDS
           CONTINUE AFTER var + 2 SECONDS
           CONTINUE AFTER '1' SECONDS
           CONTINUE AFTER ptr SECONDS
           CONTINUE AFTER one SECONDS
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:19: error: amount must be specified as a numeric expression
prog.cob:20: error: amount must be specified as a numeric expression
prog.cob:21: error: amount must be specified as a numeric expression
])

AT_CHECK([$COMPILE_ONLY -std=cobol2014 prog.cob], [1], [],
[prog.cob:16: error: AFTER phrase in CONTINUE statement does not conform to COBOL 2014
prog.cob:17: error: AFTER phrase in CONTINUE statement does not conform to COBOL 2014
prog.cob:18: error: AFTER phrase in CONTINUE statement does not conform to COBOL 2014
prog.cob:19: error: AFTER phrase in CONTINUE statement does not conform to COBOL 2014
prog.cob:20: error: AFTER phrase in CONTINUE statement does not conform to COBOL 2014
prog.cob:21: error: AFTER phrase in CONTINUE statement does not conform to COBOL 2014
])
AT_CLEANUP


AT_SETUP([conflict markers])
AT_KEYWORDS([])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
      *> Verify that we report conflict markers correctly
<<<<<<< HEAD
       01  one-1      PIC X.
======= there may be something here
       01  one-2      PIC X.
>>>>>>> some note
      *> Verify that we don't have an issue with unmatched conflict markers
       77  var        PIC 9.
<<<<<<< HEAD
       01  var2       PIC X.
=======
<<<<<<< HEAD
      *> Verify that we only report conflict markers at the start of lines.
 <<<<<<< HEAD
       01  one        PIC X.
 =======
       01  two        PIC 9.
 >>>>>>> some note
       PROCEDURE DIVISION.
           GOBACK.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:8: error: version control conflict marker in file
prog.cob:10: error: version control conflict marker in file
prog.cob:12: error: version control conflict marker in file
prog.cob:15: error: version control conflict marker in file
prog.cob:17: error: version control conflict marker in file
prog.cob:18: error: version control conflict marker in file
prog.cob:20: error: invalid indicator '<' at column 7
prog.cob:22: error: invalid indicator '=' at column 7
prog.cob:24: warning: ignoring invalid directive: '>> some'
])

AT_CHECK([$COMPILE_ONLY -free prog.cob], [1], [],
[prog.cob:8: error: version control conflict marker in file
prog.cob:10: error: version control conflict marker in file
prog.cob:12: error: version control conflict marker in file
prog.cob:15: error: version control conflict marker in file
prog.cob:17: error: version control conflict marker in file
prog.cob:18: error: version control conflict marker in file
prog.cob:24: warning: ignoring invalid directive
prog.cob:20: error: PROCEDURE DIVISION header missing
prog.cob:20: error: syntax error, unexpected <
prog.cob:22: error: syntax error, unexpected =
prog.cob:25: error: syntax error, unexpected PROCEDURE
])
AT_CLEANUP


AT_SETUP([SORT syntax])
AT_KEYWORDS([misc fundamental KEY])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT SRTFIL ASSIGN TO "SRTFIL"
           ORGANIZATION LINE SEQUENTIAL.
           SELECT STFILE ASSIGN TO "STFILE"
           ORGANIZATION LINE SEQUENTIAL.

       DATA DIVISION.
       FILE SECTION.
       FD SRTFIL.
       01 SRTREC               PIC X(256).
       SD STFILE.
       01 STFREC               PIC X(256).

       WORKING-STORAGE SECTION.
       01 G             VALUE "d4b2e1a3c5".
         02 TBL         OCCURS 5.
           03 X         PIC X.
           03 Y         PIC 9.
         02 TBL-ORD     OCCURS 5 ASCENDING YO.
           03 XO        PIC X.
           03 YO        PIC 9.

       PROCEDURE DIVISION.
           SORT TBL ASCENDING KEY X.
           SORT TBL DESCENDING.
           SORT TBL.
           SORT TBL-ORD ASCENDING.
           SORT TBL-ORD.
           SORT STFILE DESCENDING KEY SRTREC.
           SORT STFILE DESCENDING KEY SRTREC USING SRTFIL GIVING SRTFIL.
           SORT STFILE ASCENDING.
           SORT STFILE.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:32: error: table SORT requires KEY phrase
prog.cob:35: error: file sort requires USING or INPUT PROCEDURE
prog.cob:35: error: file sort requires GIVING or OUTPUT PROCEDURE
prog.cob:37: error: file sort requires KEY phrase
prog.cob:38: error: file sort requires KEY phrase
])
AT_CLEANUP


AT_SETUP([OSVS I/O extensions])
AT_KEYWORDS([ibm file extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.

       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
           SELECT f ASSIGN "f.dat" SEQUENTIAL
               FILE-LIMITS ARE 1 THRU 10, 100 THRU f-max
               TRACK-AREA 100 CHARACTERS
               TRACK-LIMIT 5 TRACKS.
           SELECT g ASSIGN "g.dat" RELATIVE
               RELATIVE KEY g-key
               ACTUAL KEY g-actual-key.

       I-O-CONTROL.
           APPLY RECORD-OVERFLOW f, g
           APPLY CORE-INDEX core-idx ON f
           APPLY CYL-INDEX TO 5 ON f
           APPLY CYL-OVERFLOW 10 TRACKS f
           APPLY EXTENDED-SEARCH g
           APPLY MASTER-INDEX TO 5 on g
           APPLY WRITE-VERIFY f, g
           APPLY REORG-CRITERIA f-rec, f
           RERUN ON "g2.dat" EVERY END REEL g
           .
       DATA             DIVISION.
       FILE             SECTION.
       FD  f.
       01  f-rec        PIC X(100).

       FD  g.
       01  g-rec        PIC 9(10).

       WORKING-STORAGE  SECTION.
       01  core-idx     PIC 999.
       01  f-max        PIC 9(5) VALUE 1000.
       01  g-key        PIC 999.
       01  g-actual-key PIC XXX.

       PROCEDURE        DIVISION.
           OPEN INPUT f DISP, INPUT g REREAD
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [],
[prog.cob:10: warning: FILE-LIMIT is obsolete in GnuCOBOL
prog.cob:10: warning: TRACK-AREA is obsolete in GnuCOBOL
prog.cob:11: warning: TRACK-LIMIT is obsolete in GnuCOBOL
prog.cob:14: warning: ACTUAL KEY is obsolete in GnuCOBOL
prog.cob:18: warning: DOS/VS APPLY phrase is obsolete in GnuCOBOL
prog.cob:19: warning: DOS/VS APPLY phrase is obsolete in GnuCOBOL
prog.cob:20: warning: DOS/VS APPLY phrase is obsolete in GnuCOBOL
prog.cob:21: warning: DOS/VS APPLY phrase is obsolete in GnuCOBOL
prog.cob:22: warning: DOS/VS APPLY phrase is obsolete in GnuCOBOL
prog.cob:23: warning: DOS/VS APPLY phrase is obsolete in GnuCOBOL
prog.cob:24: warning: DOS/VS APPLY phrase is obsolete in GnuCOBOL
prog.cob:25: warning: DOS/VS APPLY phrase is obsolete in GnuCOBOL
prog.cob:42: warning: OPEN LEAVE/REREAD/DISP is obsolete in GnuCOBOL
prog.cob:42: warning: OPEN LEAVE/REREAD/DISP is obsolete in GnuCOBOL
])
AT_CLEANUP


AT_SETUP([long literal in error message])
AT_KEYWORDS([misc literals])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      tutorial.
       PROCEDURE DIVISION.
           move low-values to
           ' 1  c d e f g h i j k l m n 0 q.'-
           ' 2  C D E F G H I J K L M N 0 Q.'-
           ' 3  c d e f g h i j k l m n 0 q.'-
           ' 4  C D E F G H I J K L M N 0 Q.'-
           ' 5  c d e f g h i j k l m n 0 q.'-
           ' 6  C D E F G H I J K L M N 0 Q.'-
           ' 7  c d e f g h i j k l m n 0 q.'-
           ' 8  C D E F G H I J K L M N 0 Q.'-
           ' 9  c d e f g h i j k l m n 0 q.'-
           '10  C D E F G H I J K L M N 0 Q.'-
           '11  c d e f g h i j k l m n 0 q.'-
           '12  C D E F G H I J K L M N 0 Q.'-
           '13  c d e f g h i j k l m n 0 q.'-
           '14  C D E F G H I J K L M N 0 Q.'-
           '15  c d e f g h i j k l m n 0 q.'.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:5: error: invalid MOVE target: literal " 1  c d e f g h i j k l m n 0 q. 2 ..."
])

AT_CLEANUP


AT_SETUP([literal missing terminating character])
AT_KEYWORDS([misc literals terminator])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      tutorial.
       PROCEDURE DIVISION.
           DISPLAY ' 1  c d e f g h i j k l m n 0 q.
      -            ' 2  C D E F G H I J K L M N 0 Q.
])

# FIXME: we should move this from scanner to pplex to preserve the spaces
# [prog.cob:5: error: invalid literal: ' 1  c d e f g h i j k l m n 0 q. ...'
AT_CHECK([$COMPILE_ONLY -w prog.cob], [1], [],
[prog.cob:5: error: invalid literal: ' 1 c d e f g h i j k l m n 0 q. 2  ...'
prog.cob:5: error: missing terminating ' character
])

AT_CLEANUP

AT_SETUP([EQUALS in expressions])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  num PIC 99 VALUE 0.
       PROCEDURE DIVISION.
           IF num LESS OR EQUALS 0
               CONTINUE
           END-IF
           IF num GREATER THAN OR EQUALS 1
               CONTINUE
           END-IF
           IF num EQUALS TO 0
               CONTINUE
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CLEANUP


AT_SETUP([Invalid parentheses around condition])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  num PIC 99 VALUE 0.
       PROCEDURE DIVISION.
           IF num NOT (LESS OR EQUALS) 0 
               CONTINUE
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [1], [],
[prog.cob:9: error: invalid expression
])
AT_CLEANUP


AT_SETUP([DISPLAY directive (1)])
AT_KEYWORDS([misc directive])

# this format is COBOL 202x without UPON
# --> implied UPON LISTING which goes to stdout
# as there is no listing active
# TODO: extend the >> DISPLAY tests and actually support
#       the complete format...

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
       >>DISPLAY "OK"
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0],
[OK
])
AT_CLEANUP


AT_SETUP([DISPLAY directive (2)])
AT_KEYWORDS([misc extension directive])

# this is an OpenCOBOL/GnuCOBOL 2.x extension, with implied literal
# similar to $DISPLAY

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
       >>DISPLAY OK
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0],
[OK
])
AT_CLEANUP


AT_SETUP([DISPLAY directive (3)])
AT_KEYWORDS([misc extension directive])

# this is the classical MicroFocus format

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
      $DISPLAY OK
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0],
[OK
])
AT_CLEANUP


AT_SETUP([SET CONSTANT directive])
AT_KEYWORDS([misc directives extensions])

# The SET CONSTANT directive defines a level78 variable
# for the current compilation unit

# original MF extension: $SET CONSTANT
AT_DATA([prog.cob], [
       $SET CONSTANT DOGGY "Barky"
       $SET CONSTANT PONY "Blacky"
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  THEDOG    PIC X(6) VALUE DOGGY.
       77  MYHORSE   PIC X(7) VALUE PONY.
       $SET CONSTANT PONY "White"
      *
      * ensure to test a numeric, too (not actually used):
       $SET CONSTANT C-UNUSED-NUM 0
       PROCEDURE DIVISION.
       MAIN.
           DISPLAY "Your Dog's name is " DOGGY ";".
           DISPLAY "The Dog's name is " THEDOG ";".
           DISPLAY "My Horse is " MYHORSE ";".
           DISPLAY "My little pony is " PONY ".".
           STOP RUN.
])

# OpenCOBOL/GnuCOBOL extension (deprecated): >>SET CONSTANT
AT_DATA([prog2.cob], [
       >>SET CONSTANT DOGGY "Barky"
       >>SET CONSTANT PONY "Blacky"
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog2.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  THEDOG    PIC X(6) VALUE DOGGY.
       77  MYHORSE   PIC X(7) VALUE PONY.
       >>SET CONSTANT PONY "White"
      *
       PROCEDURE DIVISION.
       MAIN.
           DISPLAY "Your Dog's name is " DOGGY ";".
           DISPLAY "The Dog's name is " THEDOG ";".
           DISPLAY "My Horse is " MYHORSE ";".
           DISPLAY "My little pony is " PONY ".".
           STOP RUN.
])

# OpenCOBOL/GnuCOBOL extension: >>DEFINE CONSTANT
AT_DATA([prog3.cob], [
       >>DEFINE CONSTANT DOGGY "Barky"
       >>DEFINE CONSTANT PONY "Blacky"
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog3.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  THEDOG    PIC X(6) VALUE DOGGY.
       77  MYHORSE   PIC X(7) VALUE PONY.
       >>DEFINE CONSTANT PONY "White" OVERRIDE
      *
       PROCEDURE DIVISION.
       MAIN.
           DISPLAY "Your Dog's name is " DOGGY ";".
           DISPLAY "The Dog's name is " THEDOG ";".
           DISPLAY "My Horse is " MYHORSE ";".
           DISPLAY "My little pony is " PONY ".".
           STOP RUN.
])

# Note: MF does not redefine a value via SET CONSTANT
# the first definitions wins (we should add a warning)
AT_CHECK([$COMPILE_ONLY -std=mf prog.cob], [0], [], [])
# FIXME: Should raise an error or at least a warning
# AT_CHECK([$COMPILE_ONLY -std=cobol2002 prog.cob], [0], [], [])

# Note: MF does not redefine a value via SET CONSTANT
# the first definitions wins (we should add a warning)
AT_CHECK([$COMPILE_ONLY prog2.cob], [0], [], [])
# FIXME: Should raise an error or at least a warning
# AT_CHECK([$COMPILE_ONLY -std=cobol2002 prog2.cob], [0], [], [])

AT_CHECK([$COMPILE_ONLY -fdefine-constant-directive=ok prog3.cob], [0], [], [])
# CHECKME: Replace the syntax error by explicit "is not defined".
AT_CHECK([$COMPILE_ONLY -std=cobol2002 prog3.cob], [1], [],
[prog3.cob:2: error: >> DEFINE CONSTANT var used
prog3.cob:3: error: >> DEFINE CONSTANT var used
prog3.cob:10: error: >> DEFINE CONSTANT var used
prog3.cob:8: error: syntax error, unexpected Identifier
prog3.cob:9: error: syntax error, unexpected Identifier
prog3.cob: in paragraph 'MAIN':
prog3.cob:14: error: 'DOGGY' is not defined
prog3.cob:17: error: 'PONY' is not defined
])

AT_CLEANUP


AT_SETUP([conditional / define directives (1)])
AT_KEYWORDS([misc directive])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
       >>IF ACTIVATE DEFINED
       >>DISPLAY "NOTOK"
       >>ELIF ACTIVATE2 DEFINED
       >>DISPLAY "OK"
       >>ELSE
       >>DISPLAY "NOTOK"
       >>END-IF
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -DACTIVATE2 prog.cob], [0],
[OK
])
AT_CLEANUP


AT_SETUP([conditional / define directives (2)])
AT_KEYWORDS([misc directive])

# COBOL 2002 format; checks that defines are applied at correct place

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.
       PROCEDURE      DIVISION.
       >> IF X DEFINED
         >>DISPLAY "X defined"
       >> ELSE
         >> DISPLAY "X not defined"
         >> DEFINE X 1
       >> END-IF
           CONTINUE
           .
])

AT_CHECK([$COMPILE_ONLY -D X prog.cob], [0],
[X defined
])
AT_CHECK([$COMPILE_ONLY prog.cob], [0],
[X not defined
])
AT_CLEANUP


AT_SETUP([conditional / define directives (3)])
AT_KEYWORDS([misc directive])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.
       PROCEDURE      DIVISION.
       >>IF A IS DEFINED
       >>IF B IS DEFINED
           CONTINUE
       >> DISPLAY "NOT OK (not both definitions)"
           .
       >>ELSE
           CONTINUE
       >> DISPLAY "NOT OK (no definitions)"
           .
       >>END-IF
       >>ELSE
           CONTINUE
       >> DISPLAY "OK"
           .
       >>END-IF
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0],
[OK
], [])
AT_CLEANUP


AT_SETUP([conditional / define directives (4)])
AT_KEYWORDS([misc directive])

# check for case-insensivity

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.
       PROCEDURE      DIVISION.
       >>IF A IS DEFINED
           CONTINUE
           .
       >>else
           CONTINUE
           .
       >>eNd-If
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [])
AT_CLEANUP


AT_SETUP([error handling in conditional directives])
AT_KEYWORDS([misc directive])

# TODO: add missing tests for syntax errors in >>IF/ELSE/END

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.
       PROCEDURE      DIVISION.
       >> IF BANANA
         >>DISPLAY "Who throws bananas?"
       >> ELSE
         >> DISPLAY "No BANANA here."
         >> DEFINE X 1
       >> END-IF
           CONTINUE
           .
])

AT_CHECK([$COMPILE_ONLY -D X prog.cob], [1],
[No BANANA here.
],
[prog.cob:5: error: invalid IF directive
prog.cob:9: error: duplicate DEFINE directive 'X'
])
AT_CLEANUP


AT_SETUP([conditional directives with lvl 78 (1)])
AT_KEYWORDS([misc extensions directive])

# MicroFocus format; checks that level 78 are applied

# FIXME - not done yet:
AT_XFAIL_IF([true])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.
       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       78 Y            VALUE 'a'.
       PROCEDURE       DIVISION.
      $IF X DEFINED
      $DISPLAY X defined
      $ELIF Y DEFINED
      $DISPLAY X not defined, but Y via lvl 78
      $ELSE
      $DISPLAY X not defined
      $END
           CONTINUE
           .
])

AT_CHECK([$COMPILE_ONLY -D X prog.cob], [0],
[X defined
])
AT_CHECK([$COMPILE_ONLY prog.cob], [0],
[X not defined, but Y via lvl 78
])
AT_CLEANUP


AT_SETUP([conditional directives with lvl 78 (2)])
AT_KEYWORDS([misc extensions directive])

# MicroFocus format; checks that level 78 are applied with correct values

# FIXME - not done yet:
AT_XFAIL_IF([true])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.
       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       78 Y            VALUE 1.
       78 Y2           VALUE 1.
       78 X            VALUE 2.
       78 Z            VALUE 354.
       PROCEDURE       DIVISION.
      $IF Y = Y2X
      $DISPLAY correct Y = Y2
      $ELSE
      $DISPLAY bad: Y should be = Y2
      $END
      $IF Y > X
      $DISPLAY BAD - Y is not > X
      $ELIF Y < X
      $DISPLAY correct Y < X
      $ELSE
      $DISPLAY BROKEN
      $END
      
      $IF X > Y
      $DISPLAY correct X > Y
      $ELIF X < Y
      $DISPLAY BAD - X is not < Y
      $ELSE
      $DISPLAY BROKEN
      $END
           CONTINUE
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0],
[correct Y = Y2
correct Y < X
correct X > Y
])
AT_CLEANUP


AT_SETUP([Missing reserved word with DEBUGGING MODE])
AT_KEYWORDS([misc COBOL-85])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. my-prog.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER. GNU-Linux WITH DEBUGGING MODE.

       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT gen-file ASSIGN "f.txt".

       DATA DIVISION.
       FILE SECTION.
       FD  gen-file.
       01  gen-file-rec PIC X.

       PROCEDURE DIVISION.
           OPEN INPUT gen-file
           .
])

AT_CHECK([$COMPILE_ONLY -std=cobol85 prog.cob], [0], [])
AT_CLEANUP


AT_SETUP([Invalid PERFORM statement])
AT_KEYWORDS([misc])

# TODO: likely more to add here when inspecting code-coverage

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. DEMOUNSTRING.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  Full-Name               PIC X(40).
       01  SUB1                    USAGE BINARY-SHORT.
       PROCEDURE DIVISION.
           MOVE 1                  TO SUB1
           PERFORM LENGTH(Full-Name) TIMES
           IF Full-Name(SUB2:1) = SPACE
              IF Full-Name(SUB2 + 1:1) = SPACE
                 DISPLAY 'IN'
                 EXIT PERFORM CYCLE 
              END-IF
           END-IF
           ADD 1 TO SUB1.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[[prog.cob:10: error: syntax error, unexpected (
prog.cob:17: error: syntax error, unexpected ., expecting TIMES
]])
AT_CLEANUP


AT_SETUP([PERFORM THRU syntax checks])
AT_KEYWORDS([misc warning])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       PROCEDURE DIVISION.
       MAIN SECTION.
       MAIN-00.
           PERFORM SUB1
           PERFORM SUB1 THRU SUB1-EX
           PERFORM SUB1-00 THRU SUB1-EX
           PERFORM SUB1 THRU SUB1
           PERFORM SUB1 THRU SUB2
           GOBACK.
       MAIN-EX. EXIT.
      *
       SUB1 SECTION.
       SUB1-00.
           PERFORM SUB1-01 THRU SUB1-02.
       SUB1-01.
           CONTINUE.
       SUB1-02.
           CONTINUE.
       SUB1-EX. EXIT.
      *
       SUB2 SECTION.
       SUB2-00.
           PERFORM SUB1-02 THRU SUB1-01.
       SUB2-01.
           CONTINUE.
       SUB2-02.
           CONTINUE.
       SUB2-EX. EXIT.
])

AT_CHECK([$COMPILE_ONLY -Wno-suspicious-perform-thru prog.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY -Wall -fsection-exit-check prog.cob], [0], [],
[prog.cob: in section 'SUB2':
prog.cob: in paragraph 'SUB2-00':
prog.cob:11: warning: PERFORM ... THROUGH SECTION and -fsection-exit-check are mutually exclusive
prog.cob:26: warning: SUB1-01 is defined before SUB1-02
prog.cob:20: note: 'SUB1-02' defined here
prog.cob:18: note: 'SUB1-01' defined here
])
AT_CLEANUP


AT_SETUP([VALIDATE parsing])
AT_KEYWORDS([misc 2002 BIT TYPEDEF STRONG VALIDATE-STATUS PRESENT WHEN DESTINATION])

# Note: so far the VALIDATE statement is only partial implemented in the
#       compiler, but it is planned to completely add it
# This syntax example also show-cases a bunch of other COBOL 2002 options
# which would otherwise be not checked elsewhere so far

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
   *> D.22.7.1    Example of validation of USAGE DISPLAY items
   *>
   *>*************************************************************
   *>Description of target record (note: should be possible to define later)
   *>*************************************************************
   *>This is set up by the optional DESTINATION clauses defined
   *>in the input record;
   *>if a format error is found, a default value is stored instead.
    01  TARGET-AREA.
        05  OUT-NAME       PIC X(20).
        05  OUT-WEEK       PIC 99 COMP   OCCURS 5.
   *>*************************************************************
   *>Validated items
   *>*************************************************************
    01  INPUT-RECORD.
   *>PIC 99 checks that IN-TYPE is 2 characters numeric;
        03  IN-TYPE         PIC 99
   *>if IN-TYPE fails the PICTURE check, it is assumed to be 1;
   *>without a DEFAULT clause, the assumed value would here be 0.
                                DEFAULT 1.
   *>PRESENT WHEN states the condition for this format to be used.
        03  IN-REC-FORMAT-1 PRESENT WHEN IN-TYPE = 0 OR 1 OR 2.
   *>PICTURE A(20) checks for 20 alphabetic (or space) characters.
            05  IN-NAME       PIC A(20)
   *>PRESENT WHEN defines when the validation clauses for this data item apply:
                                 PRESENT WHEN IN-TYPE = 0 OR 1
   *>CLASS checks each character for a class defined in SPECIAL-NAMES
   *>or a predefined class
                                 CLASS IS ALPHABETIC-UPPER 
   *>DESTINATION moves this item (or spaces if not alpha) to OUT-NAME.
                                 DESTINATION OUT-NAME.
   *>PRESENT WHEN checks whether the item is "blank" under this condition
            05  FILLER REDEFINES IN-NAME  PIC X(20) *> should PIC be optional?
                                 PRESENT WHEN IN-TYPE = 2
                                 DESTINATION OUT-NAME.
                88               VALUE SPACES IS VALID.
   *>The values of IN-WEEK are checked to be in non-descending order.
            05  IN-WEEK       PIC 99  OCCURS 5
                VARYING IN-WEEK-NO FROM 1, IN-NEXT-WEEK-NO FROM 2
                INVALID WHEN IN-WEEK-NO < 5
                AND IN-WEEK (IN-WEEK-NO) > IN-WEEK (IN-NEXT-WEEK-NO)
   *>OUT-WEEK (1) to (5) will hold the values of IN-WEEK (1) to (5),
   *>or zero for any one that failed the format (PICTURE) test.
                DESTINATION OUT-WEEK (IN-WEEK-NO).
   *>The 88-level INVALID entries check for invalid ranges of values.
               88  VALUES 0, 53 THRU 99 ARE INVALID.
   *>REDEFINES and another PRESENT WHEN define an alternate format.
        03  IN-REC-FORMAT-2 REDEFINES IN-REC-FORMAT-1
                                        PRESENT WHEN IN-TYPE > 2.
   *>IN-PAY has insertion characters that must be present on input.
            05  IN-PAY                PIC ZZ,ZZZ.ZZ.
   *>The 88-level VALID entries check for valid ranges of values;
   *>the condition-name, if present, may be used in the usual way.
   *>The following assume that DECIMAL POINT IS COMMA is not specified.
                 88  IN-PAY-OK  VALUES "10,000.00" THRU "20,000.00" ARE VALID.
   *>88-level entries may also have a condition attached.
                 88                    VALUES "20,000.01" THRU "30,000.00" ARE VALID
                                       WHEN IN-TYPE = 8.
   *>exceptional cases can be specified using PRESENT WHEN
            05  IN-CODE                PIC AX(3)9(4) 
                                       PRESENT WHEN IN-CODE NOT = "UNKNOWN".
            05  FILLER           PIC X(13).
   *>
   *>*************************************************************
   *> Description of error messages
   *>*************************************************************
   *>Error messages or flags are set up or cleared automatically 
   *>when the VALIDATE statement is executed; the programmer chooses
   *>where they go and what messages or values they contain;
   *>they need not be contiguous as they are in this example.
   01  VALIDATE-MESSAGES.
       03  PIC X(40)  VALIDATE-STATUS "Unknown Record Type - 1 assumed" 
                        WHEN ERROR FOR IN-TYPE
   *> more than one VALIDATE-STATUS clause may be defined in one entry;
   *> a NO ERROR  phrase produces a message when the item is valid.
                      VALIDATE-STATUS "Record type Accepted"
                        WHEN NO ERROR FOR IN-TYPE.
   *> The VALIDATE-STATUS clause can pinpoint the stage of the failed check.
       03  PIC X(40)  VALIDATE-STATUS "Name not alphabetic"
                        WHEN ERROR ON FORMAT FOR IN-NAME
                      VALIDATE-STATUS "Lower-case not allowed in name"
                        WHEN ERROR ON CONTENT FOR IN-NAME
                      VALIDATE-STATUS "Name not allowed in this case"
                        WHEN ERROR ON RELATION FOR IN-NAME.
   *> If no message is stored, spaces will be stored in these cases.
   *> Errors may also be indicated by flags;
   *> they may also refer to a table of input items.
       03  W-ERROR-FLAG   PIC 9   COMP  OCCURS 5
                      VALIDATE-STATUS 1 WHEN ERROR FOR IN-WEEK.
   *>An EC-VALIDATE (nonfatal) exception is also set if the
   *>VALIDATE statement detects an invalid condition.
   

   *> From D.22.7.2    Example of validation of non-display items:
      01  MIXED-GROUP TYPEDEF STRONG.
          05  FLD-1             PIC S9(4)  USAGE COMP.
          05  FLD-2             PIC S9(7)  USAGE PACKED-DECIMAL.
          05  FLD-3             PIC 1(8)   USAGE BIT ALIGNED.
          05  PTR-1             USAGE INDEX.
          05  PTR-2             USAGE OBJECT REFERENCE.
          05  TXT-1             PIC N(12)  USAGE NATIONAL.
    01 MY-MIXED-GROUP TYPE MIXED-GROUP.
   
   
   *>
   *>*************************************************************
   *>Execution of the VALIDATE statement
   *>*************************************************************
    PROCEDURE DIVISION.
    
   *>A single VALIDATE statement performs all the actions implied
   *>in the above data descriptions.
        VALIDATE INPUT-RECORD
   *>After this statement has been executed:
   *>(1) the input record is unchanged;
   *>(2) input items are moved automatically to the target area;
   *>(3) error messages are set up wherever specified in the program.
   *>
   
   *> From D.22.7.2    Example of validation of non-display items:
   *>A declarative section could be used instead of VALIDATE-STATUS clauses
   *>especially if errors are not expected.
   *>> TURN EC-VALIDATE CHECKING ON
        VALIDATE MY-MIXED-GROUP
        
     GOBACK.
])

AT_CHECK([$COMPILE_ONLY -Wno-pending -Wno-unfinished -free prog.cob], [0], [], [])

AT_CLEANUP



AT_SETUP([field-tree via COBC_GEN_DUMP_COMMENTS])
AT_KEYWORDS([misc binaries dump])

# Note: this is a feature which is used in external tools, primarily
#       cobcd from COBOLworx debugging extensions, this test does only
#       verify that modules compiled with that can be compiled and
#       that the expected content is found in the dump code (everything
#       which is not related to the actual dump is included as comment
# Note2: This feature will vanish if/when cobc gets an option to output
#       its (parse) trees.

AT_DATA([prog.cob], [
       identification division.
       program-id. debugme.
       data division.
       working-storage section.
       01  numeric-data.
           05 disp     usage display        pic s99v999  value -12.34.
           05 disp-u   usage display        pic  99v999  value  12.34.
           05 dispp    usage display        pic sppp9999 value -.000123.
           05 dispp-u  usage display        pic  ppp9999 value  .000123.
           05 disppp   usage display        pic s9999ppp value -1234000.
           05 disppp-u usage display        pic  9999ppp value  1234000.
           05 bin      usage binary         pic s99v999  value -12.34.
           05 bin-u    usage binary         pic  99v999  value  12.34.
           05 cmp3     usage packed-decimal pic s99v999  value -12.34.
           05 cmp3-u   usage packed-decimal pic  99v999  value  12.34.
           05 cmp5     usage comp-5         pic s99v999  value -12.34.
           05 cmp5-u   usage comp-5         pic  99v999  value  12.34.
           05 cmp6     usage comp-6         pic  99v999  value  12.34.
           05 cmpx     usage comp-x         pic s99v999  value -12.34.
           05 cmpx-u   usage comp-x         pic  99v999  value  12.34.
           05 cmpn     usage comp-n         pic s99v999  value -12.34.
           05 cmpn-u   usage comp-n         pic  99v999  value  12.34.
           05 chr      usage binary-char    signed    value -128.
           05 chr-u    usage binary-char    unsigned  value  254.
           05 shrt     usage binary-short   signed    value -32768.
           05 shrt-u   usage binary-short   unsigned  value  65535.
           05 long     usage binary-long    signed    value -2147483648.
           05 long-u   usage binary-long    unsigned  value  4294967295.
           05 dble     usage binary-double  signed    value -4294967295.
           05 dble-u   usage binary-double  unsigned  value  8294967295.
      *   05 cmp0       usage comp-0.  TODO
       01  floating-data.
           05 dbl       usage float-long      value -3.40282e+038.
           05 flt       usage float-short     value 3.40282e+038.
      *   05 b32        usage FLOAT-BINARY-32  signed.      TODO
      *   05 b64        usage FLOAT-BINARY-64  signed.      TODO
      *   05 b128       usage FLOAT-BINARY-128 signed.      TODO
      *   05 b32-u      usage FLOAT-BINARY-32  unsigned.    TODO
      *   05 b64-u      usage FLOAT-BINARY-64  unsigned.    TODO
      *   05 b128-u     usage FLOAT-BINARY-128 unsigned.    TODO
      *
      *  --> missing:   floating point edited pictures,
      *                 those are left to the reader as excercise :-)
       77 x36            pic x(36) is typedef.
      * In the following block, "sync" prevents SIGBUS errors on SOLARIS systems.
       01  special-data.
           05 r2d2       usage bit pic 111 value b'110'.
      *>   disabled for now because of varying size
      *>   05 point      usage pointer         sync.
      *>   05 ppoint     usage program-pointer sync.
      *>   05 idx        usage index           sync.
      *>   05 hnd        usage handle          sync.
       01  alphanumeric-data.
           05 alpnum     usage x36 value "some numb3rs 4 n00bs l1k3 m3".
           05 alpha      pic a(36) value "thats some text".
           05 edit-num1  pic --9.999.
           05 edit-num2  pic ++9.999.
           05 edit-num3  pic zz9.999.
           05 edit-num4  pic -zz9.999   blank when zero.
       01  national-data.
           05 nat        pic n(36) value "data shown here will change.".
           05 nat-num    pic 9(12)v9(3) usage national.
           05 net-num1   pic --9.999    usage national.
           05 net-num2   pic ++9.999    usage national.
           05 net-num3   pic zz9.999    usage national.
           05 net-num4   pic -zz9.999   usage national blank when zero.
      *
       01 occurs 2 to 5 times depending on chr indexed by x-idx.
         03 x-basis.
           05  x-a                 pic x(01) value space.
           05  x-b                 pic x(01) value space.
           05  x-c                 pic x(01) value space.
         03 filler redefines x-basis pic x(03).
           88  sw-x-basis-full     value "xxx".
       01  x-rms.                  
           05  x-rms-a             pic x(01) value space.
       01 filler redefines x-rms   pic x(01).
           88  sw-x-rms-full       value "X" or "A" thru "C" or QUOTE.

       local-storage section.
       01  var1       pic x.
       01  var2.
          03  var2a   pic x.
          03  var2b   pic 9.
           88 yay     values zero, 2 through 5, 9.
])

AT_CAPTURE_FILE([prog.c])

AT_CHECK([COBC_GEN_DUMP_COMMENTS=1 \
  $COMPILE -C -fdump=all -w prog.cob], [0], [])
# TODO: only execute this piece when extended $GREP works
AT_CHECK([($GREP -A 200 "P_dump:" prog.c | $GREP -B 200 "END OF DUMP") || exit 77], [0],
[  P_dump:
  /* Dump WORKING-STORAGE */
  cob_dump_output ("WORKING-STORAGE");
  cob_dump_field_ext (77, "RETURN-CODE", COB_SET_FLD (f0, 4, (cob_u8_t *)&b_2, &a_46), 0, 0);
  cob_dump_field_ext ( 1, "numeric-data", COB_SET_FLD (f0, 93, b_17, &a_47), 0, 0);
  cob_dump_field_ext ( 5, "disp", COB_SET_FLD (f0, 5, b_17, &a_2), 0, 0);
  cob_dump_field_ext ( 5, "disp-u", COB_SET_FLD (f0, 5, b_17 + 5, &a_4), 0, 0);
  cob_dump_field_ext ( 5, "dispp", COB_SET_FLD (f0, 4, b_17 + 10, &a_6), 0, 0);
  cob_dump_field_ext ( 5, "dispp-u", COB_SET_FLD (f0, 4, b_17 + 14, &a_8), 0, 0);
  cob_dump_field_ext ( 5, "disppp", COB_SET_FLD (f0, 4, b_17 + 18, &a_10), 0, 0);
  cob_dump_field_ext ( 5, "disppp-u", COB_SET_FLD (f0, 4, b_17 + 22, &a_12), 0, 0);
  cob_dump_field_ext ( 5, "bin", COB_SET_FLD (f0, 4, b_17 + 26, &a_13), 0, 0);
  cob_dump_field_ext ( 5, "bin-u", COB_SET_FLD (f0, 4, b_17 + 30, &a_14), 0, 0);
  cob_dump_field_ext ( 5, "cmp3", COB_SET_FLD (f0, 3, b_17 + 34, &a_15), 0, 0);
  cob_dump_field_ext ( 5, "cmp3-u", COB_SET_FLD (f0, 3, b_17 + 37, &a_16), 0, 0);
  cob_dump_field_ext ( 5, "cmp5", COB_SET_FLD (f0, 4, b_17 + 40, &a_17), 0, 0);
  cob_dump_field_ext ( 5, "cmp5-u", COB_SET_FLD (f0, 4, b_17 + 44, &a_18), 0, 0);
  cob_dump_field_ext ( 5, "cmp6", COB_SET_FLD (f0, 3, b_17 + 48, &a_19), 0, 0);
  cob_dump_field_ext ( 5, "cmpx", COB_SET_FLD (f0, 3, b_17 + 51, &a_20), 0, 0);
  cob_dump_field_ext ( 5, "cmpx-u", COB_SET_FLD (f0, 3, b_17 + 54, &a_21), 0, 0);
  cob_dump_field_ext ( 5, "cmpn", COB_SET_FLD (f0, 3, b_17 + 57, &a_20), 0, 0);
  cob_dump_field_ext ( 5, "cmpn-u", COB_SET_FLD (f0, 3, b_17 + 60, &a_21), 0, 0);
  cob_dump_field_ext ( 5, "chr", &f_35, 0, 0);
  cob_dump_field_ext ( 5, "chr-u", COB_SET_FLD (f0, 1, b_17 + 64, &a_25), 0, 0);
  cob_dump_field_ext ( 5, "shrt", COB_SET_FLD (f0, 2, b_17 + 65, &a_27), 0, 0);
  cob_dump_field_ext ( 5, "shrt-u", COB_SET_FLD (f0, 2, b_17 + 67, &a_29), 0, 0);
  cob_dump_field_ext ( 5, "long", COB_SET_FLD (f0, 4, b_17 + 69, &a_31), 0, 0);
  cob_dump_field_ext ( 5, "long-u", COB_SET_FLD (f0, 4, b_17 + 73, &a_33), 0, 0);
  cob_dump_field_ext ( 5, "dble", COB_SET_FLD (f0, 8, b_17 + 77, &a_34), 0, 0);
  cob_dump_field_ext ( 5, "dble-u", COB_SET_FLD (f0, 8, b_17 + 85, &a_35), 0, 0);
  cob_dump_field_ext ( 1, "floating-data", COB_SET_FLD (f0, 12, b_43, &a_47), 0, 0);
  cob_dump_field_ext ( 5, "dbl", COB_SET_FLD (f0, 8, b_43, &a_37), 0, 0);
  cob_dump_field_ext ( 5, "flt", COB_SET_FLD (f0, 4, b_43 + 8, &a_39), 0, 0);
  cob_dump_field_ext ( 1, "special-data", COB_SET_FLD (f0, 1, b_47, &a_47), 0, 0);
  cob_dump_field_ext ( 5, "r2d2", COB_SET_FLD (f0, 1, b_47, &a_41), 0, 0);
  cob_dump_field_ext ( 1, "alphanumeric-data", COB_SET_FLD (f0, 101, b_49, &a_47), 0, 0);
  cob_dump_field_ext ( 5, "alpnum", COB_SET_FLD (f0, 36, b_49, &a_48), 0, 0);
  cob_dump_field_ext ( 5, "alpha", COB_SET_FLD (f0, 36, b_49 + 36, &a_48), 0, 0);
  cob_dump_field_ext ( 5, "edit-num1", COB_SET_FLD (f0, 7, b_49 + 72, &a_42), 0, 0);
  cob_dump_field_ext ( 5, "edit-num2", COB_SET_FLD (f0, 7, b_49 + 79, &a_43), 0, 0);
  cob_dump_field_ext ( 5, "edit-num3", COB_SET_FLD (f0, 7, b_49 + 86, &a_44), 0, 0);
  cob_dump_field_ext ( 5, "edit-num4", COB_SET_FLD (f0, 8, b_49 + 93, &a_45), 0, 0);
  cob_dump_field_ext ( 1, "national-data", COB_SET_FLD (f0, 160, b_56, &a_47), 0, 0);
  cob_dump_field_ext ( 5, "nat", COB_SET_FLD (f0, 72, b_56, &a_49), 0, 0);
  cob_dump_field_ext ( 5, "nat-num", COB_SET_FLD (f0, 30, b_56 + 72, &a_50), 0, 0);
  cob_dump_field_ext ( 5, "net-num1", COB_SET_FLD (f0, 14, b_56 + 102, &a_42), 0, 0);
  cob_dump_field_ext ( 5, "net-num2", COB_SET_FLD (f0, 14, b_56 + 116, &a_43), 0, 0);
  cob_dump_field_ext ( 5, "net-num3", COB_SET_FLD (f0, 14, b_56 + 130, &a_44), 0, 0);
  cob_dump_field_ext ( 5, "net-num4", COB_SET_FLD (f0, 16, b_56 + 144, &a_45), 0, 0);
  cob_dump_field_ext ( 0, "x-idx", COB_SET_FLD (f0, 4, (cob_u8_t *)&b_64, &a_46), 0, 0);
  {
    int i_1;
    int max_1 = (*(cob_s8_ptr) (b_17 + 63));
    if (max_1 > 5) max_1 = 5;
    for (i_1=0; i_1 < max_1; i_1++)
    {
      cob_dump_field_ext ( 1, "FILLER", COB_SET_FLD (f0, 3, b_63, &a_47), 0, 1, i_1, 3UL); /* OCCURS 2 5 */
      cob_dump_field_ext ( 3, "x-basis", COB_SET_FLD (f0, 3, b_63, &a_47), 0, 1, i_1, 3UL);
      cob_dump_field_ext ( 5, "x-a", COB_SET_FLD (f0, 1, b_63, &a_48), 0, 1, i_1, 3UL);
      cob_dump_field_ext ( 5, "x-b", COB_SET_FLD (f0, 1, b_63 + 1, &a_48), 0, 1, i_1, 3UL);
      cob_dump_field_ext ( 5, "x-c", COB_SET_FLD (f0, 1, b_63 + 2, &a_48), 0, 1, i_1, 3UL);
      /* cob_dump_field_ext ( 3, "FILLER", COB_SET_FLD (f0, 3, b_63, &a_48), 0, 1, i_1, 3UL); REDEFINES */
      /* cob_dump_field_ext (88, "sw-x-basis-full", COB_SET_FLD (f0, 3, b_63, &a_48), 0, 1, i_1, 3UL); VALUE (cob_field *)&c_18 */
    }
  }
  cob_dump_field_ext ( 1, "x-rms", COB_SET_FLD (f0, 1, b_71, &a_47), 0, 0);
  cob_dump_field_ext ( 5, "x-rms-a", COB_SET_FLD (f0, 1, b_71, &a_48), 0, 0);
  /* cob_dump_field_ext ( 1, "FILLER", COB_SET_FLD (f0, 1, b_71, &a_48), 0, 0); REDEFINES */
  /* cob_dump_field_ext (88, "sw-x-rms-full", COB_SET_FLD (f0, 1, b_71, &a_48), 0, 0); VALUE (cob_field *)&c_19 OR (cob_field *)&c_20 OR (cob_field *)&c_21 THRU (cob_field *)&c_22 OR (cob_field *)&c_20 OR &cob_all_quote */

  /* Dump LOCAL-STORAGE SECTION */
  cob_dump_output ("LOCAL-STORAGE");
  cob_dump_field_ext ( 1, "var1", COB_SET_FLD (f0, 1, cob_local_ptr, &a_48), 0, 0);
  cob_dump_field_ext ( 1, "var2", COB_SET_FLD (f0, 2, cob_local_ptr + 16, &a_47), 0, 0);
  cob_dump_field_ext ( 3, "var2a", COB_SET_FLD (f0, 1, cob_local_ptr + 16, &a_48), 0, 0);
  cob_dump_field_ext ( 3, "var2b", COB_SET_FLD (f0, 1, cob_local_ptr + 16 + 1, &a_52), 0, 0);
  /* cob_dump_field_ext (88, "yay", COB_SET_FLD (f0, 1, cob_local_ptr + 16 + 1, &a_52), 0, 0); VALUE &cob_all_zero OR (cob_field *)&c_23 THRU (cob_field *)&c_24 OR (cob_field *)&c_25 */

  cob_dump_output ("END OF DUMP - debugme");
])

AT_CHECK([COBC_GEN_DUMP_COMMENTS=1 \
  $COMPILE -C -w prog.cob], [0], [])
# TODO: only execute this piece when extended $GREP works
AT_CHECK([($GREP -A 200 "P_dump:" prog.c | $GREP -B 200 "END OF DUMP") || exit 77], [0],
[  P_dump:
  /* Dump WORKING-STORAGE (informational) */
  /* cob_dump_output ("WORKING-STORAGE"); */
  /* cob_dump_field_ext (77, "RETURN-CODE", COB_SET_FLD (f0, 4, (cob_u8_t *)&b_2, &a_46), 0, 0); */
  /* cob_dump_field_ext ( 1, "numeric-data", COB_SET_FLD (f0, 93, b_17, &a_47), 0, 0); */
  /* cob_dump_field_ext ( 5, "disp", COB_SET_FLD (f0, 5, b_17, &a_2), 0, 0); */
  /* cob_dump_field_ext ( 5, "disp-u", COB_SET_FLD (f0, 5, b_17 + 5, &a_4), 0, 0); */
  /* cob_dump_field_ext ( 5, "dispp", COB_SET_FLD (f0, 4, b_17 + 10, &a_6), 0, 0); */
  /* cob_dump_field_ext ( 5, "dispp-u", COB_SET_FLD (f0, 4, b_17 + 14, &a_8), 0, 0); */
  /* cob_dump_field_ext ( 5, "disppp", COB_SET_FLD (f0, 4, b_17 + 18, &a_10), 0, 0); */
  /* cob_dump_field_ext ( 5, "disppp-u", COB_SET_FLD (f0, 4, b_17 + 22, &a_12), 0, 0); */
  /* cob_dump_field_ext ( 5, "bin", COB_SET_FLD (f0, 4, b_17 + 26, &a_13), 0, 0); */
  /* cob_dump_field_ext ( 5, "bin-u", COB_SET_FLD (f0, 4, b_17 + 30, &a_14), 0, 0); */
  /* cob_dump_field_ext ( 5, "cmp3", COB_SET_FLD (f0, 3, b_17 + 34, &a_15), 0, 0); */
  /* cob_dump_field_ext ( 5, "cmp3-u", COB_SET_FLD (f0, 3, b_17 + 37, &a_16), 0, 0); */
  /* cob_dump_field_ext ( 5, "cmp5", COB_SET_FLD (f0, 4, b_17 + 40, &a_17), 0, 0); */
  /* cob_dump_field_ext ( 5, "cmp5-u", COB_SET_FLD (f0, 4, b_17 + 44, &a_18), 0, 0); */
  /* cob_dump_field_ext ( 5, "cmp6", COB_SET_FLD (f0, 3, b_17 + 48, &a_19), 0, 0); */
  /* cob_dump_field_ext ( 5, "cmpx", COB_SET_FLD (f0, 3, b_17 + 51, &a_20), 0, 0); */
  /* cob_dump_field_ext ( 5, "cmpx-u", COB_SET_FLD (f0, 3, b_17 + 54, &a_21), 0, 0); */
  /* cob_dump_field_ext ( 5, "cmpn", COB_SET_FLD (f0, 3, b_17 + 57, &a_20), 0, 0); */
  /* cob_dump_field_ext ( 5, "cmpn-u", COB_SET_FLD (f0, 3, b_17 + 60, &a_21), 0, 0); */
  /* cob_dump_field_ext ( 5, "chr", &f_35, 0, 0); */
  /* cob_dump_field_ext ( 5, "chr-u", COB_SET_FLD (f0, 1, b_17 + 64, &a_25), 0, 0); */
  /* cob_dump_field_ext ( 5, "shrt", COB_SET_FLD (f0, 2, b_17 + 65, &a_27), 0, 0); */
  /* cob_dump_field_ext ( 5, "shrt-u", COB_SET_FLD (f0, 2, b_17 + 67, &a_29), 0, 0); */
  /* cob_dump_field_ext ( 5, "long", COB_SET_FLD (f0, 4, b_17 + 69, &a_31), 0, 0); */
  /* cob_dump_field_ext ( 5, "long-u", COB_SET_FLD (f0, 4, b_17 + 73, &a_33), 0, 0); */
  /* cob_dump_field_ext ( 5, "dble", COB_SET_FLD (f0, 8, b_17 + 77, &a_34), 0, 0); */
  /* cob_dump_field_ext ( 5, "dble-u", COB_SET_FLD (f0, 8, b_17 + 85, &a_35), 0, 0); */
  /* cob_dump_field_ext ( 1, "floating-data", COB_SET_FLD (f0, 12, b_43, &a_47), 0, 0); */
  /* cob_dump_field_ext ( 5, "dbl", COB_SET_FLD (f0, 8, b_43, &a_37), 0, 0); */
  /* cob_dump_field_ext ( 5, "flt", COB_SET_FLD (f0, 4, b_43 + 8, &a_39), 0, 0); */
  /* cob_dump_field_ext ( 1, "special-data", COB_SET_FLD (f0, 1, b_47, &a_47), 0, 0); */
  /* cob_dump_field_ext ( 5, "r2d2", COB_SET_FLD (f0, 1, b_47, &a_41), 0, 0); */
  /* cob_dump_field_ext ( 1, "alphanumeric-data", COB_SET_FLD (f0, 101, b_49, &a_47), 0, 0); */
  /* cob_dump_field_ext ( 5, "alpnum", COB_SET_FLD (f0, 36, b_49, &a_48), 0, 0); */
  /* cob_dump_field_ext ( 5, "alpha", COB_SET_FLD (f0, 36, b_49 + 36, &a_48), 0, 0); */
  /* cob_dump_field_ext ( 5, "edit-num1", COB_SET_FLD (f0, 7, b_49 + 72, &a_42), 0, 0); */
  /* cob_dump_field_ext ( 5, "edit-num2", COB_SET_FLD (f0, 7, b_49 + 79, &a_43), 0, 0); */
  /* cob_dump_field_ext ( 5, "edit-num3", COB_SET_FLD (f0, 7, b_49 + 86, &a_44), 0, 0); */
  /* cob_dump_field_ext ( 5, "edit-num4", COB_SET_FLD (f0, 8, b_49 + 93, &a_45), 0, 0); */
  /* cob_dump_field_ext ( 1, "national-data", COB_SET_FLD (f0, 160, b_56, &a_47), 0, 0); */
  /* cob_dump_field_ext ( 5, "nat", COB_SET_FLD (f0, 72, b_56, &a_49), 0, 0); */
  /* cob_dump_field_ext ( 5, "nat-num", COB_SET_FLD (f0, 30, b_56 + 72, &a_50), 0, 0); */
  /* cob_dump_field_ext ( 5, "net-num1", COB_SET_FLD (f0, 14, b_56 + 102, &a_42), 0, 0); */
  /* cob_dump_field_ext ( 5, "net-num2", COB_SET_FLD (f0, 14, b_56 + 116, &a_43), 0, 0); */
  /* cob_dump_field_ext ( 5, "net-num3", COB_SET_FLD (f0, 14, b_56 + 130, &a_44), 0, 0); */
  /* cob_dump_field_ext ( 5, "net-num4", COB_SET_FLD (f0, 16, b_56 + 144, &a_45), 0, 0); */
  /* cob_dump_field_ext ( 0, "x-idx", COB_SET_FLD (f0, 4, (cob_u8_t *)&b_64, &a_46), 0, 0); */
  {
    /* int max_1 = (*(cob_s8_ptr) (b_17 + 63)); */
    {
      /* cob_dump_field_ext ( 1, "FILLER", COB_SET_FLD (f0, 3, b_63, &a_47), 0, 1, i_1, 3UL); OCCURS 2 5 */
      /* cob_dump_field_ext ( 3, "x-basis", COB_SET_FLD (f0, 3, b_63, &a_47), 0, 1, i_1, 3UL); */
      /* cob_dump_field_ext ( 5, "x-a", COB_SET_FLD (f0, 1, b_63, &a_48), 0, 1, i_1, 3UL); */
      /* cob_dump_field_ext ( 5, "x-b", COB_SET_FLD (f0, 1, b_63 + 1, &a_48), 0, 1, i_1, 3UL); */
      /* cob_dump_field_ext ( 5, "x-c", COB_SET_FLD (f0, 1, b_63 + 2, &a_48), 0, 1, i_1, 3UL); */
      /* cob_dump_field_ext ( 3, "FILLER", COB_SET_FLD (f0, 3, b_63, &a_48), 0, 1, i_1, 3UL); REDEFINES */
      /* cob_dump_field_ext (88, "sw-x-basis-full", COB_SET_FLD (f0, 3, b_63, &a_48), 0, 1, i_1, 3UL); VALUE (cob_field *)&c_18 */
    }
  }
  /* cob_dump_field_ext ( 1, "x-rms", COB_SET_FLD (f0, 1, b_71, &a_47), 0, 0); */
  /* cob_dump_field_ext ( 5, "x-rms-a", COB_SET_FLD (f0, 1, b_71, &a_48), 0, 0); */
  /* cob_dump_field_ext ( 1, "FILLER", COB_SET_FLD (f0, 1, b_71, &a_48), 0, 0); REDEFINES */
  /* cob_dump_field_ext (88, "sw-x-rms-full", COB_SET_FLD (f0, 1, b_71, &a_48), 0, 0); VALUE (cob_field *)&c_19 OR (cob_field *)&c_20 OR (cob_field *)&c_21 THRU (cob_field *)&c_22 OR (cob_field *)&c_20 OR &cob_all_quote */

  /* Dump LOCAL-STORAGE SECTION (informational) */
  /* cob_dump_output ("LOCAL-STORAGE"); */
  /* cob_dump_field_ext ( 1, "var1", COB_SET_FLD (f0, 1, cob_local_ptr, &a_48), 0, 0); */
  /* cob_dump_field_ext ( 1, "var2", COB_SET_FLD (f0, 2, cob_local_ptr + 16, &a_47), 0, 0); */
  /* cob_dump_field_ext ( 3, "var2a", COB_SET_FLD (f0, 1, cob_local_ptr + 16, &a_48), 0, 0); */
  /* cob_dump_field_ext ( 3, "var2b", COB_SET_FLD (f0, 1, cob_local_ptr + 16 + 1, &a_52), 0, 0); */
  /* cob_dump_field_ext (88, "yay", COB_SET_FLD (f0, 1, cob_local_ptr + 16 + 1, &a_52), 0, 0); VALUE &cob_all_zero OR (cob_field *)&c_23 THRU (cob_field *)&c_24 OR (cob_field *)&c_25 */

  /* cob_dump_output ("END OF DUMP - debugme"); */
])

AT_CHECK([$COMPILE -C -w prog.cob], [0], [])
# TODO: only execute this piece when extended $GREP works
AT_CHECK([($GREP -A 200 "P_dump:" prog.c | $GREP -B 200 " CANCEL ") || exit 77], [0],
[  P_dump:
    return 0;


  /* CANCEL callback handling */
])
AT_CLEANUP


AT_SETUP([CONTROL DIVISION])
AT_KEYWORDS([control gcos])

AT_DATA([empty.cob], [
       CONTROL          DIVISION.
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      empty.
])

AT_CHECK([$COMPILE_ONLY -fcontrol-division=ok empty.cob], [0], [], [])

AT_DATA([replace.cob], [
       CONTROL          DIVISION.
       SUBSTITUTION     SECTION.
           REPLACE ==TEST-VAR== BY ==VAR==.
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      replace.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 TEST-VAR PIC X(2) VALUE "OK".
       PROCEDURE        DIVISION.
           DISPLAY VAR NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE -fcontrol-division=ok replace.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./replace], [0], [OK], [])
AT_CHECK([$COMPILE replace.cob], [1], [],
[replace.cob:2: error: CONTROL DIVISION does not conform to GnuCOBOL
])

AT_DATA([replace.cob], [
       CONTROL          DIVISION.
       REPLACE ==TEST-VAR== BY ==VAR==.
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      replace.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 TEST-VAR PIC X(2) VALUE "OK".
       PROCEDURE        DIVISION.
           DISPLAY VAR NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE -fcontrol-division=ok replace.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./replace], [0], [OK], [])

AT_CLEANUP


AT_SETUP([CONTROL: empty default section])
AT_KEYWORDS([control gcos])

AT_DATA([prog.cob], [
       CONTROL		DIVISION.
       DEFAULT		SECTION.
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 VAR PIC X(2) VALUE "OK".
       PROCEDURE        DIVISION.
           DISPLAY VAR NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE -fcontrol-division=ok prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [OK], [])
AT_CHECK([$COMPILE prog.cob], [1], [],
[prog.cob:2: error: CONTROL DIVISION does not conform to GnuCOBOL
])

AT_CLEANUP


AT_SETUP([CONTROL: default section])
AT_KEYWORDS([control gcos])

AT_DATA([prog.cob], [
       CONTROL		DIVISION.
       DEFAULT		SECTION.
           ACCEPT ALTERNATE CONSOLE
           DISPLAY IS TERMINAL
	   .
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 VAR PIC X(2) VALUE "OK".
       PROCEDURE        DIVISION.
           DISPLAY VAR NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE -fcontrol-division=ok prog.cob], [0], [],
[prog.cob:4: warning: ACCEPT statement in DEFAULT SECTION is not implemented
prog.cob:5: warning: DISPLAY statement in DEFAULT SECTION is not implemented
])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [OK], [])
AT_CHECK([$COMPILE prog.cob], [1], [],
[prog.cob:2: error: CONTROL DIVISION does not conform to GnuCOBOL
prog.cob:4: warning: ACCEPT statement in DEFAULT SECTION is not implemented
prog.cob:5: warning: DISPLAY statement in DEFAULT SECTION is not implemented
])

AT_CLEANUP


AT_SETUP([CONTROL: substitution & default section])
AT_KEYWORDS([control gcos])

AT_DATA([empties.cob], [
       CONTROL		DIVISION.
       SUBSTITUTION	SECTION.
       DEFAULT		SECTION.
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      empties.
       PROCEDURE        DIVISION.
           STOP RUN.
])

AT_CHECK([$COMPILE -fcontrol-division=ok empties.cob], [0], [], [])

AT_DATA([empty0.cob], [
       CONTROL		DIVISION.
       SUBSTITUTION	SECTION.
       DEFAULT		SECTION.
           ACCEPT ALTERNATE CONSOLE
	   .
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      empty0.
       PROCEDURE        DIVISION.
           STOP RUN.
])

AT_CHECK([$COMPILE -fcontrol-division=ok empty0.cob], [0], [],
[empty0.cob:5: warning: ACCEPT statement in DEFAULT SECTION is not implemented
])

AT_DATA([empty1.cob], [
       CONTROL		DIVISION.
       SUBSTITUTION	SECTION.
           REPLACE "KO" BY "OK".
       DEFAULT		SECTION.
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      empty1.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 VAR PIC X(2) VALUE "KO".
       PROCEDURE        DIVISION.
           DISPLAY VAR NO ADVANCING
           STOP RUN.
])

AT_CHECK([$COMPILE -fcontrol-division=ok empty1.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./empty1], [0], [OK], [])

AT_DATA([prog.cob], [
       CONTROL		DIVISION.
       SUBSTITUTION	SECTION.
           REPLACE IISS BY IS
	           TERM BY TERMINAL
	           "KO" BY "OK".
       DEFAULT		SECTION.
           ACCEPT ALTERNATE CONSOLE
           DISPLAY IISS TERM
	   .
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 VAR PIC X(2) VALUE "KO".
       PROCEDURE        DIVISION.
           DISPLAY VAR NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE -fcontrol-division=ok prog.cob], [0], [],
[prog.cob:8: warning: ACCEPT statement in DEFAULT SECTION is not implemented
prog.cob:9: warning: DISPLAY statement in DEFAULT SECTION is not implemented
])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [OK], [])

AT_CLEANUP


AT_SETUP([CONTROL DIVISION & AREACHECK])
AT_KEYWORDS([gcos])

AT_DATA([prog.cob], [
       CONTROL          DIVISION.
       SUBSTITUTION     SECTION.
       *> This REPLACE in Area A is ignored for now:
          REPLACE IISS BY IS
                  TERM BY TERMINAL
                  "KO" BY "OK".
       DEFAULT          SECTION.
          ACCEPT ALTERNATE CONSOLE
          DISPLAY IISS TERM
       .
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 VAR PIC X(2) VALUE "KO".
       PROCEDURE        DIVISION.
          DISPLAY VAR
          STOP RUN.
])

AT_CHECK([$COMPILE -std=gcos-strict prog.cob], [0], [],
[prog.cob:9: warning: start of statement in Area A
prog.cob:9: warning: ACCEPT statement in DEFAULT SECTION is not implemented
prog.cob:10: warning: start of statement in Area A
prog.cob:10: warning: DISPLAY statement in DEFAULT SECTION is not implemented
prog.cob:18: warning: start of statement in Area A
prog.cob:19: warning: start of statement in Area A
])

AT_CLEANUP


AT_SETUP([PICTURE L])
AT_KEYWORDS([extensions gcos picture-l])

AT_DATA([prog_extraneous_depending.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog_extraneous_depending.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       1 L		COMP-1.
       1 F-DAT		PICTURE X(10) DEPENDING ON L.
       PROCEDURE        DIVISION.
           MOVE SPACES TO F-DAT
           STOP RUN.
])
AT_CHECK([$COMPILE_ONLY prog_extraneous_depending.cob], [1], [],
[prog_extraneous_depending.cob:7: error: DEPENDING clause needs either an OCCURS clause or a variable-length PICTURE
])

AT_DATA([prog_missing_depending.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog_missing_depending.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       1 F-DAT		PICTURE LX(10).
       PROCEDURE        DIVISION.
           MOVE SPACES TO F-DAT
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog_missing_depending.cob], [1], [],
[prog_missing_depending.cob:6: error: variable-length PICTURE requires DEPENDING clause
])

AT_DATA([prog_value.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog_value.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       1 L              COMP-1 VALUE 10.
       1 F-DAT          PICTURE LX(10) DEPENDING ON L
                        VALUE "0123456789".
       1 F-DAT2         PICTURE LX(10) DEPENDING ON L
                        BLANK WHEN ZERO.
       PROCEDURE        DIVISION.
           STOP RUN.
])
AT_CHECK([$COMPILE_ONLY prog_value.cob], [1], [],
[prog_value.cob:7: error: variable-length PICTURE and VALUE are mutually exclusive
prog_value.cob:9: error: 'F-DAT2' cannot have BLANK WHEN ZERO clause
])

AT_DATA([prog_errs.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog_errs.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       1 W-LGS.
         2 LGS		PICTURE X(10).
       1 W-DATA.
         2 L-DAT	PICTURE LX(10) DEPENDING ON LGS.
	 2 L-ERR1       PICTURE L9 DEPENDING ON LGS.
	 2 L-ERR2       PICTURE XXXXLA(2) DEPENDING ON LGS.
	 2 L-ERR3       PICTURE LX(1) DEPENDING ON LGS JUSTIFIED.
       PROCEDURE        DIVISION.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog_errs.cob], [1], [],
[prog_errs.cob:10: error: only USAGE DISPLAY may specify a variable-length PICTURE
prog_errs.cob:11: error: L must be at start of PICTURE string
prog_errs.cob:11: error: L cannot follow A or X
prog_errs.cob:11: error: only USAGE DISPLAY may specify a variable-length PICTURE
prog_errs.cob:12: error: 'L-ERR3' cannot have JUSTIFIED RIGHT clause
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       1 LGS		PICTURE X(10).
       1 L-DAT		PICTURE LX(10) DEPENDING ON LGS.
       PROCEDURE        DIVISION.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -fpicture-l=warning prog.cob], [0], [],
[prog.cob:7: warning: PICTURE string with 'L' character used
])

AT_CLEANUP


AT_SETUP([AREACHECK / NOAREACHECK directives])
AT_KEYWORDS([misc directive])

AT_DATA([prog.cob], [
       $SET NO-AREA-CHECK
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.
       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       PROCEDURE       DIVISION.
       MAIN-1 SECTION.
       DISPLAY "SOMETHING".
       $SET AREA-CHECK
       MAIN-2 SECTION.
       DISPLAY "SOMETHING ELSE"
       STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -std=cobol85 prog.cob], [1], [],
[prog.cob: in section 'MAIN-2':
prog.cob:12: error: start of statement in Area A
prog.cob:13: error: start of statement in Area A
])
AT_CHECK([$COMPILE_ONLY -std=cobol85 -frelax-syntax-checks prog.cob], [0], [],
[prog.cob: in section 'MAIN-2':
prog.cob:12: warning: start of statement in Area A
prog.cob:13: warning: start of statement in Area A
])

AT_CLEANUP

AT_SETUP([AREACHECK / NOAREACHECK directives (2)])
AT_KEYWORDS([misc directive missing-periods])

AT_DATA([prog.cob], [
       $SET NOAREACHECK
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.
       DATA            DIVISION.
       $SET AREACHECK
       WORKING-STORAGE SECTION.
       01 X.
           02 Y PIC X.
           01 Z PIC X
       01 T PIC 9.
       $SET NOAREACHECK
       PROCEDURE       DIVISION.
       MAIN-1 SECTION.
       DISPLAY "SOMETHING"
       $SET AREACHECK
       MAIN-2 SECTION.
       DISPLAY "SOMETHING ELSE"
       STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -std=cobol85 prog.cob], [1], [],
[prog.cob:10: error: '01' should start in Area A
prog.cob:11: error: optional period used
prog.cob: in section 'MAIN-1':
prog.cob:17: error: optional period used
prog.cob: in section 'MAIN-2':
prog.cob:18: error: start of statement in Area A
prog.cob:19: error: start of statement in Area A
])
AT_CHECK([$COMPILE_ONLY -std=cobol85 -fmissing-period=ok prog.cob], [1], [],
[prog.cob:10: error: '01' should start in Area A
prog.cob: in section 'MAIN-2':
prog.cob:18: error: start of statement in Area A
prog.cob:19: error: start of statement in Area A
])
AT_CHECK([$COMPILE_ONLY -fformat=cobol85 prog.cob], [1], [],
[prog.cob:10: error: '01' should start in Area A
prog.cob:11: warning: optional period used
prog.cob: in section 'MAIN-1':
prog.cob:17: warning: optional period used
prog.cob: in section 'MAIN-2':
prog.cob:18: error: start of statement in Area A
prog.cob:19: error: start of statement in Area A
])

AT_CLEANUP


AT_SETUP([optional dots])
AT_KEYWORDS([misc missing-periods])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION
       PROGRAM-ID.     prog.
       DATA            DIVISION
       WORKING-STORAGE SECTION.
       01 X PIC X.
       01 Y PIC X.
       PROCEDURE       DIVISION.
       MAIN SECTION.
           PERFORM P
           STOP RUN.
       P.
           GOBACK
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [],
[prog.cob:3: warning: optional period used
prog.cob:5: warning: optional period used
prog.cob: in section 'MAIN':
prog.cob: in paragraph 'P':
prog.cob:14: warning: optional period used
])

AT_DATA([cobol85.cob], [
       IDENTIFICATION  DIVISION
       PROGRAM-ID.     cobol85.
       DATA            DIVISION
       WORKING-STORAGE SECTION
       01 X PIC X *> dot optional here because of cobol85 format
       01 Y PIC X.
       PROCEDURE       DIVISION.
       MAIN SECTION.
           PERFORM P
           STOP RUN *> dot optional here because of cobol85 format
       P.
           GOBACK
])

AT_CHECK([$COMPILE_ONLY -fformat=cobol85 cobol85.cob], [0], [],
[cobol85.cob:3: warning: optional period used
cobol85.cob:5: warning: optional period used
cobol85.cob:6: warning: optional period used
cobol85.cob:7: warning: optional period used
cobol85.cob: in section 'MAIN':
cobol85.cob:12: warning: optional period used
cobol85.cob: in paragraph 'P':
cobol85.cob:14: warning: optional period used
])

AT_CLEANUP


AT_SETUP([optional dots before PROCEDURE DIVISION])
AT_KEYWORDS([misc missing-periods])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION
       PROGRAM-ID. prog.
       DATA DIVISION
       WORKING-STORAGE SECTION
       77 PMODE   PIC X
       PROCEDURE DIVISION.
          STOP RUN.
])

# The syntax error below is hard to avoid, and can be missleading.
# The error is actually on the `77`, which is only parsed as a
# LEVEL_NUMBER if the preceding token is a `.`.
#
# TODO: To avoid this, we need to unput the WORD/Literal when dealing
# with optional periods outside of PROCEDURE DIVISION, and ensure it
# is reparsed as a LEVEL_NUMBER.
AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:3: warning: optional period used
prog.cob:5: warning: optional period used
prog.cob:6: error: syntax error, unexpected Literal
])

# Here the AREACHECK helps us recover from all missing periods
AT_CHECK([$COMPILE_ONLY -fformat=cobol85 prog.cob], [0], [],
[prog.cob:3: warning: optional period used
prog.cob:5: warning: optional period used
prog.cob:6: warning: optional period used
prog.cob:7: warning: optional period used
])

AT_CLEANUP


AT_SETUP([AREACHECK])
AT_KEYWORDS([misc])

AT_DATA([pgm1.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. PGM1.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       SELECT FILE01 ASSIGN "file01.dat".
       DATA DIVISION.
       FILE SECTION.
       FD FILE01.
       01 RECORD-FILE01 PIC X(50).
       WORKING-STORAGE SECTION.
       01 W-DATA01.
      * 02 items may still lie in Area A for now:
       02 W-CH01       PIC X(10).
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
       DISPLAY "Hello"
           STOP RUN
           .
       END PROGRAM PGM1.
])

AT_CHECK([$COMPILE_ONLY -std=mvs pgm1.cob], [0], [],
[pgm1.cob:7: warning: start of statement in Area A
pgm1.cob: in paragraph 'MAIN-PROCEDURE':
pgm1.cob:18: warning: start of statement in Area A
])

AT_CHECK([$COMPILE_ONLY -std=mvs-strict pgm1.cob], [1], [],
[pgm1.cob:7: error: start of statement in Area A
pgm1.cob: in paragraph 'MAIN-PROCEDURE':
pgm1.cob:18: error: start of statement in Area A
])

AT_CLEANUP

AT_SETUP([autodetect format])
AT_KEYWORDS([cobc free fixed format])

AT_DATA([free.cob], [
  IDENTIFICATION   DIVISION.
  PROGRAM-ID.      prog.
  PROCEDURE        DIVISION.
     DISPLAY "OK" NO ADVANCING
     END-DISPLAY.
     STOP RUN.
])

AT_DATA([fixed1.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
      * this is a comment
       PROCEDURE        DIVISION.
          DISPLAY "OK" NO ADVANCING
          END-DISPLAY.
          STOP RUN.
])

AT_DATA([fixed2.cob], [
      * this is a comment
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
          DISPLAY "OK" NO ADVANCING
          END-DISPLAY.
          STOP RUN.
])

# Generate source files with DOM
AT_CHECK([printf '\357\273\277' > header.dom])
AT_CHECK([cat header.dom free.cob >> domfree.cob])
AT_CHECK([cat header.dom fixed1.cob >> domfixed.cob])

AT_CHECK([$COMPILE_ONLY -fformat=auto free.cob fixed1.cob fixed2.cob], [0], [],
[free.cob:2: note: free format detected
])
AT_CHECK([$COMPILE_ONLY -fformat=auto domfree.cob domfixed.cob], [0], [],
[domfree.cob:2: note: free format detected
])

# In case we decide to have a disabled warning at some point
# AT_CHECK([$COMPILE_ONLY -fformat=auto -w free.cob fixed1.cob fixed2.cob], [0], [], [])
# AT_CHECK([$COMPILE_ONLY -fformat=auto -w domfree.cob domfixed.cob], [0], [], [])

AT_CHECK([$COMPILE_ONLY -fformat=fixed free.cob], [1], [],
[free.cob:2: error: invalid indicator 'T' at column 7
free.cob:3: error: invalid indicator 'R' at column 7
free.cob:4: error: invalid indicator 'E' at column 7
free.cob:5: error: invalid indicator 'I' at column 7
free.cob:6: error: invalid indicator 'N' at column 7
free.cob:7: error: invalid indicator 'T' at column 7
free.cob:8: error: PROGRAM-ID header missing
])

AT_CHECK([$COMPILE_ONLY -fformat=fixed domfree.cob], [1], [],
[domfree.cob:2: error: invalid indicator 'T' at column 7
domfree.cob:3: error: invalid indicator 'R' at column 7
domfree.cob:4: error: invalid indicator 'E' at column 7
domfree.cob:5: error: invalid indicator 'I' at column 7
domfree.cob:6: error: invalid indicator 'N' at column 7
domfree.cob:7: error: invalid indicator 'T' at column 7
domfree.cob:8: error: PROGRAM-ID header missing
])

AT_CHECK([$COMPILE_ONLY -fformat=fixed fixed1.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY -fformat=fixed fixed2.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY -fformat=fixed domfixed.cob], [0], [], [])

AT_CLEANUP
