## Copyright (C) 2003-2012, 2014-2019 Free Software Foundation, Inc.
## Written by Keisuke Nishida, Roger While, Simon Sobisch, Ron Norman
## 
## This file is part of GnuCOBOL.
## 
## The GnuCOBOL compiler is free software: you can redistribute it
## and/or modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation, either version 3 of the
## License, or (at your option) any later version.
## 
## GnuCOBOL is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with GnuCOBOL.  If not, see <https://www.gnu.org/licenses/>.

### GnuCOBOL Test Suite

# 2-4-8 big-endian

AT_SETUP([BINARY: 2-4-8 big-endian])
AT_KEYWORDS([binary])

AT_DATA([dump.c], [
#include <stdio.h>
#include <libcob.h>

COB_EXT_EXPORT int
dump (unsigned char *data)
{
  int i;
  for (i = 0; i < 8; i++)
    printf ("%02x", data[[i]]);
  puts ("");
  return 0;
}
])

sed -e 's/@USAGE@/BINARY/' "${TEMPLATE}/numeric-dump.cob" > prog.cob

AT_CHECK([$COMPILE_MODULE dump.c], [0], [], [])
AT_CHECK([$COMPILE -fbinary-size=2-4-8 \
                   -fbinary-byteorder=big-endian prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[0001202020202020
000c202020202020
007b202020202020
04d2202020202020
0000303920202020
0001e24020202020
0012d68720202020
00bc614e20202020
075bcd1520202020
00000000499602d2
00000002dfdc1c35
0000001cbe991a14
0000011f71fb04cb
00000b3a73ce2ff2
00007048860ddf79
000462d53c8abac0
002bdc545d6b4b87
01b69b4ba630f34e
ffff202020202020
fff4202020202020
ff85202020202020
fb2e202020202020
ffffcfc720202020
fffe1dc020202020
ffed297920202020
ff439eb220202020
f8a432eb20202020
ffffffffb669fd2e
fffffffd2023e3cb
ffffffe34166e5ec
fffffee08e04fb35
fffff4c58c31d00e
ffff8fb779f22087
fffb9d2ac3754540
ffd423aba294b479
fe4964b459cf0cb2
0000202020202020
0000202020202020
0000202020202020
0000202020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000202020202020
0000202020202020
0000202020202020
0000202020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000202020202020
0000202020202020
0000202020202020
0000202020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000202020202020
0000202020202020
0000202020202020
0000202020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
])

sed -e 's/@USAGE@/BINARY/' "${TEMPLATE}/numeric-display.cob" > prog.cob

AT_CHECK([$COMPILE -fbinary-size=2-4-8 \
                   -fbinary-byteorder=big-endian prog.cob -o prog2], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [0],
[1
12
123
1234
12345
123456
1234567
12345678
123456789
1234567890
12345678901
123456789012
1234567890123
12345678901234
123456789012345
1234567890123456
12345678901234567
123456789012345678
-1
-12
-123
-1234
-12345
-123456
-1234567
-12345678
-123456789
-1234567890
-12345678901
-123456789012
-1234567890123
-12345678901234
-123456789012345
-1234567890123456
-12345678901234567
-123456789012345678
])

AT_CLEANUP


# 2-4-8 native

AT_SETUP([BINARY: 2-4-8 native])
AT_KEYWORDS([binary])

if test "x$COB_BIGENDIAN" = "xyes"; then
AT_CHECK([true])
else


AT_DATA([dump.c], [
#include <stdio.h>
#include <libcob.h>

COB_EXT_EXPORT int
dump (unsigned char *data)
{
  int i;
  for (i = 0; i < 8; i++)
    printf ("%02x", data[[i]]);
  puts ("");
  return 0;
}
])

sed -e 's/@USAGE@/BINARY/' "${TEMPLATE}/numeric-dump.cob" > prog.cob

AT_CHECK([$COMPILE_MODULE dump.c], [0], [], [])
AT_CHECK([$COMPILE -fbinary-size=2-4-8 \
                   -fbinary-byteorder=native  prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[0100202020202020
0c00202020202020
7b00202020202020
d204202020202020
3930000020202020
40e2010020202020
87d6120020202020
4e61bc0020202020
15cd5b0720202020
d202964900000000
351cdcdf02000000
141a99be1c000000
cb04fb711f010000
f22fce733a0b0000
79df0d8648700000
c0ba8a3cd5620400
874b6b5d54dc2b00
4ef330a64b9bb601
ffff202020202020
f4ff202020202020
85ff202020202020
2efb202020202020
c7cfffff20202020
c01dfeff20202020
7929edff20202020
b29e43ff20202020
eb32a4f820202020
2efd69b6ffffffff
cbe32320fdffffff
ece56641e3ffffff
35fb048ee0feffff
0ed0318cc5f4ffff
8720f279b78fffff
404575c32a9dfbff
79b494a2ab23d4ff
b20ccf59b46449fe
0000202020202020
0000202020202020
0000202020202020
0000202020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000202020202020
0000202020202020
0000202020202020
0000202020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000202020202020
0000202020202020
0000202020202020
0000202020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000202020202020
0000202020202020
0000202020202020
0000202020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
])

sed -e 's/@USAGE@/BINARY/' "${TEMPLATE}/numeric-display.cob" > prog.cob

AT_CHECK([$COMPILE -fbinary-size=2-4-8 \
                   -fbinary-byteorder=native prog.cob -o prog2], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [0],
[1
12
123
1234
12345
123456
1234567
12345678
123456789
1234567890
12345678901
123456789012
1234567890123
12345678901234
123456789012345
1234567890123456
12345678901234567
123456789012345678
-1
-12
-123
-1234
-12345
-123456
-1234567
-12345678
-123456789
-1234567890
-12345678901
-123456789012
-1234567890123
-12345678901234
-123456789012345
-1234567890123456
-12345678901234567
-123456789012345678
])
fi

AT_CLEANUP


# 1-2-4-8 big-endian

AT_SETUP([BINARY: 1-2-4-8 big-endian])
AT_KEYWORDS([binary])

AT_DATA([dump.c], [
#include <stdio.h>
#include <libcob.h>

COB_EXT_EXPORT int
dump (unsigned char *data)
{
  int i;
  for (i = 0; i < 8; i++)
    printf ("%02x", data[[i]]);
  puts ("");
  return 0;
}
])

sed -e 's/@USAGE@/BINARY/' "${TEMPLATE}/numeric-dump.cob" > prog.cob

AT_CHECK([$COMPILE_MODULE dump.c], [0], [], [])
AT_CHECK([$COMPILE -fbinary-size=1-2-4-8 \
                   -fbinary-byteorder=big-endian prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[0120202020202020
0c20202020202020
007b202020202020
04d2202020202020
0000303920202020
0001e24020202020
0012d68720202020
00bc614e20202020
075bcd1520202020
00000000499602d2
00000002dfdc1c35
0000001cbe991a14
0000011f71fb04cb
00000b3a73ce2ff2
00007048860ddf79
000462d53c8abac0
002bdc545d6b4b87
01b69b4ba630f34e
ff20202020202020
f420202020202020
ff85202020202020
fb2e202020202020
ffffcfc720202020
fffe1dc020202020
ffed297920202020
ff439eb220202020
f8a432eb20202020
ffffffffb669fd2e
fffffffd2023e3cb
ffffffe34166e5ec
fffffee08e04fb35
fffff4c58c31d00e
ffff8fb779f22087
fffb9d2ac3754540
ffd423aba294b479
fe4964b459cf0cb2
0020202020202020
0020202020202020
0000202020202020
0000202020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0020202020202020
0020202020202020
0000202020202020
0000202020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0020202020202020
0020202020202020
0000202020202020
0000202020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0020202020202020
0020202020202020
0000202020202020
0000202020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
])

sed -e 's/@USAGE@/BINARY/' "${TEMPLATE}/numeric-display.cob" > prog.cob

AT_CHECK([$COMPILE -fbinary-size=1-2-4-8 \
                   -fbinary-byteorder=big-endian prog.cob -o prog2], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [0],
[1
12
123
1234
12345
123456
1234567
12345678
123456789
1234567890
12345678901
123456789012
1234567890123
12345678901234
123456789012345
1234567890123456
12345678901234567
123456789012345678
-1
-12
-123
-1234
-12345
-123456
-1234567
-12345678
-123456789
-1234567890
-12345678901
-123456789012
-1234567890123
-12345678901234
-123456789012345
-1234567890123456
-12345678901234567
-123456789012345678
])

AT_CLEANUP


# 1-2-4-8 native

AT_SETUP([BINARY: 1-2-4-8 native])
AT_KEYWORDS([binary])

if test "x$COB_BIGENDIAN" = "xyes"; then
AT_CHECK([true])
else

AT_DATA([dump.c], [
#include <stdio.h>
#include <libcob.h>

COB_EXT_EXPORT int
dump (unsigned char *data)
{
  int i;
  for (i = 0; i < 8; i++)
    printf ("%02x", data[[i]]);
  puts ("");
  return 0;
}
])

sed -e 's/@USAGE@/BINARY/' "${TEMPLATE}/numeric-dump.cob" > prog.cob

AT_CHECK([$COMPILE_MODULE dump.c], [0], [], [])
AT_CHECK([$COMPILE -fbinary-size=1-2-4-8 \
                   -fbinary-byteorder=native prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[0120202020202020
0c20202020202020
7b00202020202020
d204202020202020
3930000020202020
40e2010020202020
87d6120020202020
4e61bc0020202020
15cd5b0720202020
d202964900000000
351cdcdf02000000
141a99be1c000000
cb04fb711f010000
f22fce733a0b0000
79df0d8648700000
c0ba8a3cd5620400
874b6b5d54dc2b00
4ef330a64b9bb601
ff20202020202020
f420202020202020
85ff202020202020
2efb202020202020
c7cfffff20202020
c01dfeff20202020
7929edff20202020
b29e43ff20202020
eb32a4f820202020
2efd69b6ffffffff
cbe32320fdffffff
ece56641e3ffffff
35fb048ee0feffff
0ed0318cc5f4ffff
8720f279b78fffff
404575c32a9dfbff
79b494a2ab23d4ff
b20ccf59b46449fe
0020202020202020
0020202020202020
0000202020202020
0000202020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0020202020202020
0020202020202020
0000202020202020
0000202020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0020202020202020
0020202020202020
0000202020202020
0000202020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0020202020202020
0020202020202020
0000202020202020
0000202020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000020202020
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
])

sed -e 's/@USAGE@/BINARY/' "${TEMPLATE}/numeric-display.cob" > prog.cob

AT_CHECK([$COMPILE -fbinary-size=1-2-4-8 \
                   -fbinary-byteorder=native prog.cob -o prog2], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [0],
[1
12
123
1234
12345
123456
1234567
12345678
123456789
1234567890
12345678901
123456789012
1234567890123
12345678901234
123456789012345
1234567890123456
12345678901234567
123456789012345678
-1
-12
-123
-1234
-12345
-123456
-1234567
-12345678
-123456789
-1234567890
-12345678901
-123456789012
-1234567890123
-12345678901234
-123456789012345
-1234567890123456
-12345678901234567
-123456789012345678
])

fi

AT_CLEANUP


# 1--8 big-endian

AT_SETUP([BINARY: 1--8 big-endian])
AT_KEYWORDS([binary])

AT_DATA([dump.c], [
#include <stdio.h>
#include <libcob.h>

COB_EXT_EXPORT int
dump (unsigned char *data)
{
  int i;
  for (i = 0; i < 8; i++)
    printf ("%02x", data[[i]]);
  puts ("");
  return 0;
}
])

sed -e 's/@USAGE@/BINARY/' "${TEMPLATE}/numeric-dump.cob" > prog.cob

AT_CHECK([$COMPILE_MODULE dump.c], [0], [], [])
AT_CHECK([$COMPILE -fbinary-size=1--8 \
                   -fbinary-byteorder=big-endian prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[0120202020202020
0c20202020202020
007b202020202020
04d2202020202020
0030392020202020
01e2402020202020
12d6872020202020
00bc614e20202020
075bcd1520202020
00499602d2202020
02dfdc1c35202020
1cbe991a14202020
011f71fb04cb2020
0b3a73ce2ff22020
007048860ddf7920
0462d53c8abac020
002bdc545d6b4b87
01b69b4ba630f34e
ff20202020202020
f420202020202020
ff85202020202020
fb2e202020202020
ffcfc72020202020
fe1dc02020202020
ffed297920202020
ff439eb220202020
f8a432eb20202020
ffb669fd2e202020
fd2023e3cb202020
ffe34166e5ec2020
fee08e04fb352020
f4c58c31d00e2020
ff8fb779f2208720
fb9d2ac375454020
ffd423aba294b479
fe4964b459cf0cb2
0020202020202020
0020202020202020
0000202020202020
0000202020202020
0000002020202020
0000002020202020
0000002020202020
0000000020202020
0000000020202020
0000000000202020
0000000000202020
0000000000202020
0000000000002020
0000000000002020
0000000000000020
0000000000000020
0000000000000000
0000000000000000
0020202020202020
0020202020202020
0000202020202020
0000202020202020
0000002020202020
0000002020202020
0000000020202020
0000000020202020
0000000020202020
0000000000202020
0000000000202020
0000000000002020
0000000000002020
0000000000002020
0000000000000020
0000000000000020
0000000000000000
0000000000000000
0020202020202020
0020202020202020
0000202020202020
0000202020202020
0000002020202020
0000002020202020
0000002020202020
0000000020202020
0000000020202020
0000000000202020
0000000000202020
0000000000202020
0000000000002020
0000000000002020
0000000000000020
0000000000000020
0000000000000000
0000000000000000
0020202020202020
0020202020202020
0000202020202020
0000202020202020
0000002020202020
0000002020202020
0000000020202020
0000000020202020
0000000020202020
0000000000202020
0000000000202020
0000000000002020
0000000000002020
0000000000002020
0000000000000020
0000000000000020
0000000000000000
0000000000000000
])

sed -e 's/@USAGE@/BINARY/' "${TEMPLATE}/numeric-display.cob" > prog.cob

AT_CHECK([$COMPILE -fbinary-size=1--8 \
                   -fbinary-byteorder=big-endian prog.cob -o prog2], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [0],
[1
12
123
1234
12345
123456
1234567
12345678
123456789
1234567890
12345678901
123456789012
1234567890123
12345678901234
123456789012345
1234567890123456
12345678901234567
123456789012345678
-1
-12
-123
-1234
-12345
-123456
-1234567
-12345678
-123456789
-1234567890
-12345678901
-123456789012
-1234567890123
-12345678901234
-123456789012345
-1234567890123456
-12345678901234567
-123456789012345678
])

AT_CLEANUP


# 1--8 native

AT_SETUP([BINARY: 1--8 native])
AT_KEYWORDS([binary])

if test "x$COB_BIGENDIAN" = "xyes"; then
AT_CHECK([true])
else

AT_DATA([dump.c], [
#include <stdio.h>
#include <libcob.h>

COB_EXT_EXPORT int
dump (unsigned char *data)
{
  int i;
  for (i = 0; i < 8; i++)
    printf ("%02x", data[[i]]);
  puts ("");
  return 0;
}
])

sed -e 's/@USAGE@/BINARY/' "${TEMPLATE}/numeric-dump.cob" > prog.cob

AT_CHECK([$COMPILE_MODULE dump.c], [0], [], [])
AT_CHECK([$COMPILE -fbinary-size=1--8 \
                   -fbinary-byteorder=native prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[0120202020202020
0c20202020202020
7b00202020202020
d204202020202020
3930002020202020
40e2012020202020
87d6122020202020
4e61bc0020202020
15cd5b0720202020
d202964900202020
351cdcdf02202020
141a99be1c202020
cb04fb711f012020
f22fce733a0b2020
79df0d8648700020
c0ba8a3cd5620420
874b6b5d54dc2b00
4ef330a64b9bb601
ff20202020202020
f420202020202020
85ff202020202020
2efb202020202020
c7cfff2020202020
c01dfe2020202020
7929edff20202020
b29e43ff20202020
eb32a4f820202020
2efd69b6ff202020
cbe32320fd202020
ece56641e3ff2020
35fb048ee0fe2020
0ed0318cc5f42020
8720f279b78fff20
404575c32a9dfb20
79b494a2ab23d4ff
b20ccf59b46449fe
0020202020202020
0020202020202020
0000202020202020
0000202020202020
0000002020202020
0000002020202020
0000002020202020
0000000020202020
0000000020202020
0000000000202020
0000000000202020
0000000000202020
0000000000002020
0000000000002020
0000000000000020
0000000000000020
0000000000000000
0000000000000000
0020202020202020
0020202020202020
0000202020202020
0000202020202020
0000002020202020
0000002020202020
0000000020202020
0000000020202020
0000000020202020
0000000000202020
0000000000202020
0000000000002020
0000000000002020
0000000000002020
0000000000000020
0000000000000020
0000000000000000
0000000000000000
0020202020202020
0020202020202020
0000202020202020
0000202020202020
0000002020202020
0000002020202020
0000002020202020
0000000020202020
0000000020202020
0000000000202020
0000000000202020
0000000000202020
0000000000002020
0000000000002020
0000000000000020
0000000000000020
0000000000000000
0000000000000000
0020202020202020
0020202020202020
0000202020202020
0000202020202020
0000002020202020
0000002020202020
0000000020202020
0000000020202020
0000000020202020
0000000000202020
0000000000202020
0000000000002020
0000000000002020
0000000000002020
0000000000000020
0000000000000020
0000000000000000
0000000000000000
])

sed -e 's/@USAGE@/BINARY/' "${TEMPLATE}/numeric-display.cob" > prog.cob

AT_CHECK([$COMPILE -fbinary-size=1--8 \
                   -fbinary-byteorder=native prog.cob -o prog2], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [0],
[1
12
123
1234
12345
123456
1234567
12345678
123456789
1234567890
12345678901
123456789012
1234567890123
12345678901234
123456789012345
1234567890123456
12345678901234567
123456789012345678
-1
-12
-123
-1234
-12345
-123456
-1234567
-12345678
-123456789
-1234567890
-12345678901
-123456789012
-1234567890123
-12345678901234
-123456789012345
-1234567890123456
-12345678901234567
-123456789012345678
])

fi

AT_CLEANUP


# full-print

AT_SETUP([BINARY: full-print])
AT_KEYWORDS([binary])


sed -e 's/@USAGE@/BINARY/' "${TEMPLATE}/numeric-display.cob" > prog.cob

AT_CHECK([$COMPILE -fbinary-size=1--8 \
                   -fno-pretty-display prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[001
012
00123
01234
00012345
00123456
01234567
0012345678
0123456789
0001234567890
0012345678901
0123456789012
001234567890123
012345678901234
00123456789012345
01234567890123456
00012345678901234567
00123456789012345678
-001
-012
-00123
-01234
-00012345
-00123456
-0001234567
-0012345678
-0123456789
-0001234567890
-0012345678901
-000123456789012
-001234567890123
-012345678901234
-00123456789012345
-01234567890123456
-00012345678901234567
-00123456789012345678
])

AT_CLEANUP


# 64bit unsigned

AT_SETUP([BINARY: 64bit unsigned compare])
AT_KEYWORDS([binary])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 BDU-1         USAGE BINARY-DOUBLE UNSIGNED.
       01 BDU-2         USAGE BINARY-DOUBLE UNSIGNED.
       PROCEDURE        DIVISION.
           MOVE 18446744073709551615 TO BDU-1 BDU-2
           IF BDU-1 NOT EQUAL BDU-2 THEN
           DISPLAY "FAIL"
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


# bug #173 unsigned values were treated as signed
AT_SETUP([BINARY: 64bit unsigned arithmetic notrunc])
AT_KEYWORDS([binary])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 WORK-UDWORD-1 PIC 9(18) COMP.
       PROCEDURE        DIVISION.
           MOVE 18446744073709551615 TO WORK-UDWORD-1.
           DISPLAY WORK-UDWORD-1
           END-DISPLAY.
           COMPUTE  WORK-UDWORD-1 = WORK-UDWORD-1 / 2
           END-COMPUTE.
           DISPLAY WORK-UDWORD-1
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE -fnotrunc prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [18446744073709551615
09223372036854775807
], [])

AT_CLEANUP


# bug #197 64bit signed values did not accept min value constant
# recognized and logged in bug #384: assignment overflow
AT_SETUP([BINARY: 64bit signed negative constant range])
AT_KEYWORDS([binary])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 WORK-DWORD-1  PIC S9(18) COMP-5 VALUE -9223372036854775808.
       PROCEDURE        DIVISION.
           DISPLAY WORK-DWORD-1 WITH NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE -fnotrunc prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [-09223372036854775808], [])

AT_CLEANUP


AT_SETUP([COMP-4 Truncate])
AT_KEYWORDS([Numeric])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  RANDOM-ORIGIN-B                     PIC 9V99 COMP-4.
       01  RANDOM-TARGET-B                     PIC V99  COMP-4.
       01  RANDOM-ORIGIN-D                     PIC 9V99 DISPLAY.
       01  RANDOM-TARGET-D                     PIC V99  DISPLAY.

       PROCEDURE DIVISION.
           MOVE 0.12            TO RANDOM-ORIGIN-D
           MOVE RANDOM-ORIGIN-D TO RANDOM-TARGET-D
           MOVE 0.12            TO RANDOM-ORIGIN-B
           MOVE RANDOM-ORIGIN-B TO RANDOM-TARGET-B
           IF RANDOM-ORIGIN-D <> RANDOM-ORIGIN-B
             DISPLAY "ORIGIN 0.12 WRONG"
             DISPLAY "DISPLAY: " RANDOM-ORIGIN-D
                " !=  BINARY : " RANDOM-ORIGIN-B
           END-IF.
           IF RANDOM-TARGET-D <> RANDOM-TARGET-B
             DISPLAY "TARGET  .12 WRONG"
             DISPLAY "DISPLAY: " RANDOM-TARGET-D
                " !=  BINARY : " RANDOM-TARGET-B
           ELSE
             DISPLAY "Ok with " RANDOM-TARGET-D " == " RANDOM-TARGET-B
           END-IF.

           MOVE 9.85            TO RANDOM-ORIGIN-D
           MOVE RANDOM-ORIGIN-D TO RANDOM-TARGET-D
           MOVE 9.85            TO RANDOM-ORIGIN-B
           MOVE RANDOM-ORIGIN-B TO RANDOM-TARGET-B
           IF RANDOM-ORIGIN-D <> RANDOM-ORIGIN-B
             DISPLAY "ORIGIN 9.85 WRONG"
             DISPLAY "DISPLAY: " RANDOM-ORIGIN-D
                " !=  BINARY : " RANDOM-ORIGIN-B
           END-IF.
           IF RANDOM-TARGET-D <> RANDOM-TARGET-B
             DISPLAY "TARGET  .85 WRONG"
             DISPLAY "DISPLAY: " RANDOM-TARGET-D
                " !=  BINARY : " RANDOM-TARGET-B
           ELSE
             DISPLAY "Ok with " RANDOM-TARGET-D " == " RANDOM-TARGET-B
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE -w prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[Ok with .12 == .12
Ok with .85 == .85
], [])

AT_CLEANUP


AT_SETUP([COMP-4 No Truncate])
AT_KEYWORDS([Numeric])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  RANDOM-ORIGIN-B                     PIC 9V99 COMP-4.
       01  RANDOM-TARGET-B                     PIC V99  COMP-4.
       01  RANDOM-ORIGIN-D                     PIC 9V99 DISPLAY.
       01  RANDOM-TARGET-D                     PIC V99  DISPLAY.

       PROCEDURE DIVISION.
           MOVE 0.12            TO RANDOM-ORIGIN-D
           MOVE RANDOM-ORIGIN-D TO RANDOM-TARGET-D
           MOVE 0.12            TO RANDOM-ORIGIN-B
           MOVE RANDOM-ORIGIN-B TO RANDOM-TARGET-B
           IF RANDOM-ORIGIN-D <> RANDOM-ORIGIN-B
             DISPLAY "ORIGIN 0.12 WRONG"
             DISPLAY "DISPLAY: " RANDOM-ORIGIN-D
                " !=  BINARY : " RANDOM-ORIGIN-B
           END-IF.
           IF RANDOM-TARGET-D <> RANDOM-TARGET-B
             DISPLAY "TARGET  .12 WRONG"
             DISPLAY "DISPLAY: " RANDOM-TARGET-D
                " !=  BINARY : " RANDOM-TARGET-B
           ELSE
             DISPLAY "Ok with " RANDOM-TARGET-D " == " RANDOM-TARGET-B
           END-IF.

           MOVE 9.85            TO RANDOM-ORIGIN-D
           MOVE RANDOM-ORIGIN-D TO RANDOM-TARGET-D
           MOVE 9.85            TO RANDOM-ORIGIN-B
           MOVE RANDOM-ORIGIN-B TO RANDOM-TARGET-B
           IF RANDOM-ORIGIN-D <> RANDOM-ORIGIN-B
             DISPLAY "ORIGIN 9.85 WRONG"
             DISPLAY "DISPLAY: " RANDOM-ORIGIN-D
                " !=  BINARY : " RANDOM-ORIGIN-B
           END-IF.
           IF RANDOM-TARGET-D <> RANDOM-TARGET-B
             DISPLAY "TARGET  .85 WRONG"
             DISPLAY "DISPLAY: " RANDOM-TARGET-D
                " !=  BINARY : " RANDOM-TARGET-B
           ELSE
             DISPLAY "Ok with " RANDOM-TARGET-D " == " RANDOM-TARGET-B
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE -w -fnotrunc prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[Ok with 12 == 012
TARGET  .85 WRONG
DISPLAY: 85 !=  BINARY : 217
], [])

AT_CLEANUP
