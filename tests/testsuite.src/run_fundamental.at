## Copyright (C) 2003-2012, 2014-2015, 2017-2020, 2022-2023
## Free Software Foundation, Inc.
## Written by Keisuke Nishida, Roger While, Simon Sobisch, Edward Hart,
## Ron Norman, Denis HUGONNARD-ROCHE, Chuck Haatvedt
##
## This file is part of GnuCOBOL.
##
## The GnuCOBOL compiler is free software: you can redistribute it
## and/or modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation, either version 3 of the
## License, or (at your option) any later version.
##
## GnuCOBOL is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with GnuCOBOL.  If not, see <https://www.gnu.org/licenses/>.

### GnuCOBOL Test Suite

### Fundamental Tests

AT_SETUP([DISPLAY literals])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           DISPLAY "abc".
           DISPLAY  123.
           DISPLAY +123.
           DISPLAY -123.
           DISPLAY  12.3.
           DISPLAY +12.3.
           DISPLAY -12.3.
           DISPLAY 1.23E0.
           DISPLAY +1.23E0.
           DISPLAY -1.23E0.
           DISPLAY 12.3E-2.
           DISPLAY +12.3E-2.
           DISPLAY -12.3E-2.
           DISPLAY B'0101'.
           DISPLAY BX'EC'.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[abc
123
+123
-123
12.3
+12.3
-12.3
1.23
+1.23
-1.23
.123
+.123
-.123
5
236
])

AT_CLEANUP


AT_SETUP([DISPLAY literals, DECIMAL-POINT is COMMA])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT    IS COMMA.
       PROCEDURE        DIVISION.
           DISPLAY  12,3.
           DISPLAY +12,3.
           DISPLAY -12,3.
           DISPLAY 1,23E0.
           DISPLAY +1,23E0.
           DISPLAY -1,23E0.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[12,3
+12,3
-12,3
1,23
+1,23
-1,23
])

AT_CLEANUP


AT_SETUP([Hexadecimal literal])
AT_KEYWORDS([fundamental])

AT_DATA([dump.c], [
#include <stdio.h>
#include <libcob.h>

COB_EXT_EXPORT int
dump (unsigned char *data)
{
  int i;
  for (i = 0; i < 4; i++)
    printf ("%02x", data[[i]]);
  return 0;
}
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
       >>IF CHARSET = 'EBCDIC'
           DISPLAY X"F1F2F3"
       >>ELSE
           DISPLAY X"313233"
       >>END-IF
           END-DISPLAY.
           CALL "dump" USING X"000102"
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE dump.c], [0], [], [])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[123
00010200])

AT_CLEANUP


AT_SETUP([DISPLAY data items with VALUE clause])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-ABC         PIC XXX   VALUE "abc".
       01 X-123         PIC 999   VALUE  123.
       01 X-P123        PIC S999  VALUE +123.
       01 X-N123        PIC S999  VALUE -123.
       01 X-12-3        PIC 99V9  VALUE  12.3.
       01 X-P12-3       PIC S99V9 VALUE +12.3.
       01 X-N12-3       PIC S99V9 VALUE -12.3.
       PROCEDURE        DIVISION.
           DISPLAY X-ABC
           END-DISPLAY.
           DISPLAY X-123
           END-DISPLAY.
           DISPLAY X-P123
           END-DISPLAY.
           DISPLAY X-N123
           END-DISPLAY.
           DISPLAY X-12-3
           END-DISPLAY.
           DISPLAY X-P12-3
           END-DISPLAY.
           DISPLAY X-N12-3
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[abc
123
+123
-123
12.3
+12.3
-12.3
])

AT_CLEANUP


AT_SETUP([DISPLAY data items with MOVE statement])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-ABC         PIC XXX   VALUE "abc".
       01 X-123         PIC 999   VALUE  123.
       01 X-P123        PIC S999  VALUE +123.
       01 X-N123        PIC S999  VALUE -123.
       01 X-12-3        PIC 99V9  VALUE  12.3.
       01 X-P12-3       PIC S99V9 VALUE +12.3.
       01 X-N12-3       PIC S99V9 VALUE -12.3.
       PROCEDURE        DIVISION.
           MOVE "abc" TO X-ABC.
           DISPLAY X-ABC
           END-DISPLAY.
           MOVE  123  TO X-123.
           DISPLAY X-123
           END-DISPLAY.
           MOVE +123  TO X-P123.
           DISPLAY X-P123
           END-DISPLAY.
           MOVE -123  TO X-N123.
           DISPLAY X-N123
           END-DISPLAY.
           MOVE  12.3 TO X-12-3.
           DISPLAY X-12-3
           END-DISPLAY.
           MOVE +12.3 TO X-P12-3.
           DISPLAY X-P12-3
           END-DISPLAY.
           MOVE -12.3 TO X-N12-3.
           DISPLAY X-N12-3
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[abc
123
+123
-123
12.3
+12.3
-12.3
])

AT_CLEANUP


AT_SETUP([MOVE to edited item (1)])
AT_KEYWORDS([fundamental editing])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  SRC-1        PIC S99V99  VALUE   1.10.
       01  SRC-2        PIC S99V99  VALUE   0.02.
       01  SRC-3        PIC S99V99  VALUE  -0.03.
       01  SRC-4        PIC S99V99  VALUE  -0.04.
       01  SRC-5        PIC S99V99  VALUE  -0.05.
       01  EDT-1        PIC -(04)9.
       01  EDT-2        PIC -(04)9.
       01  EDT-3        PIC -(04)9.
       01  EDT-4        PIC +(04)9.
       01  EDT-5        PIC -(05).
       PROCEDURE        DIVISION.
           MOVE SRC-1   TO EDT-1.
           MOVE SRC-2   TO EDT-2.
           MOVE SRC-3   TO EDT-3.
           MOVE SRC-4   TO EDT-4.
           MOVE SRC-5   TO EDT-5.
           DISPLAY '>' EDT-1 '<'
           END-DISPLAY.
           DISPLAY '>' EDT-2 '<'
           END-DISPLAY.
           DISPLAY '>' EDT-3 '<'
           END-DISPLAY.
           DISPLAY '>' EDT-4 '<'
           END-DISPLAY.
           DISPLAY '>' EDT-5 '<'
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[>    1<
>    0<
>    0<
>   +0<
>     <
])

AT_CLEANUP


AT_SETUP([MOVE to edited item (2)])
AT_KEYWORDS([fundamental editing])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  SRC-1        PIC S99V99  VALUE  -0.06.
       01  SRC-2        PIC S99V99  VALUE  -0.07.
       01  SRC-3        PIC S99V99  VALUE  -0.08.
       01  SRC-4        PIC S99V99  VALUE  -0.09.
       01  SRC-5        PIC S99V99  VALUE  -1.10.
       01  EDT-1        PIC 9(04)-.
       01  EDT-2        PIC 9(04)+.
       01  EDT-3        PIC Z(04)+.
       01  EDT-4        PIC 9(04)DB.
       01  EDT-5        PIC 9(04)DB.
       PROCEDURE        DIVISION.
           MOVE SRC-1   TO EDT-1.
           MOVE SRC-2   TO EDT-2.
           MOVE SRC-3   TO EDT-3.
           MOVE SRC-4   TO EDT-4.
           MOVE SRC-5   TO EDT-5.
           DISPLAY '>' EDT-1 '<'
           END-DISPLAY.
           DISPLAY '>' EDT-2 '<'
           END-DISPLAY.
           DISPLAY '>' EDT-3 '<'
           END-DISPLAY.
           DISPLAY '>' EDT-4 '<'
           END-DISPLAY.
           DISPLAY '>' EDT-5 '<'
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[>0000 <
>0000+<
>     <
>0000  <
>0001DB<
])

AT_CLEANUP


AT_SETUP([MOVE to edited item (3)])
AT_KEYWORDS([fundamental editing])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID . DisplayToAlphaEdited.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 SRC-FIELD              PIC 9(06).
      *>
       01 DST-FIELD-1            PIC 0XXXXXX.
       01 DST-FIELD-2            PIC BXXXXXX.
       01 DST-FIELD-3            PIC /XXXXXX.
       01 DST-FIELD-4            PIC XXXXXX0.
       01 DST-FIELD-5            PIC XXXXXXB.
       01 DST-FIELD-6            PIC XXXXXX/.
       01 DST-FIELD-7            PIC XXX0XXX.
       01 DST-FIELD-8            PIC XXXBXXX.
       01 DST-FIELD-9            PIC XXX/XXX.
       01 DST-FIELD-10           PIC XB0XB0/.
       01 DST-FIELD-11           PIC 0AA.
       01 DST-FIELD-12           PIC BXA.
       01 DST-FIELD-13           PIC /99.
       01 DST-FIELD-14           PIC 990.
       01 DST-FIELD-15           PIC XAB.
       01 DST-FIELD-16           PIC XA/.
      *>
       01 EXPT-FIELD-1  CONSTANT AS '0123456' .
       01 EXPT-FIELD-2  CONSTANT AS ' 123456' .
       01 EXPT-FIELD-3  CONSTANT AS '/123456' .
       01 EXPT-FIELD-4  CONSTANT AS '1234560' .
       01 EXPT-FIELD-5  CONSTANT AS '123456 ' .
       01 EXPT-FIELD-6  CONSTANT AS '123456/' .
       01 EXPT-FIELD-7  CONSTANT AS '1230456' .
       01 EXPT-FIELD-8  CONSTANT AS '123 456' .
       01 EXPT-FIELD-9  CONSTANT AS '123/456' .
       01 EXPT-FIELD-10 CONSTANT AS '1 02 0/' .
       01 EXPT-FIELD-11 CONSTANT AS '012' .
       01 EXPT-FIELD-12 CONSTANT AS ' 12' .
       01 EXPT-FIELD-13 CONSTANT AS '/00' .
       01 EXPT-FIELD-14 CONSTANT AS '560' .
       01 EXPT-FIELD-15 CONSTANT AS '12 ' .
       01 EXPT-FIELD-16 CONSTANT AS '12/' .
       PROCEDURE DIVISION.
       TEST-RUNNER.
      *> done twice to already check for later compile-time optimization
           MOVE '123456'
             TO DST-FIELD-1  DST-FIELD-2  DST-FIELD-3
                DST-FIELD-4  DST-FIELD-5  DST-FIELD-6
                DST-FIELD-7  DST-FIELD-8  DST-FIELD-9
                DST-FIELD-10 DST-FIELD-11 DST-FIELD-12
                DST-FIELD-12 DST-FIELD-14 DST-FIELD-15
                DST-FIELD-16 SRC-FIELD
           PERFORM DO-TEST.
      *> done twice to already check for later compile-time optimization
           MOVE SRC-FIELD
             TO DST-FIELD-1  DST-FIELD-2  DST-FIELD-3
                DST-FIELD-4  DST-FIELD-5  DST-FIELD-6
                DST-FIELD-7  DST-FIELD-8  DST-FIELD-9
                DST-FIELD-10 DST-FIELD-11 DST-FIELD-12
                DST-FIELD-12 DST-FIELD-14 DST-FIELD-15
                DST-FIELD-16
           PERFORM DO-TEST.
           GOBACK.
       DO-TEST.
           IF DST-FIELD-1 NOT =  EXPT-FIELD-1
              DISPLAY '1: <' DST-FIELD-1 '> != <' EXPT-FIELD-1 '>'.
           IF DST-FIELD-2 NOT =  EXPT-FIELD-2
              DISPLAY '2: <' DST-FIELD-2 '> != <' EXPT-FIELD-2 '>'.
           IF DST-FIELD-3 NOT =  EXPT-FIELD-3
              DISPLAY '3: <' DST-FIELD-3 '> != <' EXPT-FIELD-3 '>'.
           IF DST-FIELD-4 NOT =  EXPT-FIELD-4
              DISPLAY '4: <' DST-FIELD-4 '> != <' EXPT-FIELD-4 '>'.
           IF DST-FIELD-5 NOT =  EXPT-FIELD-5
              DISPLAY '5: <' DST-FIELD-5 '> != <' EXPT-FIELD-5 '>'.
           IF DST-FIELD-6 NOT =  EXPT-FIELD-6
              DISPLAY '6: <' DST-FIELD-6 '> != <' EXPT-FIELD-6 '>'.
           IF DST-FIELD-7 NOT =  EXPT-FIELD-7
              DISPLAY '7: <' DST-FIELD-7 '> != <' EXPT-FIELD-7 '>'.
           IF DST-FIELD-8 NOT =  EXPT-FIELD-8
              DISPLAY '8: <' DST-FIELD-8 '> != <' EXPT-FIELD-8 '>'.
           IF DST-FIELD-9 NOT =  EXPT-FIELD-9
              DISPLAY '9: <' DST-FIELD-9 '> != <' EXPT-FIELD-9 '>'.
           IF DST-FIELD-10 NOT =  EXPT-FIELD-10
              DISPLAY '10: <' DST-FIELD-10 '> != <' EXPT-FIELD-10 '>'.
           IF DST-FIELD-11 NOT =  EXPT-FIELD-11
              DISPLAY '11: <' DST-FIELD-11 '> != <' EXPT-FIELD-11 '>'.
           IF DST-FIELD-12 NOT =  EXPT-FIELD-12
              DISPLAY '12: <' DST-FIELD-12 '> != <' EXPT-FIELD-12 '>'.
           IF DST-FIELD-13 NOT =  EXPT-FIELD-13
              DISPLAY '13: <' DST-FIELD-13 '> != <' EXPT-FIELD-13 '>'.
           IF DST-FIELD-14 NOT =  EXPT-FIELD-14
              DISPLAY '14: <' DST-FIELD-14 '> != <' EXPT-FIELD-14 '>'.
           IF DST-FIELD-15 NOT =  EXPT-FIELD-15
              DISPLAY '15: <' DST-FIELD-15 '> != <' EXPT-FIELD-15 '>'.
           IF DST-FIELD-16 NOT =  EXPT-FIELD-16
              DISPLAY '16: <' DST-FIELD-16 '> != <' EXPT-FIELD-16 '>'.
])

AT_CHECK([$COMPILE -Wno-truncate prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [])

AT_CLEANUP


AT_SETUP([MOVE to item with simple and floating insertion])
AT_KEYWORDS([fundamental edited editing])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  num-1 PIC -*B*99.
       01  num-2 PIC $BB**,***.**.
       01  num-3 PIC $BB--,---.--.

       PROCEDURE DIVISION.
           MOVE -123 TO num-1
           DISPLAY ">" num-1 "<"

           MOVE 1234.56 TO num-2
           DISPLAY ">" num-2 "<"

           MOVE 1234.56 TO num-3
           DISPLAY ">" num-3 "<"
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[>-**123<
>$  *1,234.56<
>$   1,234.56<
])

AT_CLEANUP


AT_SETUP([MOVE to JUSTIFIED item])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  SRC-1        PIC S9(04)          VALUE  11.
       01  SRC-2        PIC S9(04) COMP     VALUE  22.
       01  SRC-3        PIC S9(04) COMP-5   VALUE  33.
       01  SRC-4        PIC S9(04)PP        VALUE  4400.
       01  SRC-5        PIC S9(04)PPPPP     VALUE  55500000.
       01  EDT-FLD      PIC X(07)           JUSTIFIED RIGHT.
       PROCEDURE        DIVISION.
           MOVE SRC-1   TO EDT-FLD.
           DISPLAY '>' EDT-FLD '<'
           END-DISPLAY.
           MOVE SRC-2   TO EDT-FLD.
           DISPLAY '>' EDT-FLD '<'
           END-DISPLAY.
           MOVE SRC-3   TO EDT-FLD.
           DISPLAY '>' EDT-FLD '<'
           END-DISPLAY.
           MOVE SRC-4   TO EDT-FLD.
           DISPLAY '>' EDT-FLD '<'
           END-DISPLAY.
           MOVE SRC-5   TO EDT-FLD.
           DISPLAY '>' EDT-FLD '<'
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[>   0011<
>   0022<
>   0033<
> 004400<
>5500000<
])

AT_CLEANUP


AT_SETUP([MOVE integer literal to alphanumeric])
AT_KEYWORDS([fundamental typing])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC X(04) VALUE SPACES.
       PROCEDURE        DIVISION.
           MOVE 0 TO X.
           DISPLAY X NO ADVANCING END-DISPLAY.
           MOVE 1000 TO X.
           DISPLAY X NO ADVANCING END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -fdiagnostics-show-option prog.cob], [0], [],
[prog.cob:8: warning: alphanumeric value is expected [[-Wtyping]]
prog.cob:6: note: 'X' defined here as PIC X(04) [[-Wtyping]]
])
AT_CHECK([$COMPILE_ONLY -Wstrict-typing -fdiagnostics-show-option prog.cob], [0], [],
[prog.cob:8: warning: alphanumeric value is expected [[-Wtyping]]
prog.cob:6: note: 'X' defined here as PIC X(04) [[-Wtyping]]
prog.cob:10: warning: alphanumeric value is expected [[-Wstrict-typing]]
prog.cob:6: note: 'X' defined here as PIC X(04) [[-Wstrict-typing]]
])
AT_CHECK([$COMPILE_ONLY -Wextra -Wno-strict-typing -fdiagnostics-show-option prog.cob], [0], [],
[prog.cob:8: warning: alphanumeric value is expected [[-Wtyping]]
prog.cob:6: note: 'X' defined here as PIC X(04) [[-Wtyping]]
])
AT_CHECK([$COMPILE -Wextra -Wno-typing -fdiagnostics-show-option prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [0   1000])

AT_CLEANUP


AT_SETUP([Compare FLOAT-LONG with floating-point literal])
AT_KEYWORDS([fundamental literal exponent])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  VAR          FLOAT-LONG VALUE 0.0.

       PROCEDURE        DIVISION.
           MOVE 9.899999999999E+304 TO VAR
           IF VAR < 0
               DISPLAY 'error: compare ' VAR ' < ' 0
                       ' failed!'
               END-DISPLAY
           END-IF.
           IF VAR < 9.799999999999E+304
               DISPLAY 'error: compare ' VAR ' < ' 9.799999999999E+304
                       ' failed!'
               END-DISPLAY
           END-IF.
           IF VAR > 9.999999999999E+304
               DISPLAY 'error: compare ' VAR ' > ' 9.999999999999E+304
                       ' failed!'
               END-DISPLAY
           END-IF.
           MOVE -9.899999999999E+304 TO VAR
           IF VAR > 0
               DISPLAY 'error: compare ' VAR ' > ' 0
                       ' failed!'
               END-DISPLAY
           END-IF.
           IF VAR < -9.999999999999E+304
               DISPLAY 'error: compare ' VAR ' < ' -9.999999999999E+304
                       ' failed!'
               END-DISPLAY
           END-IF.
           IF VAR > -9.799999999999E+304
               DISPLAY 'error: compare ' VAR ' > ' -9.799999999999E+304
                       ' failed!'
               END-DISPLAY
           END-IF.

           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([equality of FLOAT-SHORT / FLOAT-LONG])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  SRC1          FLOAT-LONG VALUE 11.55.
       01  DST1          FLOAT-SHORT.
       01  SRC2          FLOAT-SHORT VALUE 11.55.
       01  DST2          FLOAT-LONG.

       PROCEDURE        DIVISION.
           MOVE SRC1 TO DST1.
           IF DST1 not = 11.55
               DISPLAY 'error 1: move/compare FLOAT-LONG to FLOAT-SHORT
      -                'failed ' DST1
               END-DISPLAY
           END-IF.

           MOVE SRC1 TO DST2.
           IF DST1 not = 11.55
               DISPLAY 'error 2: move/compare FLOAT-LONG to FLOAT-LONG f
      -                'ailed ' DST2
               END-DISPLAY
           END-IF.

           MOVE ZERO TO DST1.
           MOVE ZERO TO DST2.

           MOVE SRC2 TO DST1.
           IF DST1 not = 11.55
               DISPLAY 'error 3: move/compare FLOAT-SHORT to FLOAT-SHORT
      -                ' failed: ' DST1
               END-DISPLAY
           END-IF.

           MOVE SRC2 TO DST2.
           IF DST2 not = 11.55
               DISPLAY 'error 4: move/compare FLOAT-SHORT to FLOAT-LONG
      -                'failed: ' DST2
               END-DISPLAY
           END-IF.

           MOVE ZERO TO DST1.
           IF not (DST1 = 0 AND 0.0)
               DISPLAY "Zero compare failed: " DST1 END-DISPLAY
           END-IF.

           MOVE -0.0 TO DST1.
           IF not (DST1 = 0 AND 0.0)
               DISPLAY "Negative Zero compare failed: " DST1
               END-DISPLAY
           END-IF.

           MOVE 1.1234567 TO DST1.
           MOVE DST1 TO DST2.
           IF DST2 not = 1.1234567
               DISPLAY "move/compare number to FLOAT to DOUBLE failed: "
                       DST1 " - " DST2
               END-DISPLAY
           END-IF.

      * Check for Tolerance
           MOVE 1.1234567 TO DST1.
           MOVE 1.1234568 TO DST2.
           IF DST1 not = DST2 THEN
               DISPLAY 'move/compare of very near numbers failed (not id
      -                'entical): ' DST1 " - " DST2
               END-DISPLAY
           END-IF.

      * Within tolerance by definition, therefore not checked
      *     MULTIPLY 10000000000 BY DST1 DST2 END-MULTIPLY.
      *     IF DST1 = DST2 THEN
      *         DISPLAY "compare of very near numbers computed failed (id
      *-                "entical): " DST1 " - " DST2
      *         END-DISPLAY
      *     END-IF.

           MOVE 1.1234567 TO DST1.
           MOVE 1.1234569 TO DST2.
           IF DST1 = DST2 THEN
               DISPLAY 'move/compare of near equal numbers failed (ident
      -                'ical): ' DST1 " - " DST2
               END-DISPLAY
           END-IF.

           MOVE 0.0001 TO DST1.
           MOVE 0.0000 TO DST2.
           IF DST1 = DST2 THEN
               DISPLAY 'move/compare of nearly equal very small numbers
      -                'failed  (identical): ' DST1 " - " DST2
               END-DISPLAY
           END-IF.

           MOVE 1000001.0 TO DST1.
           MOVE 1000000.0 TO DST2.
           IF DST1 = DST2 THEN
               DISPLAY 'move/compare of nearly equal big numbers failed
      -                '(identical): ' DST1 " - " DST2
               END-DISPLAY
           END-IF.

      * Within tolerance by definition, therefore not checked
      *     MOVE 1000000000.0 TO DST1.
      *     MOVE 1000000001.0 TO DST2.
      *     IF DST1 = DST2 THEN
      *         DISPLAY 'move/compare of nearly equal very big numbers fa
      *-                'iled (identical): ' DST1 " - " DST2
      *         END-DISPLAY
      *     END-IF.

           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([equality of FLOAT-SHORT / FLOAT-EXTENDED])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  SRC1          FLOAT-EXTENDED VALUE 11.55.
       01  DST1          FLOAT-SHORT.
       01  SRC2          FLOAT-SHORT VALUE 11.55.
       01  DST2          FLOAT-EXTENDED.

       PROCEDURE        DIVISION.
           MOVE SRC1 TO DST1.
           IF DST1 not = 11.55
               DISPLAY 'error 1: move/compare FLOAT-EXTENDED to FLOAT-SH
      -                'ORT failed ' DST1
               END-DISPLAY
           END-IF.

           MOVE SRC1 TO DST2.
           IF DST1 not = 11.55
               DISPLAY 'error 2: move/compare FLOAT-EXTENDED to FLOAT-SH
      -                'ORT failed ' DST2
               END-DISPLAY
           END-IF.

           MOVE ZERO TO DST1.
           MOVE ZERO TO DST2.

           MOVE SRC2 TO DST1.
           IF DST1 not = 11.55
               DISPLAY 'error 3: move/compare FLOAT-EXTENDED to FLOAT-SH
      -                'ORT failed ' DST1
               END-DISPLAY
           END-IF.

           MOVE SRC2 TO DST2.
           IF DST2 not = 11.55
               DISPLAY 'error 4: move/compare FLOAT-EXTENDED to FLOAT-SHOR
      -                'T failed ' DST2
               END-DISPLAY
           END-IF.

           MOVE ZERO TO DST1.
           IF not (DST1 = 0 AND 0.0)
               DISPLAY "Zero compare failed: " DST1 END-DISPLAY
           END-IF.

           MOVE -0.0 TO DST1.
           IF not (DST1 = 0 AND 0.0)
               DISPLAY "Negative Zero compare failed: " DST1
               END-DISPLAY
           END-IF.

           MOVE 1.1234567 TO DST1.
           MOVE DST1 TO DST2.
           IF DST2 not = 1.1234567
               DISPLAY "move/compare number to FLOAT to DOUBLE failed: "
                       DST1 " - " DST2
               END-DISPLAY
           END-IF.

      * Check for Tolerance
           MOVE 1.1234567 TO DST1.
           MOVE 1.1234568 TO DST2.
           IF DST1 not = DST2 THEN
               DISPLAY 'move/compare of very near numbers failed (not id
      -                'entical): ' DST1 " - " DST2
               END-DISPLAY
           END-IF.
           MOVE 1.1234567 TO DST1.
           MOVE 0.1234568 TO DST2.
           ADD  1.0       TO DST2.
           IF DST1 not = DST2 THEN
               DISPLAY 'move/compare of very near numbers failed (not id
      -                'entical after ADD): ' DST1 " - " DST2
               END-DISPLAY
           END-IF.

      * Within tolerance by definition, therefore not checked
      *     MULTIPLY 10000000000 BY DST1 DST2 END-MULTIPLY.
      *     IF DST1 = DST2 THEN
      *         DISPLAY "compare of very near numbers computed failed (id
      *-                "entical): " DST1 " - " DST2
      *         END-DISPLAY
      *     END-IF.

           MOVE 1.1234567 TO DST1.
           MOVE 1.1234569 TO DST2.
           IF DST1 = DST2 THEN
               DISPLAY 'move/compare of near equal numbers failed (ident
      -                'ical): ' DST1 " - " DST2
               END-DISPLAY
           END-IF.

           MOVE 0.0001 TO DST1.
           MOVE 0.0000 TO DST2.
           IF DST1 = DST2 THEN
               DISPLAY 'move/compare of nearly equal very small numbers
      -                'failed  (identical): ' DST1 " - " DST2
               END-DISPLAY
           END-IF.

           MOVE 1000001.0 TO DST1.
           MOVE 1000000.0 TO DST2.
           IF DST1 = DST2 THEN
               DISPLAY 'move/compare of nearly equal big numbers failed
      -                '(identical): ' DST1 " - " DST2
               END-DISPLAY
           END-IF.

      * Within tolerance by definition, therefore not checked
      *     MOVE 1000000000.0 TO DST1.
      *     MOVE 1000000001.0 TO DST2.
      *     IF DST1 = DST2 THEN
      *         DISPLAY 'move/compare of nearly equal very big numbers fa
      *-                'iled (identical): ' DST1 " - " DST2
      *         END-DISPLAY
      *     END-IF.

           STOP RUN.
])

AT_CHECK([$COMPILE -Wno-unfinished prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([Overlapping MOVE (GnuCOBOL)])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  FILLER.
         05  TSTMOV1 PIC X(479).
         05  TSTMOV2 PIC X(10).
       PROCEDURE DIVISION.
           MOVE "0123456789" TO TSTMOV2.
           MOVE TSTMOV2 (2:9) TO TSTMOV2 (1:9)
           IF TSTMOV2 NOT = "1234567899"
              DISPLAY "  PROBLEM MOVE: " TSTMOV2
           ELSE
              DISPLAY "  OK with MOVE: " TSTMOV2.
           MOVE "0123456789" TO TSTMOV2.
           MOVE TSTMOV2 (1:8) TO TSTMOV2 (2:8)
           IF TSTMOV2 = "0000000009"
              DISPLAY "IBM style MOVE: " TSTMOV2
           ELSE IF TSTMOV2 NOT = "0012345679"
              DISPLAY "  PROBLEM MOVE: " TSTMOV2
           ELSE
              DISPLAY "  OK with MOVE: " TSTMOV2.
           STOP RUN.
])

# directly seen by the compiler
AT_CHECK([$COMPILE prog.cob], [0], [],
[prog.cob:11: warning: overlapping MOVE may produce unpredictable results
prog.cob:17: warning: overlapping MOVE may produce unpredictable results
])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[  OK with MOVE: 1234567899
  OK with MOVE: 0012345679
], [])

# not seen by the compiler because in LINKAGE
AT_DATA([subprog.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. subprog.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        LINKAGE SECTION.
        01 F1 PIC X(10).
        01 F2 PIC X(15).

        PROCEDURE DIVISION USING F1 F2.
        MOVE F1(1:8) TO F2 (7:8).
        IF F2 NOT = "Hallo1123456780"
           DISPLAY "error:3: " F2.

        GOBACK.
])

AT_DATA([prog2.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog2.

        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01 STRUCTURE.
            05 FIELD1 PIC X(5).
            05 FIELD2 PIC X(10).

        PROCEDURE DIVISION.
           MOVE "Hallo" TO FIELD1.
           MOVE "1234567890" TO FIELD2.

           CALL "subprog" USING BY REFERENCE FIELD2 STRUCTURE.

           STOP RUN.
])

AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE subprog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [0], [], [])

AT_CLEANUP


AT_SETUP([Overlapping MOVE (IBM)])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  FILLER.
         05  TSTMOV1 PIC X(479).
         05  TSTMOV2 PIC X(10).
       PROCEDURE DIVISION.
           MOVE "0123456789" TO TSTMOV2.
           MOVE TSTMOV2 (2:9) TO TSTMOV2 (1:9)
           IF TSTMOV2 NOT = "1234567899"
              DISPLAY "  PROBLEM MOVE: " TSTMOV2
           ELSE
              DISPLAY "  OK with MOVE: " TSTMOV2.
           MOVE "0123456789" TO TSTMOV2.
           MOVE TSTMOV2 (1:8) TO TSTMOV2 (2:8)
           IF TSTMOV2 = "0000000009"
              DISPLAY "IBM style MOVE: " TSTMOV2
           ELSE IF TSTMOV2 NOT = "0012345679"
              DISPLAY "  PROBLEM MOVE: " TSTMOV2
           ELSE
              DISPLAY "  OK with MOVE: " TSTMOV2.
           STOP RUN.
])

# Overlap directly seen by the compiler, ignored because of move-ibm
AT_CHECK([$COMPILE -fmove-ibm prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[  OK with MOVE: 1234567899
IBM style MOVE: 0000000009
], [])

# not seen by the compiler because in LINKAGE
AT_DATA([subprog.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. subprog.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        LINKAGE SECTION.
        01 F1 PIC X(10).
        01 F2 PIC X(15).

        PROCEDURE DIVISION USING F1 F2.
        MOVE F1(1:8) TO F2 (7:8).
        IF F2 NOT = "Hallo1111111110"
           DISPLAY "error:3: " F2.

        GOBACK.
])

AT_DATA([prog2.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog2.

        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01 STRUCTURE.
            05 FIELD1 PIC X(5).
            05 FIELD2 PIC X(10).

        PROCEDURE DIVISION.
           MOVE "Hallo" TO FIELD1.
           MOVE "1234567890" TO FIELD2.

           CALL "subprog" USING BY REFERENCE FIELD2 STRUCTURE.

           STOP RUN.
])

AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE -fmove-ibm subprog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [0], [], [])

AT_CLEANUP


AT_SETUP([ALPHABETIC test])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC X(04) VALUE "AAAA".
       01  FILLER REDEFINES X.
           03  XBYTE    PIC X.
           03  FILLER   PIC XXX.
       PROCEDURE        DIVISION.
           MOVE X"0D"   TO XBYTE.
           IF X ALPHABETIC
              DISPLAY "Fail - Alphabetic"
              END-DISPLAY
           END-IF.
           MOVE "A"     TO XBYTE.
           IF X NOT ALPHABETIC
              DISPLAY "Fail - Not Alphabetic"
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([ALPHABETIC-UPPER test])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC X(04) VALUE "AAAA".
       01  FILLER REDEFINES X.
           03  XBYTE    PIC X.
           03  FILLER   PIC XXX.
       PROCEDURE        DIVISION.
           MOVE X"0D"   TO XBYTE.
           IF X ALPHABETIC-UPPER
              DISPLAY "Fail - Not alphabetic upper"
              END-DISPLAY
           END-IF.
           MOVE "A"     TO XBYTE.
           IF X NOT ALPHABETIC-UPPER
              DISPLAY "Fail - Alphabetic upper"
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([ALPHABETIC-LOWER test])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC X(04) VALUE "aaaa".
       01  FILLER REDEFINES X.
           03  XBYTE    PIC X.
           03  FILLER   PIC XXX.
       PROCEDURE        DIVISION.
           MOVE X"0D"   TO XBYTE.
           IF X ALPHABETIC-LOWER
              DISPLAY "Fail - Not alphabetic lower"
              END-DISPLAY
           END-IF.
           MOVE "a"     TO XBYTE.
           IF X NOT ALPHABETIC-LOWER
              DISPLAY "Fail - Alphabetic lower"
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([GLOBAL at same level])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  X   PIC X(5) GLOBAL  VALUE "prog1".
       PROCEDURE        DIVISION.
           DISPLAY X
           END-DISPLAY.
           CALL "prog2"
           END-CALL
           CALL "prog3"
           END-CALL
           STOP RUN.
        IDENTIFICATION   DIVISION.
        PROGRAM-ID.      prog2.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01  X   PIC X(5) GLOBAL  VALUE "prog2".
        PROCEDURE        DIVISION.
            DISPLAY X
            END-DISPLAY.
            EXIT PROGRAM.
        END PROGRAM prog2.
        IDENTIFICATION   DIVISION.
        PROGRAM-ID.      prog3.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        PROCEDURE        DIVISION.
            DISPLAY X
            END-DISPLAY.
            EXIT PROGRAM.
        END PROGRAM prog3.
       END PROGRAM prog.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[prog1
prog2
prog1
])

AT_CLEANUP


AT_SETUP([GLOBAL at lower level])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  X   PIC X(5) GLOBAL  VALUE "prog1".
       PROCEDURE        DIVISION.
           DISPLAY X
           END-DISPLAY.
           CALL "prog2"
           END-CALL
           STOP RUN.
        IDENTIFICATION   DIVISION.
        PROGRAM-ID.      prog2.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01  X   PIC X(5) GLOBAL  VALUE "prog2".
        PROCEDURE        DIVISION.
            DISPLAY X
            END-DISPLAY.
            CALL "prog3"
            END-CALL
            EXIT PROGRAM.
         IDENTIFICATION   DIVISION.
         PROGRAM-ID.      prog3.
         DATA DIVISION.
         WORKING-STORAGE SECTION.
         PROCEDURE        DIVISION.
             DISPLAY X
             END-DISPLAY.
             EXIT PROGRAM.
         END PROGRAM prog3.
        END PROGRAM prog2.
       END PROGRAM prog.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[prog1
prog2
prog2
])

AT_CLEANUP


AT_SETUP([GLOBAL CONSTANT])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE
              ASSIGN    GLOB-PATH
       .
       DATA             DIVISION.
       FILE             SECTION.
       FD  TEST-FILE    GLOBAL.
       01  TEST-REC     PIC X(4).
       WORKING-STORAGE  SECTION.
       78  GLOB-PATH           GLOBAL VALUE "GLOBP1".
       01  GLOB-PATH2 CONSTANT GLOBAL       "GLOBP2".
      * Test global vars because of implicitly defined ASSIGN var, too.
       78  GLOB-VAR            GLOBAL VALUE "GLOBV1".
       01  GLOB-VAR2  CONSTANT GLOBAL       "GLOBV2".
       PROCEDURE        DIVISION.
           DISPLAY GLOB-PATH GLOB-VAR
           END-DISPLAY.
           CALL "prog2"
           END-CALL.
           CALL "prog3"
           END-CALL.
           STOP RUN.
        IDENTIFICATION   DIVISION.
        PROGRAM-ID.      prog2.
        ENVIRONMENT      DIVISION.
        INPUT-OUTPUT     SECTION.
        FILE-CONTROL.
        SELECT TEST2-FILE
               ASSIGN    GLOB-PATH2
        .
        DATA             DIVISION.
        FILE             SECTION.
        FD  TEST2-FILE   GLOBAL.
        01  TEST2-REC    PIC X(4).
        WORKING-STORAGE  SECTION.
        PROCEDURE        DIVISION.
            DISPLAY GLOB-PATH2 GLOB-VAR2
            END-DISPLAY.
            EXIT PROGRAM.
        END PROGRAM prog2.
       END PROGRAM prog.
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog3.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST3-FILE
              ASSIGN    GLOB-PATH
       .
       DATA             DIVISION.
       FILE             SECTION.
       FD  TEST3-FILE   GLOBAL.
       01  TEST3-REC    PIC X(4).
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY 'in prog3'
           END-DISPLAY
           IF GLOB-PATH NOT = SPACES
              DISPLAY FUNCTION TRIM (GLOB-PATH TRAILING)
              END-DISPLAY
           END-IF
           EXIT PROGRAM.
       END PROGRAM prog3.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[GLOBP1GLOBV1
GLOBP2GLOBV2
in prog3
GLOB-PATH
])

AT_CLEANUP


AT_SETUP([GLOBAL identifiers from ENVIRONMENT DIVISION])
AT_KEYWORDS([fundamental function CURRENCY SIGN RETURNING])

AT_DATA([prog.cob], [
       FUNCTION-ID. f1.
       DATA DIVISION.
       LINKAGE SECTION.
       01 r BINARY-LONG.
       PROCEDURE DIVISION RETURNING r.
           move 1 to r
           GOBACK
           .
       END FUNCTION f1.
       FUNCTION-ID. f2.
       DATA DIVISION.
       LINKAGE SECTION.
       01 i BINARY-LONG.
       01 r BINARY-LONG.
       PROCEDURE DIVISION USING i RETURNING r.
           add i to i giving r
           GOBACK
           .
       END FUNCTION f2.

       PROGRAM-ID.   prog.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       REPOSITORY.
           FUNCTION f1
           FUNCTION f2.
       SPECIAL-NAMES.
           CURRENCY SIGN IS "Y"
           DECIMAL-POINT IS COMMA.

       PROCEDURE DIVISION.
           CALL "prog-nested"
           .

       PROGRAM-ID. prog-nested.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77  n1    BINARY-LONG VALUE 0.
       77  curr  PIC 9.9999,99Y.

       PROCEDURE DIVISION.
           MOVE f1()   TO n1
           IF n1 NOT = 1
             DISPLAY "ERROR 1" GOBACK
           END-IF
           MOVE f2(n1) TO n1
           IF n1 NOT = 2
             DISPLAY "ERROR 2" GOBACK
           END-IF
           MOVE f1()   TO n1
           IF n1 NOT = 1
             DISPLAY "ERROR 1 2nd" GOBACK
           END-IF
           MOVE f2(f2(n1)) TO n1
           IF n1 NOT = 4
             DISPLAY "ERROR 4" GOBACK
           END-IF
           MOVE n1 TO curr
           DISPLAY curr

           GOBACK
           .
       END PROGRAM prog-nested.
       END PROGRAM prog.

])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[0.0004,00Y
])

AT_CLEANUP


AT_SETUP([GLOBAL REDEFINES])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 T0 PIC X VALUE "X".
       01 T1 REDEFINES T0 PIC X GLOBAL.
       PROCEDURE DIVISION.
          DISPLAY T1.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CLEANUP


AT_SETUP([function with variable-length RETURNING item])
AT_KEYWORDS([fundamental udf])

# see Bug #641


# Skipped in 3.1.1 as the codegen is not safe (returning local variable address)
# codegen adjusted in 4.x

AT_SKIP_IF([true])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       FUNCTION-ID. reply.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77 arg-len   USAGE BINARY-LONG.
       LINKAGE SECTION.
       01 argument  PIC X ANY LENGTH.
       01 result.
          05 filler PIC X OCCURS 0 to 999 DEPENDING ON arg-len.
       PROCEDURE DIVISION USING BY REFERENCE argument RETURNING result.
           MOVE FUNCTION LENGTH (argument) TO arg-len
           MOVE argument TO result.
       END FUNCTION reply.

       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       REPOSITORY.
           FUNCTION reply.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77  arg   pic x(100).

       PROCEDURE DIVISION.
      *>
           IF not (FUNCTION         REPLY ("test")  = "test"
               and FUNCTION LENGTH (REPLY ("test")) = 4     )
              DISPLAY "'test' failed: "
                     FUNCTION LENGTH (REPLY ("test")) " #"
                     FUNCTION         REPLY ("test")  "#".
      *>
           IF not (FUNCTION         REPLY ("test   ")  = "test"
               and FUNCTION LENGTH (REPLY ("test   ")) = 7     )
              DISPLAY "'test   ' failed: "
                     FUNCTION LENGTH (REPLY ("test   ")) " #"
                     FUNCTION         REPLY ("test   ")  "#".
      *>
           IF not (FUNCTION         REPLY (arg)  = spaces
               and FUNCTION LENGTH (REPLY (arg)) = 100 )
              DISPLAY "empty arg failed: "
                     FUNCTION LENGTH (REPLY (arg)) " #"
                     FUNCTION         REPLY (arg)  "#".
      *>
           MOVE "echo this" to arg
           IF not (FUNCTION         REPLY (arg)  = arg
               and FUNCTION LENGTH (REPLY (arg)) = 100 )
              DISPLAY "echo arg failed: "
                     FUNCTION LENGTH (REPLY (arg)) " #"
                     FUNCTION         REPLY (arg)  "#".
      *>
           MOVE z"echo this" to arg
           IF not (FUNCTION         REPLY (arg)  = arg
               and FUNCTION LENGTH (REPLY (arg)) = 100 )
              DISPLAY "z'echo arg failed: "
                     FUNCTION LENGTH (REPLY (arg)) " #"
                     FUNCTION         REPLY (arg)  "#".
      *>
           GOBACK
           .
       END PROGRAM prog.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [])

AT_CLEANUP


AT_SETUP([Entry point visibility (1)])
AT_KEYWORDS([fundamental CALL])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA DIVISION.
       PROCEDURE        DIVISION.
           CALL 'module'
           CALL 'modulepart'
           STOP RUN.
])

AT_DATA([module.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      module.
       DATA DIVISION.
       PROCEDURE        DIVISION.
           DISPLAY 'A' WITH NO ADVANCING
           GOBACK.
       ENTRY 'modulepart'.
           DISPLAY 'B' WITH NO ADVANCING
           GOBACK.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE module.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [AB], [])

AT_CLEANUP


AT_SETUP([Entry point visibility (2)])
AT_KEYWORDS([fundamental CALL])

# TODO: skip on __OS400__

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA DIVISION.
       PROCEDURE        DIVISION.
       CALL 'module'
       STOP RUN.
])

AT_DATA([module.c], [
#include <stdio.h>
#include <libcob.h>

COB_EXT_EXPORT int
some (void)
{
  return 0;
}
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE module.c], [0], [], [])
# the warning itself is very system specific, so disable it,
# then run again checking only for the warning
AT_CHECK([COB_DISABLE_WARNINGS=1 $COBCRUN_DIRECT ./prog], [1], [],
[libcob: prog.cob:6: error: entry point 'module' not found
])
AT_CHECK([$COBCRUN_DIRECT ./prog 2> err.log], [1], [], [])
AT_CHECK([$GREP "libcob: prog.cob:6: warning: " err.log], [0], ignore, [])

AT_CLEANUP


AT_SETUP([Contained program visibility (1)])
AT_KEYWORDS([fundamental CALL])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  X   PIC X(5) GLOBAL  VALUE "prog1".
       PROCEDURE        DIVISION.
           IF X NOT = "prog1"
              DISPLAY X
              END-DISPLAY
           END-IF.
           CALL "prog2"
           END-CALL.
           CALL "prog3"
           END-CALL.
           STOP RUN.
        IDENTIFICATION   DIVISION.
        PROGRAM-ID.      prog2.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01  X   PIC X(5) GLOBAL  VALUE "prog2".
        PROCEDURE        DIVISION.
            IF X NOT = "prog2"
               DISPLAY X
               END-DISPLAY
            END-IF.
            CALL "prog3"
            END-CALL.
            EXIT PROGRAM.
         IDENTIFICATION   DIVISION.
         PROGRAM-ID.      prog3.
         DATA DIVISION.
         WORKING-STORAGE SECTION.
         PROCEDURE        DIVISION.
             IF X NOT = "prog2"
                DISPLAY X
                END-DISPLAY
             END-IF
             EXIT PROGRAM.
         END PROGRAM prog3.
        END PROGRAM prog2.
       END PROGRAM prog.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [1], [],
[libcob: prog.cob:14: error: module 'prog3' not found
])

AT_CLEANUP


AT_SETUP([Contained program visibility (2)])
AT_KEYWORDS([fundamental CALL])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  X   PIC X(5) GLOBAL  VALUE "prog1".
       PROCEDURE        DIVISION.
           IF X NOT = "prog1"
              DISPLAY X
              END-DISPLAY
           END-IF.
           CALL "prog2"
           END-CALL.
           STOP RUN.
        IDENTIFICATION   DIVISION.
        PROGRAM-ID.      prog2.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01  X   PIC X(5) GLOBAL  VALUE "prog2".
        PROCEDURE        DIVISION.
            IF X NOT = "prog2"
               DISPLAY X
               END-DISPLAY
            END-IF.
            CALL "prog3"
            END-CALL.
            EXIT PROGRAM.
        END PROGRAM prog2.
        IDENTIFICATION   DIVISION.
        PROGRAM-ID.      prog3.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        PROCEDURE        DIVISION.
            IF X NOT = "prog2"
               DISPLAY X
               END-DISPLAY
            END-IF.
            EXIT PROGRAM.
        END PROGRAM prog3.
       END PROGRAM prog.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [1], [],
[libcob: prog.cob:25: error: module 'prog3' not found
])

AT_CLEANUP


AT_SETUP([Contained program visibility (3)])
AT_KEYWORDS([fundamental CALL])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  X   PIC X(5) GLOBAL  VALUE "prog1".
       PROCEDURE        DIVISION.
           IF X NOT = "prog1"
              DISPLAY X
              END-DISPLAY
           END-IF.
           CALL "prog2"
           END-CALL.
           STOP RUN.
        IDENTIFICATION   DIVISION.
        PROGRAM-ID.      prog2.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01  X   PIC X(5) GLOBAL  VALUE "prog2".
        PROCEDURE        DIVISION.
            IF X NOT = "prog2"
               DISPLAY X
               END-DISPLAY
            END-IF.
            CALL "prog3"
            END-CALL.
            EXIT PROGRAM.
        END PROGRAM prog2.
        IDENTIFICATION   DIVISION.
        PROGRAM-ID.      prog3 COMMON.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        PROCEDURE        DIVISION.
            IF X NOT = "prog1"
               DISPLAY X
               END-DISPLAY
            END-IF.
            EXIT PROGRAM.
        END PROGRAM prog3.
       END PROGRAM prog.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([Contained program visibility (4)])
AT_KEYWORDS([fundamental CALL])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       PROCEDURE        DIVISION.
           DISPLAY "P1" NO ADVANCING
           END-DISPLAY.
           CALL "prog2"
           END-CALL
           CALL "prog3"
           END-CALL
           STOP RUN.
        IDENTIFICATION   DIVISION.
        PROGRAM-ID.      prog2.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        PROCEDURE        DIVISION.
            DISPLAY "P2" NO ADVANCING
            END-DISPLAY.
            EXIT PROGRAM.
        END PROGRAM prog2.
       END PROGRAM prog.
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog3.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       PROCEDURE        DIVISION.
           DISPLAY "P3" NO ADVANCING
           END-DISPLAY.
           CALL "prog2"
           END-CALL.
           EXIT PROGRAM.
        IDENTIFICATION   DIVISION.
        PROGRAM-ID.      prog2.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        PROCEDURE        DIVISION.
            DISPLAY "P4" NO ADVANCING
            END-DISPLAY.
            EXIT PROGRAM.
        END PROGRAM prog2.
       END PROGRAM prog3.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[P1P2P3P4])

AT_CLEANUP


AT_SETUP([CALL alphanumeric data-name])
AT_KEYWORDS([fundamental CANCEL])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.
       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  prgm        PIC X(32) VALUE "recursion-test".

       PROCEDURE       DIVISION.
           CALL prgm
           DISPLAY "<"

           MOVE "cancel-test" TO prgm
           CALL prgm
           CALL prgm
           CANCEL prgm
           CALL prgm
           DISPLAY "<"

           MOVE "dummy-call" TO prgm
           CALL prgm
       >> IF CHECK-PERF IS DEFINED
           PERFORM 500000 TIMES
              CALL prgm
           END-PERFORM
       >> END-IF
           .
       END PROGRAM     prog.


       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     recursion-test RECURSIVE.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  x           PIC 9 VALUE 0.

       PROCEDURE       DIVISION.
           ADD 1 TO x
           DISPLAY x NO ADVANCING
           IF x = 1
               CALL "recursion-test"
           END-IF
           .
       END PROGRAM     recursion-test.


       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     cancel-test.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  x           PIC 9 VALUE 1.

       PROCEDURE       DIVISION.
           DISPLAY x NO ADVANCING
           ADD 1 TO x
           .
       END PROGRAM     cancel-test.


       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     dummy-call.

       PROCEDURE       DIVISION.
           CONTINUE
           .
       END PROGRAM     dummy-call.
])

AT_CHECK([$COMPILE -fno-program-name-redefinition prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[12<
121<
])
AT_CHECK([COB_PHYSICAL_CANCEL=Y $COBCRUN_DIRECT ./prog], [0],
[12<
121<
])
AT_CHECK([COB_PHYSICAL_CANCEL=NEVER $COBCRUN_DIRECT ./prog], [0],
[12<
121<
])
AT_CLEANUP


AT_SETUP([CALL program-pointer])
AT_KEYWORDS([fundamental CANCEL SET ADDRESS POINTER])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       ENVIRONMENT     DIVISION.
       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       77  prog-ptr    USAGE PROGRAM-POINTER.
       77  num         PIC 9 VALUE 0.

       PROCEDURE       DIVISION.
           SET  prog-ptr TO ADDRESS OF PROGRAM "recursion-test"
           CALL prog-ptr USING num
           DISPLAY "<"

           SET  prog-ptr TO ADDRESS OF PROGRAM "cancel-test"
           CALL prog-ptr
           CALL prog-ptr
           CANCEL "cancel-test"
      *>   NOTE: the following results in the previous address
      *>         if physical cancel is not active, otherwise _likely_
      *>         in a different one
           SET  prog-ptr TO ADDRESS OF PROGRAM "cancel-test"
           CALL prog-ptr
           DISPLAY "<"

           SET  prog-ptr TO ADDRESS OF PROGRAM "dummy-call"
           CALL prog-ptr
       >> IF CHECK-PERF IS DEFINED
           PERFORM 500000 TIMES
              CALL prog-ptr
           END-PERFORM
       >> END-IF
           .
       END PROGRAM     prog.


       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     recursion-test RECURSIVE.

       DATA            DIVISION.
       LINKAGE         SECTION.
       01  x           PIC 9.

       PROCEDURE       DIVISION USING x.
           ADD 1 TO x
           DISPLAY x NO ADVANCING
           IF x = 1
               CALL "recursion-test" USING x
           END-IF
           .
       END PROGRAM     recursion-test.


       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     cancel-test.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       77  self-ptr    USAGE PROGRAM-POINTER VALUE NULL.
       01  x           PIC 9 VALUE 1.

       PROCEDURE       DIVISION.
           SET self-ptr TO ENTRY "cancel-test"
           IF  self-ptr = NULL
               DISPLAY 'self-address not set' UPON SYSERR.
           DISPLAY x NO ADVANCING
           ADD 1 TO x
           .
       END PROGRAM     cancel-test.


       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     dummy-call.

       PROCEDURE       DIVISION.
           CONTINUE
           .
       END PROGRAM     dummy-call.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[12<
121<
])
AT_CHECK([COB_PHYSICAL_CANCEL=Y $COBCRUN_DIRECT ./prog], [0],
[12<
121<
])
AT_CLEANUP


AT_SETUP([CALL/CANCEL/SET ADDRESS program-prototype-name])
AT_KEYWORDS([fundamental CALL CANCEL SET])

AT_DATA([prog.cob], [
      *> simple prototypes
       IDENTIFICATION DIVISION.
       PROGRAM-ID. recursion-test PROTOTYPE.
       DATA DIVISION.
       LINKAGE SECTION.
       01  n PIC 9.
       PROCEDURE DIVISION USING n.
       END PROGRAM recursion-test.

       IDENTIFICATION DIVISION.
       PROGRAM-ID. cancel-test IS PROTOTYPE.
       PROCEDURE DIVISION.
       END PROGRAM cancel-test.

      *> program referencing those prototpyes
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       ENVIRONMENT     DIVISION.
       CONFIGURATION   SECTION.
       REPOSITORY.
           PROGRAM recursion-test
           PROGRAM cancel-test
           .
       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       77  prog-ptr    USAGE PROGRAM-POINTER VALUE NULL.
       01  num         PIC 9 VALUE 0.

       PROCEDURE       DIVISION.
           CALL recursion-test USING num
           DISPLAY "<"

           CALL cancel-test
           CALL cancel-test
           CANCEL cancel-test
           CALL cancel-test
           DISPLAY "<"
           SET prog-ptr TO ADDRESS OF PROGRAM recursion-test
           IF  prog-ptr = NULL
               DISPLAY 'address of recursion-prog not set' UPON SYSERR
           ELSE
               SET prog-ptr TO NULL
           END-IF
           SET prog-ptr TO ADDRESS OF PROGRAM cancel-test
           IF  prog-ptr = NULL
               DISPLAY 'address of cancel-prog not set' UPON SYSERR
           ELSE
               SET prog-ptr TO NULL
           END-IF
           .
       END PROGRAM     prog.

      *> actual implementation of the prototyped programs
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     recursion-test RECURSIVE.

       DATA            DIVISION.
       LINKAGE         SECTION.
       01  x           PIC 9.

       PROCEDURE       DIVISION USING x.
           ADD 1 TO x
           DISPLAY x NO ADVANCING
           IF x = 1
      *>       CHECKME: Should this work (disabled for now...) ?
      *>       CALL recursion-test USING x
               CALL "recursion-test" USING x
           END-IF
           .
       END PROGRAM     recursion-test.


       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     cancel-test.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  x           PIC 9 VALUE 1.

       PROCEDURE       DIVISION.
           DISPLAY x NO ADVANCING
           ADD 1 TO x
           .
       END PROGRAM     cancel-test.
])

# TODO:
AT_CHECK([$COMPILE -Wno-unfinished prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[12<
121<
])
AT_CHECK([COB_PHYSICAL_CANCEL=Y $COBCRUN_DIRECT ./prog], [0],
[12<
121<
])
AT_CLEANUP


AT_SETUP([GLOBAL FD (1)])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE
              ASSIGN      "TESTFILE"
              ACCESS       DYNAMIC
              ORGANIZATION RELATIVE
              STATUS       TESTSTAT
              RELATIVE KEY TESTKEY
       .
       DATA             DIVISION.
       FILE             SECTION.
       FD  TEST-FILE    GLOBAL.
       01  TEST-REC     PIC X(4).
       WORKING-STORAGE  SECTION.
       01  GLOBVALS.
           03  TESTKEY  PIC 9(4).
           03  TESTSTAT PIC XX.
       PROCEDURE        DIVISION.
           OPEN  INPUT TEST-FILE.
           CALL  "prog2"
           END-CALL.
           CLOSE TEST-FILE.
           STOP RUN.
        IDENTIFICATION   DIVISION.
        PROGRAM-ID.      prog2.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        PROCEDURE        DIVISION.
            READ TEST-FILE
                 INVALID KEY
                 DISPLAY "NOK"
                 END-DISPLAY
            END-READ.
            EXIT PROGRAM.
        END PROGRAM prog2.
       END PROGRAM prog.
])

# FIXME: move to different place or adjust test - note: so far
#        we only want to verify codegen
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CLEANUP


AT_SETUP([GLOBAL FD (2)])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE
              ASSIGN      "TESTFILE"
              ACCESS       DYNAMIC
              ORGANIZATION INDEXED
              STATUS       TESTSTAT
              RECORD KEY   TESTKEY
       .
       DATA             DIVISION.
       FILE             SECTION.
       FD  TEST-FILE    GLOBAL.
       01  TEST-REC.
           03  TESTKEY  PIC X(4).
       WORKING-STORAGE  SECTION.
       01  GLOBVALS.
           03  TESTSTAT PIC XX.
       PROCEDURE        DIVISION.
           OPEN  INPUT TEST-FILE.
           CALL  "prog2"
           END-CALL.
           CLOSE TEST-FILE.
           STOP RUN.
        IDENTIFICATION   DIVISION.
        PROGRAM-ID.      prog2.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        PROCEDURE        DIVISION.
            READ TEST-FILE
                 INVALID KEY
                 DISPLAY "NOK"
                 END-DISPLAY
            END-READ.
            EXIT PROGRAM.
        END PROGRAM prog2.
       END PROGRAM prog.
])
# FIXME: move to different place or adjust test - note: so far
#        we only want to verify codegen, otherwise add
# AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])
AT_CHECK([$COMPILE -Wno-unsupported prog.cob], [0], [], [])

AT_CLEANUP


AT_SETUP([GLOBAL FD (3)])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE
              ASSIGN      "TESTFILE"
              ACCESS       DYNAMIC
              ORGANIZATION RELATIVE
              STATUS       TESTSTAT
              RELATIVE KEY TESTKEY
       .
       DATA             DIVISION.
       FILE             SECTION.
       FD  TEST-FILE    GLOBAL.
       01  TEST-REC     PIC X(4).
       WORKING-STORAGE  SECTION.
       01  GLOBVALS.
           03  TESTKEY  PIC 9(4).
           03  TESTSTAT PIC XX.
       PROCEDURE        DIVISION.
           MOVE "00"    TO TESTSTAT.
           CALL  "prog2"
           END-CALL.
           IF TESTSTAT = "00"
              DISPLAY "Not OK"
              END-DISPLAY
           END-IF.
           STOP RUN.
        IDENTIFICATION   DIVISION.
        PROGRAM-ID.      prog2.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        PROCEDURE        DIVISION.
            OPEN  INPUT TEST-FILE.
            EXIT PROGRAM.
        END PROGRAM prog2.
       END PROGRAM prog.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([GLOBAL FD (4)])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE
              ASSIGN      "TESTFILE"
              ACCESS       DYNAMIC
              ORGANIZATION INDEXED
              STATUS       TESTSTAT
              RECORD KEY   TESTKEY
       .
       DATA             DIVISION.
       FILE             SECTION.
       FD  TEST-FILE    GLOBAL.
       01  TEST-REC.
           03  TESTKEY  PIC X(4).
       WORKING-STORAGE  SECTION.
       01  GLOBVALS.
           03  TESTSTAT PIC XX.
       PROCEDURE        DIVISION.
           MOVE "00"    TO TESTSTAT.
           CALL  "prog2"
           END-CALL.
           IF TESTSTAT = "00"
              DISPLAY "Not OK"
              END-DISPLAY
           END-IF.
           STOP RUN.
        IDENTIFICATION   DIVISION.
        PROGRAM-ID.      prog2.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        PROCEDURE        DIVISION.
            OPEN  INPUT TEST-FILE.
            EXIT PROGRAM.
        END PROGRAM prog2.
       END PROGRAM prog.
])

# Note: special check: we test the invalid open here, it doesn't
#       matter _why_ it is invalid (missing file / missing support)
AT_CHECK([$COMPILE -Wno-unsupported prog.cob], [0], [], [])
AT_CHECK([COB_DISABLE_WARNINGS=1 $COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([CANCEL test (1)])
AT_KEYWORDS([fundamental CALL])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       PROCEDURE        DIVISION.
           CANCEL "notthere".
           CANCEL "prog".
           DISPLAY "NG" NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [1], [],
[libcob: prog.cob:8: error: attempt to CANCEL active program
])
AT_CHECK([COB_PHYSICAL_CANCEL=1 ./prog], [1], [],
[libcob: prog.cob:8: error: attempt to CANCEL active program
])

AT_CLEANUP


AT_SETUP([CANCEL test (2)])
AT_KEYWORDS([fundamental CALL])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       PROCEDURE        DIVISION.
           CALL "prog2".
           DISPLAY "NG" NO ADVANCING.
           STOP RUN.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       PROCEDURE        DIVISION.
           CANCEL "prog".
           DISPLAY "NG" NO ADVANCING.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE prog2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [1], [],
[libcob: prog2.cob:7: error: attempt to CANCEL active program
])
AT_CHECK([COB_PHYSICAL_CANCEL=1 ./prog], [1], [],
[libcob: prog2.cob:7: error: attempt to CANCEL active program
])

AT_CLEANUP


AT_SETUP([CANCEL test (3)])
AT_KEYWORDS([fundamental CALL])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       PROCEDURE        DIVISION.
           CALL "prog2".
           CALL "prog2".
           CANCEL "prog2".
           CALL "prog2".
           CANCEL "prog2".
           DISPLAY "NG" NO ADVANCING.
           STOP RUN.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77  VAR          PIC 9(01) value 1.
       PROCEDURE        DIVISION.
           DISPLAY VAR NO ADVANCING.
           ADD  1 TO VAR.
           GOBACK.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE prog2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [121NG], [])
AT_CHECK([COB_PHYSICAL_CANCEL=1 ./prog], [0], [121NG], [])

AT_CLEANUP


AT_SETUP([Separate sign positions (1)])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC S9 VALUE -1 SIGN LEADING SEPARATE.
       01  Y            PIC S9 VALUE -1 SIGN TRAILING SEPARATE.
       PROCEDURE        DIVISION.
           DISPLAY X(1:1) X(2:1) NO ADVANCING
           END-DISPLAY.
           DISPLAY Y(1:1) Y(2:1) NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [-11-])

AT_CLEANUP


AT_SETUP([Separate sign positions (2)])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC S9 SIGN LEADING SEPARATE.
       01  Y            PIC S9 SIGN TRAILING SEPARATE.
       PROCEDURE        DIVISION.
           MOVE 0 TO X.
           DISPLAY X NO ADVANCING
           END-DISPLAY.
           MOVE ZERO TO X.
           DISPLAY X NO ADVANCING
           END-DISPLAY.
           MOVE 0 TO Y.
           DISPLAY Y NO ADVANCING
           END-DISPLAY.
           MOVE ZERO TO Y.
           DISPLAY Y NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE -fpretty-display prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [+0+00+0+])
AT_CHECK([$COBCRUN prog], [0], [+0+00+0+])

AT_CLEANUP


AT_SETUP([Context sensitive words (1)])
AT_KEYWORDS([fundamental byte-length])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  BYTE-LENGTH  PIC 9.
       01  X            CONSTANT AS BYTE-LENGTH OF BYTE-LENGTH.
       PROCEDURE        DIVISION.
           MOVE X TO BYTE-LENGTH.
           DISPLAY BYTE-LENGTH NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [1])

AT_CLEANUP


AT_SETUP([Context sensitive words (2)])
AT_KEYWORDS([fundamental yyyymmdd])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  YYYYMMDD     PIC 9 VALUE 0.
       01  X            PIC X(16).
       PROCEDURE        DIVISION.
           ACCEPT X FROM DATE YYYYMMDD
           END-ACCEPT.
           DISPLAY YYYYMMDD NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [0], [])

AT_CLEANUP


AT_SETUP([Context sensitive words (3)])
AT_KEYWORDS([fundamental yyyyddd])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  YYYYDDD      PIC 9 VALUE 0.
       01  X            PIC X(16).
       PROCEDURE        DIVISION.
           ACCEPT X FROM DAY YYYYDDD
           END-ACCEPT.
           DISPLAY YYYYDDD NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [0], [])

AT_CLEANUP


AT_SETUP([Context sensitive words (4)])
AT_KEYWORDS([fundamental intrinsic])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       REPOSITORY.
           FUNCTION ALL INTRINSIC.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  INTRINSIC    PIC 9 VALUE 0.
       PROCEDURE        DIVISION.
           DISPLAY INTRINSIC NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [0], [])

AT_CLEANUP


AT_SETUP([Context sensitive words (5)])
AT_KEYWORDS([fundamental recursive])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog RECURSIVE.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  RECURSIVE    PIC 9 VALUE 0.
       PROCEDURE        DIVISION.
           DISPLAY RECURSIVE NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [0], [])

AT_CLEANUP


AT_SETUP([Context sensitive words (6)])
AT_KEYWORDS([fundamental normal])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  NORMAL       PIC 9 VALUE 0.
       PROCEDURE        DIVISION.
           DISPLAY NORMAL NO ADVANCING *> Intentionally no period or END-DISPLAY
           STOP RUN NORMAL.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [0], [])

AT_CLEANUP


AT_SETUP([Context sensitive words (7)])
AT_KEYWORDS([fundamental compute away-from-zero])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X               PIC 9 VALUE 0.
       01  AWAY-FROM-ZERO  PIC 9 VALUE 0.
       PROCEDURE        DIVISION.
           COMPUTE X ROUNDED MODE AWAY-FROM-ZERO
                   AWAY-FROM-ZERO = 1.1
           END-COMPUTE
           DISPLAY X AWAY-FROM-ZERO NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [21])

AT_CLEANUP


AT_SETUP([Context sensitive words (8)])
AT_KEYWORDS([fundamental ibm unbounded attributes])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  UNBOUNDED.
           03 ATTRIBUTES  PIC 9 VALUE 0.
       01  LOC.
           03 NAMESPACE   PIC 9 VALUE 1.
       PROCEDURE        DIVISION.
           DISPLAY UNBOUNDED ATTRIBUTES
                   NAMESPACE IN LOC
                   NO ADVANCING.
           STOP RUN.
])

AT_CHECK([$COMPILE -std=ibm-strict prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [001], [])

AT_CLEANUP


AT_SETUP([ROUNDED AWAY-FROM-ZERO])
AT_KEYWORDS([fundamental compute])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  M                PIC S9.
       01  N                PIC S9.
       01  O                PIC S9.
       01  P                PIC S9.
       01  Q                PIC S9.
       01  R                PIC S9.
       01  S                PIC S9.
       01  T                PIC S9.
       01  U                PIC S9.
       01  V                PIC S9.
       PROCEDURE DIVISION.
           COMPUTE M ROUNDED MODE AWAY-FROM-ZERO
                   = 2.49
           END-COMPUTE
           COMPUTE N ROUNDED MODE AWAY-FROM-ZERO
                   = -2.49
           END-COMPUTE
           COMPUTE O ROUNDED MODE AWAY-FROM-ZERO
                   = 2.50
           END-COMPUTE
           COMPUTE P ROUNDED MODE AWAY-FROM-ZERO
                   = -2.50
           END-COMPUTE
           COMPUTE Q ROUNDED MODE AWAY-FROM-ZERO
                   = 3.49
           END-COMPUTE
           COMPUTE R ROUNDED MODE AWAY-FROM-ZERO
                   = -3.49
           END-COMPUTE
           COMPUTE S ROUNDED MODE AWAY-FROM-ZERO
                   = 3.50
           END-COMPUTE
           COMPUTE T ROUNDED MODE AWAY-FROM-ZERO
                   = -3.50
           END-COMPUTE
           COMPUTE U ROUNDED MODE AWAY-FROM-ZERO
                   = 3.510
           END-COMPUTE
           COMPUTE V ROUNDED MODE AWAY-FROM-ZERO
                   = -3.510
           END-COMPUTE
           DISPLAY M " " N " " O " " P " " Q " " R " " S " " T
                   " " U " " V
               NO ADVANCING
           END-DISPLAY
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [+3 -3 +3 -3 +4 -4 +4 -4 +4 -4])

AT_CLEANUP


AT_SETUP([ROUNDED NEAREST-AWAY-FROM-ZERO])
AT_KEYWORDS([fundamental compute])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  M                PIC S9.
       01  N                PIC S9.
       01  O                PIC S9.
       01  P                PIC S9.
       01  Q                PIC S9.
       01  R                PIC S9.
       01  S                PIC S9.
       01  T                PIC S9.
       01  U                PIC S9.
       01  V                PIC S9.
       PROCEDURE DIVISION.
           COMPUTE M ROUNDED MODE NEAREST-AWAY-FROM-ZERO
                   = 2.49
           END-COMPUTE
           COMPUTE N ROUNDED MODE NEAREST-AWAY-FROM-ZERO
                   = -2.49
           END-COMPUTE
           COMPUTE O ROUNDED MODE NEAREST-AWAY-FROM-ZERO
                   = 2.50
           END-COMPUTE
           COMPUTE P ROUNDED MODE NEAREST-AWAY-FROM-ZERO
                   = -2.50
           END-COMPUTE
           COMPUTE Q ROUNDED MODE NEAREST-AWAY-FROM-ZERO
                   = 3.49
           END-COMPUTE
           COMPUTE R ROUNDED MODE NEAREST-AWAY-FROM-ZERO
                   = -3.49
           END-COMPUTE
           COMPUTE S ROUNDED MODE NEAREST-AWAY-FROM-ZERO
                   = 3.50
           END-COMPUTE
           COMPUTE T ROUNDED MODE NEAREST-AWAY-FROM-ZERO
                   = -3.50
           END-COMPUTE
           COMPUTE U ROUNDED MODE NEAREST-AWAY-FROM-ZERO
                   = 3.510
           END-COMPUTE
           COMPUTE V ROUNDED MODE NEAREST-AWAY-FROM-ZERO
                   = -3.510
           END-COMPUTE
           DISPLAY M " " N " " O " " P " " Q " " R " " S " " T
                   " " U " " V
               NO ADVANCING
           END-DISPLAY
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [+2 -2 +3 -3 +3 -3 +4 -4 +4 -4])

AT_CLEANUP


AT_SETUP([ROUNDED NEAREST-EVEN])
AT_KEYWORDS([fundamental compute])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  M                PIC S9.
       01  N                PIC S9.
       01  O                PIC S9.
       01  P                PIC S9.
       01  Q                PIC S9.
       01  R                PIC S9.
       01  S                PIC S9.
       01  T                PIC S9.
       01  U                PIC S9.
       01  V                PIC S9.
       PROCEDURE DIVISION.
           COMPUTE M ROUNDED MODE NEAREST-EVEN
                   = 2.49
           END-COMPUTE
           COMPUTE N ROUNDED MODE NEAREST-EVEN
                   = -2.49
           END-COMPUTE
           COMPUTE O ROUNDED MODE NEAREST-EVEN
                   = 2.50
           END-COMPUTE
           COMPUTE P ROUNDED MODE NEAREST-EVEN
                   = -2.50
           END-COMPUTE
           COMPUTE Q ROUNDED MODE NEAREST-EVEN
                   = 3.49
           END-COMPUTE
           COMPUTE R ROUNDED MODE NEAREST-EVEN
                   = -3.49
           END-COMPUTE
           COMPUTE S ROUNDED MODE NEAREST-EVEN
                   = 3.50
           END-COMPUTE
           COMPUTE T ROUNDED MODE NEAREST-EVEN
                   = -3.50
           END-COMPUTE
           COMPUTE U ROUNDED MODE NEAREST-EVEN
                   = 3.510
           END-COMPUTE
           COMPUTE V ROUNDED MODE NEAREST-EVEN
                   = -3.510
           END-COMPUTE
           DISPLAY M " " N " " O " " P " " Q " " R " " S " " T
                   " " U " " V
               NO ADVANCING
           END-DISPLAY
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [+2 -2 +2 -2 +3 -3 +4 -4 +4 -4])

AT_CLEANUP


AT_SETUP([ROUNDED NEAREST-TOWARD-ZERO])
AT_KEYWORDS([fundamental compute])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  M                PIC S9.
       01  N                PIC S9.
       01  O                PIC S9.
       01  P                PIC S9.
       01  Q                PIC S9.
       01  R                PIC S9.
       01  S                PIC S9.
       01  T                PIC S9.
       01  U                PIC S9.
       01  V                PIC S9.
       PROCEDURE DIVISION.
           COMPUTE M ROUNDED MODE NEAREST-TOWARD-ZERO
                   = 2.49
           END-COMPUTE
           COMPUTE N ROUNDED MODE NEAREST-TOWARD-ZERO
                   = -2.49
           END-COMPUTE
           COMPUTE O ROUNDED MODE NEAREST-TOWARD-ZERO
                   = 2.50
           END-COMPUTE
           COMPUTE P ROUNDED MODE NEAREST-TOWARD-ZERO
                   = -2.50
           END-COMPUTE
           COMPUTE Q ROUNDED MODE NEAREST-TOWARD-ZERO
                   = 3.49
           END-COMPUTE
           COMPUTE R ROUNDED MODE NEAREST-TOWARD-ZERO
                   = -3.49
           END-COMPUTE
           COMPUTE S ROUNDED MODE NEAREST-TOWARD-ZERO
                   = 3.50
           END-COMPUTE
           COMPUTE T ROUNDED MODE NEAREST-TOWARD-ZERO
                   = -3.50
           END-COMPUTE
           COMPUTE U ROUNDED MODE NEAREST-TOWARD-ZERO
                   = 3.510
           END-COMPUTE
           COMPUTE V ROUNDED MODE NEAREST-TOWARD-ZERO
                   = -3.510
           END-COMPUTE
           DISPLAY M " " N " " O " " P " " Q " " R " " S " " T
                   " " U " " V
               NO ADVANCING
           END-DISPLAY
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [+2 -2 +2 -2 +3 -3 +3 -3 +4 -4])

AT_CLEANUP


AT_SETUP([ROUNDED TOWARD-GREATER])
AT_KEYWORDS([fundamental compute])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  M                PIC S9.
       01  N                PIC S9.
       01  O                PIC S9.
       01  P                PIC S9.
       01  Q                PIC S9.
       01  R                PIC S9.
       01  S                PIC S9.
       01  T                PIC S9.
       01  U                PIC S9.
       01  V                PIC S9.
       PROCEDURE DIVISION.
           COMPUTE M ROUNDED MODE TOWARD-GREATER
                   = 2.49
           END-COMPUTE
           COMPUTE N ROUNDED MODE TOWARD-GREATER
                   = -2.49
           END-COMPUTE
           COMPUTE O ROUNDED MODE TOWARD-GREATER
                   = 2.50
           END-COMPUTE
           COMPUTE P ROUNDED MODE TOWARD-GREATER
                   = -2.50
           END-COMPUTE
           COMPUTE Q ROUNDED MODE TOWARD-GREATER
                   = 3.49
           END-COMPUTE
           COMPUTE R ROUNDED MODE TOWARD-GREATER
                   = -3.49
           END-COMPUTE
           COMPUTE S ROUNDED MODE TOWARD-GREATER
                   = 3.50
           END-COMPUTE
           COMPUTE T ROUNDED MODE TOWARD-GREATER
                   = -3.50
           END-COMPUTE
           COMPUTE U ROUNDED MODE TOWARD-GREATER
                   = 3.510
           END-COMPUTE
           COMPUTE V ROUNDED MODE TOWARD-GREATER
                   = -3.510
           END-COMPUTE
           DISPLAY M " " N " " O " " P " " Q " " R " " S " " T
                   " " U " " V
               NO ADVANCING
           END-DISPLAY
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [+3 -2 +3 -2 +4 -3 +4 -3 +4 -3])

AT_CLEANUP


AT_SETUP([ROUNDED TOWARD-LESSER])
AT_KEYWORDS([fundamental compute])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  M                PIC S9.
       01  N                PIC S9.
       01  O                PIC S9.
       01  P                PIC S9.
       01  Q                PIC S9.
       01  R                PIC S9.
       01  S                PIC S9.
       01  T                PIC S9.
       01  U                PIC S9.
       01  V                PIC S9.
       PROCEDURE DIVISION.
           COMPUTE M ROUNDED MODE TOWARD-LESSER
                   = 2.49
           END-COMPUTE
           COMPUTE N ROUNDED MODE TOWARD-LESSER
                   = -2.49
           END-COMPUTE
           COMPUTE O ROUNDED MODE TOWARD-LESSER
                   = 2.50
           END-COMPUTE
           COMPUTE P ROUNDED MODE TOWARD-LESSER
                   = -2.50
           END-COMPUTE
           COMPUTE Q ROUNDED MODE TOWARD-LESSER
                   = 3.49
           END-COMPUTE
           COMPUTE R ROUNDED MODE TOWARD-LESSER
                   = -3.49
           END-COMPUTE
           COMPUTE S ROUNDED MODE TOWARD-LESSER
                   = 3.50
           END-COMPUTE
           COMPUTE T ROUNDED MODE TOWARD-LESSER
                   = -3.50
           END-COMPUTE
           COMPUTE U ROUNDED MODE TOWARD-LESSER
                   = 3.510
           END-COMPUTE
           COMPUTE V ROUNDED MODE TOWARD-LESSER
                   = -3.510
           END-COMPUTE
           DISPLAY M " " N " " O " " P " " Q " " R " " S " " T
                   " " U " " V
               NO ADVANCING
           END-DISPLAY
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [+2 -3 +2 -3 +3 -4 +3 -4 +3 -4])

AT_CLEANUP


AT_SETUP([ROUNDED TRUNCATION])
AT_KEYWORDS([fundamental compute])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  M                PIC S9.
       01  N                PIC S9.
       01  O                PIC S9.
       01  P                PIC S9.
       01  Q                PIC S9.
       01  R                PIC S9.
       01  S                PIC S9.
       01  T                PIC S9.
       01  U                PIC S9.
       01  V                PIC S9.
       PROCEDURE DIVISION.
           COMPUTE M ROUNDED MODE TRUNCATION
                   = 2.49
           END-COMPUTE
           COMPUTE N ROUNDED MODE TRUNCATION
                   = -2.49
           END-COMPUTE
           COMPUTE O ROUNDED MODE TRUNCATION
                   = 2.50
           END-COMPUTE
           COMPUTE P ROUNDED MODE TRUNCATION
                   = -2.50
           END-COMPUTE
           COMPUTE Q ROUNDED MODE TRUNCATION
                   = 3.49
           END-COMPUTE
           COMPUTE R ROUNDED MODE TRUNCATION
                   = -3.49
           END-COMPUTE
           COMPUTE S ROUNDED MODE TRUNCATION
                   = 3.50
           END-COMPUTE
           COMPUTE T ROUNDED MODE TRUNCATION
                   = -3.50
           END-COMPUTE
           COMPUTE U ROUNDED MODE TRUNCATION
                   = 3.510
           END-COMPUTE
           COMPUTE V ROUNDED MODE TRUNCATION
                   = -3.510
           END-COMPUTE
           DISPLAY M " " N " " O " " P " " Q " " R " " S " " T
                   " " U " " V
               NO ADVANCING
           END-DISPLAY
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [+2 -2 +2 -2 +3 -3 +3 -3 +3 -3])

AT_CLEANUP


AT_SETUP([Numeric operations (1)])
AT_KEYWORDS([fundamental ADD SUBTRACT])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC S9V9.
       01  Y            PIC S9V9 COMP-3.
       PROCEDURE        DIVISION.
           MOVE -0.1  TO X.
           ADD 1      TO X.
           IF X NOT = 0.9
              DISPLAY X.
           MOVE  0.1  TO X.
           SUBTRACT 1 FROM X.
           IF X NOT = -0.9
              DISPLAY X.
           MOVE -0.1 TO Y.
           ADD 1     TO Y.
           IF Y NOT = 0.9
              DISPLAY Y.
           MOVE  0.1  TO Y.
           SUBTRACT 1 FROM Y.
           IF Y NOT = -0.9
              DISPLAY Y.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([Numeric operations (2) DISPLAY])
AT_KEYWORDS([fundamental add subtract])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  FIELD        PIC S9(1)V9(1).
       01  FELD2        PIC S9(5)V9(5).
       01  FELD3        PIC 9(1)V9(1).
       01  FELD4        PIC S9(1).
       01  FILLER       USAGE BINARY-INT VALUE 0.
           88 DO-DISP   VALUE 0.
           88 NO-DISP   VALUE 1.
       REPLACE ==DISPLAY== BY ==IF DO-DISP  DISPLAY==.

       PROCEDURE        DIVISION.
       MAIN.
      *    Test with DISPLAY on error
           PERFORM DO-CHECK.
       >> IF CHECK-PERF IS DEFINED
           SET  NO-DISP    TO TRUE
      *    some performance checks on the way...
           PERFORM DO-CHECK 20000 TIMES.
       >> END-IF
           GOBACK.

       DO-CHECK.
           MOVE 0.2 TO FIELD
           ADD 1 TO FIELD
           IF FIELD  NOT = 1.2
              DISPLAY "Test  1 " FIELD.

           MOVE 0.2 TO FIELD
           ADD -1 TO FIELD
           IF FIELD  NOT = -0.8
              DISPLAY "Test  2 " FIELD.

           MOVE -0.2 TO FIELD
           ADD 1 TO FIELD
           IF FIELD  NOT = 0.8
              DISPLAY "Test  3 " FIELD.

           MOVE -0.2 TO FIELD
           ADD -1 TO FIELD
           IF FIELD  NOT = -1.2
              DISPLAY "Test  4 " FIELD.

           MOVE 0.2 TO FIELD
           SUBTRACT 1 FROM FIELD
           IF FIELD  NOT = -0.8
              DISPLAY "Test  5 " FIELD.

           MOVE 0.2 TO FIELD
           SUBTRACT -1 FROM FIELD
           IF FIELD  NOT = 1.2
              DISPLAY "Test  6 " FIELD.

           MOVE -0.2 TO FIELD
           SUBTRACT 1 FROM FIELD
           IF FIELD  NOT = -1.2
              DISPLAY "Test  7 " FIELD.

           MOVE -0.2 TO FIELD
           SUBTRACT -1 FROM FIELD
           IF FIELD  NOT = 0.8
              DISPLAY "Test  8 " FIELD.

           MOVE 0.2 TO FELD2
           ADD 1 TO FELD2
           IF FELD2  NOT = 1.2
              DISPLAY "Test  9 " FELD2.

           MOVE 0.2 TO FELD2
           ADD -1 TO FELD2
           IF FELD2  NOT = -0.8
              DISPLAY "Test 10 " FELD2.

           MOVE -0.2 TO FELD2
           ADD 1 TO FELD2
           IF FELD2  NOT = 0.8
              DISPLAY "Test 11 " FELD2.

           MOVE -0.2 TO FELD2
           ADD -1 TO FELD2
           IF FELD2  NOT = -1.2
              DISPLAY "Test 12 " FELD2.

           MOVE 0.2 TO FELD2
           SUBTRACT 1 FROM FELD2
           IF FELD2  NOT = -0.8
              DISPLAY "Test 13 " FELD2.

           MOVE 0.2 TO FELD2
           SUBTRACT -1 FROM FELD2
           IF FELD2  NOT = 1.2
              DISPLAY "Test 14 " FELD2.

           MOVE -0.2 TO FELD2
           SUBTRACT 1 FROM FELD2
           IF FELD2  NOT = -1.2
              DISPLAY "Test 15 " FELD2.

           MOVE -0.2 TO FELD2
           SUBTRACT -1 FROM FELD2
           IF FELD2  NOT = 0.8
              DISPLAY "Test 16 " FELD2.

           MOVE 0.2 TO FELD3
           ADD 1 TO FELD3
           IF FELD3  NOT = 1.2
              DISPLAY "Test 17 " FELD3.

           MOVE 0.2 TO FELD3
           ADD -1 TO FELD3
           IF FELD3  NOT = 0.8
              DISPLAY "Test 18 " FELD3.

           MOVE -0.2 TO FELD3
           ADD 1 TO FELD3
           IF FELD3  NOT = 1.2
              DISPLAY "Test 19 " FELD3.

           MOVE -0.2 TO FELD3
           ADD -1 TO FELD3
           IF FELD3  NOT = 0.8
              DISPLAY "Test 20 " FELD3.

           MOVE 0.2 TO FELD3
           SUBTRACT 1 FROM FELD3
           IF FELD3  NOT = 0.8
              DISPLAY "Test 21 " FELD3.

           MOVE 0.2 TO FELD3
           SUBTRACT -1 FROM FELD3
           IF FELD3  NOT = 1.2
              DISPLAY "Test 22 " FELD3.

           MOVE -0.2 TO FELD3
           SUBTRACT 1 FROM FELD3
           IF FELD3  NOT = 0.8
              DISPLAY "Test 23 " FELD3.

           MOVE -0.2 TO FELD3
           SUBTRACT -1 FROM FELD3
           IF FELD3  NOT = 1.2
              DISPLAY "Test 24 " FELD3.

           MOVE 2 TO FELD4
           ADD 1 TO FELD4
           IF FELD4  NOT = 3
              DISPLAY "Test 25 " FELD4.

           MOVE 2 TO FELD4
           ADD -1 TO FELD4
           IF FELD4  NOT = 1
              DISPLAY "Test 26 " FELD4.

           MOVE -2 TO FELD4
           ADD 1 TO FELD4
           IF FELD4  NOT = -1
              DISPLAY "Test 27 " FELD4.

           MOVE -2 TO FELD4
           ADD -1 TO FELD4
           IF FELD4  NOT = -3
              DISPLAY "Test 28 " FELD4.

           MOVE 2 TO FELD4
           SUBTRACT 1 FROM FELD4
           IF FELD4  NOT = 1
              DISPLAY "Test 29 " FELD4.

           MOVE 2 TO FELD4
           SUBTRACT -1 FROM FELD4
           IF FELD4  NOT = 3
              DISPLAY "Test 30 " FELD4.

           MOVE -2 TO FELD4
           SUBTRACT 1 FROM FELD4
           IF FELD4  NOT = -3
              DISPLAY "Test 31 " FELD4.

           MOVE -2 TO FELD4
           SUBTRACT -1 FROM FELD4
           IF FELD4  NOT = -1
              DISPLAY "Test 32 " FELD4.

           MOVE 1 TO FELD4
           ADD 2 TO FELD4
           IF FELD4  NOT = 3
              DISPLAY "Test 33 " FELD4.

           MOVE 1 TO FELD4
           ADD -2 TO FELD4
           IF FELD4  NOT = -1
              DISPLAY "Test 34 " FELD4.

           MOVE -1 TO FELD4
           ADD 2 TO FELD4
           IF FELD4  NOT = 1
              DISPLAY "Test 35 " FELD4.

           MOVE -1 TO FELD4
           ADD -2 TO FELD4
           IF FELD4  NOT = -3
              DISPLAY "Test 36 " FELD4.

           MOVE 1 TO FELD4
           SUBTRACT 2 FROM FELD4
           IF FELD4  NOT = -1
              DISPLAY "Test 37 " FELD4.

           MOVE 1 TO FELD4
           SUBTRACT -2 FROM FELD4
           IF FELD4  NOT = 3
              DISPLAY "Test 38 " FELD4.

           MOVE -1 TO FELD4
           SUBTRACT 2 FROM FELD4
           IF FELD4  NOT = -3
              DISPLAY "Test 39 " FELD4.

           MOVE -1 TO FELD4
           SUBTRACT -2 FROM FELD4
           IF FELD4  NOT = 1
              DISPLAY "Test 40 " FELD4.
])

AT_CHECK([$COMPILE -Wno-truncate prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([Numeric operations (3) PACKED-DECIMAL])
AT_KEYWORDS([fundamental add subtract COMP-3])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  FIELD        PIC S9(1)V9(1) COMP-3.
       01  FELD2        PIC S9(5)V9(5) COMP-3.
       01  FELD3        PIC 9(1)V9(1)  COMP-3.
       01  FELD4        PIC S9(1)      COMP-3.
       01  FELD4b       PIC S9(4)      COMP-3.
       01  FELD5        PIC 9(9)v9(9)  COMP-3.
       01  FELD5b       PIC 9(18)      COMP-3.
       01  FELD6        PIC 9(8)v9(20) COMP-3.
       01  FELD6b       PIC s9(8)9(20)  COMP-3.
       01  FILLER       USAGE BINARY-INT VALUE 0.
           88 DO-DISP   VALUE 0.
           88 NO-DISP   VALUE 1.
       REPLACE ==DISPLAY== BY ==IF DO-DISP  DISPLAY==.

       PROCEDURE        DIVISION.
      *    Test with DISPLAY on error
           PERFORM DO-CHECK.
       >> IF CHECK-PERF IS DEFINED
           SET  NO-DISP    TO TRUE
      *    some performance checks on the way...
           PERFORM DO-CHECK 20000 TIMES.
       >> END-IF
           GOBACK.

       DO-CHECK.
           MOVE 0.2 TO FIELD
           ADD 1 TO FIELD
           IF FIELD  NOT = 1.2
              DISPLAY "Test  1 " FIELD.

           MOVE 0.2 TO FIELD
           ADD -1 TO FIELD
           IF FIELD  NOT = -0.8
              DISPLAY "Test  2 " FIELD.

           MOVE -0.2 TO FIELD
           ADD 1 TO FIELD
           IF FIELD  NOT = 0.8
              DISPLAY "Test  3 " FIELD.

           MOVE -0.2 TO FIELD
           ADD -1 TO FIELD
           IF FIELD  NOT = -1.2
              DISPLAY "Test  4 " FIELD.

           MOVE 0.2 TO FIELD
           SUBTRACT 1 FROM FIELD
           IF FIELD  NOT = -0.8
              DISPLAY "Test  5 " FIELD.

           MOVE 0.2 TO FIELD
           SUBTRACT -1 FROM FIELD
           IF FIELD  NOT = 1.2
              DISPLAY "Test  6 " FIELD.

           MOVE -0.2 TO FIELD
           SUBTRACT 1 FROM FIELD
           IF FIELD  NOT = -1.2
              DISPLAY "Test  7 " FIELD.

           MOVE -0.2 TO FIELD
           SUBTRACT -1 FROM FIELD
           IF FIELD  NOT = 0.8
              DISPLAY "Test  8 " FIELD.

           MOVE 0.2 TO FELD2
           ADD 1 TO FELD2
           IF FELD2  NOT = 1.2
              DISPLAY "Test  9 " FELD2.

           MOVE 0.2 TO FELD2
           ADD -1 TO FELD2
           IF FELD2  NOT = -0.8
              DISPLAY "Test 10 " FELD2.

           MOVE -0.2 TO FELD2
           ADD 1 TO FELD2
           IF FELD2  NOT = 0.8
              DISPLAY "Test 11 " FELD2.

           MOVE -0.2 TO FELD2
           ADD -1 TO FELD2
           IF FELD2  NOT = -1.2
              DISPLAY "Test 12 " FELD2.

           MOVE 0.2 TO FELD2
           SUBTRACT 1 FROM FELD2
           IF FELD2  NOT = -0.8
              DISPLAY "Test 13 " FELD2.

           MOVE 0.2 TO FELD2
           SUBTRACT -1 FROM FELD2
           IF FELD2  NOT = 1.2
              DISPLAY "Test 14 " FELD2.

           MOVE -0.2 TO FELD2
           SUBTRACT 1 FROM FELD2
           IF FELD2  NOT = -1.2
              DISPLAY "Test 15 " FELD2.

           MOVE -0.2 TO FELD2
           SUBTRACT -1 FROM FELD2
           IF FELD2  NOT = 0.8
              DISPLAY "Test 16 " FELD2.

           MOVE 0.2 TO FELD3
           ADD 1 TO FELD3
           IF FELD3  NOT = 1.2
              DISPLAY "Test 17 " FELD3.

           MOVE 0.2 TO FELD3
           ADD -1 TO FELD3
           IF FELD3  NOT = 0.8
              DISPLAY "Test 18 " FELD3.

      *    unsigned, so ends as 0.2
           MOVE -0.2 TO FELD3
           ADD 1 TO FELD3
           IF FELD3  NOT = 1.2
              DISPLAY "Test 19 " FELD3.

      *    unsigned, so ends as 0.2 - 1 -> -0.8 -> 0.8
           MOVE -0.2 TO FELD3
           ADD -1 TO FELD3
           IF FELD3  NOT = 0.8
              DISPLAY "Test 20 " FELD3.

           MOVE 0.2 TO FELD3
           SUBTRACT 1 FROM FELD3
           IF FELD3  NOT = 0.8
              DISPLAY "Test 21 " FELD3.

           MOVE 0.2 TO FELD3
           SUBTRACT -1 FROM FELD3
           IF FELD3  NOT = 1.2
              DISPLAY "Test 22 " FELD3.

           MOVE -0.2 TO FELD3
           SUBTRACT 1 FROM FELD3
           IF FELD3  NOT = 0.8
              DISPLAY "Test 23 " FELD3.

           MOVE -0.2 TO FELD3
           SUBTRACT -1 FROM FELD3
           IF FELD3  NOT = 1.2
              DISPLAY "Test 24 " FELD3.

           MOVE 2 TO FELD4
           ADD 1 TO FELD4
           IF FELD4  NOT = 3
              DISPLAY "Test 25 " FELD4.

           MOVE 2 TO FELD4
           ADD -1 TO FELD4
           IF FELD4  NOT = 1
              DISPLAY "Test 26 " FELD4.

           MOVE -2 TO FELD4
           ADD 1 TO FELD4
           IF FELD4  NOT = -1
              DISPLAY "Test 27 " FELD4.

           MOVE -2 TO FELD4
           ADD -1 TO FELD4
           IF FELD4  NOT = -3
              DISPLAY "Test 28 " FELD4.

           MOVE -2 TO FELD4b
           ADD -1 TO FELD4b
           IF FELD4b  NOT = -3
              DISPLAY "Test 28b " FELD4b.

           MOVE 2 TO FELD4
           SUBTRACT 1 FROM FELD4
           IF FELD4  NOT = 1
              DISPLAY "Test 29 " FELD4.

           MOVE 2 TO FELD4b
           SUBTRACT 1 FROM FELD4b
           IF FELD4b NOT = 1
              DISPLAY "Test 29b " FELD4b.

           MOVE 2 TO FELD4
           SUBTRACT -1 FROM FELD4
           IF FELD4  NOT = 3
              DISPLAY "Test 30 " FELD4.

           MOVE -2 TO FELD4
           SUBTRACT 1 FROM FELD4
           IF FELD4  NOT = -3
              DISPLAY "Test 31 " FELD4.

           MOVE -2 TO FELD4
           SUBTRACT -1 FROM FELD4
           IF FELD4  NOT = -1
              DISPLAY "Test 32 " FELD4.

           MOVE 1 TO FELD4
           ADD 2 TO FELD4
           IF FELD4  NOT = 3
              DISPLAY "Test 33 " FELD4.

           MOVE 1 TO FELD4
           ADD -2 TO FELD4
           IF FELD4  NOT = -1
              DISPLAY "Test 34 " FELD4.

           MOVE -1 TO FELD4
           ADD 2 TO FELD4
           IF FELD4  NOT = 1
              DISPLAY "Test 35 " FELD4.

           MOVE -1 TO FELD4
           ADD -2 TO FELD4
           IF FELD4  NOT = -3
              DISPLAY "Test 36 " FELD4.

           MOVE 1 TO FELD4
           SUBTRACT 2 FROM FELD4
           IF FELD4  NOT = -1
              DISPLAY "Test 37 " FELD4.

           MOVE 1 TO FELD4
           SUBTRACT -2 FROM FELD4
           IF FELD4  NOT = 3
              DISPLAY "Test 38 " FELD4.

           MOVE -1 TO FELD4
           SUBTRACT 2 FROM FELD4
           IF FELD4  NOT = -3
              DISPLAY "Test 39 " FELD4.

           MOVE -1 TO FELD4
           SUBTRACT -2 FROM FELD4
           IF FELD4  NOT = 1
              DISPLAY "Test 40 " FELD4.

      *>   test with 18 digits (last implied zero by field)
      *>   -> maximum cob_u64_t for separate code branch
           MOVE 123456789.01234567 TO FELD5
           ADD 2 TO FELD5
           IF FELD5  NOT = 123456791.01234567
              DISPLAY "Test 41 ADD " FELD5.
           MOVE 123456789.01234567 TO FELD5
           SUBTRACT -2 FROM FELD5
           IF FELD5  NOT = 123456791.01234567
              DISPLAY "Test 41 SUBTRACT " FELD5.

      *>   now testing optimized functions (only used for non-scaled)
           MOVE 12345678901234567 TO FELD5b
           ADD 18518518351851850 TO FELD5b
           IF FELD5b  NOT = 30864197253086417
              DISPLAY "Test 41b ADD " FELD5b.
           MOVE 30864197253086417 TO FELD5b
           SUBTRACT 18518518351851850 FROM FELD5b
           IF FELD5b  NOT = 12345678901234567
              DISPLAY "Test 41b SUBTRACT " FELD5b.

      *>   tests with more than 19 digits for separate code branch
      *>   -> last 8 digits with implied zero by field
           MOVE 12345678.123456901234 TO FELD6
           ADD -2.1 TO FELD6
           IF FELD6  NOT = 12345676.023456901234
              DISPLAY "Test 42 ADD " FELD6.
           MOVE 12345678.123456901234 TO FELD6
           SUBTRACT 2.1 FROM FELD6
           IF FELD6  NOT = 12345676.023456901234
              DISPLAY "Test 42 SUBTRACT " FELD6.

      *>   -> first 8 digits with implied zero by field,
      *>      last 4 digits truncated
           MOVE .123456789012345678901234 TO FELD6
           ADD 1.8 TO FELD6
           IF FELD6  NOT = 1.9234567890123456789
              DISPLAY "Test 43 " FELD6.

      *>   now testing optimized functions (only used for non-scaled)
           MOVE 7123456789012345670 TO FELD6b
           ADD  1800000000000000000 TO FELD6b
           IF FELD6b  NOT = 8923456789012345670
              DISPLAY "Test 43b ADD " FELD6b.
           IF FELD6b  = -8923456789012345670
              DISPLAY "Test 43b2 ADD " FELD6b.
           MULTIPLY FELD6b BY -1 GIVING FELD6b
           IF FELD6b  NOT = -8923456789012345670
              DISPLAY "Test 43c NEGATIVE " FELD6b.
           IF FELD6b  = 8923456789012345670
              DISPLAY "Test 43c2 NEGATIVE " FELD6b.
])

AT_CHECK([$COMPILE -Wno-truncate prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([Numeric operations (4) BINARY])
AT_KEYWORDS([fundamental ADD SUBTRACT COMP])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  FIELD        PIC S9(1)V9(1) COMP.
       01  FELD2        PIC S9(5)V9(5) COMP.
       01  FELD3        PIC 9(1)V9(1)  COMP.
       01  FELD4        PIC S9(1)      COMP.
       01  FILLER       USAGE BINARY-INT VALUE 0.
           88 DO-DISP   VALUE 0.
           88 NO-DISP   VALUE 1.
       REPLACE ==DISPLAY== BY ==IF DO-DISP  DISPLAY==.

       PROCEDURE        DIVISION.
      *    Test with DISPLAY on error
           PERFORM DO-CHECK.
       >> IF CHECK-PERF IS DEFINED
           SET  NO-DISP    TO TRUE
      *    some performance checks on the way...
           PERFORM DO-CHECK 20000 TIMES.
       >> END-IF
           GOBACK.

       DO-CHECK.
           MOVE 0.2 TO FIELD
           ADD 1 TO FIELD
           IF FIELD  NOT = 1.2
              DISPLAY "Test  1 " FIELD.

           MOVE 0.2 TO FIELD
           ADD -1 TO FIELD
           IF FIELD  NOT = -0.8
              DISPLAY "Test  2 " FIELD.

           MOVE -0.2 TO FIELD
           ADD 1 TO FIELD
           IF FIELD  NOT = 0.8
              DISPLAY "Test  3 " FIELD.

           MOVE -0.2 TO FIELD
           ADD -1 TO FIELD
           IF FIELD  NOT = -1.2
              DISPLAY "Test  4 " FIELD.

           MOVE 0.2 TO FIELD
           SUBTRACT 1 FROM FIELD
           IF FIELD  NOT = -0.8
              DISPLAY "Test  5 " FIELD.

           MOVE 0.2 TO FIELD
           SUBTRACT -1 FROM FIELD
           IF FIELD  NOT = 1.2
              DISPLAY "Test  6 " FIELD.

           MOVE -0.2 TO FIELD
           SUBTRACT 1 FROM FIELD
           IF FIELD  NOT = -1.2
              DISPLAY "Test  7 " FIELD.

           MOVE -0.2 TO FIELD
           SUBTRACT -1 FROM FIELD
           IF FIELD  NOT = 0.8
              DISPLAY "Test  8 " FIELD.

           MOVE 0.2 TO FELD2
           ADD 1 TO FELD2
           IF FELD2  NOT = 1.2
              DISPLAY "Test  9 " FELD2.

           MOVE 0.2 TO FELD2
           ADD -1 TO FELD2
           IF FELD2  NOT = -0.8
              DISPLAY "Test 10 " FELD2.

           MOVE -0.2 TO FELD2
           ADD 1 TO FELD2
           IF FELD2  NOT = 0.8
              DISPLAY "Test 11 " FELD2.

           MOVE -0.2 TO FELD2
           ADD -1 TO FELD2
           IF FELD2  NOT = -1.2
              DISPLAY "Test 12 " FELD2.

           MOVE 0.2 TO FELD2
           SUBTRACT 1 FROM FELD2
           IF FELD2  NOT = -0.8
              DISPLAY "Test 13 " FELD2.

           MOVE 0.2 TO FELD2
           SUBTRACT -1 FROM FELD2
           IF FELD2  NOT = 1.2
              DISPLAY "Test 14 " FELD2.

           MOVE -0.2 TO FELD2
           SUBTRACT 1 FROM FELD2
           IF FELD2  NOT = -1.2
              DISPLAY "Test 15 " FELD2.

           MOVE -0.2 TO FELD2
           SUBTRACT -1 FROM FELD2
           IF FELD2  NOT = 0.8
              DISPLAY "Test 16 " FELD2.

           MOVE 0.2 TO FELD3
           ADD 1 TO FELD3
           IF FELD3  NOT = 1.2
              DISPLAY "Test 17 " FELD3.

           MOVE 0.2 TO FELD3
           ADD -1 TO FELD3
           IF FELD3  NOT = 0.8
              DISPLAY "Test 18 " FELD3.

           MOVE -0.2 TO FELD3
           ADD 1 TO FELD3
           IF FELD3  NOT = 1.2
              DISPLAY "Test 19 " FELD3.

           MOVE -0.2 TO FELD3
           ADD -1 TO FELD3
           IF FELD3  NOT = 0.8
              DISPLAY "Test 20 " FELD3.

           MOVE 0.2 TO FELD3
           SUBTRACT 1 FROM FELD3
           IF FELD3  NOT = 0.8
              DISPLAY "Test 21 " FELD3.

           MOVE 0.2 TO FELD3
           SUBTRACT -1 FROM FELD3
           IF FELD3  NOT = 1.2
              DISPLAY "Test 22 " FELD3.

           MOVE -0.2 TO FELD3
           SUBTRACT 1 FROM FELD3
           IF FELD3  NOT = 0.8
              DISPLAY "Test 23 " FELD3.

           MOVE -0.2 TO FELD3
           SUBTRACT -1 FROM FELD3
           IF FELD3  NOT = 1.2
              DISPLAY "Test 24 " FELD3.

           MOVE 2 TO FELD4
           ADD 1 TO FELD4
           IF FELD4  NOT = 3
              DISPLAY "Test 25 " FELD4.

           MOVE 2 TO FELD4
           ADD -1 TO FELD4
           IF FELD4  NOT = 1
              DISPLAY "Test 26 " FELD4.

           MOVE -2 TO FELD4
           ADD 1 TO FELD4
           IF FELD4  NOT = -1
              DISPLAY "Test 27 " FELD4.

           MOVE -2 TO FELD4
           ADD -1 TO FELD4
           IF FELD4  NOT = -3
              DISPLAY "Test 28 " FELD4.

           MOVE 2 TO FELD4
           SUBTRACT 1 FROM FELD4
           IF FELD4  NOT = 1
              DISPLAY "Test 29 " FELD4.

           MOVE 2 TO FELD4
           SUBTRACT -1 FROM FELD4
           IF FELD4  NOT = 3
              DISPLAY "Test 30 " FELD4.

           MOVE -2 TO FELD4
           SUBTRACT 1 FROM FELD4
           IF FELD4  NOT = -3
              DISPLAY "Test 31 " FELD4.

           MOVE -2 TO FELD4
           SUBTRACT -1 FROM FELD4
           IF FELD4  NOT = -1
              DISPLAY "Test 32 " FELD4.

           MOVE 1 TO FELD4
           ADD 2 TO FELD4
           IF FELD4  NOT = 3
              DISPLAY "Test 33 " FELD4.

           MOVE 1 TO FELD4
           ADD -2 TO FELD4
           IF FELD4  NOT = -1
              DISPLAY "Test 34 " FELD4.

           MOVE -1 TO FELD4
           ADD 2 TO FELD4
           IF FELD4  NOT = 1
              DISPLAY "Test 35 " FELD4.

           MOVE -1 TO FELD4
           ADD -2 TO FELD4
           IF FELD4  NOT = -3
              DISPLAY "Test 36 " FELD4.

           MOVE 1 TO FELD4
           SUBTRACT 2 FROM FELD4
           IF FELD4  NOT = -1
              DISPLAY "Test 37 " FELD4.

           MOVE 1 TO FELD4
           SUBTRACT -2 FROM FELD4
           IF FELD4  NOT = 3
              DISPLAY "Test 38 " FELD4.

           MOVE -1 TO FELD4
           SUBTRACT 2 FROM FELD4
           IF FELD4  NOT = -3
              DISPLAY "Test 39 " FELD4.

           MOVE -1 TO FELD4
           SUBTRACT -2 FROM FELD4
           IF FELD4  NOT = 1
              DISPLAY "Test 40 " FELD4.
])

AT_CHECK([$COMPILE -Wno-truncate prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([Numeric operations (5) COMP-5])
AT_KEYWORDS([fundamental ADD SUBTRACT])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  FIELD        PIC S9(1)V9(1) COMP-5.
       01  FELD2        PIC S9(5)V9(5) COMP-5.
       01  FELD3        PIC 9(1)V9(1)  COMP-5.
       01  FELD4        PIC S9(1)      COMP-5.
       01  FILLER       USAGE BINARY-INT VALUE 0.
           88 DO-DISP   VALUE 0.
           88 NO-DISP   VALUE 1.
       REPLACE ==DISPLAY== BY ==IF DO-DISP  DISPLAY==.

       PROCEDURE        DIVISION.
      *    Test with DISPLAY on error
           PERFORM DO-CHECK.
       >> IF CHECK-PERF IS DEFINED
           SET  NO-DISP    TO TRUE
      *    some performance checks on the way...
           PERFORM DO-CHECK 20000 TIMES.
       >> END-IF
           GOBACK.

       DO-CHECK.
           MOVE 0.2 TO FIELD
           ADD 1 TO FIELD
           IF FIELD  NOT = 1.2
              DISPLAY "Test  1 " FIELD.

           MOVE 0.2 TO FIELD
           ADD -1 TO FIELD
           IF FIELD  NOT = -0.8
              DISPLAY "Test  2 " FIELD.

           MOVE -0.2 TO FIELD
           ADD 1 TO FIELD
           IF FIELD  NOT = 0.8
              DISPLAY "Test  3 " FIELD.

           MOVE -0.2 TO FIELD
           ADD -1 TO FIELD
           IF FIELD  NOT = -1.2
              DISPLAY "Test  4 " FIELD.

           MOVE 0.2 TO FIELD
           SUBTRACT 1 FROM FIELD
           IF FIELD  NOT = -0.8
              DISPLAY "Test  5 " FIELD.

           MOVE 0.2 TO FIELD
           SUBTRACT -1 FROM FIELD
           IF FIELD  NOT = 1.2
              DISPLAY "Test  6 " FIELD.

           MOVE -0.2 TO FIELD
           SUBTRACT 1 FROM FIELD
           IF FIELD  NOT = -1.2
              DISPLAY "Test  7 " FIELD.

           MOVE -0.2 TO FIELD
           SUBTRACT -1 FROM FIELD
           IF FIELD  NOT = 0.8
              DISPLAY "Test  8 " FIELD.

           MOVE 0.2 TO FELD2
           ADD 1 TO FELD2
           IF FELD2  NOT = 1.2
              DISPLAY "Test  9 " FELD2.

           MOVE 0.2 TO FELD2
           ADD -1 TO FELD2
           IF FELD2  NOT = -0.8
              DISPLAY "Test 10 " FELD2.

           MOVE -0.2 TO FELD2
           ADD 1 TO FELD2
           IF FELD2  NOT = 0.8
              DISPLAY "Test 11 " FELD2.

           MOVE -0.2 TO FELD2
           ADD -1 TO FELD2
           IF FELD2  NOT = -1.2
              DISPLAY "Test 12 " FELD2.

           MOVE 0.2 TO FELD2
           SUBTRACT 1 FROM FELD2
           IF FELD2  NOT = -0.8
              DISPLAY "Test 13 " FELD2.

           MOVE 0.2 TO FELD2
           SUBTRACT -1 FROM FELD2
           IF FELD2  NOT = 1.2
              DISPLAY "Test 14 " FELD2.

           MOVE -0.2 TO FELD2
           SUBTRACT 1 FROM FELD2
           IF FELD2  NOT = -1.2
              DISPLAY "Test 15 " FELD2.

           MOVE -0.2 TO FELD2
           SUBTRACT -1 FROM FELD2
           IF FELD2  NOT = 0.8
              DISPLAY "Test 16 " FELD2.

           MOVE 0.2 TO FELD3
           ADD 1 TO FELD3
           IF FELD3  NOT = 1.2
              DISPLAY "Test 17 " FELD3.

           MOVE 0.2 TO FELD3
           ADD -1 TO FELD3
           IF FELD3  NOT = 0.8
              DISPLAY "Test 18 " FELD3.

           MOVE -0.2 TO FELD3
           ADD 1 TO FELD3
           IF FELD3  NOT = 1.2
              DISPLAY "Test 19 " FELD3.

           MOVE -0.2 TO FELD3
           ADD -1 TO FELD3
           IF FELD3  NOT = 0.8
              DISPLAY "Test 20 " FELD3.

           MOVE 0.2 TO FELD3
           SUBTRACT 1 FROM FELD3
           IF FELD3  NOT = 0.8
              DISPLAY "Test 21 " FELD3.

           MOVE 0.2 TO FELD3
           SUBTRACT -1 FROM FELD3
           IF FELD3  NOT = 1.2
              DISPLAY "Test 22 " FELD3.

           MOVE -0.2 TO FELD3
           SUBTRACT 1 FROM FELD3
           IF FELD3  NOT = 0.8
              DISPLAY "Test 23 " FELD3.

           MOVE -0.2 TO FELD3
           SUBTRACT -1 FROM FELD3
           IF FELD3  NOT = 1.2
              DISPLAY "Test 24 " FELD3.

           MOVE 2 TO FELD4
           ADD 1 TO FELD4
           IF FELD4  NOT = 3
              DISPLAY "Test 25 " FELD4.

           MOVE 2 TO FELD4
           ADD -1 TO FELD4
           IF FELD4  NOT = 1
              DISPLAY "Test 26 " FELD4.

           MOVE -2 TO FELD4
           ADD 1 TO FELD4
           IF FELD4  NOT = -1
              DISPLAY "Test 27 " FELD4.

           MOVE -2 TO FELD4
           ADD -1 TO FELD4
           IF FELD4  NOT = -3
              DISPLAY "Test 28 " FELD4.

           MOVE 2 TO FELD4
           SUBTRACT 1 FROM FELD4
           IF FELD4  NOT = 1
              DISPLAY "Test 29 " FELD4.

           MOVE 2 TO FELD4
           SUBTRACT -1 FROM FELD4
           IF FELD4  NOT = 3
              DISPLAY "Test 30 " FELD4.

           MOVE -2 TO FELD4
           SUBTRACT 1 FROM FELD4
           IF FELD4  NOT = -3
              DISPLAY "Test 31 " FELD4.

           MOVE -2 TO FELD4
           SUBTRACT -1 FROM FELD4
           IF FELD4  NOT = -1
              DISPLAY "Test 32 " FELD4.

           MOVE 1 TO FELD4
           ADD 2 TO FELD4
           IF FELD4  NOT = 3
              DISPLAY "Test 33 " FELD4.

           MOVE 1 TO FELD4
           ADD -2 TO FELD4
           IF FELD4  NOT = -1
              DISPLAY "Test 34 " FELD4.

           MOVE -1 TO FELD4
           ADD 2 TO FELD4
           IF FELD4  NOT = 1
              DISPLAY "Test 35 " FELD4.

           MOVE -1 TO FELD4
           ADD -2 TO FELD4
           IF FELD4  NOT = -3
              DISPLAY "Test 36 " FELD4.

           MOVE 1 TO FELD4
           SUBTRACT 2 FROM FELD4
           IF FELD4  NOT = -1
              DISPLAY "Test 37 " FELD4.

           MOVE 1 TO FELD4
           SUBTRACT -2 FROM FELD4
           IF FELD4  NOT = 3
              DISPLAY "Test 38 " FELD4.

           MOVE -1 TO FELD4
           SUBTRACT 2 FROM FELD4
           IF FELD4  NOT = -3
              DISPLAY "Test 39 " FELD4.

           MOVE -1 TO FELD4
           SUBTRACT -2 FROM FELD4
           IF FELD4  NOT = 1
              DISPLAY "Test 40 " FELD4.
])

AT_CHECK([$COMPILE -Wno-truncate prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([Numeric operations (6)])
AT_KEYWORDS([fundamental ADD])

AT_DATA([dump.c], [
#include <stdio.h>
#include <libcob.h>

COB_EXT_EXPORT int
dump (char *p)
{
  printf ("%c%c", p[[0]], p[[1]]);
  return 0;
}
])

AT_DATA([prog.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog.

        DATA DIVISION.
        WORKING-STORAGE SECTION.

        01 P-FIELD1 PIC 99PPP.
        01 P-FIELD2 PIC PPP99.

        PROCEDURE DIVISION.

        MOVE 5000 TO P-FIELD1.
        ADD  5 TO P-FIELD1
        IF P-FIELD1 NOT = 5000
            DISPLAY "Error: Add 5 to PIC 99PPP.".
        CALL "dump" USING P-FIELD1.

        ADD  5000 TO P-FIELD1
        IF P-FIELD1 NOT = 10000
            DISPLAY "Error: Add 5000 to PIC 99PPP.".
        CALL "dump" USING P-FIELD1.

        MOVE 0.00055 TO P-FIELD2
        ADD  0.00033 TO P-FIELD2
        IF P-FIELD2 NOT = 0.00088
            DISPLAY "Error: Add 0.00033 to PIC PPP99.".
        CALL "dump" USING P-FIELD2.

        MOVE 0.00055 TO P-FIELD2
        ADD  0.00300 TO P-FIELD2
        IF P-FIELD2 NOT = 0.00055
            DISPLAY "Error: Add 0.00300 to PIC PPP99.".
        CALL "dump" USING P-FIELD2.

        STOP RUN.
])

AT_CHECK([$COMPILE_MODULE dump.c])
AT_CHECK([$COMPILE prog.cob], [0], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [05108855], [])

AT_CLEANUP


AT_SETUP([Numeric operations (7)])
AT_KEYWORDS([fundamental ADD COMPUTE literal])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  FIELD         PIC S9(4)V9(2) COMP-5.
       01  FIELD-DISP    PIC S9(4)V9(2) DISPLAY.
       PROCEDURE        DIVISION.
           MOVE 0.2 TO FIELD.
           ADD 1
               2
               3
               4
               5
               6
               7
               8
               9
               10
               11
               12
               13
               14
               15
               16
               17
               18
               19
               20
               21
               22
               23
               24
               25
               26
               27
               28
               29
               30
               31
               32
               33
               34
               35
               36
               37
               38
               39
               40
               41
               42
               43
               44
               45
               46
               47
               48
               49
               50
               51
               52
               53
               54
               55
               56
               57
               58
               59
               60
               61
               62
               63
               64
               65
               66
               67
               68
               69
               70
               71
               72
               73
               74
               75
               76
               77
               78
               79
               80
               81
               82
               83
               84
               85
               86
               87
               88
               89
               90
               91
               92
               93
               94
               95
               96
               97
               98
               99
               100
               101
               102
               103
               104
               105
               106
               107
               108
               109
               110
               111
               112
               113
               114
               115
               116
               117
               118
               119
               120
               121
               122
               123
               124
               125
               126
               127
               128
               129
               TO FIELD
           END-ADD.
           IF FIELD NOT = 8385.2
              MOVE FIELD TO FIELD-DISP
              DISPLAY 'ADD with wrong result: ' FIELD-DISP.

           COMPUTE FIELD = (0.2
                         + 2
                         + 3
                         + 4
                         + 5
                         + 6
                         + 7
                         + 8
                         + 9
                         + 10
                         + 11
                         + 12
                         + 13
                         + 14
                         + 15
                         + 16
                         + 17
                         + 18
                         + 19
                         + 20
                         + 21
                         + 22
                         + 23
                         + 24
                         + 25
                         + 26
                         + 27
                         + 28
                         + 29
                         + 30
                         + 31
                         + 32
                         + 33
                         + 34
                         + 35
                         + 36
                         + 37
                         + 38
                         + 39
                         + 40
                         + 41
                         + 42
                         + 43
                         + 44
                         + 45
                         + 46
                         + 47
                         + 48
                         + 49
                         + 50
                         + 51
                         + 52
                         + 53
                         + 54
                         + 55
                         + 56
                         + 57
                         + 58
                         - 59
                         - 60
                         - 61
                         - 62
                         - 63
                         - 64
                         - 65
                         - 66
                         - 67
                         - 68
                         - 69
                         - 70
                         - 71
                         - 72
                         - 73
                         - 74
                         - 75
                         - 76
                         - 77
                         - 78
                         - 79
                         - 80
                         - 81
                         - 82
                         - 83
                         - 84
                         - 85
                         - 86
                         - 87
                         - 88
                         - 89
                         - 90
                         - 91
                         - 92
                         - 93
                         - 94
                         - 95
                         - 96
                         - 97
                         - 98
                         - 99
                         - 100
                         - 101
                         - 102
                         - 103
                         - 104
                         - 105
                         - 106
                         - 107
                         - 108
                         - 109
                         - 110
                         - 111
                         - 112
                         - 113
                         - 114
                         - 115
                         - 116
                         - 117
                         - 118
                         - 119
                         - 120
                         - 121
                         - 122
                         - 123
                         - 124
                         - 125
                         - 126
                         - 127)
                         * 12800000000
                         / 12900000000
           END-COMPUTE.
           IF FIELD NOT = -4670.31
              MOVE FIELD TO FIELD-DISP
              DISPLAY 'COMPUTE with wrong result: ' FIELD-DISP.

           GOBACK.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([Numeric operations (8)])
AT_KEYWORDS([fundamental COMPUTE literal])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
          1 COMPUTE-DATA.
           2 COMPUTE-8             PICTURE 999       VALUE ZERO.
       PROCEDURE        DIVISION.
           COMPUTE COMPUTE-8 = (((24.0 + 1) * (60 - 10)) / 125) ** 2
           IF COMPUTE-8 NOT = 100
              DISPLAY 'COMPUTE with wrong result: ' COMPUTE-8
              END-DISPLAY
           END-IF
           COMPUTE COMPUTE-8 = 55 / (1 - 2 + 1)
              NOT ON SIZE ERROR
                 DISPLAY 'SIZE ERROR not set from divide by zero!'
                 END-DISPLAY
           END-COMPUTE
           COMPUTE COMPUTE-8 = 0 ** 1
           IF COMPUTE-8 NOT = 0
              DISPLAY '0 ** 1 <> 0: ' COMPUTE-8
              END-DISPLAY
           END-IF
           COMPUTE COMPUTE-8 = 55 ** 0
           IF COMPUTE-8 NOT = 1
              DISPLAY '55 ** 0 <> 1: ' COMPUTE-8
              END-DISPLAY
           END-IF
           COMPUTE COMPUTE-8 = 1 ** 55
           IF COMPUTE-8 NOT = 1
              DISPLAY '11 ** 55 <> 1: ' COMPUTE-8
              END-DISPLAY
           END-IF

           GOBACK.
])

AT_CHECK([$COMPILE prog.cob], [0], [],
[prog.cob:14: warning: divide by constant ZERO
])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


# CORRESPONDING

AT_SETUP([ADD CORRESPONDING])
AT_KEYWORDS([fundamental corresponding])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 GROUP-1.
          05 FIELD-A           PIC 9 VALUE 1.
          05 FIELD-B           USAGE BINARY-CHAR VALUE 2.
          05 INNER-GROUP.
             10 FIELD-C        USAGE FLOAT-SHORT VALUE 3.
          05 FIELD-D           PIC X VALUE "A".
       01 GROUP-2.
          05 FIELD-A           PIC 9.
          05 FIELD-B           USAGE BINARY-LONG.
          05 INNER-GROUP.
             10 FIELD-C        PIC 9.
          05 FIELD-D           PIC 9.

       PROCEDURE DIVISION.
       ADD CORRESPONDING GROUP-1 TO GROUP-2.
       IF FIELD-A IN GROUP-2 NOT EQUAL 1 THEN
           DISPLAY "BAD FIELD-A " FIELD-A IN GROUP-2
           END-DISPLAY
       END-IF.
       IF FIELD-B IN GROUP-2 NOT EQUAL 2 THEN
           DISPLAY "BAD FIELD-B " FIELD-B IN GROUP-2
           END-DISPLAY
       END-IF.
       IF FIELD-C IN GROUP-2 NOT EQUAL 3 THEN
           DISPLAY "BAD FIELD-C " FIELD-C IN GROUP-2
           END-DISPLAY
       END-IF.
       IF FIELD-D IN GROUP-2 NOT EQUAL 0 THEN
           DISPLAY "BAD FIELD-D " FIELD-D IN GROUP-2
           END-DISPLAY
       END-IF.
       STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([ADD CORRESPONDING no match])
AT_KEYWORDS([fundamental corresponding])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 GROUP-1.
          05 FIELD-A           PIC X.
          05 FIELD-B           PIC Z9.
          05 INNER-GROUP.
             10 FIELD-C        PIC X.
          05 FIELD-D           PIC 9.
       01 GROUP-2.
          05 FIELD-A           PIC 9 VALUE 1.
          05 FIELD-B           USAGE BINARY-CHAR VALUE 2.
          05 INNER-GROUP.
             10 FIELD-C        USAGE FLOAT-SHORT VALUE 3.
          05 FIELD-D           PIC X VALUE "A".

       PROCEDURE DIVISION.
       SUBTRACT CORRESPONDING GROUP-2 FROM GROUP-1.
       IF FIELD-A IN GROUP-2 NOT EQUAL 1 THEN
           DISPLAY "BAD FIELD-A " FIELD-A IN GROUP-2
           END-DISPLAY
       END-IF.
       IF FIELD-B IN GROUP-2 NOT EQUAL 2 THEN
           DISPLAY "BAD FIELD-B " FIELD-B IN GROUP-2
           END-DISPLAY
       END-IF.
       IF FIELD-C IN GROUP-2 NOT EQUAL 3 THEN
           DISPLAY "BAD FIELD-C " FIELD-C IN GROUP-2
           END-DISPLAY
       END-IF.
       IF FIELD-D IN GROUP-2 NOT EQUAL "A" THEN
           DISPLAY "BAD FIELD-D " FIELD-D IN GROUP-2
           END-DISPLAY
       END-IF.
       STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [],
[prog.cob:20: warning: no CORRESPONDING items found
])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([SYNC in OCCURS])
AT_KEYWORDS([fundamental SYNCHRONIZE])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01 x.
           03  ptrs                     OCCURS 5 TIMES.
               05  misalign-1           PIC X.
               05  ptr                  POINTER, SYNC.
               05  ptr-num              REDEFINES ptr,
       >>IF P64 SET
                                        USAGE BINARY-DOUBLE UNSIGNED.
       >>ELSE
                                        USAGE BINARY-LONG UNSIGNED.
       >>END-IF
               05  misalign-2           PIC X.

       01  num                          BINARY-LONG.

       PROCEDURE       DIVISION.
           SET ptr (2) TO ADDRESS OF ptr (2)
           SET ptr (3) TO ADDRESS OF ptr (3)

           SUBTRACT ptr-num (2) FROM ptr-num (3) GIVING num
           DISPLAY FUNCTION MOD (num, FUNCTION LENGTH (ptr (1)))
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[000000000
])

AT_CLEANUP


AT_SETUP([88 level with THRU])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  VAR-X        PIC X VALUE SPACE.
           88 X         VALUE "X".
           88 T-Y       VALUE "T" THRU "Y".
       01  VAR-9        PIC 9 VALUE ZERO.
           88 V9        VALUE 9.
           88 V2-4      VALUE 2 THRU 4.
       PROCEDURE        DIVISION.
           IF X
               DISPLAY "NOT OK '" VAR-X "' IS X"
               END-DISPLAY
           END-IF
           SET X TO TRUE
           IF NOT X
               DISPLAY "NOT OK '" VAR-X "' IS NOT X"
               END-DISPLAY
           END-IF
           IF NOT T-Y
               DISPLAY "NOT OK '" VAR-X "' IS NOT T-Y"
               END-DISPLAY
           END-IF
           SET T-Y TO TRUE
           IF NOT T-Y
               DISPLAY "NOT OK '" VAR-X "' IS NOT T-Y"
               END-DISPLAY
           END-IF
           MOVE 'Y' TO VAR-X
           IF NOT T-Y
               DISPLAY "NOT OK '" VAR-X "' IS NOT T-Y"
               END-DISPLAY
           END-IF
           MOVE 'Z' TO VAR-X
           IF T-Y
               DISPLAY "NOT OK '" VAR-X "' IS T-Y"
               END-DISPLAY
           END-IF
           MOVE 'A' TO VAR-X
           IF T-Y
               DISPLAY "NOT OK '" VAR-X "' IS T-Y"
               END-DISPLAY
           END-IF
           IF V9
               DISPLAY "NOT OK '" VAR-9 "' IS V9"
               END-DISPLAY
           END-IF
           SET V9 TO TRUE
           IF NOT V9
               DISPLAY "NOT OK '" VAR-9 "' IS NOT V9"
               END-DISPLAY
           END-IF
           SET V2-4 TO TRUE
           IF V9
               DISPLAY "NOT OK '" VAR-9 "' IS V9"
               END-DISPLAY
           END-IF
           IF NOT V2-4
               DISPLAY "NOT OK '" VAR-9 "' IS NOT V2-4"
               END-DISPLAY
           END-IF
           MOVE 3 TO VAR-9
           IF NOT V2-4
               DISPLAY "NOT OK '" VAR-9 "' IS NOT V2-4"
               END-DISPLAY
           END-IF
           MOVE 4 TO VAR-9
           IF NOT V2-4
               DISPLAY "NOT OK '" VAR-9 "' IS NOT V2-4"
               END-DISPLAY
           END-IF
           MOVE 5 TO VAR-9
           IF V2-4
               DISPLAY "NOT OK '" VAR-9 "' IS V2-4"
               END-DISPLAY
           END-IF
           MOVE 1 TO VAR-9
           IF V2-4
               DISPLAY "NOT OK '" VAR-9 "' IS V2-4"
               END-DISPLAY
           END-IF
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([88 level with FILLER])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  FILLER       PIC X VALUE SPACE.
           88 X         VALUE "X".
       PROCEDURE        DIVISION.
           IF X
               DISPLAY "NOT OK"
               END-DISPLAY
           END-IF
           SET X TO TRUE.
           IF NOT X
               DISPLAY "NOT OK"
               END-DISPLAY
           END-IF
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([88 level with FALSE IS clause])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  MYFLD        PIC X(6) VALUE "ABCDEF".
           88  MYFLD88  VALUE "ABCDEF"
               FALSE IS "OKOKOK".
       PROCEDURE        DIVISION.
       ASTART SECTION.
       A01.
           SET MYFLD88 TO FALSE
           IF MYFLD NOT = "OKOKOK"
              DISPLAY MYFLD
              END-DISPLAY
           END-IF
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([BLANK WHEN ZERO])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.

       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  x            PIC 9, BLANK WHEN ZERO, VALUE 1.

       PROCEDURE        DIVISION.
           DISPLAY x
           MOVE 0 TO x
           DISPLAY FUNCTION TRIM(x)
           MOVE ZERO TO x
           DISPLAY FUNCTION TRIM(x)
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[1


])

AT_CLEANUP


AT_SETUP([MULTIPLY BY literal in INITIAL program])
AT_KEYWORDS([decimal constants fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog INITIAL.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  num          PIC 9(4)    VALUE 5.
       01  result       PIC 9(4).
       01  ws-temp      PIC 9(8)V99.
       01  ws-temp2     PIC 9(3)V99 VALUE 10.50.
       PROCEDURE        DIVISION.
           MULTIPLY num BY 4 GIVING result
           MOVE 1.10          TO WS-TEMP.
           MULTIPLY WS-TEMP2  BY WS-TEMP GIVING WS-TEMP.
      *>
           IF result  NOT = 20    DISPLAY 'Bad integer: ' result.
           IF WS-TEMP NOT = 11.55 DISPLAY 'Bad decimal: ' ws-temp.
      *>
           GOBACK.
])

AT_CHECK([$COMPILE prog.cob])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([DIVIDE complex])
AT_KEYWORDS([decimal constants fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. DivideExtent.
       DATA DIVISION.
      *>----------------------------------------------------------------
      *>   Cover the cob_div_quotient c FUNCTION
      *>   and complete all  divide_statement parser rules
      *>----------------------------------------------------------------
       WORKING-STORAGE SECTION.
       01 W01-DIVIDES.
          05  RES-TAB          PIC S9(09) BINARY  OCCURS 3.
      *>
       PROCEDURE DIVISION.
      *>------------------
       TEST-FORMAT-1.
      *>-------------
      *> DIVIDE Format 1 DIVIDE INTO
      *> case 1 : should not size error
           MOVE 100 TO RES-TAB(1).
           MOVE 200 TO RES-TAB(2).
           MOVE 300 TO RES-TAB(3).
           DIVIDE 100 INTO
                      RES-TAB(1)
                      RES-TAB(2)
                      RES-TAB(3)
                ON SIZE ERROR
                    DISPLAY '1: Should not raised size error'
           END-DIVIDE.
           IF    RES-TAB(1)  NOT = 1
              OR RES-TAB(2)  NOT = 2
              OR RES-TAB(3)  NOT = 3
              DISPLAY 'F1.1: result <' RES-TAB(1) '> <' RES-TAB(2) '> <'
                                    RES-TAB(3) '> should be 1 2 3'.
      *> case 2 : should  size error
           MOVE 0    TO RES-TAB(1).
           MOVE 100  TO RES-TAB(2).
           MOVE 200  TO RES-TAB(3).
           DIVIDE RES-TAB(1) INTO
                      RES-TAB(2)
                      RES-TAB(3)
                 NOT ON SIZE ERROR
                    DISPLAY 'F1.2: Should raise size error'
           END-DIVIDE.
           IF    RES-TAB(1)  NOT = 0
              OR RES-TAB(2)  NOT = 100
              OR RES-TAB(3)  NOT = 200
              DISPLAY 'F1.2: result <' RES-TAB(1) '> <' RES-TAB(2) '> <'
                                     RES-TAB(3) '> should be 0 100 200'.
      *> case 3 : not rounded
           MOVE   100 TO RES-TAB(1).
           DIVIDE 2.19 INTO  RES-TAB(1)
                ON SIZE ERROR
                    DISPLAY 'F1.3: Should not raise size error'
           END-DIVIDE.
           IF RES-TAB(1) NOT = 45
              DISPLAY 'F1.3: result <' RES-TAB(1)  '> should be 45'.
      *> case 4 : rounded
           MOVE   100 TO RES-TAB(1).
           DIVIDE 2.19 INTO  RES-TAB(1) ROUNDED
                ON SIZE ERROR
                    DISPLAY 'F1.4: Should not raise size error'
           END-DIVIDE.
      *
           IF RES-TAB(1) NOT = 46
              DISPLAY 'F1.4: result <' RES-TAB(1)  '> should be 46'.
      *>
       TEST-FORMAT-2.
      *>-------------
      *> DIVIDE Format 2:
      *> DIVIDE STATEMENT WITH INTO AND GIVING PHRASE
           DIVIDE 10.2 INTO 100 GIVING RES-TAB(1)
                ON SIZE ERROR
                        DISPLAY 'F2.1: Should not raised size error'
           END-DIVIDE.
           IF RES-TAB(1) NOT = 9
              DISPLAY 'F2.1: result <' RES-TAB(1)  '> should be 9'.
           DIVIDE 10.5 INTO 100 GIVING RES-TAB(1) ROUNDED
                ON SIZE ERROR
                        DISPLAY 'F2.2: Should not raise size error'
           END-DIVIDE.
           IF RES-TAB(1) NOT = 10
              DISPLAY 'F2.2: result <' RES-TAB(1)  '> should be 10'.
           DIVIDE 10.6 INTO 100 GIVING RES-TAB(1) ROUNDED
                ON SIZE ERROR
                        DISPLAY 'F2.3: Should not raise size error'
           END-DIVIDE.
           IF RES-TAB(1) NOT = 9
              DISPLAY 'F2.3: result <' RES-TAB(1)  '> should be 9'.
      *>
       TEST-FORMAT-4.
      *>-------------
      *> DIVIDE Format 4:
      *> DIVIDE STATEMENT WITH INTO AND REMAINDER PHRASE
           DIVIDE 2 INTO 100 GIVING RES-TAB(1) REMAINDER RES-TAB(2).
           IF RES-TAB(1) NOT = 50 OR RES-TAB(2) NOT = 0
              DISPLAY 'F4.1: result <' RES-TAB(1) '> <' RES-TAB(2)
                        '> should be <50> <0>'.
           DIVIDE 3 INTO 100 GIVING RES-TAB(1) REMAINDER RES-TAB(2).
           IF RES-TAB(1) NOT = 33 OR RES-TAB(2) NOT = 1
              DISPLAY 'F4.1: result <' RES-TAB(1) '> <' RES-TAB(2)
                        '> should be <33> <1>'.
           MOVE 0 TO RES-TAB(1) RES-TAB(2) RES-TAB(3).
           DIVIDE RES-TAB(1) INTO 100
                  GIVING RES-TAB(2)
                  REMAINDER RES-TAB(3)
                NOT ON SIZE ERROR
                    DISPLAY 'F4.3: Should  raised size error'
           END-DIVIDE.
      *>
           GOBACK.
])

AT_CHECK([$COMPILE prog.cob])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([COMPUTE with decimal constants])
AT_KEYWORDS([fundamental])

# see bug #798, GC 2.2 may change the precision of decimal contants

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  CNT                    PIC  99     VALUE ZERO.
       77  CALCER                 PIC s99v99.
       01  DUMMY-RES              PIC  99.
      *>
       PROCEDURE DIVISION.
      *>  variable setting postponed here to work around "easy"
      *>  optimization to constant
           MOVE 3.5 TO CALCER
           PERFORM 42 TIMES
             ADD   1 TO CNT
    >>D      DISPLAY CNT
      *> directly returns:
      *>    COMPUTE DUMMY-RES = 2 * (CALCER + 2) + 2
      *> performs "felt as forever":
             COMPUTE DUMMY-RES = (CALCER + 2) * 2 + 2
           END-PERFORM

           GOBACK.
])

AT_CHECK([$COMPILE prog.cob])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([debugging lines (not active)])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY "OK" NO ADVANCING
           END-DISPLAY.
      D    DISPLAY "KO" NO ADVANCING
      D    END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[OK], [])

AT_CLEANUP


AT_SETUP([debugging lines (-fdebugging-line)])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY "OK" NO ADVANCING
           END-DISPLAY.
      D    DISPLAY "KO" NO ADVANCING
      D    END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE -fdebugging-line prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[OKKO], [])

AT_CLEANUP


AT_SETUP([debugging lines (WITH DEBUGGING MODE)])
AT_KEYWORDS([fundamental extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
           SOURCE-COMPUTER. mine WITH DEBUGGING MODE.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
      D    DISPLAY "KO" NO ADVANCING UPON STDOUT
      D    END-DISPLAY.
           DISPLAY "OK" NO ADVANCING UPON STDOUT
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[KOOK], [])

AT_CLEANUP


AT_SETUP([debugging lines, free format (not active)])
AT_KEYWORDS([fundamental extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
             DISPLAY "OK" NO ADVANCING
             END-DISPLAY.
      >>D    DISPLAY "KO" NO ADVANCING
      >>D    END-DISPLAY.
             STOP RUN.
])

AT_CHECK([$COMPILE -free prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[OK], [])

AT_CLEANUP


AT_SETUP([debugging lines, free format (-fdebugging-line)])
AT_KEYWORDS([fundamental extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
             DISPLAY "OK" NO ADVANCING
             END-DISPLAY.
      >>D    DISPLAY "KO" NO ADVANCING
      >>D    END-DISPLAY.
             STOP RUN.
])

AT_CHECK([$COMPILE -free -fdebugging-line prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[OKKO], [])

AT_CLEANUP


AT_SETUP([USE FOR DEBUGGING (no DEBUGGING MODE)])
AT_KEYWORDS([fundamental configuration])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
           SOURCE-COMPUTER.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
       DECLARATIVES.
       TEST-DEBUG SECTION. USE FOR DEBUGGING ON ALL PROCEDURES.
           DISPLAY DEBUG-ITEM END-DISPLAY.
       END DECLARATIVES.
       FIRST-PAR.
           DISPLAY "OK1" END-DISPLAY.
           GO TO SECOND-PAR.
       SECOND-PAR.
           DISPLAY "OK2" END-DISPLAY.
       THIRD-PAR.
           DISPLAY "OK3" END-DISPLAY.
           PERFORM FIRST-PAR THRU SECOND-PAR.
           DISPLAY "OK4" END-DISPLAY.
           PERFORM SECOND-PAR.
           DISPLAY "OK5" END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([COB_SET_DEBUG=1 $COBCRUN_DIRECT ./prog], [0],
[OK1
OK2
OK3
OK1
OK2
OK4
OK2
OK5
], [])

AT_CLEANUP


AT_SETUP([USE FOR DEBUGGING (COB_SET_DEBUG deactivated)])
AT_KEYWORDS([fundamental configuration])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
           SOURCE-COMPUTER. mine WITH DEBUGGING MODE.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
       DECLARATIVES.
       TEST-DEBUG SECTION. USE FOR DEBUGGING ON ALL PROCEDURES.
           DISPLAY DEBUG-ITEM END-DISPLAY.
       END DECLARATIVES.
       FIRST-PAR.
           DISPLAY "OK1" END-DISPLAY.
           GO TO SECOND-PAR.
       SECOND-PAR.
           DISPLAY "OK2" END-DISPLAY.
       THIRD-PAR.
           DISPLAY "OK3" END-DISPLAY.
           PERFORM FIRST-PAR THRU SECOND-PAR.
           DISPLAY "OK4" END-DISPLAY.
           PERFORM SECOND-PAR.
           DISPLAY "OK5" END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([COB_SET_DEBUG=0 $COBCRUN_DIRECT ./prog], [0],
[OK1
OK2
OK3
OK1
OK2
OK4
OK2
OK5
], [])

AT_CLEANUP


AT_SETUP([USE FOR DEBUGGING ON ALL PROCEDURES])
AT_KEYWORDS([fundamental DEBUG-ITEM])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
           SOURCE-COMPUTER. mine WITH DEBUGGING MODE.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
       DECLARATIVES.
       TEST-DEBUG SECTION. USE FOR DEBUGGING ON ALL PROCEDURES.
           DISPLAY DEBUG-ITEM "|" END-DISPLAY.
       END DECLARATIVES.
       FIRST-PAR.
           DISPLAY "OK1" END-DISPLAY.
           GO TO SECOND-PAR.
       SECOND-PAR.
           DISPLAY "OK2" END-DISPLAY.
       THIRD-PAR.
           DISPLAY "OK3" END-DISPLAY.
           PERFORM FIRST-PAR THRU SECOND-PAR.
           DISPLAY "OK4" END-DISPLAY.
           PERFORM SECOND-PAR.
           DISPLAY "OK5" END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([COB_SET_DEBUG=1 $COBCRUN_DIRECT ./prog], [0],
[       FIRST-PAR                                        START PROGRAM                 |
OK1
    16 SECOND-PAR                                                                     |
OK2
    18 THIRD-PAR                                        FALL THROUGH                  |
OK3
    21 FIRST-PAR                                        PERFORM LOOP                  |
OK1
    16 SECOND-PAR                                                                     |
OK2
OK4
    23 SECOND-PAR                                       PERFORM LOOP                  |
OK2
OK5
], [])

AT_CLEANUP


AT_SETUP([USE FOR DEBUGGING ON procedure])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
           SOURCE-COMPUTER. mine WITH DEBUGGING MODE.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
       DECLARATIVES.
       TEST-DEBUG SECTION. USE FOR DEBUGGING ON SECOND-PAR.
           DISPLAY DEBUG-ITEM "|" END-DISPLAY.
       END DECLARATIVES.
       FIRST-PAR.
           DISPLAY "OK1" END-DISPLAY.
           GO TO SECOND-PAR.
       SECOND-PAR.
           DISPLAY "OK2" END-DISPLAY.
       THIRD-PAR.
           DISPLAY "OK3" END-DISPLAY.
           PERFORM FIRST-PAR THRU SECOND-PAR.
           DISPLAY "OK4" END-DISPLAY.
           PERFORM SECOND-PAR.
           DISPLAY "OK5" END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([COB_SET_DEBUG=1 $COBCRUN_DIRECT ./prog], [0],
[OK1
    16 SECOND-PAR                                                                     |
OK2
OK3
OK1
    16 SECOND-PAR                                                                     |
OK2
OK4
    23 SECOND-PAR                                       PERFORM LOOP                  |
OK2
OK5
], [])

AT_CLEANUP


AT_SETUP([USE FOR DEBUGGING (COB_SET_DEBUG switched)])
AT_KEYWORDS([fundamental configuration SET ENVIRONMENT])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
           SOURCE-COMPUTER. mine WITH DEBUGGING MODE.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
       DECLARATIVES.
       TEST-DEBUG SECTION. USE FOR DEBUGGING ON ALL PROCEDURES.
           DISPLAY DEBUG-ITEM "|" END-DISPLAY.
       END DECLARATIVES.
       FIRST-PAR.
           SET ENVIRONMENT "COB_SET_DEBUG" TO "false"
           DISPLAY "OK1" END-DISPLAY.
           GO TO SECOND-PAR.
       SECOND-PAR.
           DISPLAY "OK2" END-DISPLAY.
       THIRD-PAR.
           DISPLAY "OK3" END-DISPLAY.
           PERFORM FIRST-PAR THRU SECOND-PAR.
           DISPLAY "OK4" END-DISPLAY.
           SET ENVIRONMENT "COB_SET_DEBUG" TO "Y"
           PERFORM SECOND-PAR.
           DISPLAY "OK5" END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([COB_SET_DEBUG=1 $COBCRUN_DIRECT ./prog], [0],
[       FIRST-PAR                                        START PROGRAM                 |
OK1
OK2
OK3
OK1
OK2
OK4
    25 SECOND-PAR                                       PERFORM LOOP                  |
OK2
OK5
], [])

AT_CLEANUP


AT_SETUP([USE FOR DEBUGGING ON [[ALL]] REFERENCES OF field])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
           SOURCE-COMPUTER. mine WITH DEBUGGING MODE.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  MY-DATA-FIELDS.
           02  MY-DATA-FIELD-1  PIC 9 VALUE 1.
           02  MDF.
             03 MDF-TOO-LONG-NAMES.
               05  MY-DATA-FIELD-2  PIC 9 VALUE 4.
               05  MY-DATA-FIELD-3  REDEFINES MY-DATA-FIELD-2 PIC X.
       01  MY-DATA-FIELD-B  PIC X(40) VALUE "ABCD".
       PROCEDURE        DIVISION.
       DECLARATIVES.
       TEST-DEBUG SECTION.
           USE FOR DEBUGGING ON ALL REFERENCES OF MY-DATA-FIELD-1
                                ALL               MY-DATA-FIELD-2
                                MY-DATA-FIELD-3 MY-DATA-FIELD-B.
           DISPLAY DEBUG-ITEM "|" END-DISPLAY.
       END DECLARATIVES.
       INIT-PAR.
           MOVE 6 TO MY-DATA-FIELD-2.
       FIRST-PAR.
           PERFORM VARYING MY-DATA-FIELD-1 FROM 1 BY 1
                   UNTIL   MY-DATA-FIELD-1 > MY-DATA-FIELD-2
              *> empty by design
           END-PERFORM.
       END-PAR.
           MOVE "99" TO MY-DATA-FIELD-B.
           MOVE MY-DATA-FIELD-B TO MY-DATA-FIELDS.
           MOVE "X"  TO MY-DATA-FIELD-3
                     OF MDF
                     OF MY-DATA-FIELDS.
           MOVE "-"  TO MY-DATA-FIELD-3
                     OF MDF-TOO-LONG-NAMES
                     OF MDF
                     OF MY-DATA-FIELDS.
           STOP RUN.
])

AT_CHECK([$COMPILE -fmissing-statement=ok prog.cob], [0], [], [])
# TODO: validate against other compilers, especially the line 30;
#       likely the second line should be 25 instead of 24:
AT_CHECK([COB_SET_DEBUG=1 $COBCRUN_DIRECT ./prog], [0],
[    25 MY-DATA-FIELD-2                                  6                                       |
    27 MY-DATA-FIELD-1                                  1                                       |
    27 MY-DATA-FIELD-1                                  1                                       |
    27 MY-DATA-FIELD-2                                  6                                       |
    27 MY-DATA-FIELD-1                                  2                                       |
    27 MY-DATA-FIELD-1                                  2                                       |
    27 MY-DATA-FIELD-2                                  6                                       |
    27 MY-DATA-FIELD-1                                  3                                       |
    27 MY-DATA-FIELD-1                                  3                                       |
    27 MY-DATA-FIELD-2                                  6                                       |
    27 MY-DATA-FIELD-1                                  4                                       |
    27 MY-DATA-FIELD-1                                  4                                       |
    27 MY-DATA-FIELD-2                                  6                                       |
    27 MY-DATA-FIELD-1                                  5                                       |
    27 MY-DATA-FIELD-1                                  5                                       |
    27 MY-DATA-FIELD-2                                  6                                       |
    27 MY-DATA-FIELD-1                                  6                                       |
    27 MY-DATA-FIELD-1                                  6                                       |
    27 MY-DATA-FIELD-2                                  6                                       |
    27 MY-DATA-FIELD-1                                  7                                       |
    27 MY-DATA-FIELD-1                                  7                                       |
    27 MY-DATA-FIELD-2                                  6                                       |
    32 MY-DATA-FIELD-B                                  99                                      |
    34 MY-DATA-FIELD-3 OF MDF OF MY-D                   X                                       |
    37 MY-DATA-FIELD-3 OF MDF-TOO-LON                   -                                       |
], [])

AT_CLEANUP


AT_SETUP([USE FOR DEBUGGING, reference within DEBUGGING])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
           SOURCE-COMPUTER. mine WITH DEBUGGING MODE.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  DATA-FIELD   PIC X(40) VALUE "ABCD".
       PROCEDURE        DIVISION.
       DECLARATIVES.
       TEST-DEBUG SECTION.
           USE FOR DEBUGGING ON ALL REFERENCES OF DATA-FIELD.
           DISPLAY DEBUG-ITEM "|".
           MOVE "ABCD" TO DATA-FIELD.
           DISPLAY DEBUG-ITEM "|".
       END DECLARATIVES.
       SOME-PAR.
           MOVE QUOTE TO DATA-FIELD.
           IF DATA-FIELD = QUOTE DISPLAY "NO DEBUG" STOP RUN.
           DISPLAY "DEBUG".
           STOP RUN.
])
AT_CHECK([$COMPILE -Wno-terminator prog.cob], [0], [], [])
AT_CHECK([COB_SET_DEBUG=1 $COBCRUN_DIRECT ./prog], [0],
[    19 DATA-FIELD                                       """"""""""""""""""""""""""""""""""""""""|
    19 DATA-FIELD                                       """"""""""""""""""""""""""""""""""""""""|
    20 DATA-FIELD                                       ABCD                                    |
    20 DATA-FIELD                                       ABCD                                    |
DEBUG
], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[NO DEBUG
], [])

AT_CLEANUP


AT_SETUP([USE FOR DEBUGGING, time of execution])
AT_KEYWORDS([fundamental DEBUGGING])

# FIXME: the debugging procedure is executed after the statement,
#        which is generally fine, but not for "nested" statements
#        where DEBUG-ITEM contains wrong data and the
#        debugging procedure is called too late
AT_XFAIL_IF([true])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
           SOURCE-COMPUTER. mine WITH DEBUGGING MODE.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  DATA-FIELD   PIC X(40) VALUE "ABCD".
       PROCEDURE        DIVISION.
       DECLARATIVES.
       TEST-DEBUG SECTION.
           USE FOR DEBUGGING ON ALL REFERENCES OF DATA-FIELD.
           DISPLAY DEBUG-ITEM "|".
           MOVE "ABCD" TO DATA-FIELD.
       END DECLARATIVES.
       SOME-PAR.
           MOVE QUOTE TO DATA-FIELD.
           IF DATA-FIELD = QUOTE
              DISPLAY "NO DEBUG"
           ELSE
              DISPLAY "DEBUG"
              MOVE SPACES TO DATA-FIELD
              CALL "NOTHERE" USING DATA-FIELD
                 ON OVERFLOW
                    DISPLAY "THIS IS FINE".
           STOP RUN.
])
AT_CHECK([$COMPILE -w prog.cob], [0], [], [])
AT_CHECK([COB_SET_DEBUG=1 $COBCRUN_DIRECT ./prog], [0],
[    18 DATA-FIELD                                       """"""""""""""""""""""""""""""""""""""""|
    19 DATA-FIELD                                       ABCD                                    |
DEBUG
    23 DATA-FIELD                                                                               |
    24 DATA-FIELD                                       ABCD                                    |
THIS IS FINE
], [])

AT_CLEANUP


AT_SETUP([USE FOR DEBUGGING, reference with OCCURS])
AT_KEYWORDS([fundamental DEBUGGING])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
           SOURCE-COMPUTER. mine WITH DEBUGGING MODE.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  FILLER.
           02 FILLER    OCCURS 10.
              03 FILLER    OCCURS 5.
                 04 DATA-FIELD   PIC X(40) VALUE "ABCD" OCCURS 2.
       PROCEDURE        DIVISION.
       DECLARATIVES.
       TEST-DEBUG SECTION.
           USE FOR DEBUGGING ON ALL REFERENCES OF DATA-FIELD.
           DISPLAY DEBUG-ITEM "|" END-DISPLAY.
       END DECLARATIVES.
       SOME-PAR.
           MOVE QUOTE TO DATA-FIELD (4, 2, 1).
           STOP RUN.
])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([COB_SET_DEBUG=1 $COBCRUN_DIRECT ./prog], [0],
[    20 DATA-FIELD                     +0004 +0002 +0001 """"""""""""""""""""""""""""""""""""""""|
], [])

AT_CLEANUP


AT_SETUP([USE FOR DEBUGGING, referencing BASED item])
AT_KEYWORDS([fundamental DEBUGGING FREE ALLOCATE])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
           SOURCE-COMPUTER. mine WITH DEBUGGING MODE.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  DATA-FIELD   PIC X(40) VALUE "ABCD" BASED.
       77  PTR          USAGE POINTER VALUE NULL.
       01  DATA-FIELD3  PIC X(13) VALUE "42"   BASED.
       LINKAGE SECTION.
       01  DATA-FIELD2  PIC X(10) VALUE "DEF".
       PROCEDURE        DIVISION.
       DECLARATIVES.
       TEST-DEBUG SECTION.
           USE FOR DEBUGGING  ON ALL REFERENCES OF DATA-FIELD
                                 ALL REFERENCES OF DATA-FIELD2
                                 DATA-FIELD3.
           DISPLAY DEBUG-ITEM "|" END-DISPLAY.
       END DECLARATIVES.
       SOME-PAR.
           ALLOCATE -20 CHARACTERS RETURNING PTR
           SET ADDRESS OF DATA-FIELD TO PTR   *> first expected output -> is NULL
           ALLOCATE DATA-FIELD INITIALIZED    *> output with data as specified
           FREE DATA-FIELD                    *> No data any more
           ALLOCATE DATA-FIELD2 INITIALIZED   *> DO-CHECK MF extension - otherwise identical
           SET PTR TO ADDRESS OF DATA-FIELD2
           FREE PTR
           SET ADDRESS OF DATA-FIELD2 TO NULL
           ALLOCATE DATA-FIELD3 INITIALIZED
           SET PTR TO ADDRESS OF DATA-FIELD3  *> only read, no output expected
           FREE DATA-FIELD3
           STOP RUN.
])
# relaxed syntax is needed as the standard allows only to ALLOCATE BASED items
AT_CHECK([$COMPILE -frelax-syntax-checks prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])  # not active -> no displays
AT_CHECK([COB_SET_DEBUG=1 $COBCRUN_DIRECT ./prog], [0],
[    24 DATA-FIELD                                       <NULL>                                  |
    25 DATA-FIELD                                       ABCD                                    |
    26 DATA-FIELD                                       <NULL>                                  |
    27 DATA-FIELD2                                      DEF                                     |
    28 DATA-FIELD2                                      DEF                                     |
    30 DATA-FIELD2                                      <NULL>                                  |
    31 DATA-FIELD3                                      42                                      |
    33 DATA-FIELD3                                      <NULL>                                  |
], [])

AT_CLEANUP


AT_SETUP([USE FOR DEBUGGING file])
AT_KEYWORDS([fundamental OPEN WRITE READ CLOSE])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
           SOURCE-COMPUTER. mine WITH DEBUGGING MODE.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN "./TEST-FILE".
       DATA             DIVISION.
       FILE             SECTION.
       FD  TEST-FILE.
       01  TEST-REC     PIC X(40).
       PROCEDURE        DIVISION.
       DECLARATIVES.
       TEST-DEBUG SECTION.
           USE FOR DEBUGGING ON TEST-FILE.
           DISPLAY DEBUG-ITEM "|" END-DISPLAY.
       END DECLARATIVES.
       SOME-PAR.
           OPEN  OUTPUT TEST-FILE.
           WRITE TEST-REC FROM "DEF".
           CLOSE TEST-FILE.
           OPEN  INPUT TEST-FILE.
           READ TEST-FILE.
           CLOSE TEST-FILE.
           STOP RUN.
])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([COB_SET_DEBUG=1 $COBCRUN_DIRECT ./prog], [0],
[    21 TEST-FILE                                                                                |
    23 TEST-FILE                                                                                |
    24 TEST-FILE                                                                                |
    25 TEST-FILE                                        DEF                                     |
    26 TEST-FILE                                                                                |
], [])

AT_CLEANUP


AT_SETUP([Simple Expressions with figurative constants])
AT_KEYWORDS([expression conditional])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
      ******************************************************************
       WORKING-STORAGE SECTION.
       01  FLDX     PIC X        VALUE 'X'.
       01  FLDXX    PIC XX       VALUE SPACES.
       01  FLDX50   PIC X(50)    VALUE 'X50'.
       01  FLDX500  PIC X(500)   VALUE 'X500'.
       01  FLDX32K  PIC X(32000) VALUE 'X'.
       01  FLD1     PIC X        VALUE '1'.
       01  FLD1X    PIC X(32000) VALUE '1'.
       01  FILLER       USAGE BINARY-INT VALUE 0.
           88 DO-DISP   VALUE 0.
           88 NO-DISP   VALUE 1.
       REPLACE ==DISPLAY== BY ==IF DO-DISP  DISPLAY==.

       PROCEDURE DIVISION.
       MAIN-LINE.

      *>   Test with DISPLAY on error
           PERFORM DO-CHECK
       >> IF CHECK-PERF IS DEFINED
           SET  NO-DISP    TO TRUE
      *>   minimal side-test for performance comparisons
           PERFORM DO-CHECK 20000 TIMES
       >> END-IF
           GOBACK.

       DO-CHECK.
      *> check with 1 byte, comparison algorithm is a direct comparison
           IF FLDX       >  SPACE      CONTINUE
           ELSE                        DISPLAY '! "X" > SPACE'.
           IF FLDX       <  SPACE      DISPLAY '  "X" < SPACE!'.
           IF FLDX       >= SPACE      CONTINUE
           ELSE                        DISPLAY '! "X" >= SPACE'.
           IF FLDX       <= SPACE      DISPLAY '  "X" <= SPACE!'.

           IF SPACE      <  FLDX       CONTINUE
           ELSE                        DISPLAY '! SPACE < "X"'.
           IF SPACE      >  FLDX       DISPLAY '  SPACE > "X"!'.
           IF SPACE      <= FLDX       CONTINUE
           ELSE                        DISPLAY '! SPACE <= "X"'.
           IF SPACE      >= FLDX       DISPLAY '  SPACE >= "X"!'.

           IF FLDX       >  " "        CONTINUE
           ELSE                        DISPLAY '! "X" > " "'.
           IF FLDX       <  " "        DISPLAY '  "X" < " "!'.
           IF FLDX       >= " "        CONTINUE
           ELSE                        DISPLAY '! "X" >= " "'.
           IF FLDX       <= " "        DISPLAY '  "X" <= " "!'.

           IF " "        <  FLDX       CONTINUE
           ELSE                        DISPLAY '! " " < "X"'.
           IF " "        >  FLDX       DISPLAY '  " " > "X"!'.
           IF " "        <= FLDX       CONTINUE
           ELSE                        DISPLAY '! " " <= "X"'.
           IF " "        >= FLDX       DISPLAY '  " " >= "X"!'.


           IF FLDX       >  LOW-VALUE  CONTINUE
           ELSE                        DISPLAY '! "X" > LOW-VALUE'.
           IF FLDX       <  LOW-VALUE  DISPLAY '  "X" < LOW-VALUE!'.
           IF FLDX       >= LOW-VALUE  CONTINUE
           ELSE                        DISPLAY '! "X" >= LOW-VALUE'.
           IF FLDX       <= LOW-VALUE  DISPLAY '  "X" <= LOW-VALUE!'.

           IF LOW-VALUE  <  FLDX       CONTINUE
           ELSE                        DISPLAY '! LOW-VALUE < "X"'.
           IF LOW-VALUE  >  FLDX       DISPLAY '  LOW-VALUE > "X"!'.
           IF LOW-VALUE  <= FLDX       CONTINUE
           ELSE                        DISPLAY '! LOW-VALUE <= "X"'.
           IF LOW-VALUE  >= FLDX       DISPLAY '  LOW-VALUE >= "X"!'.

           IF FLDX       >  x"00"      CONTINUE
           ELSE                        DISPLAY '! "X" > x"00"'.
           IF FLDX       <  x"00"      DISPLAY '  "X" < x"00"!'.
           IF FLDX       >= x"00"      CONTINUE
           ELSE                        DISPLAY '! "X" >= x"00"'.
           IF FLDX       <= x"00"      DISPLAY '  "X" <= x"00"!'.

           IF x"00"      <  FLDX       CONTINUE
           ELSE                        DISPLAY '! x"00" < "X"'.
           IF x"00"      >  FLDX       DISPLAY '  x"00" > "X"!'.
           IF x"00"      <= FLDX       CONTINUE
           ELSE                        DISPLAY '! x"00" <= "X"'.
           IF x"00"      >= FLDX       DISPLAY '  x"00" >= "X"!'.


           IF FLDX       <  HIGH-VALUE CONTINUE
           ELSE                        DISPLAY '! "X" < HIGH-VALUE'.
           IF FLDX       >  HIGH-VALUE DISPLAY '  "X" > HIGH-VALUE!'.
           IF FLDX       <= HIGH-VALUE CONTINUE
           ELSE                        DISPLAY '! "X" <= HIGH-VALUE'.
           IF FLDX       >= HIGH-VALUE DISPLAY '  "X" >= HIGH-VALUE!'.

           IF HIGH-VALUE >  FLDX       CONTINUE
           ELSE                        DISPLAY '! HIGH-VALUE > "X"'.
           IF HIGH-VALUE <  FLDX       DISPLAY '  HIGH-VALUE < "X"!'.
           IF HIGH-VALUE >= FLDX       CONTINUE
           ELSE                        DISPLAY '! HIGH-VALUE >= "X"'.
           IF HIGH-VALUE <= FLDX       DISPLAY '  HIGH-VALUE <= "X"!'.

           IF FLDX       <  x"FF"      CONTINUE
           ELSE                        DISPLAY '! "X" < x"FF"'.
           IF FLDX       >  x"FF"      DISPLAY '  "X" > x"FF"!'.
           IF FLDX       <= x"FF"      CONTINUE
           ELSE                        DISPLAY '! "X" <= x"FF"'.
           IF FLDX       >= x"FF"      DISPLAY '  "X" >= x"FF"!'.

           IF x"FF"      >  FLDX       CONTINUE
           ELSE                        DISPLAY '! x"FF" > "X"'.
           IF x"FF"      <  FLDX       DISPLAY '  x"FF" < "X"!'.
           IF x"FF"      >= FLDX       CONTINUE
           ELSE                        DISPLAY '! x"FF" >= "X"'.
           IF x"FF"      <= FLDX       DISPLAY '  x"FF" <= "X"!'.


           IF FLD1       >  ZERO       CONTINUE
           ELSE                        DISPLAY '! "1" > ZERO'.
           IF FLD1       <  ZERO       DISPLAY '  "1" < ZERO!'.
           IF FLD1       >= ZERO       CONTINUE
           ELSE                        DISPLAY '! "1" >= ZERO'.
           IF FLD1       <= ZERO       DISPLAY '  "1" <= ZERO!'.

           IF ZERO       <  FLD1       CONTINUE
           ELSE                        DISPLAY '! ZERO < "1"'.
           IF ZERO       >  FLD1       DISPLAY '  ZERO > "1"!'.
           IF ZERO       <= FLD1       CONTINUE
           ELSE                        DISPLAY '! ZERO <= "1"'.
           IF ZERO       >= FLD1       DISPLAY '  ZERO >= "1"!'.

           IF FLD1       >  "0"        CONTINUE
           ELSE                        DISPLAY '! "1" > "0"'.
           IF FLD1       <  "0"        DISPLAY '  "1" < "0"!'.
           IF FLD1       >= "0"        CONTINUE
           ELSE                        DISPLAY '! "1" >= "0"'.
           IF FLD1       <= "0"        DISPLAY '  "1" <= "0"!'.

           IF "0"        <  FLD1       CONTINUE
           ELSE                        DISPLAY '! "0" < "1"'.
           IF "0"        >  FLD1       DISPLAY '  "0" > "1"!'.
           IF "0"        <= FLD1       CONTINUE
           ELSE                        DISPLAY '! "0" <= "1"'.
           IF "0"        >= FLD1       DISPLAY '  "0" >= "1"!'.

      *> check with many bytes, needs another comparison algorithm (function)
           IF FLDX32K    >  SPACE      CONTINUE
           ELSE                        DISPLAY '! "X " > SPACE'.
           IF FLDX32K    <  SPACE      DISPLAY '  "X " < SPACE!'.
           IF FLDX32K    >= SPACE      CONTINUE
           ELSE                        DISPLAY '! "X " >= SPACE'.
           IF FLDX32K    <= SPACE      DISPLAY '  "X " <= SPACE!'.

           IF SPACE      <  FLDX32K    CONTINUE
           ELSE                        DISPLAY '! SPACE < "X "'.
           IF SPACE      >  FLDX32K    DISPLAY '  SPACE > "X "!'.
           IF SPACE      <= FLDX32K    CONTINUE
           ELSE                        DISPLAY '! SPACE <= "X "'.
           IF SPACE      >= FLDX32K    DISPLAY '  SPACE >= "X "!'.

           IF FLDX32K    >  "  "       CONTINUE
           ELSE                        DISPLAY '! "X " > " "'.
           IF FLDX32K    <  "  "       DISPLAY '  "X " < " "!'.
           IF FLDX32K    >= "  "       CONTINUE
           ELSE                        DISPLAY '! "X " >= " "'.
           IF FLDX32K    <= "  "       DISPLAY '  "X " <= " "!'.

           IF "  "       <  FLDX32K    CONTINUE
           ELSE                        DISPLAY '! "  " < "X "'.
           IF "  "       >  FLDX32K    DISPLAY '  "  " > "X "!'.
           IF "  "       <= FLDX32K    CONTINUE
           ELSE                        DISPLAY '! "  " <= "X "'.
           IF "  "       >= FLDX32K    DISPLAY '  "  " >= "X "!'.


           IF FLDX32K    >  LOW-VALUE  CONTINUE
           ELSE                        DISPLAY '! "X" > LOW-VALUE'.
           IF FLDX32K    <  LOW-VALUE  DISPLAY '  "X" < LOW-VALUE!'.
           IF FLDX32K    >= LOW-VALUE  CONTINUE
           ELSE                        DISPLAY '! "X" >= LOW-VALUE'.
           IF FLDX32K    <= LOW-VALUE  DISPLAY '  "X" <= LOW-VALUE!'.

           IF LOW-VALUE  <  FLDX32K    CONTINUE
           ELSE                        DISPLAY '! LOW-VALUE < "X"'.
           IF LOW-VALUE  >  FLDX32K    DISPLAY '  LOW-VALUE > "X"!'.
           IF LOW-VALUE  <= FLDX32K    CONTINUE
           ELSE                        DISPLAY '! LOW-VALUE <= "X"'.
           IF LOW-VALUE  >= FLDX32K    DISPLAY '  LOW-VALUE >= "X"!'.

           IF FLDX32K    >  x"00"      CONTINUE
           ELSE                        DISPLAY '! "X " > x"00"'.
           IF FLDX32K    <  x"00"      DISPLAY '  "X " < x"00"!'.
           IF FLDX32K    >= x"00"      CONTINUE
           ELSE                        DISPLAY '! "X " >= x"00"'.
           IF FLDX32K    <= x"00"      DISPLAY '  "X " <= x"00"!'.

           IF x"00"      <  FLDX32K    CONTINUE
           ELSE                        DISPLAY '! x"00" < "X "'.
           IF x"00"      >  FLDX32K    DISPLAY '  x"00" > "X "!'.
           IF x"00"      <= FLDX32K    CONTINUE
           ELSE                        DISPLAY '! x"00" <= "X "'.
           IF x"00"      >= FLDX32K    DISPLAY '  x"00" >= "X "!'.


           IF FLDX32K    <  HIGH-VALUE CONTINUE
           ELSE                        DISPLAY '! "X " < HIGH-VALUE'.
           IF FLDX32K    >  HIGH-VALUE DISPLAY '  "X " > HIGH-VALUE!'.
           IF FLDX32K    <= HIGH-VALUE CONTINUE
           ELSE                        DISPLAY '! "X " <= HIGH-VALUE'.
           IF FLDX32K    >= HIGH-VALUE DISPLAY '  "X " >= HIGH-VALUE!'.

           IF HIGH-VALUE >  FLDX32K    CONTINUE
           ELSE                        DISPLAY '! HIGH-VALUE > "X "'.
           IF HIGH-VALUE <  FLDX32K    DISPLAY '  HIGH-VALUE < "X "!'.
           IF HIGH-VALUE >= FLDX32K    CONTINUE
           ELSE                        DISPLAY '! HIGH-VALUE >= "X "'.
           IF HIGH-VALUE <= FLDX32K    DISPLAY '  HIGH-VALUE <= "X "!'.

           IF FLDX32K    <  x"FF"      CONTINUE
           ELSE                        DISPLAY '! "X " < x"FF"'.
           IF FLDX32K    >  x"FF"      DISPLAY '  "X " > x"FF"!'.
           IF FLDX32K    <= x"FF"      CONTINUE
           ELSE                        DISPLAY '! "X " <= x"FF"'.
           IF FLDX32K    >= x"FF"      DISPLAY '  "X " >= x"FF"!'.

           IF x"FF"      >  FLDX32K    CONTINUE
           ELSE                        DISPLAY '! x"FF" > "X "'.
           IF x"FF"      <  FLDX32K    DISPLAY '  x"FF" < "X "!'.
           IF x"FF"      >= FLDX32K    CONTINUE
           ELSE                        DISPLAY '! x"FF" >= "X "'.
           IF x"FF"      <= FLDX32K    DISPLAY '  x"FF" <= "X "!'.


           IF FLD1X      >  ZERO       CONTINUE
           ELSE                        DISPLAY '! "1 " > ZERO'.
           IF FLD1X      <  ZERO       DISPLAY '  "1 " < ZERO!'.
           IF FLD1X      >= ZERO       CONTINUE
           ELSE                        DISPLAY '! "1 " >= ZERO'.
           IF FLD1X      <= ZERO       DISPLAY '  "1 " <= ZERO!'.

           IF ZERO       <  FLD1X      CONTINUE
           ELSE                        DISPLAY '! ZERO < "1 "'.
           IF ZERO       >  FLD1X      DISPLAY '  ZERO > "1 "!'.
           IF ZERO       <= FLD1X      CONTINUE
           ELSE                        DISPLAY '! ZERO <= "1 "'.
           IF ZERO       >= FLD1X      DISPLAY '  ZERO >= "1 "!'.

           IF FLD1X      >  "0"        CONTINUE
           ELSE                        DISPLAY '! "1 " > "0"'.
           IF FLD1X      <  "0"        DISPLAY '  "1 " < "0"!'.
           IF FLD1X      >= "0"        CONTINUE
           ELSE                        DISPLAY '! "1 " >= "0"'.
           IF FLD1X      <= "0"        DISPLAY '  "1 " <= "0"!'.

           IF "0"        <  FLD1X      CONTINUE
           ELSE                        DISPLAY '! "0" < "1 "'.
           IF "0"        >  FLD1X      DISPLAY '  "0" > "1 "!'.
           IF "0"        <= FLD1X      CONTINUE
           ELSE                        DISPLAY '! "0" <= "1 "'.
           IF "0"        >= FLD1X      DISPLAY '  "0" >= "1 "!'.

      *> special check for SPACE-optimization and extra spaces
           IF FLDX500    >  SPACE      CONTINUE
           ELSE                        DISPLAY '! "X5" > SPACE'.
           IF FLDX500    <  SPACE      DISPLAY '  "X5" < SPACE!'.
           IF FLDX500    >= SPACE      CONTINUE
           ELSE                        DISPLAY '! "X5" >= SPACE'.
           IF FLDX500    <= SPACE      DISPLAY '  "X5" <= SPACE!'.

           IF SPACE      <  FLDX500    CONTINUE
           ELSE                        DISPLAY '! SPACE < "X5"'.
           IF SPACE      >  FLDX500    DISPLAY '  SPACE > "X5"!'.
           IF SPACE      <= FLDX500    CONTINUE
           ELSE                        DISPLAY '! SPACE <= "X5"'.
           IF SPACE      >= FLDX500    DISPLAY '  SPACE >= "X5"!'.

           MOVE SPACES TO FLDXX
           IF FLDXX      =  "    "     CONTINUE
           ELSE                        DISPLAY '! "XX" <> "     "'.
           MOVE ALL "A" TO FLDXX
           IF FLDXX      =  "AA  "     CONTINUE
           ELSE                        DISPLAY '! "AA" <> "AA  "'.
           IF FLDXX      =  "AAA"      DISPLAY '! "AA" = "AAA "'.
           IF FLDXX      =  ALL "A"    CONTINUE
           ELSE                        DISPLAY '! "AA" <> ALL "A"'.
           MOVE "B" TO FLDXX (2:1)
           IF FLDXX      =  ALL "AB"   CONTINUE
           ELSE                        DISPLAY '! "AB" <> ALL "AB"'.

           IF FLDX      <=  ALL "XX"   CONTINUE
           ELSE                        DISPLAY '! "X" > ALL "XX"'.
           IF ALL "XX" NOT > FLDX      CONTINUE
           ELSE                        DISPLAY '! ALL "XX" <= "X"'.

      *> special check for ZERO-optimization and extra spaces
           MOVE ALL ZERO TO FLDX500 FLDX50
           MOVE "1"      TO FLDX500 (500:1) FLDX50(50:1)
           IF FLDX50     >  ZERO       CONTINUE
           ELSE                        DISPLAY '! "000...01" > ZERO'.
           IF FLDX50     <  ZERO       DISPLAY '  "000...01" < ZERO!'.
           IF FLDX50     >= ZERO       CONTINUE
           ELSE                        DISPLAY '! "000...01" >= ZERO'.
           IF FLDX50     <= ZERO       DISPLAY '  "000...01" <= ZERO!'.

           IF ZERO       <  FLDX50     CONTINUE
           ELSE                        DISPLAY '! ZERO < "000...01"'.
           IF ZERO       >  FLDX50     DISPLAY '  ZERO > "000...01"!'.
           IF ZERO       <= FLDX50     CONTINUE
           ELSE                        DISPLAY '! ZERO <= "000...01"'.
           IF ZERO       >= FLDX50     DISPLAY '  ZERO >= "000...01"!'.

           IF FLDX500    >  ZERO       CONTINUE
           ELSE                        DISPLAY '! "000...01" > ZERO'.
           IF FLDX500    <  ZERO       DISPLAY '  "000...01" < ZERO!'.
           IF FLDX500    >= ZERO       CONTINUE
           ELSE                        DISPLAY '! "000...01" >= ZERO'.
           IF FLDX500    <= ZERO       DISPLAY '  "000...01" <= ZERO!'.

           IF ZERO       <  FLDX500    CONTINUE
           ELSE                        DISPLAY '! ZERO < "000...01"'.
           IF ZERO       >  FLDX500    DISPLAY '  ZERO > "000...01"!'.
           IF ZERO       <= FLDX500    CONTINUE
           ELSE                        DISPLAY '! ZERO <= "000...01"'.
           IF ZERO       >= FLDX500    DISPLAY '  ZERO >= "000...01"!'.
])

AT_CHECK([$COMPILE prog.cob -Wno-constant-expression], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CHECK([$COMPILE prog.cob -Wno-constant-expression -fno-constant-folding -fno-fast-compare], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CHECK([$COMPILE prog.cob -Wno-constant-expression -fno-constant-folding], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([Expression numeric vs. DISPLAY])
AT_KEYWORDS([expression conditional])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
      ******************************************************************
       WORKING-STORAGE SECTION.
       01  FLDX50   PIC X(50)    VALUE 'X50'.
       01  FLDX10J  PIC X(10)    VALUE '0123'.
       01  FLDNUMD  PIC S9(3)    VALUE -123.
       01  FLDNUMD4 PIC S9(4)    VALUE -123.
       01  FLDNUMB  PIC S9v99    VALUE -1.23 USAGE BINARY.
       01  FILLER       USAGE BINARY-INT VALUE 0.
           88 DO-DISP   VALUE 0.
           88 NO-DISP   VALUE 1.
       REPLACE ==DISPLAY== BY ==IF DO-DISP  DISPLAY==.

       PROCEDURE DIVISION.
       MAIN-LINE.

      *>   Test with DISPLAY on error
           PERFORM DO-CHECK
       >> IF CHECK-PERF IS DEFINED
           SET  NO-DISP    TO TRUE
      *>   minimal side-test for performance comparisons
           PERFORM DO-CHECK 20000 TIMES
       >> END-IF
           GOBACK.

       DO-CHECK.
           MOVE "123" TO FLDX50
           IF 123        =  FLDX50     CONTINUE
           ELSE                        DISPLAY '! 123  <> "123"'.
           IF FLDNUMD    =  FLDNUMD4   CONTINUE
           ELSE                        DISPLAY '! 123  <> 0123'.
           IF FLDX50     =  FLDNUMD4   DISPLAY '! "123" = 0123'
           ELSE                        CONTINUE.
           IF FLDNUMD    =  FLDX50     CONTINUE
           ELSE                        DISPLAY '!-123 DISP <> "123"'.
           IF FLDX50     =  FLDNUMB    CONTINUE
           ELSE                        DISPLAY '!-1.23 BIN  <> "123"'.
           IF FLDX10J    =  FLDNUMD4   CONTINUE
           ELSE                        DISPLAY '! "0123" J  <> "0123"'.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CHECK([$COMPILE prog.cob -Wno-constant-expression -fno-constant-folding -fno-fast-compare], [0], [], [])

AT_CLEANUP


AT_SETUP([Abbreviated Expressions])
AT_KEYWORDS([expression conditional])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           SWITCH-1
           IS WRK-SWITCH-1
           ON STATUS IS ON-WRK-SWITCH-1
           OFF STATUS IS OFF-WRK-SWITCH-1
           SWITCH-2
           IS WRK-SWITCH-2
           OFF STATUS IS OFF-WRK-SWITCH-2.
       DATA DIVISION.
      ******************************************************************
       WORKING-STORAGE SECTION.
      *
       01 FLD9-0   PIC 9 VALUE 0.
       01 FLD9-1   PIC 9 VALUE 1.
       01 FLD9-2   PIC 9 VALUE 2.
       01 FLD9-5   PIC 9 VALUE 5.
       01 FLD9-7   PIC 9 VALUE 7.
       01 FLD9-9   PIC 9 VALUE 9.
       01 FLDX     PIC X VALUE 'X'.
       01 FLDY     PIC X VALUE 'Y'.
       01 FLDYY    PIC X VALUE 'Y'.
       01 FLDZ     PIC X VALUE 'Z'.
       01 TESTNUM  PIC 99 VALUE 1.

       PROCEDURE DIVISION.
       MAIN-LINE.

           IF FLD9-7 > FLD9-5 AND NOT < FLD9-0 OR FLD9-1
                PERFORM PASS ELSE PERFORM FAIL.
           IF FLD9-7 NOT = FLD9-5 OR FLD9-1
                PERFORM PASS ELSE PERFORM FAIL.
           IF FLD9-7 NOT = FLD9-5 AND FLD9-1
                PERFORM PASS ELSE PERFORM FAIL.
           IF NOT FLD9-7 = FLD9-5 OR FLD9-1
                PERFORM PASS ELSE PERFORM FAIL.
           IF NOT (FLD9-5 > FLD9-7 OR < FLD9-1)
                PERFORM PASS ELSE PERFORM FAIL.
           IF NOT (FLD9-7 NOT > FLD9-5 AND FLD9-2 AND NOT FLD9-1)
                PERFORM PASS ELSE PERFORM FAIL.
           IF FLD9-9 > FLD9-2 AND FLD9-7 AND FLD9-5
                PERFORM PASS ELSE PERFORM FAIL.
           IF FLD9-9 > FLD9-2 AND FLD9-7 OR FLD9-5
                PERFORM PASS ELSE PERFORM FAIL.
           IF FLD9-1 < FLD9-2 AND FLD9-5 AND FLD9-7
                PERFORM PASS ELSE PERFORM FAIL.

      * // DISPLAY "***Constant expressions***".
           IF 9 > 2 AND 7 AND 5 AND 1
                PERFORM PASS ELSE PERFORM FAIL.
           IF 1 < 2 AND 5 AND 7 AND 9
                PERFORM PASS ELSE PERFORM FAIL.
           IF 5 < 2 OR 1 OR 9 OR 7
                PERFORM PASS ELSE PERFORM FAIL.
           IF 5 > 1 AND < 3 OR 6
                PERFORM PASS ELSE PERFORM FAIL.

      * // DISPLAY "***Switch expressions***".
           IF           ON-WRK-SWITCH-1
                 OR NOT OFF-WRK-SWITCH-2
                AND     OFF-WRK-SWITCH-1
                PERFORM FAIL ELSE PERFORM PASS.
           DISPLAY "***FINE***" WITH NO ADVANCING.
           STOP RUN.

       PASS.
      * // DISPLAY 'Test ' TESTNUM ' passed'
           ADD 1 TO TESTNUM.

       FAIL.
           DISPLAY 'Test ' TESTNUM ' failed!'
           ADD 1 TO TESTNUM.
])

AT_CHECK([$COMPILE prog.cob], [0], [],
[prog.cob: in paragraph 'MAIN-LINE':
prog.cob:47: warning: suggest parentheses around AND within OR
prog.cob:53: warning: expression '9' GREATER THAN '2' is always TRUE
prog.cob:53: warning: expression '9' GREATER THAN '7' is always TRUE
prog.cob:53: warning: expression '9' GREATER THAN '5' is always TRUE
prog.cob:53: warning: expression '9' GREATER THAN '1' is always TRUE
prog.cob:55: warning: expression '1' LESS THAN '2' is always TRUE
prog.cob:55: warning: expression '1' LESS THAN '5' is always TRUE
prog.cob:55: warning: expression '1' LESS THAN '7' is always TRUE
prog.cob:55: warning: expression '1' LESS THAN '9' is always TRUE
prog.cob:57: warning: expression '5' LESS THAN '2' is always FALSE
prog.cob:57: warning: expression '5' LESS THAN '1' is always FALSE
prog.cob:57: warning: expression '5' LESS THAN '9' is always TRUE
prog.cob:57: warning: expression '5' LESS THAN '7' is always TRUE
prog.cob:59: warning: expression '5' GREATER THAN '1' is always TRUE
prog.cob:59: warning: expression '5' LESS THAN '3' is always FALSE
prog.cob:59: warning: expression '5' LESS THAN '6' is always TRUE
])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [***FINE***], [])

AT_CHECK([$COMPILE -fno-constant-folding prog.cob], [0], [],
[prog.cob: in paragraph 'MAIN-LINE':
prog.cob:47: warning: suggest parentheses around AND within OR
])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [***FINE***], [])

AT_CLEANUP


AT_SETUP([integer arithmetic on floating-point var])
AT_KEYWORDS([fundamental literal])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  x           USAGE FLOAT-SHORT VALUE 123.456.

       PROCEDURE       DIVISION.
           ADD 360 TO x
           IF x <> 483.456
               DISPLAY "ADD wrong: " x
               MOVE 483.456 TO x
           END-IF

           SUBTRACT 360 FROM x
           IF x <> 123.456
               DISPLAY "SUBTRACT wrong: " x
               MOVE 123.456 TO x
           END-IF

           DIVIDE 2 INTO x
           IF x <> 61.728
               DISPLAY "DIVIDE wrong: " x
               MOVE 61.728 TO x
           END-IF

           MULTIPLY 2 BY x
           IF x <> 123.456
               DISPLAY "MULTIPLY wrong: " x
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CLEANUP


AT_SETUP([TYPEDEF application])
AT_KEYWORDS([fundamental EXTERNAL])

AT_DATA([caller.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     caller.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       77  INT         IS TYPEDEF BINARY-LONG.
       77  EXT-INT     IS TYPEDEF BINARY-LONG EXTERNAL.
      *> should this be possible?
      *>77  INT-VAL     IS TYPEDEF USAGE INT VALUE 12.
       77  INT-VAL     IS TYPEDEF BINARY-LONG VALUE 12.
       77  SOMEVAR     USAGE INT VALUE 10.
       77  SOMEVAL     USAGE INT-VAL.
       77  SOMEEXT     USAGE EXT-INT.

       PROCEDURE       DIVISION.
           IF SOMEVAR <> 10
              DISPLAY "SOMEVAR (INT) wrong: " SOMEVAR
           END-IF
           IF SOMEVAL <> 12
              DISPLAY "SOMEVAR (INT-VAL) wrong: " SOMEVAL
           END-IF
           MOVE 42 TO SOMEEXT
           CALL "callee"
           .
])

AT_DATA([callee.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     callee.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       77  EXT-INT     IS TYPEDEF BINARY-LONG EXTERNAL.
       77  SOMEEXT     USAGE EXT-INT.

       PROCEDURE       DIVISION.
           IF SOMEEXT <> 42
              DISPLAY "SOMEEXT (EXT-INT) wrong: " SOMEEXT
           END-IF
           .
])

AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [], [])
AT_CLEANUP


AT_SETUP([Alphanumeric VALUE longer than PIC])
AT_KEYWORDS([fundamental size])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-SPACES      PIC XXX VALUE "    ".
       01 X-Xs          PIC XX  VALUE "XXX".
      *> not longer but goes into similar codegen:
       01 X-XXX         PIC XXX VALUE "XX".
       PROCEDURE        DIVISION.
           IF X-SPACES NOT = ALL SPACE
             DISPLAY 'BAD SPACE: ' X-SPACES.
           IF X-Xs NOT = ALL "X"
             DISPLAY 'BAD X: ' X-Xs.
           IF X-XXX NOT = "XX "
             DISPLAY 'BAD XXX: ' X-XXX.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [],
[prog.cob:6: warning: value does not fit the picture string
prog.cob:7: warning: value size exceeds data size
prog.cob:7: note: value size is 3
])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([DISPLAY with P fields])
AT_KEYWORDS([fundamental runmisc pretty-display pretty-printing pretty PACKED-DECIMAL])

# this test verifies that the size is correctly printed, which was buggy
# with "P on the left side of the decimal point", see bug #874
# me make a general DISPLAY with implied digits out of this test
# and also verify no-pretty-printing result to be reasonable

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 P1 PIC  999  value 1.
       01 P2 PIC  9P   value 0.
       01 P3 PIC  V999 value .123.
       01 P4 PIC  VP9  value 0.
       01 P5 PIC  VPP9 value 0.
       01 P6 PIC  9P   value 10.
       PROCEDURE DIVISION.
           display '00=' P2 '; 001=' P1 '; 00=' P2 ';'
           display '.00=' P4 '; .000=' P5 '; .123=' P3 '; '
                   '.00=' P4 '; .000=' P5 ';'
           move P1 to P2
           move P3 to P4, P5
           display '00=' P2 '; .02=' P4 '; .003=' P5 ';'
           display '10=' P6 ';'
           GOBACK.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[00=00; 001=001; 00=00;
.00=.00; .000=.000; .123=.123; .00=.00; .000=.000;
00=00; .02=.02; .003=.003;
10=10;
], [])
AT_CHECK([$COMPILE -fno-pretty-display prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[00=0; 001=001; 00=0;
.00=0; .000=0; .123=123; .00=0; .000=0;
00=0; .02=2; .003=3;
10=1;
], [])

AT_DATA([packed.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. packed.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 P1 PIC  999  COMP-3 value 1.
       01 P2 PIC  9P   COMP-3 value 0.
       01 P3 PIC  V999 COMP-3 value .123.
       01 P4 PIC  VP9  COMP-3 value 0.
       01 P5 PIC  VPP9 COMP-3 value 0.
       01 P6 PIC  9P   COMP-3 value 10.
       PROCEDURE DIVISION.
           display '00=' P2 '; 001=' P1 '; 00=' P2 ';'
           display '.00=' P4 '; .000=' P5 '; .123=' P3 '; '
                   '.00=' P4 '; .000=' P5 ';'
           move P1 to P2
           move P3 to P4, P5
           display '00=' P2 '; .02=' P4 '; .003=' P5 ';'
           display '10=' P6 ';'
           GOBACK.
])

AT_CHECK([$COMPILE packed.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./packed], [0],
[00=00; 001=001; 00=00;
.00=.00; .000=.000; .123=.123; .00=.00; .000=.000;
00=00; .02=.02; .003=.003;
10=10;
], [])

AT_CHECK([$COMPILE -fno-pretty-display packed.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./packed], [0],
[00=0; 001=001; 00=0;
.00=0; .000=0; .123=123; .00=0; .000=0;
00=0; .02=2; .003=3;
10=1;
], [])

AT_CLEANUP


AT_SETUP([condition IS ZERO AND])
AT_KEYWORDS([fundamental IF])

# for more details see bug #875

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  V            PIC 9 VALUE 0.
       01  W            PIC 9 VALUE 1.
       PROCEDURE        DIVISION.
           IF V IS ZERO
              DISPLAY "V IS ZERO"
           END-IF.
           IF V IS ZERO AND W EQUAL 1
              DISPLAY "V IS ZERO AND W EQUAL 1"
           END-IF.
           IF W EQUAL 1 AND V IS ZERO
              DISPLAY "W EQUAL 1 AND V IS ZERO"
           END-IF.
           IF W IS POSITIVE
              DISPLAY "W IS POSITIVE"
           END-IF.
           IF W IS NEGATIVE
              DISPLAY "W IS NEGATIVE"
           END-IF.
           IF W IS POSITIVE AND V EQUAL 0
              DISPLAY "W IS POSITIVE AND V EQUAL 0"
           END-IF.
           IF V EQUAL 0 AND W IS POSITIVE
              DISPLAY "V EQUAL 0 AND W IS POSITIVE"
           END-IF.
])

AT_CHECK([$COMPILE prog.cob], [0], [],
[prog.cob:21: warning: unsigned 'W' may not be LESS THAN ZERO
])

AT_CHECK([./prog], [0], [V IS ZERO
V IS ZERO AND W EQUAL 1
W EQUAL 1 AND V IS ZERO
W IS POSITIVE
W IS POSITIVE AND V EQUAL 0
V EQUAL 0 AND W IS POSITIVE
], [])

AT_CLEANUP


AT_SETUP([abbreviated conditions with multiple words operators])
AT_KEYWORDS([fundamental IF])

# for more details see bug #880

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    CHECKBOOL.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  VAR1                    PIC X(16) VALUE "#0001".
       01  VAR2                    PIC X(16) VALUE "#0002".
       01  VAR3                    PIC X(16) VALUE "#0003".
       01  VAR4                    PIC X(16) VALUE "#0004".
       PROCEDURE DIVISION.
       MAIN-PROGRAM SECTION.
       INIZIO.
           IF VAR1 = (VAR2 AND VAR3 AND VAR4)
              DISPLAY "TRUE 1"
           END-IF
           IF VAR1 NOT = (VAR2 AND VAR3 AND VAR4)
              DISPLAY "TRUE 2"
           END-IF
           IF VAR1 NOT > (VAR2 AND VAR3 AND VAR4)
              DISPLAY "TRUE 3"
           END-IF
           GOBACK.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([./prog], [0], [TRUE 2
TRUE 3
], [])

AT_CLEANUP


AT_SETUP([abbreviated conditions with multiple words operators])
AT_KEYWORDS([fundamental IF])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    CHECKCOND.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  VAR1                    PIC X.
                88 VAR1-K VALUE 'K'
       01  VAR2                    PIC X.
                88 VAR2-K VALUE 'K'

       PROCEDURE DIVISION.
       MAIN-PROGRAM SECTION.
       BUG.
           IF VAR1-K AND NOT = VAR2-K
              DISPLAY "INVALID" UPON STDERR.
           GOBACK.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:8: error: syntax error, unexpected Identifier
])

AT_CLEANUP


AT_SETUP([MOVE with JUSTIFIED clause])
AT_KEYWORDS([fundamental RIGHT])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. JUST00.

       DATA DIVISION.
       WORKING-STORAGE SECTION.

       77  ELE                         PIC X(10) JUSTIFIED RIGHT.
       77  SHORT                       PIC X(4)  VALUE 'ABC '.
       77  LONG                        PIC X(16)
               VALUE 'ABCDEFGHIGKLMNOP'.

       PROCEDURE DIVISION.
           MOVE 'ABC '                 TO ELE
           IF ELE NOT EQUAL '      ABC '
               DISPLAY 'MOVE WITH SHORT FIELD JUSTIFIED HAS FAILED: '
               '"' ELE '"'.

           MOVE 'ABCDEFGHIGKLMNOP'     TO ELE
           IF ELE NOT EQUAL 'GHIGKLMNOP'
               DISPLAY 'MOVE WITH LONG FIELD JUSTIFIED HAS FAILED: '
               '"' ELE '"'.

           MOVE SHORT                  TO ELE
           IF ELE NOT EQUAL '      ABC '
               DISPLAY 'MOVE WITH SHORT FIELD JUSTIFIED HAS FAILED: '
               '"' ELE '"'.

           MOVE LONG                   TO ELE
           IF ELE NOT EQUAL 'GHIGKLMNOP'
               DISPLAY 'MOVE WITH LONG FIELD JUSTIFIED HAS FAILED: '
               '"' ELE '"'.

           STOP RUN.
])

AT_CHECK([$COMPILE -Wno-truncate prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([MOVE with PICTURE P])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. Move_Basic_P_Pic .
      *>----------------------------------------------------------------
      *>           Additional test cases for MOVE statement
      *> Basic checking of P Picture
      *>   -check lengt content and move
      *>----------------------------------------------------------------
      *>
       DATA DIVISION.
       WORKING-STORAGE SECTION.
      *>
       01 P-PIC-1       PIC 99P(4)    .
       01 P-PIC-1-9 REDEFINES P-PIC-1  PIC 9(02)  .
       01 FLD-1         PIC 9(06)     .
       01 FLD-1-RES     PIC 9(06)                 .
      *>
       01 P-PIC-2       PIC S99P(4)   .
       01 P-PIC-2-9 REDEFINES P-PIC-2  PIC S9(02)  .
       01 FLD-2         PIC S9(06)    .
       01 FLD-2-RES     PIC S9(06)    .
      *>
       01 P-PIC-3       PIC P(4)9     .
       01 P-PIC-3-9 REDEFINES P-PIC-3  PIC 9(01)  .
       01 FLD-3         PIC V9(05)    .
       01 FLD-3-RES     PIC V9(05)    .
      *>
       01 P-PIC-4       PIC SP(4)9    .
       01 P-PIC-4-9 REDEFINES P-PIC-4  PIC S9(01)  .
       01 FLD-4         PIC SV9(05)   .
       01 FLD-4-RES     PIC SV9(05)    .
      *>
       01 W01-I         PIC 9(02)     .
      *>
       PROCEDURE DIVISION .
      *>
      *>   Check Length
      *>
           PERFORM CHECK-LENGTH .
      *>
           PERFORM CHECK-CONTENT.
      *>
           PERFORM CHECK-MOVE   .
      *>
           GOBACK .
      *>
       CHECK-CONTENT.
      *>------------
      *>
           MOVE    123456  TO P-PIC-1      .
           IF P-PIC-1-9 NOT = 12
           THEN
                   DISPLAY 'Error C1 VALUE <' P-PIC-1-9 '> != 12' .
      *>
           MOVE    345678  TO P-PIC-2      .
           IF P-PIC-2-9 NOT = 34
           THEN
                   DISPLAY 'Error C2 VALUE <' P-PIC-2-9 '> != 34' .
      *>
           MOVE   -456789  TO P-PIC-2      .
           IF P-PIC-2-9 NOT = -45
           THEN
                   DISPLAY 'Error C3 VALUE <' P-PIC-2-9 '> != -45' .
      *>
           MOVE   0.12345  TO P-PIC-3      .
           IF P-PIC-3-9 NOT = 5
           THEN
                   DISPLAY 'Error C4 VALUE <' P-PIC-3-9 '> != 5' .
      *>
           MOVE   0.56789  TO P-PIC-4      .
           IF P-PIC-4-9 NOT = 9
           THEN
                   DISPLAY 'Error C5 VALUE <' P-PIC-4-9 '> != 9' .
      *>
           MOVE  -0.34567  TO P-PIC-4      .
           IF P-PIC-4-9 NOT = -7
           THEN
                   DISPLAY 'Error C6 VALUE <' P-PIC-4-9 '> != -7' .
      *>
       CHECK-MOVE .
      *>----------
      *>
           MOVE    123456  TO P-PIC-1      .
           MOVE    P-PIC-1 TO FLD-1        .
           MOVE    120000  TO FLD-1-RES    .
           IF FLD-1 NOT = FLD-1-RES
           THEN
               DISPLAY 'M1 <' FLD-1-RES '> != ' FLD-1 .
      *>
           MOVE    001234  TO P-PIC-1      .
           MOVE    P-PIC-1 TO FLD-1        .
           MOVE    000000  TO FLD-1-RES    .
           IF FLD-1 NOT = FLD-1-RES
           THEN
               DISPLAY 'M2 <' FLD-1-RES '> != ' FLD-1 .
      *>-----------------------------------
           MOVE    001234  TO P-PIC-2      .
           MOVE    P-PIC-2 TO FLD-2        .
           MOVE    000000  TO FLD-2-RES    .
           IF FLD-2 NOT = FLD-2-RES
           THEN
               DISPLAY 'M3 <' FLD-2-RES '> != ' FLD-2 .
      *>
           MOVE   -005678  TO P-PIC-2      .
           MOVE    P-PIC-2 TO FLD-2        .
           MOVE    000000  TO FLD-2-RES    .
           IF FLD-2 NOT = FLD-2-RES
           THEN
               DISPLAY 'M4 <' FLD-2-RES '> != ' FLD-2 .
      *>
           MOVE    456789  TO P-PIC-2      .
           MOVE    P-PIC-2 TO FLD-2        .
           MOVE    450000  TO FLD-2-RES    .
           IF FLD-2 NOT = FLD-2-RES
           THEN
               DISPLAY 'M5 <' FLD-2-RES '> != ' FLD-2 .
      *>
           MOVE   -456789  TO P-PIC-2      .
           MOVE    P-PIC-2 TO FLD-2        .
           MOVE   -450000  TO FLD-2-RES    .
           IF FLD-2 NOT = FLD-2-RES
           THEN
               DISPLAY 'M6 <' FLD-2-RES '> != ' FLD-2 .
      *>-----------------------------------
           MOVE   0.12345  TO P-PIC-3      .
           MOVE    P-PIC-3 TO FLD-3        .
           MOVE   0.00005  TO FLD-3-RES    .
           IF FLD-3 NOT = FLD-3-RES
           THEN
               DISPLAY 'M7 <' FLD-3-RES '> != ' FLD-3 .
      *>
           MOVE   0.00010  TO P-PIC-3      .
           MOVE    P-PIC-3 TO FLD-3        .
           MOVE   0.00000  TO FLD-3-RES    .
           IF FLD-3 NOT = FLD-3-RES
           THEN
               DISPLAY 'M8 <' FLD-3-RES '> != ' FLD-3 .
      *>
      *>-----------------------------------
      *>
           MOVE   0.23456  TO P-PIC-4      .
           MOVE    P-PIC-4 TO FLD-4        .
           MOVE   0.00006  TO FLD-4-RES    .
           IF FLD-4 NOT = FLD-4-RES
           THEN
               DISPLAY 'M9 <' FLD-4-RES '> != ' FLD-4 .
      *>
           MOVE   0.02340  TO P-PIC-4      .
           MOVE    P-PIC-4 TO FLD-4        .
           MOVE   0.00000  TO FLD-4-RES    .
           IF FLD-4 NOT = FLD-4-RES
           THEN
               DISPLAY 'M10 <' FLD-4-RES '> != ' FLD-4 .
      *>
           MOVE  -0.12345  TO P-PIC-4      .
           MOVE    P-PIC-4 TO FLD-4        .
           MOVE  -0.00005  TO FLD-4-RES    .
           IF FLD-4 NOT = FLD-4-RES
           THEN
               DISPLAY 'M11 <' FLD-4-RES '> != ' FLD-4 .
      *>
           MOVE  -0.34560  TO P-PIC-4      .
           MOVE    P-PIC-4 TO FLD-4        .
           MOVE   0.00000  TO FLD-4-RES    .
           IF FLD-4 NOT = FLD-4-RES
           THEN
               DISPLAY 'M11 <' FLD-4-RES '> != ' FLD-4 .
      *>
      *>-----------------------------------
      *>
       CHECK-LENGTH.
      *>-----------
      *>
           MOVE LENGTH OF P-PIC-1 TO W01-I .
           IF W01-I NOT = 2
           THEN
               DISPLAY 'Error 1 size <' W01-I '> !=2' .
      *>
           MOVE LENGTH OF P-PIC-2 TO W01-I .
           IF W01-I NOT = 2
           THEN
               DISPLAY 'Error 2 size <' W01-I '> !=2' .
      *>
           MOVE LENGTH OF P-PIC-3 TO W01-I .
           IF W01-I NOT = 1
           THEN
               DISPLAY 'Error 3 size <' W01-I '> !=1' .
      *>

           MOVE LENGTH OF P-PIC-4 TO W01-I .
           IF W01-I NOT = 1
           THEN
               DISPLAY 'Error 4 size <' W01-I '> !=1' .
])

AT_CHECK([$COMPILE -Wno-truncate prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([MOVE with de-editting to USAGE DISPLAY])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. MoveDeEditing.
      *>----------------------------------------------------------------
      *>           Additional test cases for MOVE statement
      *> CHECK DE-EDITING
      *>    Receiving field is NUMERIC DISPLAY Type
      *>----------------------------------------------------------------
      *>
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  EDIT-1               PIC $(4)9.99CR.
       01  DISP-1               PIC S9(4)V99.
       01  EDIT-2               PIC --9B.99B99/99.
       01  DISP-2               PIC S99V9(6).


       PROCEDURE DIVISION .

           MOVE -123.45 TO EDIT-1       .
           MOVE  EDIT-1 TO DISP-1       .
           IF    DISP-1 NOT = -123.45
           THEN
                 DISPLAY 'Error 1: DISP-1 <' DISP-1 '> != -0123.45' .

           IF    EDIT-1 NOT = " $123.45CR"
           THEN
                 DISPLAY 'Error 2: EDIT-1 <' EDIT-1 '> != < $123.45CR>'.

           MOVE -42.9876 TO EDIT-2.
           MOVE  EDIT-2 TO DISP-2.
           IF    DISP-2 NOT = -42.987600
           THEN
              DISPLAY 'Error 3: DISP-2 <' DISP-2 '> != <-42.987600>'.

           IF   EDIT-2 NOT = "-42 .98 76/00"
           THEN
              DISPLAY 'Error 4: EDIT-2 <' EDIT-2 '> != <-42 .98 76/00>'.


           GOBACK .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([MOVE with de-editting to DECIMAL IS COMMA])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. MoveDeEditing_2 .
      *>----------------------------------------------------------------
      *>           Additional test cases for MOVE statement
      *> CHECK DE-EDITING WITH DECIMAL-POINT IS COMMA
      *>     Receiving fied is display type
      *>----------------------------------------------------------------
      *>

       ENVIRONMENT DIVISION .
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT    IS COMMA.
       DATA DIVISION.

       WORKING-STORAGE SECTION.
       01  EDIT-1               PIC $(4)9,99CR.
       01  DISP-1               PIC S9(4)V99.
       01  EDIT-2               PIC --9B,99B99/99.
       01  DISP-2               PIC S99V9(6).


       PROCEDURE DIVISION .

           MOVE -123,45 TO EDIT-1       .
           MOVE  EDIT-1 TO DISP-1       .
           IF    DISP-1 NOT = -123,45
           THEN
                 DISPLAY 'Error 1: DISP-1 <' DISP-1 '> != -0123,45' .

           IF    EDIT-1 NOT = " $123,45CR"
           THEN
                 DISPLAY 'Error 2: EDIT-1 <' EDIT-1 '> != < $123,45CR>'.

           MOVE -42,9876 TO EDIT-2.
           MOVE  EDIT-2 TO DISP-2.
           IF    DISP-2 NOT = -42,987600
           THEN
              DISPLAY 'Error 3: DISP-2 <' DISP-2 '> != <-42,987600>'.

           IF   EDIT-2 NOT = "-42 ,98 76/00"
           THEN
              DISPLAY 'Error 4: EDIT-2 <' EDIT-2 '> != <-42 ,98 76/00>'.


           GOBACK .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([MOVE with de-editting to BINARY])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. MoveDeEditing_3.
       DATA DIVISION.
      *>----------------------------------------------------------------
      *>           Additional test cases for MOVE statement
      *> CHECK DE-EDITING
      *>     Receiving fied is binary type
      *>----------------------------------------------------------------
       WORKING-STORAGE SECTION.
       01  EDIT-1               PIC $(4)9.99CR.
       01  DISP-1               PIC S9(4)V99 BINARY .
       01  EDIT-2               PIC --9B.99B99/99.
       01  DISP-2               PIC S99V9(6) BINARY .


       PROCEDURE DIVISION .

           MOVE -123.45 TO EDIT-1       .
           MOVE  EDIT-1 TO DISP-1       .
           IF    DISP-1 NOT = -123.45
           THEN
                 DISPLAY 'Error 1: DISP-1 <' DISP-1 '> != -0123.45' .

           IF    EDIT-1 NOT = " $123.45CR"
           THEN
                 DISPLAY 'Error 2: EDIT-1 <' EDIT-1 '> != < $123.45CR>'.

           MOVE -42.9876 TO EDIT-2.
           MOVE  EDIT-2 TO DISP-2.
           IF    DISP-2 NOT = -42.987600
           THEN
              DISPLAY 'Error 3: DISP-2 <' DISP-2 '> != <-42.987600>'.

           IF   EDIT-2 NOT = "-42 .98 76/00"
           THEN
              DISPLAY 'Error 4: EDIT-2 <' EDIT-2 '> != <-42 .98 76/00>'.


           GOBACK .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([MOVE with de-editting to COMP-3])
AT_KEYWORDS([fundamental PACKED-DECIMAL])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. MoveDeEditing_4.
      *>----------------------------------------------------------------
      *>           Additional test cases for MOVE statement
      *> CHECK DE-EDITING
      *>    Receiving field is PACKED Type
      *>----------------------------------------------------------------
      *>
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  EDIT-1               PIC $(4)9.99CR.
       01  DISP-1               PIC S9(4)V99 COMP-3 .
       01  EDIT-2               PIC --9B.99B99/99.
       01  DISP-2               PIC S99V9(6) COMP-3 .


       PROCEDURE DIVISION .

           MOVE -123.45 TO EDIT-1       .
           MOVE  EDIT-1 TO DISP-1       .
           IF    DISP-1 NOT = -123.45
           THEN
                 DISPLAY 'Error 1: DISP-1 <' DISP-1 '> != -0123.45' .

           IF    EDIT-1 NOT = " $123.45CR"
           THEN
                 DISPLAY 'Error 2: EDIT-1 <' EDIT-1 '> != < $123.45CR>'.

           MOVE -42.9876 TO EDIT-2.
           MOVE  EDIT-2 TO DISP-2.
           IF    DISP-2 NOT = -42.987600
           THEN
              DISPLAY 'Error 3: DISP-2 <' DISP-2 '> != <-42.987600>'.

           IF   EDIT-2 NOT = "-42 .98 76/00"
           THEN
              DISPLAY 'Error 4: EDIT-2 <' EDIT-2 '> != <-42 .98 76/00>'.


           GOBACK .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([MOVE with de-editting to COMP-5])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. MoveDeEditing_5.
      *>----------------------------------------------------------------
      *>           Additional test cases for MOVE statement
      *> CHECK DE-EDITING
      *>    Receiving field is COMP-5 Type
      *>----------------------------------------------------------------
      *>
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  EDIT-1               PIC $(4)9.99CR.
       01  DISP-1               PIC S9(4)V99 COMP-5 .
       01  EDIT-2               PIC --9B.99B99/99.
       01  DISP-2               PIC S99V9(6) COMP-5 .


       PROCEDURE DIVISION .

           MOVE -123.45 TO EDIT-1       .
           MOVE  EDIT-1 TO DISP-1       .
           IF    DISP-1 NOT = -123.45
           THEN
                 DISPLAY 'Error 1: DISP-1 <' DISP-1 '> != -0123.45' .

           IF    EDIT-1 NOT = " $123.45CR"
           THEN
                 DISPLAY 'Error 2: EDIT-1 <' EDIT-1 '> != < $123.45CR>'.

           MOVE -42.9876 TO EDIT-2.
           MOVE  EDIT-2 TO DISP-2.
           IF    DISP-2 NOT = -42.987600
           THEN
              DISPLAY 'Error 3: DISP-2 <' DISP-2 '> != <-42.987600>'.

           IF   EDIT-2 NOT = "-42 .98 76/00"
           THEN
              DISPLAY 'Error 4: EDIT-2 <' EDIT-2 '> != <-42 .98 76/00>'.


           GOBACK .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([MOVE with de-editting to NUMERIC DISPLAY (2)])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID.  MoveEditedToDisplay.
      *>----------------------------------------------------------------
      *>           Additional test cases for MOVE statement
      *>   Add more test case for edited field
      *>----------------------------------------------------------------
      *>

        ENVIRONMENT DIVISION.

        DATA DIVISION.
        WORKING-STORAGE SECTION.

        01 EDITED-FIELD .


           05 SRC-FIELD-100   PIC +$ZZ9999900BB9   .
           05 SRC-FIELD-101   PIC -$ZZ9999900BB9   .
           05 SRC-FIELD-102   PIC  $ZZ9999900BB9CR .
           05 SRC-FIELD-103   PIC  $ZZ9999900BB9DB .
           05 SRC-FIELD-400   PIC +$**9999900BB9   .
           05 SRC-FIELD-401   PIC -$**9999900BB9   .
           05 SRC-FIELD-402   PIC  $**9999900BB9CR .
           05 SRC-FIELD-403   PIC  $**9999900BB9DB .
      *
        01 DST-FIELD.
           05 DST-FIELD-1     PIC 9(10)V9(04) .
           05 DST-FIELD-2     PIC S9(10)V9(04) .
      *
        PROCEDURE DIVISION.
      *>-------------------
      *>
           MOVE 12345      TO SRC-FIELD-100  .
           MOVE SRC-FIELD-100 TO DST-FIELD-1 .
           IF DST-FIELD-1 NOT = 1234005
              DISPLAY '1: DST-FIELD-1 <' DST-FIELD-1 '> != 1234005' .
      *>
           MOVE 23456      TO SRC-FIELD-101  .
           MOVE SRC-FIELD-101 TO DST-FIELD-1 .
           IF DST-FIELD-1 NOT = 2345006
              DISPLAY '2: DST-FIELD-1 <' DST-FIELD-1 '> != 2345006' .
      *>
           MOVE 34567      TO SRC-FIELD-102  .
           MOVE SRC-FIELD-102 TO DST-FIELD-1 .
           IF DST-FIELD-1 NOT = 3456007
              DISPLAY '3: DST-FIELD-1 <' DST-FIELD-1 '> != 3456007' .
      *>
           MOVE 45678      TO SRC-FIELD-103  .
           MOVE SRC-FIELD-103 TO DST-FIELD-1 .
           IF DST-FIELD-1 NOT = 4567008
              DISPLAY '4: DST-FIELD-1 <' DST-FIELD-1 '> != 4567008' .
      *>
      *>--------------------------------------------------------------
      *>
           MOVE -12345      TO SRC-FIELD-100  .
           MOVE SRC-FIELD-100 TO DST-FIELD-2 .
           IF DST-FIELD-2 NOT = 1234005
               DISPLAY '5: DST-FIELD-2 <' DST-FIELD-2 '> != 1234005' .
      *>
           MOVE -23456      TO SRC-FIELD-101  .
           MOVE SRC-FIELD-101 TO DST-FIELD-2 .
           IF DST-FIELD-2 NOT = -2345006
              DISPLAY '6: DST-FIELD-2 <' DST-FIELD-2 '> != -2345006' .
      *>
           MOVE -34567      TO SRC-FIELD-102  .
           MOVE SRC-FIELD-102 TO DST-FIELD-2 .
           IF DST-FIELD-2 NOT = -3456007
              DISPLAY '7: DST-FIELD-2 <' DST-FIELD-2 '> != -3456007' .
      *>
           MOVE -45678      TO SRC-FIELD-103  .
           MOVE SRC-FIELD-103 TO DST-FIELD-2 .
           IF DST-FIELD-2 NOT = 4567008
              DISPLAY '8: DST-FIELD-2 <' DST-FIELD-2 '> != 45676008' .
      *>
      *>--------------------------------------------------------------
      *>
           MOVE 12345      TO SRC-FIELD-400  .
           MOVE SRC-FIELD-400 TO DST-FIELD-1 .
           IF DST-FIELD-1 NOT = 1234005
              DISPLAY '9: DST-FIELD-1 <' DST-FIELD-1 '> != 1234005' .
      *>
           MOVE 23456      TO SRC-FIELD-401  .
           MOVE SRC-FIELD-401 TO DST-FIELD-1 .
           IF DST-FIELD-1 NOT = 2345006
              DISPLAY '10: DST-FIELD-1 <' DST-FIELD-1 '> != 2345006' .
      *>
           MOVE 34567      TO SRC-FIELD-402  .
           MOVE SRC-FIELD-402 TO DST-FIELD-1 .
           IF DST-FIELD-1 NOT = 3456007
              DISPLAY '11: DST-FIELD-1 <' DST-FIELD-1 '> != 3456007' .
      *>
           MOVE 45678      TO SRC-FIELD-403  .
           MOVE SRC-FIELD-403 TO DST-FIELD-1 .
           IF DST-FIELD-1 NOT = 4567008
              DISPLAY '12: DST-FIELD-1 <' DST-FIELD-1 '1 != 45676008' .
      *>
           MOVE -12345     TO SRC-FIELD-400  .
           MOVE SRC-FIELD-400 TO DST-FIELD-2 .
           IF DST-FIELD-2 NOT = 1234005
              DISPLAY '13: DST-FIELD-2 <' DST-FIELD-2 '> != 1234005' .
      *>
           MOVE -23456      TO SRC-FIELD-401  .
           MOVE SRC-FIELD-401 TO DST-FIELD-2 .
           IF DST-FIELD-2 NOT = -2345006
              DISPLAY '14: DST-FIELD-2 <' DST-FIELD-2 '> != -2345006' .
      *>
           MOVE -34567      TO SRC-FIELD-402  .
           MOVE SRC-FIELD-402 TO DST-FIELD-2 .
           IF DST-FIELD-2 NOT = -3456007
              DISPLAY '15: DST-FIELD-2 <' DST-FIELD-2 '> != -3456007' .
      *>
           MOVE -45678      TO SRC-FIELD-403  .
           MOVE SRC-FIELD-403 TO DST-FIELD-2 .
           IF DST-FIELD-2 NOT = 4567008
              DISPLAY '16: DST-FIELD-2 <' DST-FIELD-2 '> != 4567008' .
      *>
           GOBACK .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([MOVE misc. edited])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID . MoveOtherCases .
      *>----------------------------------------------------------------
      *>           Additional test cases for MOVE statement
      *> Last several specifics test cases
      *>----------------------------------------------------------------
      *>
       ENVIRONMENT DIVISION.
      *>-------------

       DATA DIVISION .
      *>--------------

       WORKING-STORAGE SECTION.
      *>-----------------------

       01  SRC-BIN        PIC S9(09) BINARY .
       01  DST-BIN        PIC  9(09) BINARY .
      *>
       01  SRC-EDIT       PIC $$$$,$$9V99-  .
       01  DST-DISP       PIC  9(06)        .
      *>
       01  DST-FIELD-1    PIC XB0XB099/ .

      *>
       PROCEDURE DIVISION .
      *>-------------------
      *>
      *>   Case 1 move unsigned to signed
      *>
           MOVE -12345678     TO SRC-BIN    .
           MOVE SRC-BIN       TO DST-BIN    .
           IF DST-BIN NOT = 12345678
           THEN
               DISPLAY '1: DST-BIN <' DST-BIN '>!= <12345678>'  .

      *>
      *>   Case 2 move negative edited to display
      *>
           MOVE -3            TO SRC-EDIT .
           MOVE SRC-EDIT      TO DST-DISP .
           IF SRC-EDIT NOT = '      $300-'
           THEN
             DISPLAY '2: SRC-EDIT <' SRC-EDIT '> != <      $300->'  .
      *>
           IF DST-DISP NOT = 3
           THEN
             DISPLAY '2.1: DST-DISP <' DST-DISP '> != <3>'  .


      *>
      *>   Case 3 cob_move alphanum to  edited case
      *>
           MOVE 3          TO SRC-EDIT     .
           MOVE SRC-EDIT   TO DST-FIELD-1  .

           IF DST-FIELD-1 NOT = '  0  0  /'
           THEN
             DISPLAY '3: DST-FIELD-1 <' DST-FIELD-1 '> != <  0  0  />'.

      *>
           GOBACK .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([MOVE between USAGEs])
AT_KEYWORDS([fundamental COMP-1 COMP-2 COMP-3
COMP-4 COMP-5 COMP-6 DISPLAY BINARY PACKED-DECIMAL
BINARY-C-LONG BINARY-CHAR BINARY-DOUBLE BINARY-INT
BINARY-LONG SIGNED UNSIGNED BINARY-LONG-LONG 
BINARY-SHORT FLOAT-DECIMAL-16 FLOAT-DECIMAL-34
FLOAT-SHORT SIGNED-INT SIGNED-LONG SIGNED-SHORT
UNSIGNED-INT UNSIGNED-LONG UNSIGNED-SHORT])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID . MoveTestCobMove .
      *>----------------------------------------------------------------
      *> This programm cover the cob_move function for numeric
      *> data types except numeric edited
      *>----------------------------------------------------------------
      *>
       ENVIRONMENT DIVISION.
       DATA DIVISION .
       WORKING-STORAGE  SECTION.

       01 ALL-SRC .
          05 FIELD-02 BINARY-C-LONG  SIGNED  .
          05 FIELD-03 BINARY-C-LONG UNSIGNED .
          05 FIELD-04 BINARY-CHAR  SIGNED  .
          05 FIELD-05 BINARY-CHAR UNSIGNED .
          05 FIELD-06 BINARY-DOUBLE  SIGNED  .
          05 FIELD-07 BINARY-DOUBLE UNSIGNED .
          05 FIELD-08 BINARY-INT .
          05 FIELD-09 BINARY-LONG  SIGNED  .
          05 FIELD-10 BINARY-LONG UNSIGNED .
          05 FIELD-11 BINARY-LONG-LONG .
          05 FIELD-12 BINARY-SHORT  SIGNED  .
          05 FIELD-13 BINARY-SHORT UNSIGNED .
          05 FIELD-14 FLOAT-DECIMAL-16 .
          05 FIELD-15 FLOAT-DECIMAL-34 .
          05 FIELD-16 FLOAT-LONG .
          05 FIELD-17 FLOAT-SHORT .
          05 FIELD-18 SIGNED-INT .
          05 FIELD-19 SIGNED-LONG .
          05 FIELD-20 SIGNED-SHORT .
          05 FIELD-21 UNSIGNED-INT .
          05 FIELD-22 UNSIGNED-LONG .
          05 FIELD-23 UNSIGNED-SHORT .
          05 FIELD-24            COMP-1 .
          05 FIELD-25            COMP-2 .
          05 FIELD-26 PIC  9(10) COMP-6 .
          05 FIELD-50 PIC S9(09) BINARY            .
          05 FIELD-51 PIC S9(09) COMP .
          05 FIELD-52 PIC S9(09)V99 COMP-3 .
          05 FIELD-53 PIC S9(09) COMP-4 .
          05 FIELD-54 PIC S9(09) COMP-5 .
          05 FIELD-55 PIC S9(09) COMP-X .
          05 FIELD-56 PIC S9(09)V99 DISPLAY .
      *>
       01 EXPTD-RESULT PIC 9(09)     .
      *>
       01 ALL-DST .
          05 FIELD-02 BINARY-C-LONG  SIGNED  .
          05 FIELD-03 BINARY-C-LONG UNSIGNED .
          05 FIELD-04 BINARY-CHAR  SIGNED  .
          05 FIELD-05 BINARY-CHAR UNSIGNED .
          05 FIELD-06 BINARY-DOUBLE  SIGNED  .
          05 FIELD-07 BINARY-DOUBLE UNSIGNED .
          05 FIELD-08 BINARY-INT .
          05 FIELD-09 BINARY-LONG  SIGNED  .
          05 FIELD-10 BINARY-LONG UNSIGNED .
          05 FIELD-11 BINARY-LONG-LONG .
          05 FIELD-12 BINARY-SHORT  SIGNED  .
          05 FIELD-13 BINARY-SHORT UNSIGNED .
          05 FIELD-14 FLOAT-DECIMAL-16 .
          05 FIELD-15 FLOAT-DECIMAL-34 .
          05 FIELD-16 FLOAT-LONG .
          05 FIELD-17 FLOAT-SHORT .
          05 FIELD-18 SIGNED-INT .
          05 FIELD-19 SIGNED-LONG .
          05 FIELD-20 SIGNED-SHORT .
          05 FIELD-21 UNSIGNED-INT .
          05 FIELD-22 UNSIGNED-LONG .
          05 FIELD-23 UNSIGNED-SHORT .
          05 FIELD-24            COMP-1 .
          05 FIELD-25            COMP-2 .
          05 FIELD-26 PIC 9(10)  COMP-6 .
          05 FIELD-50 PIC S9(09) BINARY            .
          05 FIELD-51 PIC S9(09) COMP .
          05 FIELD-52 PIC S9(09)V99 COMP-3 .
          05 FIELD-53 PIC S9(09) COMP-4 .
          05 FIELD-54 PIC S9(09) COMP-5 .
          05 FIELD-55 PIC S9(09) COMP-X .
          05 FIELD-56 PIC S9(09)V99 DISPLAY .

      *>
       PROCEDURE DIVISION .
      *>
           INITIALIZE ALL-SRC REPLACING NUMERIC BY 1 .
           PERFORM TEST-PASS-1 .
      *>
           INITIALIZE ALL-DST REPLACING NUMERIC BY 2 .
           PERFORM TEST-PASS-2 .
      *>
           MOVE  3        TO FIELD-02 OF ALL-SRC .
           MOVE  3        TO EXPTD-RESULT        .
           MOVE  FIELD-02 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  4        TO FIELD-03 OF ALL-SRC .
           MOVE  4        TO EXPTD-RESULT        .
           MOVE  FIELD-03 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  5        TO FIELD-04 OF ALL-SRC .
           MOVE  5        TO EXPTD-RESULT        .
           MOVE  FIELD-04 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  6        TO FIELD-05 OF ALL-SRC .
           MOVE  6        TO EXPTD-RESULT        .
           MOVE  FIELD-05 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  7        TO FIELD-06 OF ALL-SRC .
           MOVE  7        TO EXPTD-RESULT        .
           MOVE  FIELD-06 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  8        TO FIELD-07 OF ALL-SRC .
           MOVE  8        TO EXPTD-RESULT        .
           MOVE  FIELD-07 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  9        TO FIELD-08 OF ALL-SRC .
           MOVE  9        TO EXPTD-RESULT        .
           MOVE  FIELD-08 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  10       TO FIELD-09 OF ALL-SRC .
           MOVE  10       TO EXPTD-RESULT        .
           MOVE  FIELD-09 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  11       TO FIELD-10 OF ALL-SRC .
           MOVE  11       TO EXPTD-RESULT        .
           MOVE  FIELD-10 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  12       TO FIELD-11 OF ALL-SRC .
           MOVE  12       TO EXPTD-RESULT        .
           MOVE  FIELD-11 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  13       TO FIELD-12 OF ALL-SRC .
           MOVE  13       TO EXPTD-RESULT        .
           MOVE  FIELD-12 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  14       TO FIELD-13 OF ALL-SRC .
           MOVE  14       TO EXPTD-RESULT        .
           MOVE  FIELD-13 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  15       TO FIELD-14 OF ALL-SRC .
           MOVE  15       TO EXPTD-RESULT        .
           MOVE  FIELD-14 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  16       TO FIELD-15 OF ALL-SRC .
           MOVE  16       TO EXPTD-RESULT        .
           MOVE  FIELD-15 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  17       TO FIELD-16 OF ALL-SRC .
           MOVE  17       TO EXPTD-RESULT        .
           MOVE  FIELD-16 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  18       TO FIELD-17 OF ALL-SRC .
           MOVE  18       TO EXPTD-RESULT        .
           MOVE  FIELD-17 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  19       TO FIELD-18 OF ALL-SRC .
           MOVE  19       TO EXPTD-RESULT        .
           MOVE  FIELD-18 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  20       TO FIELD-19 OF ALL-SRC .
           MOVE  20       TO EXPTD-RESULT        .
           MOVE  FIELD-19 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  21       TO FIELD-20 OF ALL-SRC .
           MOVE  21       TO EXPTD-RESULT        .
           MOVE  FIELD-20 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  22       TO FIELD-21 OF ALL-SRC .
           MOVE  22       TO EXPTD-RESULT        .
           MOVE  FIELD-21 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  23       TO FIELD-22 OF ALL-SRC .
           MOVE  23       TO EXPTD-RESULT        .
           MOVE  FIELD-22 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  24       TO FIELD-23 OF ALL-SRC .
           MOVE  24       TO EXPTD-RESULT        .
           MOVE  FIELD-23 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  25       TO FIELD-24 OF ALL-SRC .
           MOVE  25       TO EXPTD-RESULT        .
           MOVE  FIELD-24 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  26       TO FIELD-25 OF ALL-SRC .
           MOVE  26       TO EXPTD-RESULT        .
           MOVE  FIELD-25 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  27       TO FIELD-26 OF ALL-SRC .
           MOVE  27       TO EXPTD-RESULT        .
           MOVE  FIELD-26 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  50       TO FIELD-50 OF ALL-SRC .
           MOVE  50       TO EXPTD-RESULT        .
           MOVE  FIELD-50 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  51       TO FIELD-51 OF ALL-SRC .
           MOVE  51       TO EXPTD-RESULT        .
           MOVE  FIELD-51 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  52       TO FIELD-52 OF ALL-SRC .
           MOVE  52       TO EXPTD-RESULT        .
           MOVE  FIELD-52 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  53       TO FIELD-53 OF ALL-SRC .
           MOVE  53       TO EXPTD-RESULT        .
           MOVE  FIELD-53 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  54       TO FIELD-54 OF ALL-SRC .
           MOVE  54       TO EXPTD-RESULT        .
           MOVE  FIELD-54 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  55       TO FIELD-55 OF ALL-SRC .
           MOVE  55       TO EXPTD-RESULT        .
           MOVE  FIELD-55 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           MOVE  56       TO FIELD-56 OF ALL-SRC .
           MOVE  56       TO EXPTD-RESULT        .
           MOVE  FIELD-56 OF ALL-SRC
             TO  FIELD-02 OF ALL-DST
                 FIELD-03 OF ALL-DST
                 FIELD-04 OF ALL-DST
                 FIELD-05 OF ALL-DST
                 FIELD-06 OF ALL-DST
                 FIELD-07 OF ALL-DST
                 FIELD-08 OF ALL-DST
                 FIELD-09 OF ALL-DST
                 FIELD-10 OF ALL-DST
                 FIELD-11 OF ALL-DST
                 FIELD-12 OF ALL-DST
                 FIELD-13 OF ALL-DST
                 FIELD-14 OF ALL-DST
                 FIELD-15 OF ALL-DST
                 FIELD-16 OF ALL-DST
                 FIELD-17 OF ALL-DST
                 FIELD-18 OF ALL-DST
                 FIELD-19 OF ALL-DST
                 FIELD-20 OF ALL-DST
                 FIELD-21 OF ALL-DST
                 FIELD-22 OF ALL-DST
                 FIELD-23 OF ALL-DST
                 FIELD-24 OF ALL-DST
                 FIELD-25 OF ALL-DST
                 FIELD-26 OF ALL-DST
                 FIELD-50 OF ALL-DST
                 FIELD-51 OF ALL-DST
                 FIELD-52 OF ALL-DST
                 FIELD-53 OF ALL-DST
                 FIELD-54 OF ALL-DST
                 FIELD-55 OF ALL-DST
                 FIELD-56 OF ALL-DST .
           PERFORM TEST-PASS-3        .
      *>
           GOBACK .
      *>
       TEST-PASS-1.
      *>----------
      *>
         IF FIELD-02 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-02 <' FIELD-02 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-03 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-03 <' FIELD-03 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-04 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-04 <' FIELD-04 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-05 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-05 <' FIELD-05 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-06 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-06 <' FIELD-06 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-07 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-07 <' FIELD-07 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-08 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-08 <' FIELD-08 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-09 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-09 <' FIELD-09 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-10 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-10 <' FIELD-10 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-11 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-11 <' FIELD-11 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-12 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-12 <' FIELD-12 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-13 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-13 <' FIELD-13 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-14 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-14 <' FIELD-14 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-15 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-15 <' FIELD-15 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-16 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-16 <' FIELD-16 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-17 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-17 <' FIELD-17 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-18 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-18 <' FIELD-18 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-19 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-19 <' FIELD-19 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-20 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-20 <' FIELD-20 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-21 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-21 <' FIELD-21 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-22 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-22 <' FIELD-22 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-23 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-23 <' FIELD-23 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-24 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-24 <' FIELD-24 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-25 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-25 <' FIELD-25 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-26 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-26 <' FIELD-26 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-50 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-50 <' FIELD-50 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-51 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-51 <' FIELD-51 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-52 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-52 <' FIELD-52 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-53 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-53 <' FIELD-52 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-54 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-54 <' FIELD-54 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-55 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-55 <' FIELD-55 OF
                ALL-SRC '> != 1' .
      *>
         IF FIELD-56 OF ALL-SRC    IS NOT = 1
            THEN
                DISPLAY 'PASS ONE: FIELD-56 <' FIELD-56 OF
                ALL-SRC '> != 1' .
      *>
       TEST-PASS-2.
      *>----------
      *>
         IF FIELD-02 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-02 <' FIELD-02 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-03 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-03 <' FIELD-03 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-04 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-04 <' FIELD-04 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-05 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-05 <' FIELD-05 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-06 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-06 <' FIELD-06 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-07 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-07 <' FIELD-07 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-08 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-08 <' FIELD-08 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-09 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-09 <' FIELD-09 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-10 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-10 <' FIELD-10 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-11 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-11 <' FIELD-11 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-12 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-12 <' FIELD-12 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-13 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-13 <' FIELD-13 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-14 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-14 <' FIELD-14 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-15 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-15 <' FIELD-15 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-16 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-16 <' FIELD-16 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-17 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-17 <' FIELD-17 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-18 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-18 <' FIELD-18 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-19 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-19 <' FIELD-19 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-20 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-20 <' FIELD-20 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-21 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-21 <' FIELD-21 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-22 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-22 <' FIELD-22 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-23 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-23 <' FIELD-23 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-24 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-24 <' FIELD-24 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-25 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-25 <' FIELD-25 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-26 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-26 <' FIELD-26 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-50 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-50 <' FIELD-50 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-51 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-51 <' FIELD-51 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-52 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-52 <' FIELD-52 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-53 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-53 <' FIELD-52 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-54 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-54 <' FIELD-54 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-55 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-55 <' FIELD-55 OF
                ALL-DST '> != 2' .
      *>
         IF FIELD-56 OF ALL-DST    IS NOT = 2
            THEN
                DISPLAY 'PASS TWO: FIELD-56 <' FIELD-56 OF
                ALL-DST '> != 2' .
      *>
       TEST-PASS-3.
      *>----------
      *>
         IF FIELD-02 OF ALL-DST    IS NOT =  EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-02 <' FIELD-02 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
      *>
         IF FIELD-03 OF ALL-DST    IS NOT = EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-03 <' FIELD-03 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
      *>
         IF FIELD-04 OF ALL-DST    IS NOT =  EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-04 <' FIELD-04 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .

      *>
         IF FIELD-05 OF ALL-DST    IS NOT = EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-05 <' FIELD-05 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
      *>
         IF FIELD-06 OF ALL-DST    IS NOT = EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-06 <' FIELD-06 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
      *>
         IF FIELD-07 OF ALL-DST    IS NOT = EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-07 <' FIELD-07 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
      *>
         IF FIELD-08 OF ALL-DST    IS NOT = EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-08 <' FIELD-08 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
      *>
         IF FIELD-09 OF ALL-DST    IS NOT = EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-09 <' FIELD-09 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
      *>
         IF FIELD-10 OF ALL-DST    IS NOT = EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-10 <' FIELD-10 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
      *>
         IF FIELD-11 OF ALL-DST    IS NOT = EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-11 <' FIELD-11 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
      *>
         IF FIELD-12 OF ALL-DST    IS NOT = EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-12 <' FIELD-12 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
      *>
         IF FIELD-13 OF ALL-DST    IS NOT = EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-13 <' FIELD-13 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
      *>
         IF FIELD-14 OF ALL-DST    IS NOT = EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-14 <' FIELD-14 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
      *>
         IF FIELD-15 OF ALL-DST    IS NOT = EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-15 <' FIELD-15 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
      *>
         IF FIELD-16 OF ALL-DST    IS NOT = EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-16 <' FIELD-16 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
      *>
         IF FIELD-17 OF ALL-DST    IS NOT = EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-17 <' FIELD-17 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
      *>
         IF FIELD-18 OF ALL-DST    IS NOT = EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-18 <' FIELD-18 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
      *>
         IF FIELD-19 OF ALL-DST    IS NOT = EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-19 <' FIELD-19 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
      *>
         IF FIELD-20 OF ALL-DST    IS NOT = EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-20 <' FIELD-20 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
      *>
         IF FIELD-21 OF ALL-DST    IS NOT = EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-21 <' FIELD-21 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
      *>
         IF FIELD-22 OF ALL-DST    IS NOT = EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-22 <' FIELD-22 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
      *>
         IF FIELD-23 OF ALL-DST    IS NOT = EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-23 <' FIELD-23 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
      *>
         IF FIELD-24 OF ALL-DST    IS NOT = EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-24 <' FIELD-24 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
      *>
         IF FIELD-25 OF ALL-DST    IS NOT = EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-25 <' FIELD-25 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
      *>
         IF FIELD-26 OF ALL-DST    IS NOT = EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-26 <' FIELD-26 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
      *>
         IF FIELD-50 OF ALL-DST    IS NOT = EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-50 <' FIELD-50 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
      *>
         IF FIELD-51 OF ALL-DST    IS NOT = EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-51 <' FIELD-51 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
      *>
         IF FIELD-52 OF ALL-DST    IS NOT = EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-52 <' FIELD-52 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
      *>
         IF FIELD-53 OF ALL-DST    IS NOT = EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-53 <' FIELD-52 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
      *>
         IF FIELD-54 OF ALL-DST    IS NOT = EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-54 <' FIELD-54 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
      *>
         IF FIELD-55 OF ALL-DST    IS NOT = EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-55 <' FIELD-55 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
      *>
         IF FIELD-56 OF ALL-DST    IS NOT = EXPTD-RESULT
            THEN
                DISPLAY 'PASS THREE: FIELD-56 <' FIELD-56 OF
                ALL-DST '> != <' EXPTD-RESULT '>' .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([MOVE to editted ZERO])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. MoveToEditedZero .
      *>----------------------------------------------------------------
      *>           Additional test cases for MOVE statement
      *> Move To Edited
      *>    Edited field contains only '*'  and sending field is ZERO
      *>----------------------------------------------------------------
      *>
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 DISP-1       PIC 999999  .
       01 EDIT-1       PIC ****** .
       01 EDIT-1-X     REDEFINES EDIT-1 PIC X(06) .

      *>
       PROCEDURE DIVISION .
      *>
           MOVE 111111 TO EDIT-1 *> avoid init by default
      *>
           MOVE ZEROES  TO DISP-1 .
           MOVE DISP-1  TO EDIT-1 .
           IF EDIT-1-X NOT = '******'
           THEN
               DISPLAY 'Error EDIT-1-X <' EDIT-1-X '> !=  <******>' .
      *>
      *>
           MOVE 123     TO DISP-1 .
           MOVE DISP-1  TO EDIT-1 .
           IF EDIT-1-X NOT = '***123'
           THEN
               DISPLAY 'Error EDIT-1-X <' EDIT-1-X '> !=  <***123>' .
      *>
           GOBACK .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([SPECIAL-NAMES CLASS])
AT_KEYWORDS([fundamental])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. TSTCLASS.

       ENVIRONMENT  DIVISION.
       CONFIGURATION SECTION .
       SPECIAL-NAMES         .
       CLASS HEXA IS '0' THRU '9'
                     'A' THRU 'F' .
       CLASS ODD   IS '1' '3' '5' '7' '9'   .

      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      *                                                               *
      *    NOTICE THAT THE VALUES SUPPLIED ARE NUMERIC LITERALS       *
      *    WHICH REPRESENT A VALUE WHICH IS 1 NUMBER HIGHER THAN      *
      *    THE HEX VALUES WHICH THEY REPRESENT. THIS IS BECAUSE       *
      *    THE ALLOWABLE VALUES ARE FROM 1 THROUGH 256.               *
      *                                                               *
      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

       CLASS EVEN  IS  49 51 53 55 57.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  ALPHA       PIC X(01)  .
       01  NUM-1       PIC 9(01)  .
      *>
       PROCEDURE DIVISION.
      *>
           MOVE '3' TO ALPHA .
           IF ALPHA IS HEXA
           THEN
               CONTINUE
           ELSE
               DISPLAY 'ERROR 1'
           END-IF.
      *>
           IF ALPHA IS ODD
           THEN
               CONTINUE
           ELSE
               DISPLAY 'ERROR 2'
           END-IF.
      *>
           MOVE  2  TO NUM-1
           IF NUM-1 IS EVEN
           THEN
               CONTINUE
           ELSE
               DISPLAY 'ERROR 3'
           END-IF.
      *>
           GOBACK  .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP
