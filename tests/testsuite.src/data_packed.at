## Copyright (C) 2003-2012, 2014-2016, 2018-2019, 2022 Free Software Foundation, Inc.
## Written by Keisuke Nishida, Roger While, Edward Hart, Simon Sobisch
## 
## This file is part of GnuCOBOL.
## 
## The GnuCOBOL compiler is free software: you can redistribute it
## and/or modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation, either version 3 of the
## License, or (at your option) any later version.
## 
## GnuCOBOL is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with GnuCOBOL.  If not, see <https://www.gnu.org/licenses/>.

### GnuCOBOL Test Suite

### PACKED-DECIMAL


# dump
AT_SETUP([PACKED-DECIMAL dump])
AT_KEYWORDS([packed])

AT_DATA([dump.c], [
#include <stdio.h>
#include <libcob.h>

COB_EXT_EXPORT int
dump (unsigned char *data)
{
  int i;
  for (i = 0; i < 10; i++)
    printf ("%02x", data[[i]]);
  puts ("");
  return 0;
}
])

sed -e 's/@USAGE@/PACKED-DECIMAL/' "${TEMPLATE}/numeric-dump.cob" > prog.cob

AT_CHECK([$COMPILE_MODULE dump.c], [0], [], [])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[1f202020202020202020
012f2020202020202020
123f2020202020202020
01234f20202020202020
12345f20202020202020
0123456f202020202020
1234567f202020202020
012345678f2020202020
123456789f2020202020
01234567890f20202020
12345678901f20202020
0123456789012f202020
1234567890123f202020
012345678901234f2020
123456789012345f2020
01234567890123456f20
12345678901234567f20
0123456789012345678f
1d202020202020202020
012d2020202020202020
123d2020202020202020
01234d20202020202020
12345d20202020202020
0123456d202020202020
1234567d202020202020
012345678d2020202020
123456789d2020202020
01234567890d20202020
12345678901d20202020
0123456789012d202020
1234567890123d202020
012345678901234d2020
123456789012345d2020
01234567890123456d20
12345678901234567d20
0123456789012345678d
0f202020202020202020
000f2020202020202020
000f2020202020202020
00000f20202020202020
00000f20202020202020
0000000f202020202020
0000000f202020202020
000000000f2020202020
000000000f2020202020
00000000000f20202020
00000000000f20202020
0000000000000f202020
0000000000000f202020
000000000000000f2020
000000000000000f2020
00000000000000000f20
00000000000000000f20
0000000000000000000f
0c202020202020202020
000c2020202020202020
000c2020202020202020
00000c20202020202020
00000c20202020202020
0000000c202020202020
0000000c202020202020
000000000c2020202020
000000000c2020202020
00000000000c20202020
00000000000c20202020
0000000000000c202020
0000000000000c202020
000000000000000c2020
000000000000000c2020
00000000000000000c20
00000000000000000c20
0000000000000000000c
0f202020202020202020
000f2020202020202020
000f2020202020202020
00000f20202020202020
00000f20202020202020
0000000f202020202020
0000000f202020202020
000000000f2020202020
000000000f2020202020
00000000000f20202020
00000000000f20202020
0000000000000f202020
0000000000000f202020
000000000000000f2020
000000000000000f2020
00000000000000000f20
00000000000000000f20
0000000000000000000f
0c202020202020202020
000c2020202020202020
000c2020202020202020
00000c20202020202020
00000c20202020202020
0000000c202020202020
0000000c202020202020
000000000c2020202020
000000000c2020202020
00000000000c20202020
00000000000c20202020
0000000000000c202020
0000000000000c202020
000000000000000c2020
000000000000000c2020
00000000000000000c20
00000000000000000c20
0000000000000000000c
])

AT_CLEANUP


AT_SETUP([PACKED-DECIMAL used with DISPLAY])
AT_KEYWORDS([packed])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-99          PIC 99   USAGE PACKED-DECIMAL.
       01 X-S99         PIC S99  USAGE PACKED-DECIMAL.
       01 X-999         PIC 999  USAGE PACKED-DECIMAL.
       01 X-S999        PIC S999 USAGE PACKED-DECIMAL.
       PROCEDURE        DIVISION.
           MOVE    0 TO X-99
           DISPLAY X-99.
           MOVE   99 TO X-99
           DISPLAY X-99.
           MOVE    0 TO X-S99
           DISPLAY X-S99.
           MOVE   -1 TO X-S99
           DISPLAY X-S99.
           MOVE    0 TO X-999
           DISPLAY X-999.
           MOVE  123 TO X-999
           DISPLAY X-999.
           MOVE    0 TO X-S999
           DISPLAY X-S999.
           MOVE -123 TO X-S999
           DISPLAY X-S999.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[00
99
+00
-01
000
123
+000
-123
])

AT_CLEANUP


AT_SETUP([PACKED-DECIMAL used with MOVE])
AT_KEYWORDS([packed DISPLAY])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-99          PIC 99   USAGE PACKED-DECIMAL.
       01 X-S99         PIC S99  USAGE PACKED-DECIMAL.
       01 X-999         PIC 999  USAGE PACKED-DECIMAL.
       01 X-S999        PIC S999 USAGE PACKED-DECIMAL.
       01 C-P1234       PIC 9999  VALUE 1234.
       01 C-N1234       PIC S9999 VALUE -1234.
       PROCEDURE        DIVISION.
           MOVE C-P1234 TO X-99
           DISPLAY X-99.
           MOVE C-P1234 TO X-S99
           DISPLAY X-S99.
           MOVE C-P1234 TO X-999
           DISPLAY X-999.
           MOVE C-P1234 TO X-S999
           DISPLAY X-S999.
           MOVE C-N1234 TO X-99
           DISPLAY X-99.
           MOVE C-N1234 TO X-S99
           DISPLAY X-S99.
           MOVE C-N1234 TO X-999
           DISPLAY X-999.
           MOVE C-N1234 TO X-S999
           DISPLAY X-S999.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[34
+34
234
+234
34
-34
234
-234
])

AT_CLEANUP


AT_SETUP([PACKED-DECIMAL used with INITIALIZE])
AT_KEYWORDS([packed DISPLAY])

# also verifying the zero displays with size and sign

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-99          PIC 99   USAGE PACKED-DECIMAL.
       01 X-S99         PIC S99  USAGE PACKED-DECIMAL.
       01 X-999         PIC 999  USAGE PACKED-DECIMAL.
       01 X-S999        PIC S999 USAGE PACKED-DECIMAL.
       PROCEDURE        DIVISION.
           INITIALIZE X-99
           DISPLAY X-99.
           INITIALIZE X-S99
           DISPLAY X-S99.
           INITIALIZE X-999
           DISPLAY X-999.
           INITIALIZE X-S999
           DISPLAY X-S999.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[00
+00
000
+000
])

AT_CLEANUP


AT_SETUP([PACKED-DECIMAL arithmetic])
AT_KEYWORDS([packed])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC 99 USAGE PACKED-DECIMAL VALUE 0.
       01 Y             PIC 99 USAGE PACKED-DECIMAL VALUE 9.
       PROCEDURE        DIVISION.
           COMPUTE X = 1
           IF X <>  1 DISPLAY "01 <" X ">".
           COMPUTE X = Y
           IF X <>  9 DISPLAY "09 <" X ">".
           COMPUTE X = X + Y
           IF X <> 18 DISPLAY "18 <" X ">".
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([PACKED-DECIMAL numeric test (1)])
AT_KEYWORDS([packed])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X-2         PIC X(2).
         02 N-2         REDEFINES X-2 PIC 999  USAGE PACKED-DECIMAL.
         02 N-S2        REDEFINES X-2 PIC S999 USAGE PACKED-DECIMAL.
       PROCEDURE        DIVISION.
           MOVE X"0000" TO X-2.
           IF N-2  IS NUMERIC
              DISPLAY " 0000 NG".
           IF N-S2 IS NUMERIC
              DISPLAY "S0000 NG".

           MOVE X"000c" TO X-2.
           IF N-2  IS NUMERIC
              DISPLAY " 000c NG".
           IF N-S2 IS NOT NUMERIC
              DISPLAY "S000c NG".

           MOVE X"000d" TO X-2.
           IF N-2  IS NUMERIC
              DISPLAY " 000d NG".
           IF N-S2 IS NOT NUMERIC
              DISPLAY "S000d NG".

           MOVE X"000f" TO X-2.
           IF N-2  IS NOT NUMERIC
              DISPLAY " 000f NG".
           IF N-S2 IS NUMERIC
              DISPLAY "S000f NG".

           MOVE X"1234" TO X-2.
           IF N-2  IS NUMERIC
              DISPLAY " 1234 NG".
           IF N-S2 IS NUMERIC
              DISPLAY "S1234 NG".

           MOVE X"999f" TO X-2.
           IF N-2  IS NOT NUMERIC
              DISPLAY " 999f NG".
           IF N-S2 IS NUMERIC
              DISPLAY "S999f NG".

           MOVE X"ffff" TO X-2.
           IF N-2  IS NUMERIC
              DISPLAY " ffff NG".
           IF N-S2 IS NUMERIC
              DISPLAY "Sffff NG".

           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([PACKED-DECIMAL numeric test (2)])
AT_KEYWORDS([packed])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X-2         PIC X(2).
         02 N-2         REDEFINES X-2 PIC 999  USAGE PACKED-DECIMAL.
         02 N-S2        REDEFINES X-2 PIC S999 USAGE PACKED-DECIMAL.
       PROCEDURE        DIVISION.
           MOVE X"0000" TO X-2.
           IF N-2  IS NUMERIC
              DISPLAY " 0000 NG".
           IF N-S2 IS NUMERIC
              DISPLAY "S0000 NG".

           MOVE X"000c" TO X-2.
           IF N-2  IS NUMERIC
              DISPLAY " 000c NG".
           IF N-S2 IS NOT NUMERIC
              DISPLAY "S000c NG".

           MOVE X"000d" TO X-2.
           IF N-2  IS NUMERIC
              DISPLAY " 000d NG".
           IF N-S2 IS NOT NUMERIC
              DISPLAY "S000d NG".

           MOVE X"000f" TO X-2.
           IF N-2  IS NOT NUMERIC
              DISPLAY " 000f NG".
           IF N-S2 IS NOT NUMERIC
              DISPLAY "S000f NG".

           MOVE X"1234" TO X-2.
           IF N-2  IS NUMERIC
              DISPLAY " 1234 NG".
           IF N-S2 IS NUMERIC
              DISPLAY "S1234 NG".

           MOVE X"999f" TO X-2.
           IF N-2  IS NOT NUMERIC
              DISPLAY " 999f NG".
           IF N-S2 IS NOT NUMERIC
              DISPLAY "S999f NG".

           MOVE X"ffff" TO X-2.
           IF N-2  IS NUMERIC
              DISPLAY " ffff NG".
           IF N-S2 IS NUMERIC
              DISPLAY "Sffff NG".

           STOP RUN.
])

# TODO: Check what actual option is tested here
#       and directly use it
AT_CHECK([$COMPILE -std=ibm prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([COMP-6 used with DISPLAY])
AT_KEYWORDS([packed])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-99          PIC 99   USAGE COMP-6.
       01 X-999         PIC 999  USAGE COMP-6.
       PROCEDURE        DIVISION.
           MOVE    0 TO X-99
           DISPLAY X-99.
           MOVE   99 TO X-99
           DISPLAY X-99.
           MOVE    0 TO X-999
           DISPLAY X-999.
           MOVE  123 TO X-999
           DISPLAY X-999.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[00
99
000
123
], [])

AT_CLEANUP


AT_SETUP([COMP-6 used with MOVE])
AT_KEYWORDS([packed])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-99          PIC 99   USAGE COMP-6.
       01 X-999         PIC 999  USAGE COMP-6.
       01 B-99          USAGE BINARY-LONG.
       01 B-999         USAGE BINARY-LONG.
       PROCEDURE        DIVISION.
           MOVE     0 TO B-99
           MOVE  B-99 TO X-99
           IF  X-99 NOT =   0 DISPLAY  "00 <" X-99  ">".
           MOVE    99 TO B-99
           MOVE  B-99 TO X-99
           IF  X-99 NOT =  99 DISPLAY  "99 <" X-99  ">".
           MOVE    0  TO B-999
           MOVE B-999 TO X-999
           IF X-999 NOT =   0 DISPLAY "000 <" X-999 ">".
           MOVE  123  TO B-999
           MOVE B-999 TO X-999
           IF X-999 NOT = 123 DISPLAY "123 <" X-999 ">".
           MOVE B-999 TO X-99
           IF  X-99 NOT =  23 DISPLAY  "23 <" X-99  ">".
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([COMP-6 arithmetic])
AT_KEYWORDS([packed])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-99          PIC 99   USAGE COMP-6.
       01 X-999         PIC 999  USAGE COMP-6.
       01 B-99          USAGE BINARY-LONG UNSIGNED VALUE 99.
       01 B-999         USAGE BINARY-LONG UNSIGNED VALUE 123.
       PROCEDURE        DIVISION.
           MOVE B-99  TO X-99
           MOVE B-999 TO X-999
           ADD  X-99  X-999 GIVING B-99.
           IF B-99 <> 222 DISPLAY B-99.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([COMP-6 numeric])
AT_KEYWORDS([packed])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
          02 X-2         PIC X(2).
          02 N-3         REDEFINES X-2 PIC 999  USAGE COMP-6.
          02 N-4         REDEFINES X-2 PIC 9999 USAGE COMP-6.
       PROCEDURE        DIVISION.
           MOVE X"0000" TO X-2.
           IF N-3  IS NOT NUMERIC
              DISPLAY "3 0000 NG".
           IF N-4  IS NOT NUMERIC
              DISPLAY "4 0000 NG".

           MOVE X"000c" TO X-2.
           IF N-3  IS NUMERIC
              DISPLAY "3 000c NG".
           IF N-4  IS NUMERIC
              DISPLAY "4 000c NG".

           MOVE X"1234" TO X-2.
           IF N-3  IS NOT NUMERIC
              DISPLAY "3 1234 NG".
           IF N-4  IS NOT NUMERIC
              DISPLAY "4 1234 NG".

           MOVE X"ffff" TO X-2.
           IF N-3  IS NUMERIC
              DISPLAY "3 ffff NG".
           IF N-4  IS NUMERIC
              DISPLAY "4 ffff NG".

           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP

AT_SETUP([PPP COMP-3])
AT_KEYWORDS([PPP])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID. prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 XS.
         05 X-1  PIC 999PPP COMP-3  VALUE 91000.
         05 X-2  PIC 999PPP COMP-3  VALUE 92000.
         05 X-3  PIC X VALUE "$".
         05 X-4  PIC VPPP999 COMP-3 VALUE 0.000128.
       01 D-1    PIC 999PPP  COMP-3 VALUE 95000.
       01 D-2    PIC 9999PP  COMP-3 VALUE 193000.
       01  WRK-DS-LS-1P17-1 PIC S9P(17) SIGN LEADING SEPARATE
           CHARACTER VALUE  -100000000000000000.
       01  WRK-AE-3  PIC XBXXX/XXX/XXX/XXX/XXXBXX.
       01  MOVE72    PICTURE 9(10) VALUE 3344556677.
       01  MOVE73    PICTURE X(5)BA(10)0X.
       01  GRP-AE-0002.
           05  AE-0002             PICTURE XX0XXBXXX.
       PROCEDURE        DIVISION.
           MOVE    3344556677 TO MOVE72.
           MOVE    MOVE72 TO MOVE73.
           IF MOVE73 NOT EQUAL TO "33445 56677     0 "
              DISPLAY "MOVE X-EDIT failed: " MOVE73 ".".
           MOVE 019823 TO AE-0002.
           IF GRP-AE-0002 NOT EQUAL TO "01098 23 "
              DISPLAY "MOVE AE-EDIT failed: " GRP-AE-0002 ".".
           MOVE WRK-DS-LS-1P17-1 TO WRK-AE-3.
           DISPLAY "MOVE 1P17: " WRK-DS-LS-1P17-1 " : "
                      LENGTH OF WRK-DS-LS-1P17-1 ".".
           DISPLAY "MOVE A-E : " WRK-AE-3 ".".
           IF WRK-AE-3 NOT EQUAL TO "1 000/000/000/000/000 00"
             DISPLAY "MOVE 1P17 failed: " WRK-AE-3.
           DISPLAY "INIT X-1 : " X-1 " .".
           DISPLAY "INIT X-2 : " X-2 " .".
           DISPLAY "INIT X-4 : " X-4 " .".
           DISPLAY "INIT D-1 : " D-1 " .".
           MOVE D-1 TO X-2 X-1
           MOVE X-2 TO D-1.
           DISPLAY "MOVE X-1 : " X-1 " .".
           DISPLAY "MOVE X-2 : " X-2 " .".
           MOVE 0.000256 TO X-4
           DISPLAY "MOVE X-4 : " X-4 " .".
           DISPLAY "MOVE D-1 : " D-1 " .".
           MOVE D-2 TO X-2 X-1
           DISPLAY "MOVE X-1 : " X-1 ":" D-2 " .".
           DISPLAY "MOVE X-2 : " X-2 ":" D-2 " .".
           MOVE 98000   TO X-1.
           IF X-1 NOT = 98000
             DISPLAY "MOVE 98000 failed: " X-1.
           MOVE 98000   TO D-1
           IF D-1 NOT = 98000
             DISPLAY "MOVE 98000 failed: " D-1.
           ADD 1000 TO X-1
           IF X-1 NOT = 99000
             DISPLAY "+ 1000 failed: " X-1.
           SUBTRACT 4000 FROM X-1.
           IF X-1 NOT = 95000
             DISPLAY "- 4000 failed: " X-1.
           DIVIDE 3 INTO X-1.
           IF X-1 NOT = 31000
             DISPLAY "/ 3 failed: " X-1.
           MULTIPLY 2 BY X-1 GIVING X-1.
           IF X-1 NOT = 62000
             DISPLAY "* 2 failed: " X-1.
           STOP RUN.
])

AT_CHECK([$COBC -x -std=mf -w -fpretty-display -debug prog.cob ], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [MOVE 1P17: -100000000000000000 : 2.
MOVE A-E : 1 000/000/000/000/000 00.
INIT X-1 : 091000 .
INIT X-2 : 092000 .
INIT X-4 : .000128 .
INIT D-1 : 095000 .
MOVE X-1 : 095000 .
MOVE X-2 : 095000 .
MOVE X-4 : .000256 .
MOVE D-1 : 095000 .
MOVE X-1 : 193000:193000 .
MOVE X-2 : 193000:193000 .
], [])

AT_CLEANUP


AT_SETUP([PPP COMP-6])
AT_KEYWORDS([PPP])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID. prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 XS.
         05 X-1  PIC 999PPP COMP-6  VALUE 91000.
         05 X-2  PIC 999PPP COMP-6  VALUE 92000.
         05 X-3  PIC X VALUE "$".
         05 X-4  PIC VPPP999 COMP-6 VALUE 0.000128.
       01 D-1    PIC 999PPP  COMP-6 VALUE 95000.
       01 D-2    PIC 9999PP  COMP-6 VALUE 193000.
       PROCEDURE        DIVISION.
           DISPLAY "INIT X-1 : " X-1 " .".
           DISPLAY "INIT X-2 : " X-2 " .".
           DISPLAY "INIT X-4 : " X-4 " .".
           DISPLAY "INIT D-1 : " D-1 " .".
           MOVE D-1 TO X-2 X-1
           MOVE X-2 TO D-1.
           DISPLAY "MOVE X-1 : " X-1 " .".
           DISPLAY "MOVE X-2 : " X-2 " .".
           MOVE 0.000256 TO X-4
           DISPLAY "MOVE X-4 : " X-4 " .".
           DISPLAY "MOVE D-1 : " D-1 " .".
           MOVE D-2 TO X-2 X-1
           DISPLAY "MOVE X-1 : " X-1 ":" D-2 " .".
           DISPLAY "MOVE X-2 : " X-2 ":" D-2 " .".
           MOVE 98000   TO X-1.
           IF X-1 NOT = 98000
             DISPLAY "MOVE 98000 failed: " X-1.
           MOVE 98000   TO D-1
           IF D-1 NOT = 98000
             DISPLAY "MOVE 98000 failed: " D-1.
           ADD 1000 TO X-1
           IF X-1 NOT = 99000
             DISPLAY "+ 1000 failed: " X-1.
           SUBTRACT 4000 FROM X-1.
           IF X-1 NOT = 95000
             DISPLAY "- 4000 failed: " X-1.
           DIVIDE 3 INTO X-1.
           IF X-1 NOT = 31000
             DISPLAY "/ 3 failed: " X-1.
           MULTIPLY 2 BY X-1 GIVING X-1.
           IF X-1 NOT = 62000
             DISPLAY "* 2 failed: " X-1.             
           STOP RUN.
])

AT_CHECK([$COMPILE -std=mf -fpretty-display -debug prog.cob ], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [INIT X-1 : 091000 .
INIT X-2 : 092000 .
INIT X-4 : .000128 .
INIT D-1 : 095000 .
MOVE X-1 : 095000 .
MOVE X-2 : 095000 .
MOVE X-4 : .000256 .
MOVE D-1 : 095000 .
MOVE X-1 : 193000:193000 .
MOVE X-2 : 193000:193000 .
], [])

AT_CLEANUP


AT_SETUP([PPP COMP-5])
AT_KEYWORDS([PPP])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID. prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 XS.
         05 X-1  PIC 999PPP COMP-5  VALUE 91000.
         05 X-2  PIC 999PPP COMP-5  VALUE 92000.
         05 X-3  PIC X VALUE "$".
         05 X-4  PIC VPPP999 COMP-5 VALUE 0.000128.
       01 D-1    PIC 999PPP  COMP-5 VALUE 95000.
       01 D-2    PIC 9999PP  COMP-5 VALUE 193000.
       PROCEDURE        DIVISION.
           DISPLAY "INIT X-1 : " X-1 " .".
           DISPLAY "INIT X-2 : " X-2 " .".
           DISPLAY "INIT X-4 : " X-4 " .".
           DISPLAY "INIT D-1 : " D-1 " .".
           MOVE D-1 TO X-2 X-1
           MOVE X-2 TO D-1.
           DISPLAY "MOVE X-1 : " X-1 " .".
           DISPLAY "MOVE X-2 : " X-2 " .".
           MOVE 0.000256 TO X-4
           DISPLAY "MOVE X-4 : " X-4 " .".
           DISPLAY "MOVE D-1 : " D-1 " .".
           MOVE D-2 TO X-2 X-1
           DISPLAY "MOVE X-1 : " X-1 ":" D-2 " .".
           DISPLAY "MOVE X-2 : " X-2 ":" D-2 " .".
           MOVE 98000   TO X-1.
           IF X-1 NOT = 98000
             DISPLAY "MOVE 98000 failed: " X-1.
           MOVE 98000   TO D-1
           IF D-1 NOT = 98000
             DISPLAY "MOVE 98000 failed: " D-1.
           ADD 1000 TO X-1
           IF X-1 NOT = 99000
             DISPLAY "+ 1000 failed: " X-1.
           SUBTRACT 4000 FROM X-1.
           IF X-1 NOT = 95000
             DISPLAY "- 4000 failed: " X-1.
           DIVIDE 3 INTO X-1.
           IF X-1 NOT = 31000
             DISPLAY "/ 3 failed: " X-1.
           MULTIPLY 2 BY X-1 GIVING X-1.
           IF X-1 NOT = 62000
             DISPLAY "* 2 failed: " X-1.             
           STOP RUN.
])

AT_CHECK([$COMPILE -std=mf -fpretty-display -debug prog.cob ], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [INIT X-1 : 00091 .
INIT X-2 : 00092 .
INIT X-4 : 00128 .
INIT D-1 : 00095 .
MOVE X-1 : 00095 .
MOVE X-2 : 00095 .
MOVE X-4 : 00256 .
MOVE D-1 : 00095 .
MOVE X-1 : 00193:01930 .
MOVE X-2 : 00193:01930 .
], [])

AT_CLEANUP

