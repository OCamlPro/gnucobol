## Copyright (C) 2014-2024 Free Software Foundation, Inc.
## Written by Simon Sobisch, Brian Tiffin
##
## This file is part of GnuCOBOL.
##
## The GnuCOBOL compiler is free software: you can redistribute it
## and/or modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation, either version 3 of the
## License, or (at your option) any later version.
##
## GnuCOBOL is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with GnuCOBOL.  If not, see <https://www.gnu.org/licenses/>.

### GnuCOBOL Test Suite


## Note: cobc -c file / cobc --config=file
##  and  cobcrun -c file / cobcrun --config=file
##  are tested via configuration.at


AT_SETUP([compiler help and information])
AT_KEYWORDS([runmisc cobc])

# FIXME: check at least some parts of the output by using $GREP
AT_CHECK([$COBC --version], [0], [ignore], [])
AT_CHECK([$COBC -v --version], [0], [ignore], [ignore])
AT_CHECK([$COBC -q --version], [0], [ignore], [])
AT_CHECK([$COBC --help], [0], [ignore], [])
AT_CHECK([$COBC --info], [0], [ignore], [])
AT_CHECK([$COBC -v --info], [0], [ignore], [])
AT_CHECK([$COBC -q --info], [0], [ignore], [])
AT_CHECK([$COBC --list-reserved], [0], [ignore], [])
AT_CHECK([$COBC --list-registers], [0], [ignore], [])
AT_CHECK([$COBC --list-intrinsics], [0], [ignore], [])
AT_CHECK([$COBC --list-mnemonics], [0], [ignore], [])
AT_CHECK([$COBC -std=mf --list-reserved], [0], [ignore], [])
AT_CHECK([$COBC -std=acu --list-registers], [0], [ignore], [])
AT_CHECK([$COBC -std=cobol2002 --list-intrinsics], [0], [ignore], [])
AT_CHECK([$COBC -std=ibm --list-mnemonics], [0], [ignore], [])
AT_CHECK([$COBC --list-system], [0], [ignore], [])
AT_CHECK([$COBC --list-exceptions], [0], [ignore], [])
AT_CLEANUP


AT_SETUP([compiler warnings])
AT_KEYWORDS([runmisc cobc warning])

AT_DATA([prog.cob],[
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        77 var1    pic 9.
        77 var2    pic 99.
        PROCEDURE DIVISION.
        PERFORM UNTIL 0 = 1
           DISPLAY 'BLA'
        END-PERFORM.
        MOVE var1 to var2
        MOVE var2 to var1
        GOBACK.
])
AT_CHECK([$COBC -fsyntax-only prog.cob], [0], [], [])
# increasing to more warnings
AT_CHECK([$COBC -fsyntax-only -fdiagnostics-plain-output -Wadditional prog.cob], [0], [],
[prog.cob:9: warning: PERFORM FOREVER since UNTIL is always FALSE [[-Wadditional]]
])
AT_CHECK([$COBC -fsyntax-only -fdiagnostics-plain-output -fno-diagnostics-show-option -Wadditional prog.cob], [0], [],
[prog.cob:9: warning: PERFORM FOREVER since UNTIL is always FALSE
])
# which in this case is also included in -Wall
AT_CHECK([$COBC -fsyntax-only -fdiagnostics-plain-output -Wall prog.cob], [0], [],
[prog.cob:9: warning: expression '0' EQUALS '1' is always FALSE [[-Wconstant-numlit-expression]]
prog.cob:9: warning: PERFORM FOREVER since UNTIL is always FALSE [[-Wadditional]]
])
# -Wextra is more descriptive ...
AT_CHECK([$COBC -fsyntax-only -fdiagnostics-plain-output -Wextra prog.cob], [0], [],
[prog.cob:9: warning: expression '0' EQUALS '1' is always FALSE [[-Wconstant-numlit-expression]]
prog.cob:9: warning: PERFORM FOREVER since UNTIL is always FALSE [[-Wadditional]]
prog.cob:10: warning: DISPLAY statement not terminated by END-DISPLAY [[-Wterminator]]
prog.cob:13: warning: some digits may be truncated [[-Wpossible-truncate]]
prog.cob:7: note: 'var2' defined here as PIC 99 [[-Wpossible-truncate]]
prog.cob:6: note: 'var1' defined here as PIC 9 [[-Wpossible-truncate]]
])
# ... the old -W is in for backwards portability
AT_CHECK([$COBC -fsyntax-only -fdiagnostics-plain-output -W prog.cob], [0], [],
[prog.cob:9: warning: expression '0' EQUALS '1' is always FALSE [[-Wconstant-numlit-expression]]
prog.cob:9: warning: PERFORM FOREVER since UNTIL is always FALSE [[-Wadditional]]
prog.cob:10: warning: DISPLAY statement not terminated by END-DISPLAY [[-Wterminator]]
prog.cob:13: warning: some digits may be truncated [[-Wpossible-truncate]]
prog.cob:7: note: 'var2' defined here as PIC 99 [[-Wpossible-truncate]]
prog.cob:6: note: 'var1' defined here as PIC 9 [[-Wpossible-truncate]]
])
# a global "error" use implies no warning settings
AT_CHECK([$COBC -fsyntax-only -Werror prog.cob], [0], [], [])
# a concrete "error" use implies setting the warning
AT_CHECK([$COBC -fsyntax-only -fdiagnostics-plain-output -Werror=additional prog.cob], [1], [],
[prog.cob:9: error: PERFORM FOREVER since UNTIL is always FALSE [[-Werror=additional]]
])
AT_CHECK([$COBC -fsyntax-only -fdiagnostics-plain-output -fno-diagnostics-show-option -Werror=additional prog.cob], [1], [],
[prog.cob:9: error: PERFORM FOREVER since UNTIL is always FALSE
])
# a "no-error" use implies nothing
AT_CHECK([$COBC -fsyntax-only -Wno-error=additional prog.cob], [0], [], [])
# ... now combined
AT_CHECK([$COBC -fsyntax-only -Werror -Wno-error=additional prog.cob], [0], [], [])
AT_CHECK([$COBC -fsyntax-only -fdiagnostics-plain-output -Werror=additional -Wno-error prog.cob], [1], [],
[prog.cob:9: error: PERFORM FOREVER since UNTIL is always FALSE [[-Werror=additional]]
])
AT_CHECK([$COBC -fsyntax-only -fdiagnostics-plain-output -w -Werror=additional prog.cob], [1], [],
[prog.cob:9: error: PERFORM FOREVER since UNTIL is always FALSE [[-Werror=additional]]
])
AT_CHECK([$COBC -fsyntax-only -fdiagnostics-plain-output -w -Wadditional prog.cob], [0], [],
[prog.cob:9: warning: PERFORM FOREVER since UNTIL is always FALSE [[-Wadditional]]
])
AT_CHECK([$COBC -fsyntax-only -fdiagnostics-plain-output -w -Wpossible-truncate prog.cob], [0], [],
[prog.cob:13: warning: some digits may be truncated [[-Wpossible-truncate]]
prog.cob:7: note: 'var2' defined here as PIC 99 [[-Wpossible-truncate]]
prog.cob:6: note: 'var1' defined here as PIC 9 [[-Wpossible-truncate]]
])
# TODO: unknown warnings should only get a diagnostic (in verbose mode)
#AT_CHECK([$COBC -fsyntax-only -Wunknown-warning prog.cob], [0], [], [])
#AT_CHECK([$COBC -fsyntax-only -Wno-unknown-warning prog.cob], [0], [], [])
#AT_CHECK([$COBC -fsyntax-only -v -Wunknown-warning prog.cob], [0], [],
#[cobc: unknown warning option 'unknown-warning'
#])
#AT_CHECK([$COBC -fsyntax-only -v -Wno-unknown-warning prog.cob], [0], [],
#[cobc: unknown warning option 'unknown-warning'
#])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 TEST-VAR PIC 9(2) VALUE 'A'.
       COPY 'CRUD.CPY'.
       PROCEDURE        DIVISION.
           DISPLAY TEST-VAR NO ADVANCING
           END-DISPLAY
           MOVE 12 TO TEST-VAR
           DISPLAY TEST-VAR NO ADVANCING
           END-DISPLAY
           STOP RUN.
       COPY 'CRUD2.CPY'.
])

AT_CHECK([$COBC -fsyntax-only -fdiagnostics-plain-output -Wall prog2.cob], [1], [],
[prog2.cob:7: error: CRUD.CPY: No such file or directory
prog2.cob:15: error: CRUD2.CPY: No such file or directory
prog2.cob:6: warning: numeric value is expected [[-Wothers]]
])

AT_CHECK([$COBC -fsyntax-only -fdiagnostics-plain-output -fmax-errors=0 -Wall prog2.cob], [1], [],
[prog2.cob:7: error: CRUD.CPY: No such file or directory
prog2.cob:15: error: CRUD2.CPY: No such file or directory
prog2.cob:6: warning: numeric value is expected [[-Wothers]]
])

AT_CHECK([$COBC -fsyntax-only -fdiagnostics-plain-output -fmax-errors=1 prog2.cob], [97], [],
[prog2.cob:7: error: CRUD.CPY: No such file or directory
prog2.cob:15: error: CRUD2.CPY: No such file or directory
cobc: too many errors [[-fmax-errors=1]]

cobc: aborting compile of prog2.cob at line 15 (unknown: unknown)
])

AT_CHECK([$COBC -fsyntax-only -fdiagnostics-plain-output -Wfatal-errors prog2.cob], [97], [],
[prog2.cob:7: error: CRUD.CPY: No such file or directory
cobc: too many errors [[-Wfatal-errors]]

cobc: aborting compile of prog2.cob at line 7 (unknown: unknown)
])

AT_CHECK([$COBC -q -Wfatal-errors=123 prog.cob], [1], [],
[cobc: option '-Wfatal-errors' doesn't allow an argument
])

AT_CLEANUP


AT_SETUP([compiler outputs (general)])
AT_KEYWORDS([runmisc cobc])

AT_DATA([prog.cob],[
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01 BLA PIC X(5) VALUE 'bluBb'.
        PROCEDURE DIVISION.
        DISPLAY BLA NO ADVANCING END-DISPLAY
        STOP RUN.
])

AT_CHECK([$COBC -C prog.cob], [0], [ignore], [ignore])
AT_CHECK([$COBC -v -c prog.c], [0], [ignore], [ignore])
AT_CHECK([$COBC -v prog.$COB_OBJECT_EXT], [0], [ignore], [ignore])
AT_CHECK([$COBCRUN prog], [0], [bluBb], [])
AT_CHECK([$COBC -x -C prog.cob], [0], [ignore], [ignore])
AT_CHECK([$COBC -v -x -c prog.c], [0], [ignore], [ignore])
AT_CHECK([$COBC -v -x prog.$COB_OBJECT_EXT -o progo], [0], [ignore], [ignore])
AT_CHECK([$COBCRUN_DIRECT ./progo], [0], [bluBb], [])
AT_CHECK([$COBC -E prog.cob], [0],
[#line 1 "prog.cob"

 IDENTIFICATION DIVISION.
 PROGRAM-ID. prog.
 DATA DIVISION.
 WORKING-STORAGE SECTION.
 01 BLA PIC X(5) VALUE 'bluBb'.
 PROCEDURE DIVISION.
 DISPLAY BLA NO ADVANCING END-DISPLAY
 STOP RUN.
], [])
AT_CHECK([$COBC -E -o prog.i prog.cob], [0], [], [])
AT_CHECK([$COBC -x prog.i], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [bluBb], [])
AT_CLEANUP


AT_SETUP([compiler outputs (file specified)])
AT_KEYWORDS([runmisc cobc gen-c-line-directives gen-c-labels gen line labels copy])

AT_DATA([prog.cob],[
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01 BLA PIC X(5) VALUE 'bluBb'.
        PROCEDURE DIVISION.
        MAIN-PROC SECTION.
        00.
        COPY PROC.
        END-PROC  SECTION.
        COPY PROCE in "sub".
        EX.
            STOP RUN.
])

AT_CHECK([mkdir -p sub/copy], [0], [], [])

AT_DATA([sub/copy/PROC.cpy],[
           DISPLAY BLA NO ADVANCING.
])
AT_DATA([sub/PROCE.cpy],[
           DISPLAY ' END' NO ADVANCING.
])

AT_CAPTURE_FILE([prog.i])
AT_CAPTURE_FILE([prog.c])

AT_CHECK([$COBC -I sub/copy prog.cob -o prog.c], [0], [], [])
AT_CHECK([$COBC -I sub/copy prog.c -o prog.$COB_OBJECT_EXT], [0], [], [])
AT_CHECK([$COBC -I sub/copy prog.$COB_OBJECT_EXT -o prog.$COB_MODULE_EXT])
AT_CHECK([$COBCRUN prog], [0], [bluBb END], [])
AT_CHECK([$COBC -I sub/copy -x prog.cob -o prog.c], [0], [], [])
AT_CHECK([$COBC -I sub/copy -x prog.c -o prog.$COB_OBJECT_EXT], [0], [], [])
AT_CHECK([$COBC -I sub/copy -x prog.$COB_OBJECT_EXT -o progo$COB_EXE_EXT], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./progo], [0], [bluBb END], [])
# making the extension explicit here to not let case-insensitive file-systems catch a .CPY...
AT_CHECK([$COBC -I sub/copy prog.cob -ext=cpy -o prog.i], [0], [], [])
AT_CHECK([$COBC -x prog.i -o prog$COB_EXE_EXT], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog$COB_EXE_EXT], [0], [bluBb END], [])
AT_CHECK([$COBC -x prog.i -fgen-c-line-directives -fgen-c-labels -save-temps], [0], [], [])
AT_CHECK([$GREP 'prog.i'   prog.c], [0], ignore, [])
AT_CHECK([$GREP 'prog.i'   prog.c | $GREP '#line'], [1], ignore, ignore)
AT_CHECK([$GREP 'prog.cob' prog.c | $GREP '#line'], [0], ignore, [])
AT_CHECK([$GREP 'PROC.cpy' prog.c | $GREP '#line'], [0], ignore, [])
AT_CHECK([$GREP 'ENTRY_PROG:'          prog.c], [0], ignore, [])
AT_CHECK([$GREP 'SECTION_END__PROC:'   prog.c], [0], ignore, [])
AT_CHECK([$GREP 'PARAGRAPH_00_l_4:'    prog.c], [0], ignore, [])
AT_CHECK([$GREP 'PARAGRAPH_EX_l_7:'    prog.c], [0], ignore, [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [bluBb END], [])

AT_CLEANUP


AT_SETUP([compiler outputs (path specified)])
AT_KEYWORDS([runmisc cobc])

AT_DATA([prog.cob],[
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01 BLA PIC X(5) VALUE 'bluBb'.
        PROCEDURE DIVISION.
        DISPLAY BLA NO ADVANCING END-DISPLAY
        STOP RUN.
])

AT_CHECK([mkdir -p sub], [0], [], [])
AT_CHECK([$COBC prog.cob -o sub/prog.c], [0], [], [])
AT_CHECK([$COBC $(_return_path "sub/prog.c") -o $(_return_path "sub/prog.$COB_OBJECT_EXT")], [0], [], [])
AT_CHECK([$COBC $(_return_path "sub/prog.$COB_OBJECT_EXT") -o $(_return_path "sub/prog")])
AT_CHECK([$COBCRUN -M $(_return_path "sub/") prog], [0], [bluBb], [])
AT_CHECK([$COBC -x prog.cob -o $(_return_path "sub/prog.c")], [0], [], [])
AT_CHECK([$COBC -x $(_return_path "sub/prog.c") -o $(_return_path "sub/prog.$COB_OBJECT_EXT")], [0], [], [])
AT_CHECK([$COBC -x $(_return_path "sub/prog.$COB_OBJECT_EXT") -o $(_return_path "sub/progo$COB_EXE_EXT")])
AT_CHECK([$COBCRUN_DIRECT ./sub/progo], [0], [bluBb], [])
AT_CHECK([$COBC prog.cob -o $(_return_path "sub/prog.i")], [0], [], [])
AT_CHECK([$COBC -x sub/prog.i -o $(_return_path "sub/prog$COB_EXE_EXT")], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./sub/prog], [0], [bluBb], [])
AT_CLEANUP


AT_SETUP([compiler outputs (assembler)])
AT_KEYWORDS([runmisc cobc])

AT_DATA([prog.cob],[
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01 BLA PIC X(5) VALUE 'bluBb'.
        PROCEDURE DIVISION.
        DISPLAY BLA NO ADVANCING END-DISPLAY
        STOP RUN.
])

AT_CHECK([$COBC -v -S prog.cob], [0], [ignore], [ignore])
AT_CHECK([test -f prog.s], [0], [], [],
# Previous test "failed" --> prog.s not available --> likely a VS build
# only check for file as cl.exe cannot create executables from self-created
# assembler sources
[AT_CHECK([test -f prog.asm], [0], [], [])],
# Previous test "passed" --> prog.s is available, test compilation and run
[AT_CHECK([$COBC -v prog.s], [0], [ignore], [ignore])
 AT_CHECK([$COBCRUN prog], [0], [bluBb], [])])
AT_CHECK([$COBC -v -x -S prog.cob], [0], [ignore], [ignore])
AT_CHECK([test -f prog.s], [0], [], [],
# Previous test "failed" --> prog.s not available --> likely a VS build
# only check for file as cl.exe cannot create executables from self-created
# assembler sources
[AT_CHECK([test -f prog.asm], [0], [], [])],
# Previous test "passed" --> prog.s is available, test compilation and run
[AT_CHECK([$COBC -v -x prog.s], [0], [ignore], [ignore])
 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [bluBb], [])])
AT_CLEANUP


AT_SETUP([source file not found])
AT_KEYWORDS([cobc runmisc])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[cobc: prog.cob: No such file or directory
])

AT_CLEANUP


AT_SETUP([temporary path invalid])
AT_KEYWORDS([cobc runmisc])

# Note: we skip this as it often fails for WIN32 builds but sometimes works
AT_SKIP_IF([test "$COB_ON_WINDOWS" = "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           DISPLAY "OK" NO ADVANCING
           END-DISPLAY.
           EXIT PROGRAM.
])

AT_CHECK([TMPDIR="" TMP="notthere" TEMP="" $COMPILE prog.cob], [0], [],
[libcob: warning: Temporary directory TMP is invalid, adjust TMPDIR!
])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [OK], [])
AT_CHECK([TMPDIR="" TMP="" TEMP="./prog.cob" $COMPILE prog.cob], [0], [],
[libcob: warning: Temporary directory TEMP is invalid, adjust TMPDIR!
])
# TMPDIR is only checked when actually needed which is currently only the case
# for SORT
#AT_CHECK([TMPDIR="./prog.cob" $COBCRUN_DIRECT ./prog], [0], [OK],
#[libcob: warning: Temporary directory TEMP is invalid, adjust TMPDIR!
#])
#AT_CHECK([COB_DISABLE_WARNINGS=1 TMPDIR="./prog.cob" $COBCRUN_DIRECT ./prog], [0], [OK],
#[libcob: warning: Temporary directory TEMP is invalid, adjust TMPDIR!
#])

AT_CLEANUP


AT_SETUP([use of full path for cobc])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           DISPLAY "OK" NO ADVANCING
           END-DISPLAY.
           EXIT PROGRAM.
])

AT_CHECK([$COMPILE "$(_return_path "$(pwd)/prog.cob")"], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [OK], [])

AT_CLEANUP


AT_SETUP([save-temps in sub-directory])
AT_KEYWORDS([runmisc cobc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           DISPLAY "OK" NO ADVANCING
           END-DISPLAY.
           EXIT PROGRAM.
])

AT_CHECK([mkdir debug])

AT_CHECK([$COMPILE -save-temps=debug -o prog.exe prog.cob])
AT_CHECK([$COBCRUN_DIRECT ./prog.exe], [0], [OK])
AT_CHECK([test -f debug/prog.$COB_OBJECT_EXT])
AT_CHECK([test -f debug/prog.c])
AT_CHECK([test -f debug/prog.s], [1])
AT_CHECK([test -f debug/prog.asm], [1])
AT_CHECK([test -f debug/prog.i])
AT_CHECK([test -f debug/prog.c.h])
AT_CHECK([test -f debug/prog.c.l.h])

# Check with -c

AT_CHECK([test -f prog.$COB_OBJECT_EXT], [1])
AT_CHECK([$COMPILE -save-temps=debug -c prog.cob])
AT_CHECK([test -f prog.$COB_OBJECT_EXT])
AT_CHECK([$COMPILE -save-temps=debug -c -o program.$COB_OBJECT_EXT prog.cob])
AT_CHECK([test -f program.$COB_OBJECT_EXT])

# Check with -C

AT_CHECK([test -f prog.c], [1])
AT_CHECK([$COMPILE -save-temps=debug -C prog.cob])
AT_CHECK([test -f prog.c])
AT_CHECK([test -f prog.c.h])
AT_CHECK([test -f prog.c.l.h])
AT_CHECK([$COMPILE -save-temps=debug -C -o program.c prog.cob])
AT_CHECK([test -f program.c])
AT_CHECK([test -f program.c.h])
AT_CHECK([test -f program.c.l.h])

# Check with -E

AT_CHECK([test -f prog.i], [1])
AT_CHECK([$COMPILE -save-temps=debug -E -o prog.i prog.cob])
AT_CHECK([test -f prog.i])
AT_CHECK([$COMPILE -save-temps=debug -E -o program.i prog.cob])
AT_CHECK([test -f program.i])

# Check with -S (last as we skip the testsuite entry for some compilers by returning 77)

AT_CHECK([test -f prog.s], [1])
AT_CHECK([test -f prog.asm], [1])
AT_CHECK([$COMPILE -save-temps=debug -S prog.cob])
AT_CHECK([test -f prog.s], [0], [], [],
# Previous test "failed" --> prog.s not available --> likely a VS build
[AT_CHECK([test -f prog.asm], [0], [], [])
 AT_CHECK([$COMPILE -save-temps=debug -S -o program.asm prog.cob])
 AT_CHECK([test -f program.asm])
],
# Previous test "passed" - .s is the extension to be used
[AT_CHECK([$COMPILE -save-temps=debug -S -o program.s prog.cob])
 AT_CHECK([test -f program.s])
])

AT_CLEANUP


AT_SETUP([C Compiler optimizations])
AT_KEYWORDS([runmisc cobc optimization])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           DISPLAY "OK" NO ADVANCING
           END-DISPLAY.
           EXIT PROGRAM.
])

AT_CHECK([$COMPILE -v -O  -o prog  prog.cob], [0], [ignore], [ignore])
AT_CHECK([$COBCRUN_DIRECT ./prog],  [0], [OK], [])

AT_CHECK([$COMPILE -v -O2 -o prog2 prog.cob], [0], [ignore], [ignore])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [0], [OK], [])

AT_CHECK([$COMPILE -v -Os -o progs prog.cob], [0], [ignore], [ignore])
AT_CHECK([$COBCRUN_DIRECT ./progs], [0], [OK], [])

AT_CHECK([$COMPILE -v -O3 -o prog3 prog.cob], [0], [ignore], [ignore])
AT_CHECK([$COBCRUN_DIRECT ./prog3], [0], [OK], [])

AT_CHECK([$COMPILE -v -O0  -o prog  prog.cob], [0], [ignore], [ignore])
AT_CHECK([$COBCRUN_DIRECT ./prog],  [0], [OK], [])

# last test with O2 (strips output) and output name
AT_CHECK([mkdir -p sub], [0], [], [])
AT_CHECK([$COMPILE_MODULE -v -O2 -o $(_return_path "sub/prog") prog.cob], [0], [ignore], [ignore])
AT_CHECK([$COBCRUN -M sub/ prog],  [0], [OK], [])
AT_CHECK([$COMPILE -v -O2 -o $(_return_path "sub/prog$COB_EXE_EXT") prog.cob], [0], [ignore], [ignore])
AT_CHECK([$COBCRUN_DIRECT ./sub/prog],  [0], [OK], [])

AT_CLEANUP


AT_SETUP([invalid cobc option])
AT_KEYWORDS([runmisc cobc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
])

# normal option
AT_CHECK([$COMPILE -q --thisoptiondoesntexist prog.cob], [1], [],
[cobc: unrecognized option '--thisoptiondoesntexist'
])
# flag
AT_CHECK([$COMPILE -q -flagdoesntexist prog.cob], [1], [],
[cobc: unrecognized option '-flagdoesntexist'
])

AT_CLEANUP


AT_SETUP([cobcrun help and information])
AT_KEYWORDS([runmisc cobcrun])

# FIXME: check at least some parts of the output by using $GREP
AT_CHECK([$COBCRUN --version], [0], [ignore], [])
AT_CHECK([$COBCRUN -v --version], [0], [ignore], [])
AT_CHECK([$COBCRUN -q --version], [0], [ignore], [])
AT_CHECK([$COBCRUN --help], [0], [ignore], [])
AT_CHECK([$COBCRUN --info], [0], [ignore], [])
# we explicit do not want to run this here, as it initializes curses
# AT_CHECK([$COBCRUN -v --info], [0], [ignore], [])
AT_CHECK([$COBCRUN -q --info], [0], [ignore], [])
AT_CHECK([$COBCRUN --dumpversion], [0], [ignore], [])
AT_CLEANUP


AT_SETUP([cobcrun validation])
AT_KEYWORDS([runmisc])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 WRK-VAR       PIC X(5).
       01 EXT-VAR       PIC X(5) EXTERNAL.
       PROCEDURE        DIVISION.
           DISPLAY EXT-VAR NO ADVANCING
           END-DISPLAY.
           MOVE "World" TO EXT-VAR.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 EXT-VAR       PIC X(5) EXTERNAL.
       01 WRK-VAR       PIC X(5).
       PROCEDURE        DIVISION.
           MOVE "Hello" TO EXT-VAR.
           CALL "callee"
           END-CALL.
           DISPLAY EXT-VAR NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE caller.cob], [0], [], [])
AT_CHECK([$COBCRUN caller], [0], [HelloWorld], [])

AT_CLEANUP


AT_SETUP([cobcrun -M DSO entry argument])
AT_KEYWORDS([runmisc preload])

AT_CHECK([$COBCRUN -M "" nope], [1], [],
[invalid module argument ''
])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 EXT-VAR       PIC X(5) EXTERNAL.
       PROCEDURE        DIVISION.
           DISPLAY EXT-VAR END-DISPLAY.
           MOVE "World" TO EXT-VAR.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 EXT-VAR       PIC X(5) EXTERNAL.
       PROCEDURE        DIVISION.
           MOVE "Hello" TO EXT-VAR.
           CALL "callee" END-CALL.
           DISPLAY EXT-VAR END-DISPLAY.
           STOP RUN.
       END PROGRAM caller.

       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      inside.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 EXT-VAR       PIC X(5) EXTERNAL.
       01 CLA-VAR       PIC X(5).
       PROCEDURE        DIVISION.
           MOVE "Aloha" TO EXT-VAR.
           CALL "callee" END-CALL.
           DISPLAY EXT-VAR END-DISPLAY.
           ACCEPT CLA-VAR FROM COMMAND-LINE END-ACCEPT.
           DISPLAY CLA-VAR END-DISPLAY.
           STOP RUN.
       END PROGRAM inside.
])

AT_DATA([caller2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      inside2.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 EXT-VAR       PIC X(5) EXTERNAL.
       01 CLA-VAR       PIC X(5).
       PROCEDURE        DIVISION.
           DISPLAY "Aloha2".
           CALL "inside".
           GOBACK. *> never gets here
       END PROGRAM inside2.
])

AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE caller.cob], [0], [], [])
AT_CHECK([$COBCRUN -M ./caller inside again], [0],
[Aloha
World
again
], [])

AT_CHECK([$COMPILE_MODULE caller2.cob], [0], [], [])
AT_CHECK([COB_PRE_LOAD=caller2 $COBCRUN -M ./caller inside2 again], [0],
[Aloha2
Aloha
World
again
], [])

AT_CLEANUP


## FIXME: missing tests:
## * combining $COBCRUN -M with COB_PRE_LOAD + COB_LIBRARY_PATH
## * $COBCRUN -m


AT_SETUP([cobcrun -M directory/ default])
AT_KEYWORDS([runmisc])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 EXT-VAR       PIC X(5) EXTERNAL.
       PROCEDURE        DIVISION.
           DISPLAY EXT-VAR END-DISPLAY.
           MOVE "World" TO EXT-VAR.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 EXT-VAR       PIC X(5) EXTERNAL.
       PROCEDURE        DIVISION.
           MOVE "Hello" TO EXT-VAR.
           CALL "callee" END-CALL.
           DISPLAY EXT-VAR END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE caller.cob], [0], [], [])
AT_CHECK([$COBCRUN -M ./ caller], [0],
[Hello
World
], [])


AT_CLEANUP


AT_SETUP([cobcrun -M directory/dso alternate])
AT_KEYWORDS([runmisc preload])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 EXT-VAR       PIC X(5) EXTERNAL.
       PROCEDURE        DIVISION.
           DISPLAY EXT-VAR END-DISPLAY.
           MOVE "World" TO EXT-VAR.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 EXT-VAR       PIC X(5) EXTERNAL.
       PROCEDURE        DIVISION.
           MOVE "Hello" TO EXT-VAR.
           CALL "callee" END-CALL.
           DISPLAY EXT-VAR END-DISPLAY.
           STOP RUN.
       END PROGRAM caller.

       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      inside.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 EXT-VAR       PIC X(5) EXTERNAL.
       PROCEDURE        DIVISION.
           MOVE "Aloha" TO EXT-VAR.
           CALL "callee" END-CALL.
           DISPLAY EXT-VAR END-DISPLAY.
           STOP RUN.
       END PROGRAM inside.
])

AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE caller.cob], [0], [], [])
AT_CHECK([$COBCRUN -M ./caller inside], [0],
[Aloha
World
], [])

AT_CLEANUP


AT_SETUP([cobcrun -M DSO entry multiple arguments])
AT_KEYWORDS([runmisc preload])

# Test that modules can be called with ARGUMENT-VALUES
AT_DATA([called.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      called.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 CLI-ARGS      PIC X(27).
       01 ARG-TWO       PIC X(6).
       PROCEDURE        DIVISION.
           ACCEPT CLI-ARGS FROM COMMAND-LINE END-ACCEPT.
           DISPLAY 2 UPON ARGUMENT-NUMBER END-DISPLAY.
           ACCEPT ARG-TWO FROM ARGUMENT-VALUE END-ACCEPT.
           DISPLAY CLI-ARGS ":" ARG-TWO END-DISPLAY.
           EXIT PROGRAM.
])

AT_DATA([mainer.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      mainer.
       PROCEDURE        DIVISION.
           STOP RUN.
       END PROGRAM mainer.
])

AT_CHECK([$COBC -b ${FLAGS} mainer.cob called.cob], [0], [], [])
AT_CHECK([$COBCRUN -M ./mainer called "first argument" "second" "third"], [0],
[first argument second third:second
], [])

# additional test with environment configuration settings removed:
AT_CHECK([unset COB_PRE_LOAD COB_LIBRARY_PATH ; \
   $COBCRUN -M ./mainer called "first argument" "second" "third"], [0],
[first argument second third:second
], [])

# additional test with showing the preloaded environment
# FIXME: check at least some parts of the output ("configuration" and the expected output) by using $GREP
AT_CHECK([$COBCRUN -M ./mainer --runtime-conf called "first argument" "second" "third"], [0],
[ignore], [])

AT_CLEANUP


AT_SETUP([cobcrun error messages])
AT_KEYWORDS([runmisc])

AT_CHECK([$COBCRUN -q], [1], [],
[cobcrun: missing PROGRAM name
Try 'cobcrun --help' for more information.
])
AT_CHECK([$COBCRUN -q -prog], [1], [],
[cobcrun: unrecognized option '-prog'
])
AT_CHECK([$COBCRUN noprog], [1], [],
[libcob: error: module 'noprog' not found
])
AT_CHECK([$COBCRUN -q -M], [1], [],
[cobcrun: option requires an argument -- 'M'
])
AT_CHECK([$COBCRUN -q -M noprog], [1], [],
[cobcrun: missing PROGRAM name
Try 'cobcrun --help' for more information.
])
# this was previously checked in cobcrun, now only done in the runtime
AT_CHECK([$COBCRUN ThisIsANameThatIsReallyNotAllowedAsProgIdInCOBOL], [1], [],
[libcob: error: ThisIsANameThatIsReallyNotAllowedAsProgIdInCOBOL: PROGRAM name exceeds 31 characters
])
# it would be allowed for preloading
# this was previously checked in cobcrun, now only done in the runtime
AT_CHECK([$COBCRUN -q -M ThisIsANameThatIsReallyNotAllowedAsProgIdInCOBOL noprog], [1], [],
[libcob: warning: preloading of 'ThisIsANameThatIsReallyNotAllowedAsProgIdInCOBOL' failed
libcob: error: module 'noprog' not found
])

AT_CLEANUP


AT_SETUP([run job with unsuccessful compilation])
AT_KEYWORDS([runmisc cobcrun])


AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           DISPLAY "jobby"
           EXIT HERE.
])

AT_CHECK([$COMPILE -j prog.cob], [1], [],
[prog.cob:6: error: syntax error, unexpected Identifier
])

AT_CLEANUP


AT_SETUP([run job after compilation])
AT_KEYWORDS([runmisc cobcrun])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           DISPLAY "job" WITH NO ADVANCING END-DISPLAY
           STOP RUN WITH NORMAL STATUS.
])

AT_CHECK([$COMPILE -jd prog.cob], [0], [job], [])
AT_CHECK([$COMPILE_MODULE -jd prog.cob], [0], [job], [])

AT_CLEANUP


AT_SETUP([run job after compilation (path specified)])
AT_KEYWORDS([runmisc cobcrun])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           DISPLAY "job" WITH NO ADVANCING END-DISPLAY
           STOP RUN WITH NORMAL STATUS.
])

AT_CHECK([mkdir -p sub], [0], [], [])
AT_CHECK([$COMPILE_MODULE -jd -o $(_return_path "sub/prog") prog.cob], [0], [job], [])
AT_CHECK([$COMPILE -jd -o $(_return_path "sub/prog$COB_EXE_EXT") prog.cob], [0], [job], [])

AT_CLEANUP


AT_SETUP([run job with optional arguments])
AT_KEYWORDS([runmisc cobcrun])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 CLI           PIC X(8).
       PROCEDURE        DIVISION.
           ACCEPT CLI FROM COMMAND-LINE
           DISPLAY CLI WITH NO ADVANCING END-DISPLAY
           STOP RUN WITH NORMAL STATUS.
])

AT_CHECK([$COMPILE -j="job 123" prog.cob], [0], [job 123 ], [])
AT_CHECK([$COMPILE -jdg prog.cob], [0], [        ], [])
AT_CHECK([$COMPILE_MODULE --job=job123 prog.cob], [0], [job123  ], [])

AT_CLEANUP


AT_SETUP([compile from stdin])
AT_KEYWORDS([runmisc cobc cobcrun])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      a.
       PROCEDURE        DIVISION.
           STOP RUN WITH NORMAL STATUS.
])

AT_CHECK([cat prog.cob | $COMPILE_MODULE -], [0], [], [],
# Previous test failed run again with full verbose output
# leading to an (expected) fail, but with decent messages
[AT_CHECK([cat prog.cob | $COMPILE_MODULE -vv -], [0], [])]
)
AT_CHECK([$COBCRUN a], [0], [], [])

AT_CHECK([cat prog.cob | $COMPILE -], [0], [], [],
# more to debug ...
[AT_CHECK([cat prog.cob | $COMPILE -vv -], [0], [])]
)
AT_CHECK([$COBCRUN_DIRECT ./a.out], [0], [], [])

AT_CHECK([echo "program-id.test." | $COMPILE_MODULE -free -E -], [0],
[#line 1 "<stdin>"
program-id.test.
], [])


AT_CLEANUP


AT_SETUP([run job after compilation from stdin])
AT_KEYWORDS([runmisc cobc cobcrun])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      a.
       PROCEDURE        DIVISION.
           DISPLAY "job" WITH NO ADVANCING END-DISPLAY
           STOP RUN WITH NORMAL STATUS.
])

AT_CHECK([cat prog.cob | $COMPILE -j -], [0], [job], [],
# Previous test failed run again with full verbose output
# leading to an (expected) fail, but with decent messages
[AT_CHECK([cat prog.cob | $COMPILE -vv -j -], [0], [])]
)
AT_CHECK([cat prog.cob | $COMPILE_MODULE -j -], [0], [job], [],
# more to debug ...
[AT_CHECK([cat prog.cob | $COMPILE_MODULE -vv -j -], [0], [])]
)

AT_CLEANUP


AT_SETUP([cobc diagnostics show caret])
#AT_KEYWORDS([cobc diagnostics])

AT_DATA([progprep.cob],[
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.	  	#
       01 TEST-VAR PIC 9(2) VALUE 'A'.
       COPY 'CRUD.CPY'.
       PROCEDURE        DIVISION.
           DISPLAY TEST-VAR NO ADVANCING
           END-DISPLAY
           MOVE 12 TO TEST-VAR
           DISPLAY TEST-VAR NO ADVANCING
           END-DISPLAY
           STOP RUN...
])

# Testcase includes trailing whitespace, setup by dropping '#'
AT_CHECK([cat progprep.cob | tr -d '#' > prog.cob])

AT_CHECK([$COBC -fdiagnostics-plain-output -Wall prog.cob], [1], [],
[[prog.cob:7: error: CRUD.CPY: No such file or directory
prog.cob:6: warning: numeric value is expected [-Wothers]
prog.cob:14: warning: ignoring redundant . [-Wothers]
]])
AT_CHECK([$COBC -fdiagnostics-show-caret -fdiagnostics-show-line-numbers prog.cob], [1], [],
[[prog.cob:7: error: CRUD.CPY: No such file or directory
    5 |        WORKING-STORAGE  SECTION.
    6 |        01 TEST-VAR PIC 9(2) VALUE 'A'.
    7 >        COPY 'CRUD.CPY'.
    8 |        PROCEDURE        DIVISION.
    9 |            DISPLAY TEST-VAR NO ADVANCING
prog.cob:6: warning: numeric value is expected [-Wothers]
    4 |        DATA             DIVISION.
    5 |        WORKING-STORAGE  SECTION.
    6 >        01 TEST-VAR PIC 9(2) VALUE 'A'.
    7 |        COPY 'CRUD.CPY'.
    8 |        PROCEDURE        DIVISION.
prog.cob:14: warning: ignoring redundant . [-Wothers]
   12 |            DISPLAY TEST-VAR NO ADVANCING
   13 |            END-DISPLAY
   14 >            STOP RUN...
   15 | <EOF>
]])

AT_CHECK([$COBC -fdiagnostics-plain-output -fdiagnostics-show-caret prog.cob], [1], [],
[[prog.cob:7: error: CRUD.CPY: No such file or directory
          WORKING-STORAGE  SECTION.
          01 TEST-VAR PIC 9(2) VALUE 'A'.
 >        COPY 'CRUD.CPY'.
          PROCEDURE        DIVISION.
              DISPLAY TEST-VAR NO ADVANCING
prog.cob:6: warning: numeric value is expected [-Wothers]
          DATA             DIVISION.
          WORKING-STORAGE  SECTION.
 >        01 TEST-VAR PIC 9(2) VALUE 'A'.
          COPY 'CRUD.CPY'.
          PROCEDURE        DIVISION.
prog.cob:14: warning: ignoring redundant . [-Wothers]
              DISPLAY TEST-VAR NO ADVANCING
              END-DISPLAY
 >            STOP RUN...
   <EOF>
]])

# Testcase for line too long and printing only one line
AT_DATA([longgy.cob],[ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
])

# note: this is actually an error in the parser line number,
#       but until that is solved, it is a nice edge case of "line not available"
AT_CHECK([$COBC -fdiagnostics-plain-output -fdiagnostics-show-caret -Wno-others longgy.cob], [1], [],
[[longgy.cob:2: error: PROGRAM-ID header missing
   dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd..
 > <EOF>
]])

AT_CHECK([$COMPILE -fdiagnostics-absolute-paths -Wall prog.cob 2> compiler.output], [1])

# note: -fdiagnostics-absolute-paths will show the realpath,
#       so for MSYS/MSVC builds that will be x:\something\prog.cob, not the output of PWD,
#       but the _return_path function from atlocal may adjust that
AT_CHECK([cat compiler.output | tr '\\' '/' | $SED "s|$(_return_path "$(pwd)")|DIR|"], [0],
[DIR/prog.cob:7: error: CRUD.CPY: No such file or directory
DIR/prog.cob:6: warning: numeric value is expected
DIR/prog.cob:14: warning: ignoring redundant .
], [], [echo set: $SED "s|$(_return_path "$(pwd)")|DIR|"])

AT_CLEANUP


AT_SETUP([check include header file])
AT_KEYWORDS([cobc copy directive imp])

AT_DATA([filec.h], [
/* COB_EXT_IMPORT will be defined by libcob.h up-front */
COB_EXT_IMPORT void f (char *, long);
])
AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           CALL "f" USING "Hello".
])

# dynamic call - program seems correct
AT_CHECK([$COMPILE_MODULE prog.cob], [0], [], [])

# mismatch in function signature - we ignore the error output, as it depends
# on the C compiler in use (and also stdout as some [MSVC] put errors there...)
AT_CHECK([$COMPILE_MODULE --include $(_return_path "$(pwd)/filec.h") -fstatic-call prog.cob], [1], ignore, ignore)

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 long USAGE BINARY-C-LONG.
       PROCEDURE        DIVISION.
           CALL "f" USING "Hello" BY VALUE long RETURNING NOTHING.
])

# note: we likely need to build an import library for some environments
AT_DATA([filec.c], [
/* for COB_EXT_EXPORT */
#include <libcob.h>
COB_EXT_EXPORT void f (char *str, long num) {};
])
AT_CHECK([$COMPILE_MODULE --save-temps filec.c -o libfilec.$COB_MODULE_EXT], [0], [], [])
# cater for environments that do not use a lib prefix
AT_CHECK([$COMPILE_MODULE --save-temps filec.c -o filec.$COB_MODULE_EXT], [0], [], [])


# static build with correct function signature
AT_CHECK([$COMPILE_MODULE --include $(_return_path "$(pwd)/filec.h") -fstatic-call prog2.cob], [0], [], [], [
  # Previous test "failed" --> retry with import library
  AT_CHECK([$COMPILE_MODULE --include $(_return_path "$(pwd)/filec.h") -fstatic-call -L. -lfilec prog2.cob], [0], ignore, ignore)]
)
AT_CHECK([$COMPILE_MODULE -I . --include "filec.h" -fstatic-call prog2.cob -o prog2b], [0], [], [], [
  # Previous test "failed" --> retry with import library
  AT_CHECK([$COMPILE_MODULE -I . --include "filec.h" -fstatic-call -L. -lfilec prog2.cob -o prog2b], [0], ignore, ignore)]
)

# We can use --copy to check a CALL against a prototype. However, this
# feature is not fully supported by GnuCOBOL yet, so we get some
# warnings. For exemple:
# * not putting RETURNING triggers an error
# * putting RETURNING NOTHING is not supported
# * putting RETURNING OMITTED is ok, but triggers a warning (see stderr)

AT_DATA([f.copy], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. f PROTOTYPE.
       DATA DIVISION.
       LINKAGE SECTION.
       01  a PIC X(20).
       01  b BINARY-C-LONG.
       PROCEDURE DIVISION USING a BY VALUE b RETURNING OMITTED.
       END PROGRAM f.
])

AT_CHECK([$COMPILE_MODULE -Wno-unfinished --copy "f.copy" -fstatic-call prog2.cob -o prog2c], [0], [],
[prog2.cob:8: warning: unexpected RETURNING item
], [
  # Previous test "failed" --> retry with import library
  AT_CHECK([$COMPILE_MODULE -Wno-unfinished --copy "f.copy" -fstatic-call -L. -lfilec prog2.cob -o prog2c], [0], ignore, ignore)]
)

# additional check via directive
AT_DATA([prog3.cob], [
       >> IMP INCLUDE "filec.h"
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 long USAGE BINARY-C-LONG.
       PROCEDURE        DIVISION.
           CALL "f" USING "Hello" BY VALUE long RETURNING NOTHING.
])

# static build with correct function signature
AT_CHECK([$COMPILE_MODULE -I . -fstatic-call prog3.cob], [0], [], [], [
  # Previous test "failed" --> retry with import library
  AT_CHECK([$COMPILE_MODULE -I . -fstatic-call -L. -lfilec prog3.cob], [0], ignore, ignore)]
)

AT_CLEANUP


AT_SETUP([output dependencies])
# AT_KEYWORDS([])

AT_CAPTURE_FILE([compiler.output])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       COPY COPY1.
       PROCEDURE DIVISION.
       MAIN-PROC SECTION.
       00.
       COPY COPY3.
       COPY COPY3.CPY.
       END-PROC  SECTION.
       COPY COPY4 in "sub".
       EX.
           STOP RUN.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog2.
       PROCEDURE DIVISION.
       COPY COPY3.
           STOP RUN.
])


AT_CHECK([mkdir -p sub])
AT_DATA([COPY1.CPY], [       COPY COPY2.
])
AT_DATA([COPY2.CPY], [])
AT_DATA([COPY3.CPY], [       DISPLAY "Hello".
])
AT_DATA([sub/COPY4.CPY], [])

AT_CHECK([$COMPILE prog.cob])

AT_CHECK([$COMPILE -M prog.cob prog2.cob > compiler.output], [0])
AT_CHECK([$SED "s/\.$COB_OBJECT_EXT:/.COB_OBJECT_EXT:/g;s/sub\\\\/sub\//g" compiler.output], [0],
[prog.COB_OBJECT_EXT: \
 prog.cob \
 COPY1.CPY \
 COPY2.CPY \
 COPY3.CPY \
 sub/COPY4.CPY

prog2.COB_OBJECT_EXT: \
 prog2.cob \
 COPY3.CPY

])

AT_CHECK([$COMPILE -M -MF prog.dep prog.cob])
AT_CHECK([$SED "s/\.$COB_OBJECT_EXT/.COB_OBJECT_EXT/g;s/sub\\\\/sub\//g" prog.dep], [0],
[prog.COB_OBJECT_EXT: \
 prog.cob \
 COPY1.CPY \
 COPY2.CPY \
 COPY3.CPY \
 sub/COPY4.CPY

])

AT_CHECK([$COMPILE -M -fcopybook-deps prog.cob > compiler.output], [0])
AT_CHECK([$SED "s/\.$COB_OBJECT_EXT/.COB_OBJECT_EXT/g;s/sub\\\\/sub\//g" compiler.output], [0],
[prog.COB_OBJECT_EXT: COPY1 COPY2 COPY3 COPY3.CPY sub/COPY4

])

AT_CHECK([$COMPILE -g -M -MT prog.$COB_MODULE_EXT prog.cob > compiler.output], [0])
AT_CHECK([$SED "s/\.$COB_MODULE_EXT/.COB_MODULE_EXT/g;s/sub\\\\/sub\//g" compiler.output], [0],
[prog.COB_MODULE_EXT: \
 prog.cob \
 COPY1.CPY \
 COPY2.CPY \
 COPY3.CPY \
 sub/COPY4.CPY

])

AT_CHECK([test -f prog.c], [1])
AT_CHECK([test -f prog.o], [1])

AT_CHECK([$COMPILE -M -MQ '$(target)#toto' prog.cob > compiler.output], [0])
AT_CHECK([$SED "s/sub\\\\/sub\//g" compiler.output], [0],
[$$(target)\#toto: \
 prog.cob \
 COPY1.CPY \
 COPY2.CPY \
 COPY3.CPY \
 sub/COPY4.CPY

])

AT_CHECK([rm -f prog.d])
AT_CAPTURE_FILE([prog.d])

AT_CHECK([$COMPILE -MD prog.cob])
AT_CHECK([$SED "s/\.$COB_OBJECT_EXT/.COB_OBJECT_EXT/g;s/sub\\\\/sub\//g" prog.d], [0],
[prog.COB_OBJECT_EXT: \
 prog.cob \
 COPY1.CPY \
 COPY2.CPY \
 COPY3.CPY \
 sub/COPY4.CPY

])

AT_CHECK([$COMPILE -MD -o sub/prog.exe  prog.cob])
AT_CHECK([test -f sub/prog.exe])
AT_CHECK([$SED "s/\.$COB_OBJECT_EXT/.COB_OBJECT_EXT/g;s/sub\\\\/sub\//g" sub/prog.d], [0],
[prog.COB_OBJECT_EXT: \
 prog.cob \
 COPY1.CPY \
 COPY2.CPY \
 COPY3.CPY \
 sub/COPY4.CPY

])

AT_CHECK([rm sub/COPY4.CPY])

AT_CHECK([$COMPILE -M prog.cob > compiler.output 2> compiler.error], [1], [], [])
AT_CHECK([$SED "s/\.$COB_OBJECT_EXT/.COB_OBJECT_EXT/g" compiler.output], [0],
[prog.COB_OBJECT_EXT: \
 prog.cob \
 COPY1.CPY \
 COPY2.CPY \
 COPY3.CPY

])

AT_CHECK([$SED "s/sub\\\\/sub\//g" compiler.error], [0],
[prog.cob:13: error: sub/COPY4: No such file or directory
])

AT_CHECK([$COMPILE_ONLY -M -MG prog.cob > compiler.output], [0])
AT_CHECK([$SED "s/\.$COB_OBJECT_EXT/.COB_OBJECT_EXT/g;s/sub\\\\/sub\//g" compiler.output], [0],
[prog.COB_OBJECT_EXT: \
 prog.cob \
 COPY1.CPY \
 COPY2.CPY \
 COPY3.CPY \
 sub/COPY4.CPY

])

AT_DATA([prog.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01 BLA PIC X(5) VALUE 'bluBb'.
        PROCEDURE DIVISION.
        MAIN-PROC SECTION.
        00.
        COPY PROC.
        END-PROC  SECTION.
        COPY PROCE in "sub".
        EX.
            STOP RUN.
])

AT_CHECK([mkdir -p sub/copy])
AT_DATA([sub/copy/PROC.cpy], [
           DISPLAY BLA NO ADVANCING.
])
AT_DATA([sub/PROCE.cpy], [
           DISPLAY ' END' NO ADVANCING.
])

AT_CAPTURE_FILE([prog.d])
AT_CHECK([$COBC -I sub/copy prog.cob -ext=cpy -o prog.i -M -MP -MF prog.d -MT "prog.c prog.h" -MT prog$COB_EXE_EXT -MT prog.$COB_OBJECT_EXT -MT prog.i  -fsyntax-only])
AT_CHECK([$GREP 'prog.c prog.h '       prog.d], [0], [ignore])
AT_CHECK([$GREP ' prog.i:'             prog.d], [0], [ignore])
AT_CHECK([$GREP 'sub/copy/PROC.cpy'    prog.d], [0], [ignore], [], [
  # Previous test "failed" --> no entry with slash available, check backslash for this and following tests
  AT_CHECK([$GREP ' sub\\copy\\PROC.cpy \\'  prog.d], [0], [ignore])
  AT_CHECK([$GREP ' sub\\PROCE.cpy'          prog.d], [0], [ignore])
  AT_CHECK([$GREP 'sub\\copy\\PROC.cpy:'     prog.d], [0], [ignore])
  AT_CHECK([$GREP 'sub\\PROCE.cpy:'          prog.d], [0], [ignore])
], [
  AT_CHECK([$GREP ' sub/copy/PROC.cpy \\'    prog.d], [0], [ignore])
  AT_CHECK([$GREP ' sub/PROCE.cpy'           prog.d], [0], [ignore])
  AT_CHECK([$GREP 'sub/copy/PROC.cpy:'       prog.d], [0], [ignore])
  AT_CHECK([$GREP 'sub/PROCE.cpy:'           prog.d], [0], [ignore])
])

# test again with trailing slash which should not result in different files
AT_CHECK([$COBC -I sub/copy/ prog.cob -ext=cpy -o prog.i -M -MP -MF prog.d -MT "prog.c prog.h" -MT prog$COB_EXE_EXT -MT prog.$COB_OBJECT_EXT -MT prog.i  -fsyntax-only])
AT_CHECK([$GREP 'sub/copy/PROC.cpy'    prog.d], [0], [ignore], [], [
  # Previous test "failed" --> no entry with slash available, check backslash for this test
  AT_CHECK([$GREP 'sub\\copy\\PROC.cpy'  prog.d], [0], [ignore])
])

AT_CLEANUP


AT_SETUP([signal handling SIGPIPE cobc])
AT_KEYWORDS([runmisc])

# the runtime is not initialized, so we get out without any error message in libcob
# and we also don't raise anything in cobc either
AT_CHECK([$COBC --help | head], [0], [ignore], [])

AT_CLEANUP


AT_SETUP([signal handling SIGPIPE in COBOL])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       PROCEDURE DIVISION.
       00. DISPLAY '1'. DISPLAY '2'. DISPLAY '3'. DISPLAY '4'.
           DISPLAY '5'. DISPLAY '6'. DISPLAY '7'. DISPLAY '8'.
       EX. STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog | head -n 2], [0],
[1
2
], [])

AT_CLEANUP


AT_SETUP([signal handling SIGTERM in COBOL])
AT_KEYWORDS([runmisc stack stacktrace])

# this is portable in all posix environments, but not on Win32;
# note: cygwin-compiled programs handle cygwin-sent SIGTERM as expected
# CTRL+C does raise a SIGINT, but only when executed from "within" the program
AT_XFAIL_IF([test "$COB_ON_WINDOWS" = "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'prog'.
       PROCEDURE DIVISION.
       00. DISPLAY '1'.
           CALL 'wait'. DISPLAY '2'.
       EX. STOP RUN.
       END PROGRAM 'prog'.
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'wait'.
       PROCEDURE DIVISION.
       00. PERFORM DO-WAIT.
       EX. GOBACK.
       DO-WAIT. CONTINUE AFTER 10 SECONDS.
       END PROGRAM 'wait'.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

# note: the stack trace, while enabled per default, is globally disabled in the testsuite
AT_CHECK([$COBCRUN_DIRECT ./prog 2>stderr1 & cobpid=$!
sleep 6
kill -15 $cobpid], [0],
[1
], [])

AT_CHECK([cat stderr1], [0],
[
prog.cob:14: termination (signal SIGTERM)

])

AT_CHECK([COB_STACKTRACE=1 $COBCRUN_DIRECT ./prog a "b c" 2>stderr2 & cobpid=$!
sleep 6
kill -15 $cobpid], [0],
[1
], [])

AT_CHECK([cat stderr2], [0],
[
prog.cob:14: termination (signal SIGTERM)


 Last statement of "wait" was CONTINUE AFTER
	DO-WAIT at prog.cob:14
	00 at prog.cob:12
	ENTRY wait at prog.cob:12
 Last statement of "prog" was CALL
	00 at prog.cob:6
	ENTRY prog at prog.cob:5
 Started by ./prog
	a
	b c
])

AT_CLEANUP


AT_SETUP([EBCDIC/ASCII table generation])
AT_KEYWORDS([runmisc])

AT_SKIP_IF([test "$COB_HAS_ICONV" = "no"])

AT_CHECK([$COBC --gentable=IBM500,ASCII], [0],
[# GnuCOBOL IBM500 <-> ASCII translation tables

# IBM500 to ASCII translation table

00 01 02 03 1A 09 1A 7F 1A 1A 1A 0B 0C 0D 0E 0F
10 11 12 13 1A 1A 08 1A 18 19 1A 1A 1C 1D 1E 1F
1A 1A 1A 1A 1A 0A 17 1B 1A 1A 1A 1A 1A 05 06 07
1A 1A 16 1A 1A 1A 1A 04 1A 1A 1A 1A 14 15 1A 1A
20 1A 1A 1A 1A 1A 1A 1A 1A 1A 5B 2E 3C 28 2B 21
26 1A 1A 1A 1A 1A 1A 1A 1A 1A 5D 24 2A 29 3B 5E
2D 2F 1A 1A 1A 1A 1A 1A 1A 1A 1A 2C 25 5F 3E 3F
1A 1A 1A 1A 1A 1A 1A 1A 1A 60 3A 23 40 27 3D 22
1A 61 62 63 64 65 66 67 68 69 1A 1A 1A 1A 1A 1A
1A 6A 6B 6C 6D 6E 6F 70 71 72 1A 1A 1A 1A 1A 1A
1A 7E 73 74 75 76 77 78 79 7A 1A 1A 1A 1A 1A 1A
1A 1A 1A 1A 1A 1A 1A 1A 1A 1A 1A 7C 1A 1A 1A 1A
7B 41 42 43 44 45 46 47 48 49 1A 1A 1A 1A 1A 1A
7D 4A 4B 4C 4D 4E 4F 50 51 52 1A 1A 1A 1A 1A 1A
5C 1A 53 54 55 56 57 58 59 5A 1A 1A 1A 1A 1A 1A
30 31 32 33 34 35 36 37 38 39 1A 1A 1A 1A 1A 1A

# ASCII to IBM500 translation table

00 01 02 03 37 2D 2E 2F 16 05 25 0B 0C 0D 0E 0F
10 11 12 13 3C 3D 32 26 18 19 3F 27 1C 1D 1E 1F
40 4F 7F 7B 5B 6C 50 7D 4D 5D 5C 4E 6B 60 4B 61
F0 F1 F2 F3 F4 F5 F6 F7 F8 F9 7A 5E 4C 7E 6E 6F
7C C1 C2 C3 C4 C5 C6 C7 C8 C9 D1 D2 D3 D4 D5 D6
D7 D8 D9 E2 E3 E4 E5 E6 E7 E8 E9 4A E0 5A 5F 6D
79 81 82 83 84 85 86 87 88 89 91 92 93 94 95 96
97 98 99 A2 A3 A4 A5 A6 A7 A8 A9 C0 BB D0 A1 07
3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F
3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F
3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F
3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F
3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F
3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F
3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F
3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F

], [note: 128 non-reversible conversions have been performed, you may want to check the generated table
])

AT_CHECK([$COBC --gentable=IBM500,ASCII+], [0],
[# GnuCOBOL IBM500 <-> ASCII translation tables

# IBM500 to ASCII translation table

00 01 02 03 80 09 81 7F 82 83 84 0B 0C 0D 0E 0F
10 11 12 13 85 86 08 87 18 19 88 89 1C 1D 1E 1F
8A 8B 8C 8D 8E 0A 17 1B 8F 90 91 92 93 05 06 07
94 95 16 96 97 98 99 04 9A 9B 9C 9D 14 15 9E 1A
20 9F A0 A1 A2 A3 A4 A5 A6 A7 5B 2E 3C 28 2B 21
26 A8 A9 AA AB AC AD AE AF B0 5D 24 2A 29 3B 5E
2D 2F B1 B2 B3 B4 B5 B6 B7 B8 B9 2C 25 5F 3E 3F
BA BB BC BD BE BF C0 C1 C2 60 3A 23 40 27 3D 22
C3 61 62 63 64 65 66 67 68 69 C4 C5 C6 C7 C8 C9
CA 6A 6B 6C 6D 6E 6F 70 71 72 CB CC CD CE CF D0
D1 7E 73 74 75 76 77 78 79 7A D2 D3 D4 D5 D6 D7
D8 D9 DA DB DC DD DE DF E0 E1 E2 7C E3 E4 E5 E6
7B 41 42 43 44 45 46 47 48 49 E7 E8 E9 EA EB EC
7D 4A 4B 4C 4D 4E 4F 50 51 52 ED EE EF F0 F1 F2
5C F3 53 54 55 56 57 58 59 5A F4 F5 F6 F7 F8 F9
30 31 32 33 34 35 36 37 38 39 FA FB FC FD FE FF

# ASCII to IBM500 translation table

# As this translation is symmetrical, the table is built from the previous one.

], [note: 128 non-reversible conversions have been arbitrarily made reversible, you may want to check the generated table
])

AT_CHECK([$COBC --gentable=IBM500,UTF-8], [1], [],
[error: an error occurred after converting 172 characters
])

AT_CHECK([$COBC --gentable=EBCDIC_XXX,ASCII_XXX], [1], [],
[error: conversion from EBCDIC_XXX to ASCII_XXX is not supported by your iconv implementation
])

AT_CLEANUP
