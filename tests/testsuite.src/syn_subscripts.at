## Copyright (C) 2003-2012, 2014, 2020, 2022 Free Software Foundation, Inc.
## Written by Keisuke Nishida, Roger While, Simon Sobisch, Edward Hart
## 
## This file is part of GnuCOBOL.
## 
## The GnuCOBOL compiler is free software: you can redistribute it
## and/or modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation, either version 3 of the
## License, or (at your option) any later version.
## 
## GnuCOBOL is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with GnuCOBOL.  If not, see <https://www.gnu.org/licenses/>.

### GnuCOBOL Test Suite

### ISO+IEC+1989-2002 8.4.1.2 Subscripts## 8.4.1.2.3 General rules

AT_SETUP([Non-numeric subscript])
AT_KEYWORDS([subscripts])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G1.
         02 X           PIC X OCCURS 10.
       01 I             PIC X.
       PROCEDURE        DIVISION.
           DISPLAY X(I)
           END-DISPLAY.
           DISPLAY X(I + 1)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:10: error: 'I' is not an integer value
prog.cob:12: error: 'I' is not a numeric value
])

AT_CLEANUP


AT_SETUP([Subscript range check])
AT_KEYWORDS([subscripts])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G1.
         02 X           OCCURS 2.
           03 Y         PIC X OCCURS 3.
       PROCEDURE        DIVISION.
           DISPLAY X(0)
           END-DISPLAY.
           DISPLAY X(1)
           END-DISPLAY.
           DISPLAY X(2)
           END-DISPLAY.
           DISPLAY X(3)
           END-DISPLAY.
           DISPLAY Y(1, 0)
           END-DISPLAY.
           DISPLAY Y(1, 1)
           END-DISPLAY.
           DISPLAY Y(1, 3)
           END-DISPLAY.
           DISPLAY Y(1, 4)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:10: error: subscript of 'X' out of bounds: 0
prog.cob:16: error: subscript of 'X' out of bounds: 3
prog.cob:18: error: subscript of 'Y' out of bounds: 0
prog.cob:24: error: subscript of 'Y' out of bounds: 4
])

AT_CHECK([$COMPILE_ONLY -frelax-syntax-checks prog.cob], [0], [],
[prog.cob:10: warning: subscript of 'X' out of bounds: 0
prog.cob:16: warning: subscript of 'X' out of bounds: 3
prog.cob:18: warning: subscript of 'Y' out of bounds: 0
prog.cob:24: warning: subscript of 'Y' out of bounds: 4
])

AT_CLEANUP


AT_SETUP([Subscript bounds with OCCURS DEPENDING ON])
AT_KEYWORDS([runsubscripts subscripts odo])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 4 TO 6 DEPENDING ON N.
       01 N             PIC 9 VALUE 4.
       PROCEDURE        DIVISION.
           DISPLAY X(0)
           DISPLAY X(7)
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:10: error: subscript of 'X' out of bounds: 0
prog.cob:11: error: subscript of 'X' out of bounds: 7
])

AT_CLEANUP


## 8.4.1.2.2 Syntax rules

AT_SETUP([Subscripted item requires OCCURS clause])
AT_KEYWORDS([subscripts])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X.
       PROCEDURE        DIVISION.
           DISPLAY G(1)
           END-DISPLAY.
           DISPLAY X(1)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:9: error: 'G' cannot be subscripted
prog.cob:11: error: 'X' cannot be subscripted
])

AT_CLEANUP


AT_SETUP([Number of subscripts])
AT_KEYWORDS([subscripts])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G1.
         02 X           OCCURS 2.
           03 Y         PIC X OCCURS 3.
       PROCEDURE        DIVISION.
           DISPLAY X
           END-DISPLAY.
           DISPLAY X(1)
           END-DISPLAY.
           DISPLAY X(1, 2)
           END-DISPLAY.
           DISPLAY Y(1)
           END-DISPLAY.
           DISPLAY Y(1, 2)
           END-DISPLAY.
           DISPLAY Y(1, 2, 3)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:10: error: 'X' requires one subscript
prog.cob:14: error: 'X' requires one subscript
prog.cob:16: error: 'Y' requires 2 subscripts
prog.cob:20: error: 'Y' requires 2 subscripts
])

AT_CHECK([$COMPILE_ONLY -frelax-syntax-checks prog.cob], [1], [],
[prog.cob:10: warning: subscript missing for 'X' - defaulting to 1
prog.cob:14: error: 'X' requires one subscript
prog.cob:16: warning: subscript missing for 'Y' - defaulting to 1
prog.cob:20: error: 'Y' requires 2 subscripts
])

AT_CLEANUP


AT_SETUP([SET SSRANGE syntax])
AT_KEYWORDS([subscripts directive extensions])

# Not fully merged yet
AT_SKIP_IF(true)

AT_DATA([prog.cob], [
       *> Valid
      $SET SSRANGE
      $SET SSRANGE(1)
      $SET SSRANGE "2"
      $SET SSRANGE (3)

       *> Invalid
      $SET SSRANGE(0)
      $SET SSRANGE(4)
      $SET SSRANGE "variable"

       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       PROCEDURE DIVISION.
           GOBACK
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:9: error: invalid SSRANGE directive option '0'
prog.cob:10: error: invalid SSRANGE directive option '4'
prog.cob:11: error: invalid SSRANGE directive option 'variable'
])

AT_CLEANUP

