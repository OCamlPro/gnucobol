## Copyright (C) 2003-2012, 2014-2017, 2019-2023 Free Software Foundation, Inc.
## Written by Keisuke Nishida, Roger While, Simon Sobisch, Edward Hart, Ron Norman
## 
## This file is part of GnuCOBOL.
## 
## The GnuCOBOL compiler is free software: you can redistribute it
## and/or modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation, either version 3 of the
## License, or (at your option) any later version.
## 
## GnuCOBOL is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with GnuCOBOL.  If not, see <https://www.gnu.org/licenses/>.

### GnuCOBOL Test Suite

### ISO+IEC+1989-2002 8.4.1.2 Subscripts

## 8.4.1.2.3 General rules


AT_SETUP([Subscript out of bounds])
AT_KEYWORDS([runsubscripts subscripts])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 10.
       01 I             PIC 9 VALUE 0.
       PROCEDURE        DIVISION.
           DISPLAY X(I)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [1], [],
[libcob: prog.cob:10: error: subscript of 'X' out of bounds: 0
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 10.
       01 I             PIC 99 VALUE 11.
       PROCEDURE        DIVISION.
           DISPLAY X(I)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [1], [],
[libcob: prog2.cob:10: error: subscript of 'X' out of bounds: 11
note: maximum subscript for 'X': 10
])

AT_CLEANUP


AT_SETUP([Value of DEPENDING ON N out of bounds])
AT_KEYWORDS([runsubscripts subscripts])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 4 TO 6 DEPENDING ON N.
       01 N             PIC 9.
       PROCEDURE        DIVISION.
           MOVE 5 TO N.
           MOVE '12345' TO G
           DISPLAY X(3) WITH NO ADVANCING
           END-DISPLAY.
           MOVE 3 TO N.
           DISPLAY X(5)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [1], [3],
[libcob: prog.cob:15: error: OCCURS DEPENDING ON 'N' out of bounds: 3
note: minimum subscript for 'X': 4
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 4 TO 6 DEPENDING ON N.
       01 N             PIC 9 VALUE 7.
       PROCEDURE        DIVISION.
           DISPLAY X(5)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [1], [],
[libcob: prog2.cob:10: error: OCCURS DEPENDING ON 'N' out of bounds: 7
note: maximum subscript for 'X': 6
])

AT_CLEANUP


AT_SETUP([Subscript bounds with OCCURS DEPENDING ON (1)])
AT_KEYWORDS([runsubscripts subscripts odo])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 4 TO 6 DEPENDING ON N.
       01 N             PIC 9 VALUE 4.
       PROCEDURE        DIVISION.
           DISPLAY X(5)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [1], [],
[libcob: prog.cob:10: error: subscript of 'X' out of bounds: 5
note: current maximum subscript for 'X': 4
])

AT_CLEANUP


AT_SETUP([Subscript bounds with OCCURS DEPENDING ON (2)])
AT_KEYWORDS([runsubscripts subscripts odo IF])

# verifies that the check is generated within conditions - simple IF

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 4 TO 6 DEPENDING ON N.
       01 N             PIC 9 VALUE 4.
       PROCEDURE        DIVISION.
           IF X(5) <> SPACE
              DISPLAY X(5).
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [1], [],
[libcob: prog.cob:10: error: subscript of 'X' out of bounds: 5
note: current maximum subscript for 'X': 4
])

AT_CLEANUP


AT_SETUP([Subscript bounds with OCCURS DEPENDING ON (3)])
AT_KEYWORDS([runsubscripts subscripts odo EVALUATE WHEN])

# verifies that the check is generated within conditions - WHEN
# complex test for correct place and not raised if guarded by check

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 4 TO 6 DEPENDING ON N.
       01 N             PIC 9 VALUE 4.
       PROCEDURE        DIVISION.
           EVALUATE TRUE
           WHEN N >= 5
            AND X(5) <> SPACE
              DISPLAY "1-" X(5)
           WHEN N >= 5
           WHEN X(5) <> SPACE
              DISPLAY "2-" X(5)
           END-EVALUATE
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [1], [],
[libcob: prog.cob:15: error: subscript of 'X' out of bounds: 5
note: current maximum subscript for 'X': 4
])

AT_CLEANUP


AT_SETUP([Subscript by arithmetic expression])
AT_KEYWORDS([runsubscripts subscripts])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G             VALUE "1234".
         02 X           PIC X OCCURS 4.
       01 Z             PIC X.
       PROCEDURE        DIVISION.
           MOVE X((3 + 1) / 2) TO Z.
           IF Z NOT = "2"
              DISPLAY Z
              END-DISPLAY
           END-IF.
           MOVE X(2 ** 2) TO Z.
           IF Z NOT = "4"
              DISPLAY Z
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([length of ODO w/- reference modification])
AT_KEYWORDS([runsubscripts subscripts])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  PLINE.
           03  PLINE-LEN PIC S9(4) COMP-5.
           03  PLINE-TEXT.
               04  FILLER    PIC X(1) OCCURS  1 TO 80
                                      DEPENDING ON PLINE-LEN.
       procedure division.
       a-main section.
             MOVE 5                    TO PLINE-LEN
             MOVE 'the first part in'  TO PLINE-TEXT
             MOVE 30                   TO PLINE-LEN
             IF PLINE-TEXT NOT = 'the f'
                DISPLAY 'text1 wrong: ' PLINE-TEXT
                END-DISPLAY
             END-IF
             MOVE 'the first part in'  TO PLINE-TEXT
             MOVE 4                    TO PLINE-LEN
             MOVE 'second'             TO PLINE-TEXT
             MOVE 14                   TO PLINE-LEN
             IF PLINE-TEXT NOT = 'secofirst part'
                DISPLAY 'text2 wrong: ' PLINE-TEXT
                END-DISPLAY
             END-IF
             MOVE 80                   TO PLINE-LEN
             MOVE SPACES               TO PLINE-TEXT
             MOVE 5                    TO PLINE-LEN
             MOVE 'the first part in'  TO PLINE-TEXT (2:)
             MOVE 30                   TO PLINE-LEN
             IF PLINE-TEXT NOT = ' the '
                DISPLAY 'text3 wrong: ' PLINE-TEXT
                END-DISPLAY
             END-IF
             MOVE 'the first part in'  TO PLINE-TEXT (2:)
             MOVE 4                    TO PLINE-LEN
             MOVE 'second'             TO PLINE-TEXT (2:)
             MOVE 14                   TO PLINE-LEN
             IF PLINE-TEXT NOT = ' sec first par'
                DISPLAY 'text4 wrong: ' PLINE-TEXT
                END-DISPLAY
             END-IF
             STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([SEARCH ALL with OCCURS DEPENDING ON])
AT_KEYWORDS([runsubscripts subscripts odo])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
      *
       77  SCREEN-AKT         PIC 9(02) VALUE 0.
       01  SCREEN-TAB.
           03 SCREEN-ENTRY    OCCURS 0  TO  20
                              DEPENDING ON  SCREEN-AKT
                              ASCENDING KEY SCREEN-NAME
                              INDEXED   BY  SCREEN-IDX.
             05 SCREEN-NAME     PIC X(02).

       PROCEDURE DIVISION.

           SEARCH ALL SCREEN-ENTRY
              AT END
                 DISPLAY 'END'
              WHEN SCREEN-NAME (SCREEN-IDX) = 'AB'
                 DISPLAY 'FOUND'
           END-SEARCH
           MOVE 1 TO SCREEN-AKT
           MOVE 'AB' TO  SCREEN-NAME (1)
           SEARCH ALL SCREEN-ENTRY
              AT END
                 DISPLAY 'END'
              WHEN SCREEN-NAME (SCREEN-IDX) = 'AB'
                 DISPLAY 'FOUND'
           END-SEARCH
           MOVE 2 TO SCREEN-AKT
           MOVE 'CD' TO  SCREEN-NAME (2)
           SEARCH ALL SCREEN-ENTRY
              AT END
                 DISPLAY 'END'
              WHEN SCREEN-NAME (SCREEN-IDX) = 'CD'
                 DISPLAY 'FOUND'
           END-SEARCH
           EXIT PROGRAM.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [END
FOUND
FOUND
], [])

AT_CLEANUP


AT_SETUP([enable / disable subscript check])
AT_KEYWORDS([runsubscripts subscripts debug exception-name
TURN BOUND NOBOUND])

# Not merged yet
AT_SKIP_IF(true)

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x VALUE "12345!".
           03  y PIC X OCCURS 5 TIMES.
           03  z PIC X VALUE "!".
       01  idx PIC 99 VALUE 6.
           
       PROCEDURE DIVISION.
           DISPLAY y (idx)
                   WITH NO ADVANCING
           DISPLAY FUNCTION TRIM(FUNCTION EXCEPTION-STATUS)
                   WITH NO ADVANCING
           .
])

AT_CHECK([$COMPILE prog.cob -o badprog1], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./badprog1], [1], [],
[libcob: prog.cob:13: error: subscript of 'y' out of bounds: 6
note: maximum subscript for 'y': 5
])
AT_CHECK([$COBC -x prog.cob -o exprog1], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./exprog1], [0], [!], [])

AT_CHECK([$COMPILE -fno-ec=EC-BOUND-SUBSCRIPT -o exprog2 prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./exprog2], [0], [!])
AT_CHECK([$COMPILE -fno-ec=BOUND -o exprog3 prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./exprog3], [0], [!])

AT_CHECK([$COBC -x -fec=BoUnd-subscript prog.cob -o badprog2], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./badprog2], [1], [],
[libcob: prog.cob:13: error: subscript of 'y' out of bounds: 6
note: maximum subscript for 'y': 5
])

AT_CLEANUP


AT_SETUP([BOUND and NOBOUND directives])
AT_KEYWORDS([runsubscripts subscripts extensions directive])

# Not merged yet
AT_SKIP_IF(true)
# note: the >> TURN directive is checked in run_misc.at

AT_DATA([prog.cob], [
      $SET BOUND
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x VALUE "12345!".
           03  y PIC X OCCURS 5 TIMES.
           03  z PIC X.
       01  idx PIC 99 VALUE 6.

       PROCEDURE DIVISION.
           DISPLAY y (idx) WITH NO ADVANCING
           .
])

AT_DATA([progn.cob], [
      $SET NOBOUND
       IDENTIFICATION DIVISION.
       PROGRAM-ID. progn.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x VALUE "12345!".
           03  y PIC X OCCURS 5 TIMES.
           03  z PIC X.
       01  idx PIC 99 VALUE 6.

       PROCEDURE DIVISION.
           DISPLAY y (idx) WITH NO ADVANCING
           .
])

AT_DATA([progn2.cob], [
      $SET NO-BOUND
       IDENTIFICATION DIVISION.
       PROGRAM-ID. progn2.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x VALUE "12345!".
           03  y PIC X OCCURS 5 TIMES.
           03  z PIC X.
       01  idx PIC 99 VALUE 6.

       PROCEDURE DIVISION.
           DISPLAY y (idx) WITH NO ADVANCING
           .
])

AT_CHECK([$COBC -x prog.cob], [0], [], [])
AT_CHECK([$COMPILE progn.cob], [0], [], [])
AT_CHECK([$COMPILE progn2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [1], [],
[libcob: prog.cob:14: error: subscript of 'y' out of bounds: 6
note: maximum subscript for 'y': 5
])
AT_CHECK([$COBCRUN_DIRECT ./progn], [0], [!], [])
AT_CHECK([$COBCRUN_DIRECT ./progn2], [0], [!], [])

AT_CLEANUP


AT_SETUP([SSRANGE and NOSSRANGE directives])
AT_KEYWORDS([runsubscripts subscripts extensions directive])

# Not fully merged yet
AT_SKIP_IF(true)

# WARNING: this testcase is "broken" as those SSRANGE may only be
#          defined before IDENTIFICATION DIVISION (initial $SET)

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x.
           03  y       PIC X OCCURS 5 TIMES VALUE SPACE.
           03  z       PIC X VALUE "!".
       01  idx         PIC 99 VALUE 6.

       PROCEDURE DIVISION.
      $SET NOSSRANGE
           DISPLAY y (idx)
      *> Note: MF says "sets BOUND"
      $SET SSRANGE
           DISPLAY y (idx)
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [1],
[!
], [libcob: prog.cob:17: error: subscript of 'y' out of bounds: 6
note: maximum subscript for 'y': 5
])

AT_CLEANUP
 

AT_SETUP([CALL with OCCURS DEPENDING ON])
AT_KEYWORDS([runsubscripts subscripts ODO])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog-main.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  parm.
           03  parm-size PIC S999 COMP.
           03  parm-str.
               05  parm-char PIC X OCCURS 0 TO 100 TIMES
                        DEPENDING ON parm-size.
           
       PROCEDURE DIVISION.
           MOVE 10 TO parm-size
           MOVE "Hi, there!" TO parm-str
           CALL "prog" USING parm
           .
       END PROGRAM prog-main.
       
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       LINKAGE SECTION.
       01  parm.
           03  parm-size PIC S999 COMP.
           03  parm-str.
               05  parm-char PIC X OCCURS 0 TO 100 TIMES
                        DEPENDING ON parm-size.
       
       PROCEDURE DIVISION USING parm.
           DISPLAY FUNCTION TRIM(parm-str) WITH NO ADVANCING
           .
       END PROGRAM prog.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [Hi, there!])

AT_CLEANUP

AT_SETUP([Check Subscripts])
AT_KEYWORDS([SUBSCRIPT])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  BINB   PIC 9(9) COMP-5 VALUE 42.
       01  NIDX   PIC S99.
       01  MYIDX  USAGE IS INDEX.
       01  MAXIDX PIC 9999 VALUE 3 COMP-5.
       01  TBL.
           05  FILLER PIC X(8) VALUE "Fred".
           05  FILLER PIC X(8) VALUE "Barney".
           05  FILLER PIC X(8) VALUE "Wilma".
           05  FILLER PIC X(8) VALUE "Betty".
       01  FILLER REDEFINES TBL.
           05  MYNAME PIC X(8) OCCURS 4 INDEXED BY IB1.
       01  TBL2.
           05  MYMRK  PIC X(3) 
               OCCURS 2 TO 5 DEPENDING ON MAXIDX
               INDEXED BY IB2.
       PROCEDURE DIVISION.
           MOVE 5 TO MAXIDX
           SET NIDX TO IB1.
           DISPLAY "Initial value: " NIDX.
           SET IB2 TO 0.2.
           SET IB2 TO "fred".
           SET IB2 TO 10.
           MOVE "A:" TO MYMRK (1)
           MOVE "B:" TO MYMRK (2)
           MOVE "C:" TO MYMRK (3)
           MOVE "D:" TO MYMRK (4)
           MOVE "E:" TO MYMRK (5)
           MOVE 3 TO MAXIDX.
           CALL "SUBN" USING BY VALUE BINB.
           SET IB1 TO 2.
      * MF: Passing INDEX as CALL parameter is an error
      *    CALL "SUBN" USING BY VALUE IB1.

      * MF: Passing INDEX as DISPLAY parameter is an error
      *    SET MYIDX TO IB1
      *    DISPLAY  MYIDX

           SET MYIDX TO IB1.
           CALL "SUBN" USING BY VALUE MYIDX.
           SET IB1 TO 1.
           SET MYIDX TO IB1.
           CALL "SUBN" USING BY VALUE MYIDX.
           SET IB1, IB2 TO 4.
           SET IB2 TO MAXIDX.
           SET IB1, IB2 UP BY 1.
           SET IB1 TO 3.
           SET MYIDX TO IB1.
           CALL "SUBN" USING BY VALUE MYIDX.
           MOVE -1 TO NIDX
           SET IB1 TO NIDX.
           SET IB1 TO -9.
           SET IB1 TO 300.
           MOVE 400 TO IB1.
      *    MOVE -1 TO NIDX
      *    DISPLAY NIDX ": " MYNAME (NIDX) " ... The Begin!".
           PERFORM VARYING IB1 FROM 1 BY 1 UNTIL IB1 > MAXIDX
               SET IB2   TO IB1
               SET NIDX  TO IB1
               SET MYIDX TO IB1
               DISPLAY NIDX ": " MYMRK (IB2) MYNAME (IB1) "."
               IF MYNAME (NIDX) = "Fred"
                  MOVE "Freddy" TO MYNAME (NIDX)
               END-IF
           END-PERFORM.
      *    SET NIDX  TO IB1
      *    DISPLAY NIDX ": " MYNAME (IB1) " ... The End!".

           PERFORM VARYING IB2 FROM 1 BY 1 UNTIL IB2 > 4
               SET IB1   TO IB2
      * MF: Using wrong INDEX is warning and does not work
      *        DISPLAY MYMRK (IB1) MYNAME (IB1)

               SET NIDX  TO IB1
               SET MYIDX TO IB1
               DISPLAY NIDX ": " MYMRK (IB2) MYNAME (IB1) "."
               IF MYNAME (IB1) = "Fred"
                  MOVE "Freddy" TO MYNAME (IB1)
               END-IF
           END-PERFORM.
           STOP RUN.
           END PROGRAM prog.
       
       IDENTIFICATION DIVISION.
       PROGRAM-ID. SUBN.
       DATA DIVISION.
       LINKAGE SECTION.
       01  n PIC S9(9) COMP-5.
       PROCEDURE DIVISION USING BY VALUE n.
           DISPLAY 'Number is ' n.
       END PROGRAM SUBN.
])

AT_CHECK([$COMPILE -x -std=mf -debug -Wall -debug -O prog.cob ], [0], [], [prog.cob:25: warning: SET TO should be an integer
prog.cob:26: warning: source is non-numeric - substituting zero
prog.cob:27: warning: SET IB2 TO 10 is out of bounds
prog.cob:56: warning: SET IB1 TO -9 is out of bounds
prog.cob:57: warning: SET IB1 TO 300 is out of bounds
])

AT_CHECK([$COBCRUN_DIRECT ./prog], [1], [Initial value: +01
Number is +0000000042
Number is +0000000002
Number is +0000000001
Number is +0000000003
+01: A: Fred    .
+02: B: Barney  .
+03: C: Wilma   .
+01: A: Freddy  .
+02: B: Barney  .
+03: C: Wilma   .
], [libcob: prog.cob:80: error: subscript of 'MYMRK' out of bounds: 4
note: current maximum subscript for 'MYMRK': 3
])

AT_CLEANUP

