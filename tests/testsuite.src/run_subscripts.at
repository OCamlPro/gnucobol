## Copyright (C) 2003-2012, 2014-2017, 2019-2020 Free Software Foundation, Inc.
## Written by Keisuke Nishida, Roger While, Simon Sobisch, Edward Hart
## 
## This file is part of GnuCOBOL.
## 
## The GnuCOBOL compiler is free software: you can redistribute it
## and/or modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation, either version 3 of the
## License, or (at your option) any later version.
## 
## GnuCOBOL is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with GnuCOBOL.  If not, see <https://www.gnu.org/licenses/>.

### GnuCOBOL Test Suite

### ISO+IEC+1989-2002 8.4.1.2 Subscripts

## 8.4.1.2.3 General rules


AT_SETUP([Subscript out of bounds])
AT_KEYWORDS([runsubscripts subscripts])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 10.
       01 I             PIC 9 VALUE 0.
       PROCEDURE        DIVISION.
           DISPLAY X(I)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [1], [],
[libcob: prog.cob:10: error: subscript of 'X' out of bounds: 0
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 10.
       01 I             PIC 99 VALUE 11.
       PROCEDURE        DIVISION.
           DISPLAY X(I)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [1], [],
[libcob: prog2.cob:10: error: subscript of 'X' out of bounds: 11
note: maximum subscript for 'X': 10
])

AT_CLEANUP


AT_SETUP([Value of DEPENDING ON N out of bounds])
AT_KEYWORDS([runsubscripts subscripts])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 4 TO 6 DEPENDING ON N.
       01 N             PIC 9.
       PROCEDURE        DIVISION.
           MOVE 5 TO N.
           MOVE '12345' TO G
           DISPLAY X(3) WITH NO ADVANCING
           END-DISPLAY.
           MOVE 3 TO N.
           DISPLAY X(5)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [1], [3],
[libcob: prog.cob:15: error: OCCURS DEPENDING ON 'N' out of bounds: 3
note: minimum subscript for 'X': 4
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 4 TO 6 DEPENDING ON N.
       01 N             PIC 9 VALUE 7.
       PROCEDURE        DIVISION.
           DISPLAY X(5)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [1], [],
[libcob: prog2.cob:10: error: OCCURS DEPENDING ON 'N' out of bounds: 7
note: maximum subscript for 'X': 6
])

AT_CLEANUP


AT_SETUP([Subscript bounds with OCCURS DEPENDING ON (1)])
AT_KEYWORDS([runsubscripts subscripts odo])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 4 TO 6 DEPENDING ON N.
       01 N             PIC 9 VALUE 4.
       PROCEDURE        DIVISION.
           DISPLAY X(5)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [1], [],
[libcob: prog.cob:10: error: subscript of 'X' out of bounds: 5
note: current maximum subscript for 'X': 4
])

AT_CLEANUP


AT_SETUP([Subscript bounds with OCCURS DEPENDING ON (2)])
AT_KEYWORDS([runsubscripts subscripts odo IF])

# verifies that the check is generated within conditions - simple IF

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 4 TO 6 DEPENDING ON N.
       01 N             PIC 9 VALUE 4.
       PROCEDURE        DIVISION.
           IF X(5) <> SPACE
              DISPLAY X(5).
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [1], [],
[libcob: prog.cob:10: error: subscript of 'X' out of bounds: 5
note: current maximum subscript for 'X': 4
])

AT_CLEANUP


AT_SETUP([Subscript bounds with OCCURS DEPENDING ON (3)])
AT_KEYWORDS([runsubscripts subscripts odo EVALUATE WHEN])

# verifies that the check is generated within conditions - WHEN
# complex test for correct place and not raised if guarded by check

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 4 TO 6 DEPENDING ON N.
       01 N             PIC 9 VALUE 4.
       PROCEDURE        DIVISION.
           EVALUATE TRUE
           WHEN N >= 5
            AND X(5) <> SPACE
              DISPLAY "1-" X(5)
           WHEN N >= 5
           WHEN X(5) <> SPACE
              DISPLAY "2-" X(5)
           END-EVALUATE
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [1], [],
[libcob: prog.cob:15: error: subscript of 'X' out of bounds: 5
note: current maximum subscript for 'X': 4
])

AT_CLEANUP


AT_SETUP([Subscript by arithmetic expression])
AT_KEYWORDS([runsubscripts subscripts])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G             VALUE "1234".
         02 X           PIC X OCCURS 4.
       01 Z             PIC X.
       PROCEDURE        DIVISION.
           MOVE X((3 + 1) / 2) TO Z.
           IF Z NOT = "2"
              DISPLAY Z
              END-DISPLAY
           END-IF.
           MOVE X(2 ** 2) TO Z.
           IF Z NOT = "4"
              DISPLAY Z
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([length of ODO w/- reference-modification])
AT_KEYWORDS([runsubscripts subscripts])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  PLINE.
           03  PLINE-LEN PIC S9(4) COMP-5.
           03  PLINE-TEXT.
               04  FILLER    PIC X(1) OCCURS  1 TO 80
                                      DEPENDING ON PLINE-LEN.
       procedure division.
       a-main section.
             MOVE 5                    TO PLINE-LEN
             MOVE 'the first part in'  TO PLINE-TEXT
             MOVE 30                   TO PLINE-LEN
             IF PLINE-TEXT NOT = 'the f'
                DISPLAY 'text1 wrong: ' PLINE-TEXT
                END-DISPLAY
             END-IF
             MOVE 'the first part in'  TO PLINE-TEXT
             MOVE 4                    TO PLINE-LEN
             MOVE 'second'             TO PLINE-TEXT
             MOVE 14                   TO PLINE-LEN
             IF PLINE-TEXT NOT = 'secofirst part'
                DISPLAY 'text2 wrong: ' PLINE-TEXT
                END-DISPLAY
             END-IF
             MOVE 80                   TO PLINE-LEN
             MOVE SPACES               TO PLINE-TEXT
             MOVE 5                    TO PLINE-LEN
             MOVE 'the first part in'  TO PLINE-TEXT (2:)
             MOVE 30                   TO PLINE-LEN
             IF PLINE-TEXT NOT = ' the '
                DISPLAY 'text3 wrong: ' PLINE-TEXT
                END-DISPLAY
             END-IF
             MOVE 'the first part in'  TO PLINE-TEXT (2:)
             MOVE 4                    TO PLINE-LEN
             MOVE 'second'             TO PLINE-TEXT (2:)
             MOVE 14                   TO PLINE-LEN
             IF PLINE-TEXT NOT = ' sec first par'
                DISPLAY 'text4 wrong: ' PLINE-TEXT
                END-DISPLAY
             END-IF
             STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([SEARCH ALL with OCCURS DEPENDING ON])
AT_KEYWORDS([runsubscripts subscripts odo])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
      *
       77  SCREEN-AKT         PIC 9(02) VALUE 0.
       01  SCREEN-TAB.
           03 SCREEN-ENTRY    OCCURS 0  TO  20
                              DEPENDING ON  SCREEN-AKT
                              ASCENDING KEY SCREEN-NAME
                              INDEXED   BY  SCREEN-IDX.
             05 SCREEN-NAME     PIC X(02).

       PROCEDURE DIVISION.

           SEARCH ALL SCREEN-ENTRY
              AT END
                 DISPLAY 'END'
              WHEN SCREEN-NAME (SCREEN-IDX) = 'AB'
                 DISPLAY 'FOUND'
           END-SEARCH
           MOVE 1 TO SCREEN-AKT
           MOVE 'AB' TO  SCREEN-NAME (1)
           SEARCH ALL SCREEN-ENTRY
              AT END
                 DISPLAY 'END'
              WHEN SCREEN-NAME (SCREEN-IDX) = 'AB'
                 DISPLAY 'FOUND'
           END-SEARCH
           MOVE 2 TO SCREEN-AKT
           MOVE 'CD' TO  SCREEN-NAME (2)
           SEARCH ALL SCREEN-ENTRY
              AT END
                 DISPLAY 'END'
              WHEN SCREEN-NAME (SCREEN-IDX) = 'CD'
                 DISPLAY 'FOUND'
           END-SEARCH
           EXIT PROGRAM.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [END
FOUND
FOUND
], [])

AT_CLEANUP


AT_SETUP([enable / disable subscript check])
AT_KEYWORDS([runsubscripts subscripts debug exception-name
TURN BOUND NOBOUND])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x VALUE "12345!".
           03  y PIC X OCCURS 5 TIMES.
           03  z PIC X VALUE "!".
       01  idx PIC 99 VALUE 6.
           
       PROCEDURE DIVISION.
           DISPLAY y (idx)
                   WITH NO ADVANCING
           DISPLAY FUNCTION TRIM(FUNCTION EXCEPTION-STATUS)
                   WITH NO ADVANCING
           .
])

AT_CHECK([$COMPILE prog.cob -o badprog1], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./badprog1], [1], [],
[libcob: prog.cob:13: error: subscript of 'y' out of bounds: 6
note: maximum subscript for 'y': 5
])
AT_CHECK([$COBC -x prog.cob -o exprog1], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./exprog1], [0], [!], [])

AT_CHECK([$COMPILE -fno-ec=EC-BOUND-SUBSCRIPT -o exprog2 prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./exprog2], [0], [!])
AT_CHECK([$COMPILE -fno-ec=BOUND -o exprog3 prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./exprog3], [0], [!])

AT_CHECK([$COBC -x -fec=BoUnd-subscript prog.cob -o badprog2], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./badprog2], [1], [],
[libcob: prog.cob:13: error: subscript of 'y' out of bounds: 6
note: maximum subscript for 'y': 5
])

AT_CLEANUP


AT_SETUP([enable / disable subscript check with ODO])
AT_KEYWORDS([runsubscripts subscripts odo debug])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 TAB.
         02 X           PIC X OCCURS 4 TO 6 DEPENDING ON N
	                      VALUE "A".
       01 N             PIC 9 VALUE 5.
       PROCEDURE        DIVISION.
           MOVE "B" TO X (6)
	   IF X (6) NOT EQUAL TO "B" THEN
	      DISPLAY "Got X (6) = " X (6) ", expected B"
	   END-DISPLAY
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob -o badprog1], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./badprog1], [1], [],
[libcob: prog.cob:11: error: subscript of 'X' out of bounds: 6
note: current maximum subscript for 'X': 5
])

AT_CHECK([$COMPILE prog.cob -fsubscript-check=full -o failprog1-check-full], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./failprog1-check-full], [1], [],
[libcob: prog.cob:11: error: subscript of 'X' out of bounds: 6
note: current maximum subscript for 'X': 5
])

AT_CHECK([$COMPILE prog.cob -fsubscript-check=max -o okprog1-check-max], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./okprog1-check-max], [0], [], [])

AT_CHECK([$COMPILE prog.cob -fno-ec=bound -fsubscript-check=full -o okprog1-no-ec], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./okprog1-no-ec], [0], [], [])

AT_CLEANUP


AT_SETUP([BOUND and NOBOUND directives])
AT_KEYWORDS([runsubscripts subscripts extensions directive])

# note: the >> TURN directive is checked in run_misc.at

AT_DATA([prog.cob], [
      $SET BOUND
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x VALUE "12345!".
           03  y PIC X OCCURS 5 TIMES.
           03  z PIC X.
       01  idx PIC 99 VALUE 6.

       PROCEDURE DIVISION.
           DISPLAY y (idx) WITH NO ADVANCING
           .
])

AT_DATA([progn.cob], [
      $SET NOBOUND
       IDENTIFICATION DIVISION.
       PROGRAM-ID. progn.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x VALUE "12345!".
           03  y PIC X OCCURS 5 TIMES.
           03  z PIC X.
       01  idx PIC 99 VALUE 6.

       PROCEDURE DIVISION.
           DISPLAY y (idx) WITH NO ADVANCING
           .
])

AT_DATA([progn2.cob], [
      $SET NO-BOUND
       IDENTIFICATION DIVISION.
       PROGRAM-ID. progn2.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x VALUE "12345!".
           03  y PIC X OCCURS 5 TIMES.
           03  z PIC X.
       01  idx PIC 99 VALUE 6.

       PROCEDURE DIVISION.
           DISPLAY y (idx) WITH NO ADVANCING
           .
])

AT_CHECK([$COBC -x prog.cob], [0], [], [])
AT_CHECK([$COMPILE progn.cob], [0], [], [])
AT_CHECK([$COMPILE progn2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [1], [],
[libcob: prog.cob:14: error: subscript of 'y' out of bounds: 6
note: maximum subscript for 'y': 5
])
AT_CHECK([$COBCRUN_DIRECT ./progn], [0], [!], [])
AT_CHECK([$COBCRUN_DIRECT ./progn2], [0], [!], [])

AT_CLEANUP


AT_SETUP([SSRANGE and NOSSRANGE directives])
AT_KEYWORDS([runsubscripts subscripts extensions directive])

# WARNING: this testcase is "broken" as those SSRANGE may only be
#          defined before IDENTIFICATION DIVISION (initial $SET)

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x.
           03  y       PIC X OCCURS 5 TIMES VALUE SPACE.
           03  z       PIC X VALUE "!".
       01  idx         PIC 99 VALUE 6.
           
       PROCEDURE DIVISION.
      $SET NOSSRANGE
           DISPLAY y (idx)
      *> Note: MF says "sets BOUND"
      $SET SSRANGE
           DISPLAY y (idx)
           .
])

AT_CHECK([$COMPILE -DTEST-SUBSCRIPT prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [1],
[!
], [libcob: prog.cob:17: error: subscript of 'y' out of bounds: 6
note: maximum subscript for 'y': 5
])

AT_CLEANUP
 

AT_SETUP([CALL with OCCURS DEPENDING ON])
AT_KEYWORDS([runsubscripts subscripts ODO])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog-main.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  parm.
           03  parm-size PIC S999 COMP.
           03  parm-str.
               05  parm-char PIC X OCCURS 0 TO 100 TIMES
                        DEPENDING ON parm-size.
           
       PROCEDURE DIVISION.
           MOVE 10 TO parm-size
           MOVE "Hi, there!" TO parm-str
           CALL "prog" USING parm
           .
       END PROGRAM prog-main.
       
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       LINKAGE SECTION.
       01  parm.
           03  parm-size PIC S999 COMP.
           03  parm-str.
               05  parm-char PIC X OCCURS 0 TO 100 TIMES
                        DEPENDING ON parm-size.
       
       PROCEDURE DIVISION USING parm.
           DISPLAY FUNCTION TRIM(parm-str) WITH NO ADVANCING
           .
       END PROGRAM prog.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [Hi, there!])

AT_CLEANUP
