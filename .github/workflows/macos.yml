name: MacOS Workflow 4

on:
  #pull_request:
  #  branches: [ gc4 ]
  # push:
  # manual run in actions tab - for all branches
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          # - macos-latest-large  # macos 14, amd64
          - macos-latest        # macos 14, arm64
        isam:
          - db
          - visam

    runs-on: ${{ matrix.os }}

    steps:

      - name: Configure git
        run: git config --global core.symlinks false

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install packages
        run: |
          brew install pkg-config automake libtool help2man texinfo bison berkeley-db@4 json-c
          opt="/opt/homebrew/opt"
          echo "$opt/pkg-config/bin" >> $GITHUB_PATH
          echo "$opt/bison/bin" >> $GITHUB_PATH
          echo "LDFLAGS=-L$opt/berkeley-db@4/lib ${LDFLAGS}" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$opt/berkeley-db@4/include ${CPPFLAGS}" >> $GITHUB_ENV

      - name: Installing VISAM prerequisite
        if: ${{ matrix.isam == 'visam' }}
        run: |
          wget http://inglenet.ca/Products/GnuCOBOL/visam-2.2.tar.Z
          tar -xvzf visam-2.2.tar.Z
          cd visam-2.2
          ./configure --prefix=/usr/local/visam-2.2 --enable-vbisamdefault
          chmod u+x build_aux/install-sh
          make
          sudo make install
          echo "CPATH=/usr/local/visam-2.2/include" >> $GITHUB_ENV
          echo "LIBRARY_PATH=/usr/local/visam-2.2/lib" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/local/visam-2.2/lib" >> $GITHUB_ENV

      - name: bootstrap
        run: |
          ./build_aux/bootstrap install

      - name: Build environment setup
        run: |
          echo "NPROC=`sysctl -n hw.ncpu`" >> $GITHUB_ENV
          export TERM="vt100"
          echo "TERM=$TERM" >> $GITHUB_ENV

      - name: configure
        run: |
          mkdir _build
          cd _build
          ../configure --with-${{ matrix.isam }} \
                       --with-indexed=${{ matrix.isam }} \
                       --enable-cobc-internal-checks \
                       --enable-hardening \
                       --prefix /opt/cobol/gnucobol4 \
                       CFLAGS="-Wno-deprecated-non-prototype -Wno-parentheses-equality $CFLAGS" \
                       CPPFLAGS="-DREAD_WRITE_NEEDS_FLUSH $CPPFLAGS"

      - name: make
        run: |
          make -C _build --jobs=$((${NPROC}+1))

      - name: Upload config.log
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: config.log ${{ matrix.os }}-${{ matrix.isam }}
          path: _build/config.log

      # make install must be done before make check, otherwise
      # execution of generated COBOL files fail for a missing
      # /usr/local/lib/libcob.dylib
      - name: make install
        run: |
          sudo make -C _build install
          # find /opt/cobol > _build/install.log

      #- name: Upload install.log
      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: install.log ${{ matrix.os }}-${{ matrix.isam }}
      #    path: _build/install.log

      - name: adjust test expectations for non V-ISAM
        if: ${{ matrix.isam != 'visam' }}
        run: |
          sed -i '' '/run_file/{N;/INDEXED file SUPPRESS WHEN ALL/{N;s/at_xfail=no/at_xfail=yes/;};}' tests/testsuite
          sed -i '' '/run_file/{N;/EXTFH: using ISAM callback/{N;s/at_xfail=no/at_xfail=yes/;};}' tests/testsuite
          # marks all of those as expected failures
          #sed -i '' '/run_file/{N;/trace feature/{N;N;N;N;s/traceon/traceon; echo "workflow:3">"$at_check_line_file"; at_fn_check_skip 77/;};}' tests/testsuite
          #sed -i '' '/run_file/{N;/trace feature with subroutine/{N;N;N;N;s/traceon/traceon; echo "workflow:4">"$at_check_line_file"; at_fn_check_skip 77/;};}' tests/testsuite
          #sed -i '' '/run_file/{N;/trace feature with indexed EXTFH/{N;N;N;N;s/traceon/traceon; echo "workflow:5">"$at_check_line_file"; at_fn_check_skip 77/;};}' tests/testsuite
          sed -i '' '/run_file/{N;/trace feature/{N;s/at_xfail=no/at_xfail=yes/;};}' tests/testsuite

          make -C _build check TESTSUITEFLAGS="--jobs=$((${NPROC}+1))" || \
            make -C _build check TESTSUITEFLAGS="--recheck --verbose"

      - name: check
        run: |
          make -C _build check TESTSUITEFLAGS="--jobs=$((${NPROC}+1))" || \
            make -C _build check TESTSUITEFLAGS="--recheck --verbose"

      - name: Upload internal Test Suite results
        uses: actions/upload-artifact@v4
        if: ${{ ! cancelled() }}  #-> always upload as build result documentation
        with:
          name: testsuite.log ${{ matrix.os }}-${{ matrix.isam }}
          path: _build/tests/testsuite.log

      - name: Cache newcob.val
        uses: actions/cache@v4
        with:
          path: _build/tests/cobol85/newcob.val
          key: newcob-val
          save-always: true
          enableCrossOsArchive: true

      - name: Run NIST85 testsuite
        run: |
          make -C _build/tests test --jobs=$((${NPROC}+1))

      - name: Upload NIST85 Test Suite results
        if: ${{ ! cancelled() }}  #-> always upload as build result documentation
        uses: actions/upload-artifact@v4
        with:
          name: NIST85 results on ${{ matrix.os }}-${{ matrix.isam }}
          path: |
            _build/tests/cobol85/summary.*
            _build/tests/cobol85/**/*.log
            _build/tests/cobol85/**/*.out
            _build/tests/cobol85/**/duration.txt
